<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1157"><g><title>&lt;tokio::task::coop::with_budget::ResetGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="0.0000%" y="405" width="0.0864%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.09%)</title><rect x="0.7779%" y="213" width="0.0864%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="1"/><text x="1.0279%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.78%)</title><rect x="0.7779%" y="229" width="0.7779%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="9"/><text x="1.0279%" y="239.50"></text></g><g><title>syscall (8 samples, 0.69%)</title><rect x="0.8643%" y="213" width="0.6914%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="8"/><text x="1.1143%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (13 samples, 1.12%)</title><rect x="0.7779%" y="389" width="1.1236%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="13"/><text x="1.0279%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (13 samples, 1.12%)</title><rect x="0.7779%" y="373" width="1.1236%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="13"/><text x="1.0279%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (13 samples, 1.12%)</title><rect x="0.7779%" y="357" width="1.1236%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="13"/><text x="1.0279%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (13 samples, 1.12%)</title><rect x="0.7779%" y="341" width="1.1236%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="13"/><text x="1.0279%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (13 samples, 1.12%)</title><rect x="0.7779%" y="325" width="1.1236%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="13"/><text x="1.0279%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 1.12%)</title><rect x="0.7779%" y="309" width="1.1236%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="13"/><text x="1.0279%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (13 samples, 1.12%)</title><rect x="0.7779%" y="293" width="1.1236%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="13"/><text x="1.0279%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (13 samples, 1.12%)</title><rect x="0.7779%" y="277" width="1.1236%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="13"/><text x="1.0279%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (13 samples, 1.12%)</title><rect x="0.7779%" y="261" width="1.1236%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="13"/><text x="1.0279%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (13 samples, 1.12%)</title><rect x="0.7779%" y="245" width="1.1236%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="13"/><text x="1.0279%" y="255.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.35%)</title><rect x="1.5557%" y="229" width="0.3457%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="4"/><text x="1.8057%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.35%)</title><rect x="1.5557%" y="213" width="0.3457%" height="15" fill="rgb(231,73,38)" fg:x="18" fg:w="4"/><text x="1.8057%" y="223.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (4 samples, 0.35%)</title><rect x="1.5557%" y="197" width="0.3457%" height="15" fill="rgb(225,20,46)" fg:x="18" fg:w="4"/><text x="1.8057%" y="207.50"></text></g><g><title>write (4 samples, 0.35%)</title><rect x="1.5557%" y="181" width="0.3457%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="4"/><text x="1.8057%" y="191.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.09%)</title><rect x="1.9015%" y="389" width="0.0864%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="1"/><text x="2.1515%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="3.0251%" y="325" width="0.0864%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="1"/><text x="3.2751%" y="335.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (18 samples, 1.56%)</title><rect x="3.1115%" y="325" width="1.5557%" height="15" fill="rgb(249,33,26)" fg:x="36" fg:w="18"/><text x="3.3615%" y="335.50"></text></g><g><title>malloc (14 samples, 1.21%)</title><rect x="3.4572%" y="309" width="1.2100%" height="15" fill="rgb(235,183,28)" fg:x="40" fg:w="14"/><text x="3.7072%" y="319.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (3 samples, 0.26%)</title><rect x="4.6672%" y="293" width="0.2593%" height="15" fill="rgb(221,5,38)" fg:x="54" fg:w="3"/><text x="4.9172%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (3 samples, 0.26%)</title><rect x="4.6672%" y="277" width="0.2593%" height="15" fill="rgb(247,18,42)" fg:x="54" fg:w="3"/><text x="4.9172%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (3 samples, 0.26%)</title><rect x="4.6672%" y="261" width="0.2593%" height="15" fill="rgb(241,131,45)" fg:x="54" fg:w="3"/><text x="4.9172%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (2 samples, 0.17%)</title><rect x="4.7537%" y="245" width="0.1729%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="2"/><text x="5.0037%" y="255.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (5 samples, 0.43%)</title><rect x="4.6672%" y="309" width="0.4322%" height="15" fill="rgb(225,111,53)" fg:x="54" fg:w="5"/><text x="4.9172%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (2 samples, 0.17%)</title><rect x="4.9265%" y="293" width="0.1729%" height="15" fill="rgb(238,160,17)" fg:x="57" fg:w="2"/><text x="5.1765%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (2 samples, 0.17%)</title><rect x="4.9265%" y="277" width="0.1729%" height="15" fill="rgb(214,148,48)" fg:x="57" fg:w="2"/><text x="5.1765%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (2 samples, 0.17%)</title><rect x="4.9265%" y="261" width="0.1729%" height="15" fill="rgb(232,36,49)" fg:x="57" fg:w="2"/><text x="5.1765%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.17%)</title><rect x="4.9265%" y="245" width="0.1729%" height="15" fill="rgb(209,103,24)" fg:x="57" fg:w="2"/><text x="5.1765%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.17%)</title><rect x="4.9265%" y="229" width="0.1729%" height="15" fill="rgb(229,88,8)" fg:x="57" fg:w="2"/><text x="5.1765%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="4.9265%" y="213" width="0.1729%" height="15" fill="rgb(213,181,19)" fg:x="57" fg:w="2"/><text x="5.1765%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.17%)</title><rect x="4.9265%" y="197" width="0.1729%" height="15" fill="rgb(254,191,54)" fg:x="57" fg:w="2"/><text x="5.1765%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.17%)</title><rect x="4.9265%" y="181" width="0.1729%" height="15" fill="rgb(241,83,37)" fg:x="57" fg:w="2"/><text x="5.1765%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="5.0130%" y="165" width="0.0864%" height="15" fill="rgb(233,36,39)" fg:x="58" fg:w="1"/><text x="5.2630%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.0994%" y="165" width="0.0864%" height="15" fill="rgb(226,3,54)" fg:x="59" fg:w="1"/><text x="5.3494%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.0994%" y="149" width="0.0864%" height="15" fill="rgb(245,192,40)" fg:x="59" fg:w="1"/><text x="5.3494%" y="159.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="5.1858%" y="165" width="0.0864%" height="15" fill="rgb(238,167,29)" fg:x="60" fg:w="1"/><text x="5.4358%" y="175.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="5.1858%" y="149" width="0.0864%" height="15" fill="rgb(232,182,51)" fg:x="60" fg:w="1"/><text x="5.4358%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.26%)</title><rect x="5.0994%" y="197" width="0.2593%" height="15" fill="rgb(231,60,39)" fg:x="59" fg:w="3"/><text x="5.3494%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="5.0994%" y="181" width="0.2593%" height="15" fill="rgb(208,69,12)" fg:x="59" fg:w="3"/><text x="5.3494%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="5.2723%" y="165" width="0.0864%" height="15" fill="rgb(235,93,37)" fg:x="61" fg:w="1"/><text x="5.5223%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.2723%" y="149" width="0.0864%" height="15" fill="rgb(213,116,39)" fg:x="61" fg:w="1"/><text x="5.5223%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.2723%" y="133" width="0.0864%" height="15" fill="rgb(222,207,29)" fg:x="61" fg:w="1"/><text x="5.5223%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (7 samples, 0.61%)</title><rect x="5.4451%" y="165" width="0.6050%" height="15" fill="rgb(206,96,30)" fg:x="63" fg:w="7"/><text x="5.6951%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (6 samples, 0.52%)</title><rect x="5.5315%" y="149" width="0.5186%" height="15" fill="rgb(218,138,4)" fg:x="64" fg:w="6"/><text x="5.7815%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="6.0501%" y="149" width="0.0864%" height="15" fill="rgb(250,191,14)" fg:x="70" fg:w="1"/><text x="6.3001%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="6.0501%" y="133" width="0.0864%" height="15" fill="rgb(239,60,40)" fg:x="70" fg:w="1"/><text x="6.3001%" y="143.50"></text></g><g><title>brotli::enc::encode::DecideOverLiteralContextModeling (1 samples, 0.09%)</title><rect x="6.1366%" y="149" width="0.0864%" height="15" fill="rgb(206,27,48)" fg:x="71" fg:w="1"/><text x="6.3866%" y="159.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (14 samples, 1.21%)</title><rect x="5.0994%" y="213" width="1.2100%" height="15" fill="rgb(225,35,8)" fg:x="59" fg:w="14"/><text x="5.3494%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (11 samples, 0.95%)</title><rect x="5.3587%" y="197" width="0.9507%" height="15" fill="rgb(250,213,24)" fg:x="62" fg:w="11"/><text x="5.6087%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (11 samples, 0.95%)</title><rect x="5.3587%" y="181" width="0.9507%" height="15" fill="rgb(247,123,22)" fg:x="62" fg:w="11"/><text x="5.6087%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.26%)</title><rect x="6.0501%" y="165" width="0.2593%" height="15" fill="rgb(231,138,38)" fg:x="70" fg:w="3"/><text x="6.3001%" y="175.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="6.2230%" y="149" width="0.0864%" height="15" fill="rgb(231,145,46)" fg:x="72" fg:w="1"/><text x="6.4730%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (15 samples, 1.30%)</title><rect x="5.0994%" y="293" width="1.2965%" height="15" fill="rgb(251,118,11)" fg:x="59" fg:w="15"/><text x="5.3494%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.30%)</title><rect x="5.0994%" y="277" width="1.2965%" height="15" fill="rgb(217,147,25)" fg:x="59" fg:w="15"/><text x="5.3494%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (15 samples, 1.30%)</title><rect x="5.0994%" y="261" width="1.2965%" height="15" fill="rgb(247,81,37)" fg:x="59" fg:w="15"/><text x="5.3494%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15 samples, 1.30%)</title><rect x="5.0994%" y="245" width="1.2965%" height="15" fill="rgb(209,12,38)" fg:x="59" fg:w="15"/><text x="5.3494%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (15 samples, 1.30%)</title><rect x="5.0994%" y="229" width="1.2965%" height="15" fill="rgb(227,1,9)" fg:x="59" fg:w="15"/><text x="5.3494%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (1 samples, 0.09%)</title><rect x="6.3094%" y="213" width="0.0864%" height="15" fill="rgb(248,47,43)" fg:x="73" fg:w="1"/><text x="6.5594%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="6.3094%" y="197" width="0.0864%" height="15" fill="rgb(221,10,30)" fg:x="73" fg:w="1"/><text x="6.5594%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="6.3094%" y="181" width="0.0864%" height="15" fill="rgb(210,229,1)" fg:x="73" fg:w="1"/><text x="6.5594%" y="191.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="6.3094%" y="165" width="0.0864%" height="15" fill="rgb(222,148,37)" fg:x="73" fg:w="1"/><text x="6.5594%" y="175.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="6.3094%" y="149" width="0.0864%" height="15" fill="rgb(234,67,33)" fg:x="73" fg:w="1"/><text x="6.5594%" y="159.50"></text></g><g><title>&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="6.3094%" y="133" width="0.0864%" height="15" fill="rgb(247,98,35)" fg:x="73" fg:w="1"/><text x="6.5594%" y="143.50"></text></g><g><title>&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_field_begin (1 samples, 0.09%)</title><rect x="6.3094%" y="117" width="0.0864%" height="15" fill="rgb(247,138,52)" fg:x="73" fg:w="1"/><text x="6.5594%" y="127.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkData as parquet::file::reader::ChunkReader&gt;::get_read (1 samples, 0.09%)</title><rect x="6.3959%" y="277" width="0.0864%" height="15" fill="rgb(213,79,30)" fg:x="74" fg:w="1"/><text x="6.6459%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.09%)</title><rect x="6.3959%" y="261" width="0.0864%" height="15" fill="rgb(246,177,23)" fg:x="74" fg:w="1"/><text x="6.6459%" y="271.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.09%)</title><rect x="6.3959%" y="245" width="0.0864%" height="15" fill="rgb(230,62,27)" fg:x="74" fg:w="1"/><text x="6.6459%" y="255.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.09%)</title><rect x="6.4823%" y="261" width="0.0864%" height="15" fill="rgb(216,154,8)" fg:x="75" fg:w="1"/><text x="6.7323%" y="271.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="6.4823%" y="245" width="0.0864%" height="15" fill="rgb(244,35,45)" fg:x="75" fg:w="1"/><text x="6.7323%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="6.5687%" y="245" width="0.0864%" height="15" fill="rgb(251,115,12)" fg:x="76" fg:w="1"/><text x="6.8187%" y="255.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="6.5687%" y="229" width="0.0864%" height="15" fill="rgb(240,54,50)" fg:x="76" fg:w="1"/><text x="6.8187%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (19 samples, 1.64%)</title><rect x="5.0994%" y="309" width="1.6422%" height="15" fill="rgb(233,84,52)" fg:x="59" fg:w="19"/><text x="5.3494%" y="319.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (4 samples, 0.35%)</title><rect x="6.3959%" y="293" width="0.3457%" height="15" fill="rgb(207,117,47)" fg:x="74" fg:w="4"/><text x="6.6459%" y="303.50"></text></g><g><title>std::io::copy::stack_buffer_copy (3 samples, 0.26%)</title><rect x="6.4823%" y="277" width="0.2593%" height="15" fill="rgb(249,43,39)" fg:x="75" fg:w="3"/><text x="6.7323%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.17%)</title><rect x="6.5687%" y="261" width="0.1729%" height="15" fill="rgb(209,38,44)" fg:x="76" fg:w="2"/><text x="6.8187%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.09%)</title><rect x="6.6551%" y="245" width="0.0864%" height="15" fill="rgb(236,212,23)" fg:x="77" fg:w="1"/><text x="6.9051%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="6.6551%" y="229" width="0.0864%" height="15" fill="rgb(242,79,21)" fg:x="77" fg:w="1"/><text x="6.9051%" y="239.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="6.6551%" y="213" width="0.0864%" height="15" fill="rgb(211,96,35)" fg:x="77" fg:w="1"/><text x="6.9051%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (25 samples, 2.16%)</title><rect x="4.6672%" y="325" width="2.1608%" height="15" fill="rgb(253,215,40)" fg:x="54" fg:w="25"/><text x="4.9172%" y="335.50">n..</text></g><g><title>std::sys::fs::unix::rename (1 samples, 0.09%)</title><rect x="6.7416%" y="309" width="0.0864%" height="15" fill="rgb(211,81,21)" fg:x="78" fg:w="1"/><text x="6.9916%" y="319.50"></text></g><g><title>rename (1 samples, 0.09%)</title><rect x="6.7416%" y="293" width="0.0864%" height="15" fill="rgb(208,190,38)" fg:x="78" fg:w="1"/><text x="6.9916%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7 samples, 0.61%)</title><rect x="7.4330%" y="309" width="0.6050%" height="15" fill="rgb(235,213,38)" fg:x="86" fg:w="7"/><text x="7.6830%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.61%)</title><rect x="7.4330%" y="293" width="0.6050%" height="15" fill="rgb(237,122,38)" fg:x="86" fg:w="7"/><text x="7.6830%" y="303.50"></text></g><g><title>__libc_realloc (7 samples, 0.61%)</title><rect x="7.4330%" y="277" width="0.6050%" height="15" fill="rgb(244,218,35)" fg:x="86" fg:w="7"/><text x="7.6830%" y="287.50"></text></g><g><title>alloc::str::join_generic_copy (1 samples, 0.09%)</title><rect x="8.0380%" y="309" width="0.0864%" height="15" fill="rgb(240,68,47)" fg:x="93" fg:w="1"/><text x="8.2880%" y="319.50"></text></g><g><title>__libc_realloc (6 samples, 0.52%)</title><rect x="8.5566%" y="229" width="0.5186%" height="15" fill="rgb(210,16,53)" fg:x="99" fg:w="6"/><text x="8.8066%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (7 samples, 0.61%)</title><rect x="8.5566%" y="261" width="0.6050%" height="15" fill="rgb(235,124,12)" fg:x="99" fg:w="7"/><text x="8.8066%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.61%)</title><rect x="8.5566%" y="245" width="0.6050%" height="15" fill="rgb(224,169,11)" fg:x="99" fg:w="7"/><text x="8.8066%" y="255.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="9.0752%" y="229" width="0.0864%" height="15" fill="rgb(250,166,2)" fg:x="105" fg:w="1"/><text x="9.3252%" y="239.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (77 samples, 6.66%)</title><rect x="8.1245%" y="293" width="6.6551%" height="15" fill="rgb(242,216,29)" fg:x="94" fg:w="77"/><text x="8.3745%" y="303.50">arrow_csv..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (77 samples, 6.66%)</title><rect x="8.1245%" y="277" width="6.6551%" height="15" fill="rgb(230,116,27)" fg:x="94" fg:w="77"/><text x="8.3745%" y="287.50">arrow_csv..</text></g><g><title>csv_core::reader::Reader::read_record (65 samples, 5.62%)</title><rect x="9.1616%" y="261" width="5.6180%" height="15" fill="rgb(228,99,48)" fg:x="106" fg:w="65"/><text x="9.4116%" y="271.50">csv_cor..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.09%)</title><rect x="14.7796%" y="277" width="0.0864%" height="15" fill="rgb(253,11,6)" fg:x="171" fg:w="1"/><text x="15.0296%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="14.7796%" y="261" width="0.0864%" height="15" fill="rgb(247,143,39)" fg:x="171" fg:w="1"/><text x="15.0296%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (51 samples, 4.41%)</title><rect x="16.3354%" y="213" width="4.4080%" height="15" fill="rgb(236,97,10)" fg:x="189" fg:w="51"/><text x="16.5854%" y="223.50">arrow..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (5 samples, 0.43%)</title><rect x="20.3111%" y="197" width="0.4322%" height="15" fill="rgb(233,208,19)" fg:x="235" fg:w="5"/><text x="20.5611%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.43%)</title><rect x="20.3111%" y="181" width="0.4322%" height="15" fill="rgb(216,164,2)" fg:x="235" fg:w="5"/><text x="20.5611%" y="191.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="20.6569%" y="165" width="0.0864%" height="15" fill="rgb(220,129,5)" fg:x="239" fg:w="1"/><text x="20.9069%" y="175.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (69 samples, 5.96%)</title><rect x="14.8660%" y="229" width="5.9637%" height="15" fill="rgb(242,17,10)" fg:x="172" fg:w="69"/><text x="15.1160%" y="239.50">&lt;arrow_a..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::with_capacity (1 samples, 0.09%)</title><rect x="20.7433%" y="213" width="0.0864%" height="15" fill="rgb(242,107,0)" fg:x="240" fg:w="1"/><text x="20.9933%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="20.7433%" y="197" width="0.0864%" height="15" fill="rgb(251,28,31)" fg:x="240" fg:w="1"/><text x="20.9933%" y="207.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="20.7433%" y="181" width="0.0864%" height="15" fill="rgb(233,223,10)" fg:x="240" fg:w="1"/><text x="20.9933%" y="191.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (148 samples, 12.79%)</title><rect x="8.1245%" y="309" width="12.7917%" height="15" fill="rgb(215,21,27)" fg:x="94" fg:w="148"/><text x="8.3745%" y="319.50">arrow_csv::reader::..</text></g><g><title>arrow_csv::reader::Decoder::flush (71 samples, 6.14%)</title><rect x="14.7796%" y="293" width="6.1366%" height="15" fill="rgb(232,23,21)" fg:x="171" fg:w="71"/><text x="15.0296%" y="303.50">arrow_cs..</text></g><g><title>core::iter::adapters::try_process (70 samples, 6.05%)</title><rect x="14.8660%" y="277" width="6.0501%" height="15" fill="rgb(244,5,23)" fg:x="172" fg:w="70"/><text x="15.1160%" y="287.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (70 samples, 6.05%)</title><rect x="14.8660%" y="261" width="6.0501%" height="15" fill="rgb(226,81,46)" fg:x="172" fg:w="70"/><text x="15.1160%" y="271.50">&lt;alloc::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (70 samples, 6.05%)</title><rect x="14.8660%" y="245" width="6.0501%" height="15" fill="rgb(247,70,30)" fg:x="172" fg:w="70"/><text x="15.1160%" y="255.50">&lt;core::i..</text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="20.8297%" y="229" width="0.0864%" height="15" fill="rgb(212,68,19)" fg:x="241" fg:w="1"/><text x="21.0797%" y="239.50"></text></g><g><title>cfree (11 samples, 0.95%)</title><rect x="20.9162%" y="309" width="0.9507%" height="15" fill="rgb(240,187,13)" fg:x="242" fg:w="11"/><text x="21.1662%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (6 samples, 0.52%)</title><rect x="21.8669%" y="277" width="0.5186%" height="15" fill="rgb(223,113,26)" fg:x="253" fg:w="6"/><text x="22.1169%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.52%)</title><rect x="21.8669%" y="261" width="0.5186%" height="15" fill="rgb(206,192,2)" fg:x="253" fg:w="6"/><text x="22.1169%" y="271.50"></text></g><g><title>cfree (6 samples, 0.52%)</title><rect x="21.8669%" y="245" width="0.5186%" height="15" fill="rgb(241,108,4)" fg:x="253" fg:w="6"/><text x="22.1169%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (7 samples, 0.61%)</title><rect x="21.8669%" y="309" width="0.6050%" height="15" fill="rgb(247,173,49)" fg:x="253" fg:w="7"/><text x="22.1169%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.61%)</title><rect x="21.8669%" y="293" width="0.6050%" height="15" fill="rgb(224,114,35)" fg:x="253" fg:w="7"/><text x="22.1169%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt32Type&gt;&gt; (1 samples, 0.09%)</title><rect x="22.3855%" y="277" width="0.0864%" height="15" fill="rgb(245,159,27)" fg:x="259" fg:w="1"/><text x="22.6355%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="22.3855%" y="261" width="0.0864%" height="15" fill="rgb(245,172,44)" fg:x="259" fg:w="1"/><text x="22.6355%" y="271.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="22.3855%" y="245" width="0.0864%" height="15" fill="rgb(236,23,11)" fg:x="259" fg:w="1"/><text x="22.6355%" y="255.50"></text></g><g><title>arrow_array::record_batch::RecordBatch::try_new (1 samples, 0.09%)</title><rect x="24.0277%" y="293" width="0.0864%" height="15" fill="rgb(205,117,38)" fg:x="278" fg:w="1"/><text x="24.2777%" y="303.50"></text></g><g><title>arrow_array::record_batch::RecordBatch::try_new_impl (1 samples, 0.09%)</title><rect x="24.0277%" y="277" width="0.0864%" height="15" fill="rgb(237,72,25)" fg:x="278" fg:w="1"/><text x="24.2777%" y="287.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.09%)</title><rect x="24.0277%" y="261" width="0.0864%" height="15" fill="rgb(244,70,9)" fg:x="278" fg:w="1"/><text x="24.2777%" y="271.50"></text></g><g><title>&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (1 samples, 0.09%)</title><rect x="24.0277%" y="245" width="0.0864%" height="15" fill="rgb(217,125,39)" fg:x="278" fg:w="1"/><text x="24.2777%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (3 samples, 0.26%)</title><rect x="24.1141%" y="293" width="0.2593%" height="15" fill="rgb(235,36,10)" fg:x="279" fg:w="3"/><text x="24.3641%" y="303.50"></text></g><g><title>__rustc::__rdl_realloc (3 samples, 0.26%)</title><rect x="24.1141%" y="277" width="0.2593%" height="15" fill="rgb(251,123,47)" fg:x="279" fg:w="3"/><text x="24.3641%" y="287.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="24.2869%" y="261" width="0.0864%" height="15" fill="rgb(221,13,13)" fg:x="281" fg:w="1"/><text x="24.5369%" y="271.50"></text></g><g><title>cfree (16 samples, 1.38%)</title><rect x="24.3734%" y="293" width="1.3829%" height="15" fill="rgb(238,131,9)" fg:x="282" fg:w="16"/><text x="24.6234%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (36 samples, 3.11%)</title><rect x="25.7563%" y="293" width="3.1115%" height="15" fill="rgb(211,50,8)" fg:x="298" fg:w="36"/><text x="26.0063%" y="303.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 1.64%)</title><rect x="27.2256%" y="277" width="1.6422%" height="15" fill="rgb(245,182,24)" fg:x="315" fg:w="19"/><text x="27.4756%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (11 samples, 0.95%)</title><rect x="29.8185%" y="277" width="0.9507%" height="15" fill="rgb(242,14,37)" fg:x="345" fg:w="11"/><text x="30.0685%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.09%)</title><rect x="30.7692%" y="277" width="0.0864%" height="15" fill="rgb(246,228,12)" fg:x="356" fg:w="1"/><text x="31.0192%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (1 samples, 0.09%)</title><rect x="31.4607%" y="261" width="0.0864%" height="15" fill="rgb(213,55,15)" fg:x="364" fg:w="1"/><text x="31.7107%" y="271.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (11 samples, 0.95%)</title><rect x="30.8557%" y="277" width="0.9507%" height="15" fill="rgb(209,9,3)" fg:x="357" fg:w="11"/><text x="31.1057%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (3 samples, 0.26%)</title><rect x="31.5471%" y="261" width="0.2593%" height="15" fill="rgb(230,59,30)" fg:x="365" fg:w="3"/><text x="31.7971%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.09%)</title><rect x="31.8064%" y="277" width="0.0864%" height="15" fill="rgb(209,121,21)" fg:x="368" fg:w="1"/><text x="32.0564%" y="287.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (37 samples, 3.20%)</title><rect x="28.8678%" y="293" width="3.1979%" height="15" fill="rgb(220,109,13)" fg:x="334" fg:w="37"/><text x="29.1178%" y="303.50">nem..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.17%)</title><rect x="31.8928%" y="277" width="0.1729%" height="15" fill="rgb(232,18,1)" fg:x="369" fg:w="2"/><text x="32.1428%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (6 samples, 0.52%)</title><rect x="32.9300%" y="277" width="0.5186%" height="15" fill="rgb(215,41,42)" fg:x="381" fg:w="6"/><text x="33.1800%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (134 samples, 11.58%)</title><rect x="22.4719%" y="309" width="11.5817%" height="15" fill="rgb(224,123,36)" fg:x="260" fg:w="134"/><text x="22.7219%" y="319.50">nemscraper::proce..</text></g><g><title>nemscraper::process::utils::clean_str (23 samples, 1.99%)</title><rect x="32.0657%" y="293" width="1.9879%" height="15" fill="rgb(240,125,3)" fg:x="371" fg:w="23"/><text x="32.3157%" y="303.50">n..</text></g><g><title>malloc (7 samples, 0.61%)</title><rect x="33.4486%" y="277" width="0.6050%" height="15" fill="rgb(205,98,50)" fg:x="387" fg:w="7"/><text x="33.6986%" y="287.50"></text></g><g><title>arrow_cast::cast::cast_reinterpret_arrays (1 samples, 0.09%)</title><rect x="34.1400%" y="229" width="0.0864%" height="15" fill="rgb(205,185,37)" fg:x="395" fg:w="1"/><text x="34.3900%" y="239.50"></text></g><g><title>arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::reinterpret_cast (1 samples, 0.09%)</title><rect x="34.1400%" y="213" width="0.0864%" height="15" fill="rgb(238,207,15)" fg:x="395" fg:w="1"/><text x="34.3900%" y="223.50"></text></g><g><title>&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (1 samples, 0.09%)</title><rect x="34.2264%" y="181" width="0.0864%" height="15" fill="rgb(213,199,42)" fg:x="396" fg:w="1"/><text x="34.4764%" y="191.50"></text></g><g><title>arrow_cast::cast::cast (3 samples, 0.26%)</title><rect x="34.1400%" y="261" width="0.2593%" height="15" fill="rgb(235,201,11)" fg:x="395" fg:w="3"/><text x="34.3900%" y="271.50"></text></g><g><title>arrow_cast::cast::cast_with_options (3 samples, 0.26%)</title><rect x="34.1400%" y="245" width="0.2593%" height="15" fill="rgb(207,46,11)" fg:x="395" fg:w="3"/><text x="34.3900%" y="255.50"></text></g><g><title>arrow_cast::cast::cast_with_options (2 samples, 0.17%)</title><rect x="34.2264%" y="229" width="0.1729%" height="15" fill="rgb(241,35,35)" fg:x="396" fg:w="2"/><text x="34.4764%" y="239.50"></text></g><g><title>arrow_array::array::make_array (2 samples, 0.17%)</title><rect x="34.2264%" y="213" width="0.1729%" height="15" fill="rgb(243,32,47)" fg:x="396" fg:w="2"/><text x="34.4764%" y="223.50"></text></g><g><title>&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (2 samples, 0.17%)</title><rect x="34.2264%" y="197" width="0.1729%" height="15" fill="rgb(247,202,23)" fg:x="396" fg:w="2"/><text x="34.4764%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_data::data::ArrayData&gt; (1 samples, 0.09%)</title><rect x="34.3129%" y="181" width="0.0864%" height="15" fill="rgb(219,102,11)" fg:x="397" fg:w="1"/><text x="34.5629%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (8 samples, 0.69%)</title><rect x="34.5722%" y="229" width="0.6914%" height="15" fill="rgb(243,110,44)" fg:x="400" fg:w="8"/><text x="34.8222%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (8 samples, 0.69%)</title><rect x="34.5722%" y="213" width="0.6914%" height="15" fill="rgb(222,74,54)" fg:x="400" fg:w="8"/><text x="34.8222%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.35%)</title><rect x="34.9179%" y="197" width="0.3457%" height="15" fill="rgb(216,99,12)" fg:x="404" fg:w="4"/><text x="35.1679%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="35.2636%" y="213" width="0.0864%" height="15" fill="rgb(226,22,26)" fg:x="408" fg:w="1"/><text x="35.5136%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="35.2636%" y="197" width="0.0864%" height="15" fill="rgb(217,163,10)" fg:x="408" fg:w="1"/><text x="35.5136%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="35.2636%" y="181" width="0.0864%" height="15" fill="rgb(213,25,53)" fg:x="408" fg:w="1"/><text x="35.5136%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="35.3500%" y="181" width="0.0864%" height="15" fill="rgb(252,105,26)" fg:x="409" fg:w="1"/><text x="35.6000%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="35.3500%" y="165" width="0.0864%" height="15" fill="rgb(220,39,43)" fg:x="409" fg:w="1"/><text x="35.6000%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="35.3500%" y="149" width="0.0864%" height="15" fill="rgb(229,68,48)" fg:x="409" fg:w="1"/><text x="35.6000%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (14 samples, 1.21%)</title><rect x="34.3993%" y="261" width="1.2100%" height="15" fill="rgb(252,8,32)" fg:x="398" fg:w="14"/><text x="34.6493%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (14 samples, 1.21%)</title><rect x="34.3993%" y="245" width="1.2100%" height="15" fill="rgb(223,20,43)" fg:x="398" fg:w="14"/><text x="34.6493%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.35%)</title><rect x="35.2636%" y="229" width="0.3457%" height="15" fill="rgb(229,81,49)" fg:x="408" fg:w="4"/><text x="35.5136%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="35.3500%" y="213" width="0.2593%" height="15" fill="rgb(236,28,36)" fg:x="409" fg:w="3"/><text x="35.6000%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.26%)</title><rect x="35.3500%" y="197" width="0.2593%" height="15" fill="rgb(249,185,26)" fg:x="409" fg:w="3"/><text x="35.6000%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.17%)</title><rect x="35.4365%" y="181" width="0.1729%" height="15" fill="rgb(249,174,33)" fg:x="410" fg:w="2"/><text x="35.6865%" y="191.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.09%)</title><rect x="41.6595%" y="213" width="0.0864%" height="15" fill="rgb(233,201,37)" fg:x="482" fg:w="1"/><text x="41.9095%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (61 samples, 5.27%)</title><rect x="36.5601%" y="245" width="5.2723%" height="15" fill="rgb(221,78,26)" fg:x="423" fg:w="61"/><text x="36.8101%" y="255.50">&lt;parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (30 samples, 2.59%)</title><rect x="39.2394%" y="229" width="2.5929%" height="15" fill="rgb(250,127,30)" fg:x="454" fg:w="30"/><text x="39.4894%" y="239.50">pa..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.09%)</title><rect x="41.7459%" y="213" width="0.0864%" height="15" fill="rgb(230,49,44)" fg:x="483" fg:w="1"/><text x="41.9959%" y="223.50"></text></g><g><title>parquet::column::writer::compare_greater (9 samples, 0.78%)</title><rect x="42.6102%" y="213" width="0.7779%" height="15" fill="rgb(229,67,23)" fg:x="493" fg:w="9"/><text x="42.8602%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (73 samples, 6.31%)</title><rect x="41.8323%" y="245" width="6.3094%" height="15" fill="rgb(249,83,47)" fg:x="484" fg:w="73"/><text x="42.0823%" y="255.50">&lt;parquet..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (71 samples, 6.14%)</title><rect x="42.0052%" y="229" width="6.1366%" height="15" fill="rgb(215,43,3)" fg:x="486" fg:w="71"/><text x="42.2552%" y="239.50">parquet:..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (55 samples, 4.75%)</title><rect x="43.3881%" y="213" width="4.7537%" height="15" fill="rgb(238,154,13)" fg:x="502" fg:w="55"/><text x="43.6381%" y="223.50">parque..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.43%)</title><rect x="47.7096%" y="197" width="0.4322%" height="15" fill="rgb(219,56,2)" fg:x="552" fg:w="5"/><text x="47.9596%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (7 samples, 0.61%)</title><rect x="48.2282%" y="229" width="0.6050%" height="15" fill="rgb(233,0,4)" fg:x="558" fg:w="7"/><text x="48.4782%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.26%)</title><rect x="48.5739%" y="213" width="0.2593%" height="15" fill="rgb(235,30,7)" fg:x="562" fg:w="3"/><text x="48.8239%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.26%)</title><rect x="48.5739%" y="197" width="0.2593%" height="15" fill="rgb(250,79,13)" fg:x="562" fg:w="3"/><text x="48.8239%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.26%)</title><rect x="49.0061%" y="197" width="0.2593%" height="15" fill="rgb(211,146,34)" fg:x="567" fg:w="3"/><text x="49.2561%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.26%)</title><rect x="49.0061%" y="181" width="0.2593%" height="15" fill="rgb(228,22,38)" fg:x="567" fg:w="3"/><text x="49.2561%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (8 samples, 0.69%)</title><rect x="48.8332%" y="229" width="0.6914%" height="15" fill="rgb(235,168,5)" fg:x="565" fg:w="8"/><text x="49.0832%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (8 samples, 0.69%)</title><rect x="48.8332%" y="213" width="0.6914%" height="15" fill="rgb(221,155,16)" fg:x="565" fg:w="8"/><text x="49.0832%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (3 samples, 0.26%)</title><rect x="49.2653%" y="197" width="0.2593%" height="15" fill="rgb(215,215,53)" fg:x="570" fg:w="3"/><text x="49.5153%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.09%)</title><rect x="49.4382%" y="181" width="0.0864%" height="15" fill="rgb(223,4,10)" fg:x="572" fg:w="1"/><text x="49.6882%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (7 samples, 0.61%)</title><rect x="53.9326%" y="181" width="0.6050%" height="15" fill="rgb(234,103,6)" fg:x="624" fg:w="7"/><text x="54.1826%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (47 samples, 4.06%)</title><rect x="50.5618%" y="197" width="4.0622%" height="15" fill="rgb(227,97,0)" fg:x="585" fg:w="47"/><text x="50.8118%" y="207.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="54.5376%" y="181" width="0.0864%" height="15" fill="rgb(234,150,53)" fg:x="631" fg:w="1"/><text x="54.7876%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (60 samples, 5.19%)</title><rect x="49.6111%" y="213" width="5.1858%" height="15" fill="rgb(228,201,54)" fg:x="574" fg:w="60"/><text x="49.8611%" y="223.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.17%)</title><rect x="54.6240%" y="197" width="0.1729%" height="15" fill="rgb(222,22,37)" fg:x="632" fg:w="2"/><text x="54.8740%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (21 samples, 1.82%)</title><rect x="54.7969%" y="213" width="1.8150%" height="15" fill="rgb(237,53,32)" fg:x="634" fg:w="21"/><text x="55.0469%" y="223.50">b..</text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (21 samples, 1.82%)</title><rect x="54.7969%" y="197" width="1.8150%" height="15" fill="rgb(233,25,53)" fg:x="634" fg:w="21"/><text x="55.0469%" y="207.50">b..</text></g><g><title>brotli::enc::encode::hasher_setup (3 samples, 0.26%)</title><rect x="56.6119%" y="213" width="0.2593%" height="15" fill="rgb(210,40,34)" fg:x="655" fg:w="3"/><text x="56.8619%" y="223.50"></text></g><g><title>brotli::enc::backward_references::TestStaticDictionaryItem (1 samples, 0.09%)</title><rect x="62.3163%" y="165" width="0.0864%" height="15" fill="rgb(241,220,44)" fg:x="721" fg:w="1"/><text x="62.5663%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (10 samples, 0.86%)</title><rect x="62.4028%" y="165" width="0.8643%" height="15" fill="rgb(235,28,35)" fg:x="722" fg:w="10"/><text x="62.6528%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (63 samples, 5.45%)</title><rect x="57.9948%" y="181" width="5.4451%" height="15" fill="rgb(210,56,17)" fg:x="671" fg:w="63"/><text x="58.2448%" y="191.50">&lt;brotli..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="63.2671%" y="165" width="0.1729%" height="15" fill="rgb(224,130,29)" fg:x="732" fg:w="2"/><text x="63.5171%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (73 samples, 6.31%)</title><rect x="57.2169%" y="197" width="6.3094%" height="15" fill="rgb(235,212,8)" fg:x="662" fg:w="73"/><text x="57.4669%" y="207.50">brotli::..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="63.4399%" y="181" width="0.0864%" height="15" fill="rgb(223,33,50)" fg:x="734" fg:w="1"/><text x="63.6899%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::MetaBlockSplit&lt;Alloc&gt;::destroy (1 samples, 0.09%)</title><rect x="63.5264%" y="197" width="0.0864%" height="15" fill="rgb(219,149,13)" fg:x="735" fg:w="1"/><text x="63.7764%" y="207.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.09%)</title><rect x="63.5264%" y="181" width="0.0864%" height="15" fill="rgb(250,156,29)" fg:x="735" fg:w="1"/><text x="63.7764%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="64.3042%" y="149" width="0.0864%" height="15" fill="rgb(216,193,19)" fg:x="744" fg:w="1"/><text x="64.5542%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="64.3042%" y="133" width="0.0864%" height="15" fill="rgb(216,135,14)" fg:x="744" fg:w="1"/><text x="64.5542%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="64.3907%" y="149" width="0.0864%" height="15" fill="rgb(241,47,5)" fg:x="745" fg:w="1"/><text x="64.6407%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (10 samples, 0.86%)</title><rect x="64.2178%" y="181" width="0.8643%" height="15" fill="rgb(233,42,35)" fg:x="743" fg:w="10"/><text x="64.4678%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (10 samples, 0.86%)</title><rect x="64.2178%" y="165" width="0.8643%" height="15" fill="rgb(231,13,6)" fg:x="743" fg:w="10"/><text x="64.4678%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (7 samples, 0.61%)</title><rect x="64.4771%" y="149" width="0.6050%" height="15" fill="rgb(207,181,40)" fg:x="746" fg:w="7"/><text x="64.7271%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="64.9957%" y="133" width="0.0864%" height="15" fill="rgb(254,173,49)" fg:x="752" fg:w="1"/><text x="65.2457%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (2 samples, 0.17%)</title><rect x="65.0821%" y="181" width="0.1729%" height="15" fill="rgb(221,1,38)" fg:x="753" fg:w="2"/><text x="65.3321%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (12 samples, 1.04%)</title><rect x="65.2550%" y="181" width="1.0372%" height="15" fill="rgb(206,124,46)" fg:x="755" fg:w="12"/><text x="65.5050%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.09%)</title><rect x="66.2921%" y="181" width="0.0864%" height="15" fill="rgb(249,21,11)" fg:x="767" fg:w="1"/><text x="66.5421%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (33 samples, 2.85%)</title><rect x="63.6128%" y="197" width="2.8522%" height="15" fill="rgb(222,201,40)" fg:x="736" fg:w="33"/><text x="63.8628%" y="207.50">br..</text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="66.3786%" y="181" width="0.0864%" height="15" fill="rgb(235,61,29)" fg:x="768" fg:w="1"/><text x="66.6286%" y="191.50"></text></g><g><title>brotli::enc::encode::DecideOverLiteralContextModeling (2 samples, 0.17%)</title><rect x="66.4650%" y="197" width="0.1729%" height="15" fill="rgb(219,207,3)" fg:x="769" fg:w="2"/><text x="66.7150%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (7 samples, 0.61%)</title><rect x="66.6379%" y="197" width="0.6050%" height="15" fill="rgb(222,56,46)" fg:x="771" fg:w="7"/><text x="66.8879%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (15 samples, 1.30%)</title><rect x="67.2429%" y="197" width="1.2965%" height="15" fill="rgb(239,76,54)" fg:x="778" fg:w="15"/><text x="67.4929%" y="207.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.17%)</title><rect x="68.3665%" y="181" width="0.1729%" height="15" fill="rgb(231,124,27)" fg:x="791" fg:w="2"/><text x="68.6165%" y="191.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.17%)</title><rect x="68.3665%" y="165" width="0.1729%" height="15" fill="rgb(249,195,6)" fg:x="791" fg:w="2"/><text x="68.6165%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (225 samples, 19.45%)</title><rect x="49.5246%" y="229" width="19.4468%" height="15" fill="rgb(237,174,47)" fg:x="573" fg:w="225"/><text x="49.7746%" y="239.50">&lt;parquet::compression::brotli_..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (140 samples, 12.10%)</title><rect x="56.8712%" y="213" width="12.1003%" height="15" fill="rgb(206,201,31)" fg:x="658" fg:w="140"/><text x="57.1212%" y="223.50">brotli::enc::write..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (5 samples, 0.43%)</title><rect x="68.5393%" y="197" width="0.4322%" height="15" fill="rgb(231,57,52)" fg:x="793" fg:w="5"/><text x="68.7893%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (5 samples, 0.43%)</title><rect x="68.5393%" y="181" width="0.4322%" height="15" fill="rgb(248,177,22)" fg:x="793" fg:w="5"/><text x="68.7893%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="68.9715%" y="229" width="0.0864%" height="15" fill="rgb(215,211,37)" fg:x="798" fg:w="1"/><text x="69.2215%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="68.9715%" y="213" width="0.0864%" height="15" fill="rgb(241,128,51)" fg:x="798" fg:w="1"/><text x="69.2215%" y="223.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="68.9715%" y="197" width="0.0864%" height="15" fill="rgb(227,165,31)" fg:x="798" fg:w="1"/><text x="69.2215%" y="207.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="69.0579%" y="229" width="0.0864%" height="15" fill="rgb(228,167,24)" fg:x="799" fg:w="1"/><text x="69.3079%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="69.1443%" y="229" width="0.0864%" height="15" fill="rgb(228,143,12)" fg:x="800" fg:w="1"/><text x="69.3943%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="69.1443%" y="213" width="0.0864%" height="15" fill="rgb(249,149,8)" fg:x="800" fg:w="1"/><text x="69.3943%" y="223.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="69.1443%" y="197" width="0.0864%" height="15" fill="rgb(243,35,44)" fg:x="800" fg:w="1"/><text x="69.3943%" y="207.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="69.1443%" y="181" width="0.0864%" height="15" fill="rgb(246,89,9)" fg:x="800" fg:w="1"/><text x="69.3943%" y="191.50"></text></g><g><title>&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="69.1443%" y="165" width="0.0864%" height="15" fill="rgb(233,213,13)" fg:x="800" fg:w="1"/><text x="69.3943%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (250 samples, 21.61%)</title><rect x="48.1417%" y="245" width="21.6076%" height="15" fill="rgb(233,141,41)" fg:x="557" fg:w="250"/><text x="48.3917%" y="255.50">parquet::column::writer::GenericCo..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (6 samples, 0.52%)</title><rect x="69.2308%" y="229" width="0.5186%" height="15" fill="rgb(239,167,4)" fg:x="801" fg:w="6"/><text x="69.4808%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="69.7494%" y="245" width="0.0864%" height="15" fill="rgb(209,217,16)" fg:x="807" fg:w="1"/><text x="69.9994%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="69.7494%" y="229" width="0.0864%" height="15" fill="rgb(219,88,35)" fg:x="807" fg:w="1"/><text x="69.9994%" y="239.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="69.7494%" y="213" width="0.0864%" height="15" fill="rgb(220,193,23)" fg:x="807" fg:w="1"/><text x="69.9994%" y="223.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="69.7494%" y="197" width="0.0864%" height="15" fill="rgb(230,90,52)" fg:x="807" fg:w="1"/><text x="69.9994%" y="207.50"></text></g><g><title>&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="69.7494%" y="181" width="0.0864%" height="15" fill="rgb(252,106,19)" fg:x="807" fg:w="1"/><text x="69.9994%" y="191.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="69.7494%" y="165" width="0.0864%" height="15" fill="rgb(206,74,20)" fg:x="807" fg:w="1"/><text x="69.9994%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (47 samples, 4.06%)</title><rect x="71.1322%" y="197" width="4.0622%" height="15" fill="rgb(230,138,44)" fg:x="823" fg:w="47"/><text x="71.3822%" y="207.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="75.0216%" y="181" width="0.1729%" height="15" fill="rgb(235,182,43)" fg:x="868" fg:w="2"/><text x="75.2716%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (56 samples, 4.84%)</title><rect x="70.4408%" y="213" width="4.8401%" height="15" fill="rgb(242,16,51)" fg:x="815" fg:w="56"/><text x="70.6908%" y="223.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="75.1945%" y="197" width="0.0864%" height="15" fill="rgb(248,9,4)" fg:x="870" fg:w="1"/><text x="75.4445%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="75.2809%" y="213" width="0.0864%" height="15" fill="rgb(210,31,22)" fg:x="871" fg:w="1"/><text x="75.5309%" y="223.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="75.2809%" y="197" width="0.0864%" height="15" fill="rgb(239,54,39)" fg:x="871" fg:w="1"/><text x="75.5309%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="75.6266%" y="181" width="0.0864%" height="15" fill="rgb(230,99,41)" fg:x="875" fg:w="1"/><text x="75.8766%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="75.6266%" y="165" width="0.0864%" height="15" fill="rgb(253,106,12)" fg:x="875" fg:w="1"/><text x="75.8766%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="75.6266%" y="149" width="0.0864%" height="15" fill="rgb(213,46,41)" fg:x="875" fg:w="1"/><text x="75.8766%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="75.7131%" y="181" width="0.0864%" height="15" fill="rgb(215,133,35)" fg:x="876" fg:w="1"/><text x="75.9631%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (7 samples, 0.61%)</title><rect x="75.4538%" y="197" width="0.6050%" height="15" fill="rgb(213,28,5)" fg:x="873" fg:w="7"/><text x="75.7038%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (3 samples, 0.26%)</title><rect x="75.7995%" y="181" width="0.2593%" height="15" fill="rgb(215,77,49)" fg:x="877" fg:w="3"/><text x="76.0495%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (73 samples, 6.31%)</title><rect x="69.8358%" y="229" width="6.3094%" height="15" fill="rgb(248,100,22)" fg:x="808" fg:w="73"/><text x="70.0858%" y="239.50">&lt;parquet..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (9 samples, 0.78%)</title><rect x="75.3673%" y="213" width="0.7779%" height="15" fill="rgb(208,67,9)" fg:x="872" fg:w="9"/><text x="75.6173%" y="223.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="76.0588%" y="197" width="0.0864%" height="15" fill="rgb(219,133,21)" fg:x="880" fg:w="1"/><text x="76.3088%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (487 samples, 42.09%)</title><rect x="34.1400%" y="277" width="42.0916%" height="15" fill="rgb(246,46,29)" fg:x="395" fg:w="487"/><text x="34.3900%" y="287.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (470 samples, 40.62%)</title><rect x="35.6093%" y="261" width="40.6223%" height="15" fill="rgb(246,185,52)" fg:x="412" fg:w="470"/><text x="35.8593%" y="271.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_inter..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (74 samples, 6.40%)</title><rect x="69.8358%" y="245" width="6.3959%" height="15" fill="rgb(252,136,11)" fg:x="808" fg:w="74"/><text x="70.0858%" y="255.50">parquet:..</text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="76.1452%" y="229" width="0.0864%" height="15" fill="rgb(219,138,53)" fg:x="881" fg:w="1"/><text x="76.3952%" y="239.50"></text></g><g><title>__default_morecore (1 samples, 0.09%)</title><rect x="76.1452%" y="213" width="0.0864%" height="15" fill="rgb(211,51,23)" fg:x="881" fg:w="1"/><text x="76.3952%" y="223.50"></text></g><g><title>__sbrk (1 samples, 0.09%)</title><rect x="76.1452%" y="197" width="0.0864%" height="15" fill="rgb(247,221,28)" fg:x="881" fg:w="1"/><text x="76.3952%" y="207.50"></text></g><g><title>brk (1 samples, 0.09%)</title><rect x="76.1452%" y="181" width="0.0864%" height="15" fill="rgb(251,222,45)" fg:x="881" fg:w="1"/><text x="76.3952%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::finish (1 samples, 0.09%)</title><rect x="76.2316%" y="261" width="0.0864%" height="15" fill="rgb(217,162,53)" fg:x="882" fg:w="1"/><text x="76.4816%" y="271.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="76.2316%" y="245" width="0.0864%" height="15" fill="rgb(229,93,14)" fg:x="882" fg:w="1"/><text x="76.4816%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (492 samples, 42.52%)</title><rect x="34.0536%" y="309" width="42.5238%" height="15" fill="rgb(209,67,49)" fg:x="394" fg:w="492"/><text x="34.3036%" y="319.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (491 samples, 42.44%)</title><rect x="34.1400%" y="293" width="42.4373%" height="15" fill="rgb(213,87,29)" fg:x="395" fg:w="491"/><text x="34.3900%" y="303.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (4 samples, 0.35%)</title><rect x="76.2316%" y="277" width="0.3457%" height="15" fill="rgb(205,151,52)" fg:x="882" fg:w="4"/><text x="76.4816%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (3 samples, 0.26%)</title><rect x="76.3181%" y="261" width="0.2593%" height="15" fill="rgb(253,215,39)" fg:x="883" fg:w="3"/><text x="76.5681%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.17%)</title><rect x="76.4045%" y="245" width="0.1729%" height="15" fill="rgb(221,220,41)" fg:x="884" fg:w="2"/><text x="76.6545%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="76.4045%" y="229" width="0.1729%" height="15" fill="rgb(218,133,21)" fg:x="884" fg:w="2"/><text x="76.6545%" y="239.50"></text></g><g><title>malloc (2 samples, 0.17%)</title><rect x="76.4045%" y="213" width="0.1729%" height="15" fill="rgb(221,193,43)" fg:x="884" fg:w="2"/><text x="76.6545%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.61%)</title><rect x="76.5774%" y="261" width="0.6050%" height="15" fill="rgb(240,128,52)" fg:x="886" fg:w="7"/><text x="76.8274%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.61%)</title><rect x="76.5774%" y="245" width="0.6050%" height="15" fill="rgb(253,114,12)" fg:x="886" fg:w="7"/><text x="76.8274%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.61%)</title><rect x="76.5774%" y="229" width="0.6050%" height="15" fill="rgb(215,223,47)" fg:x="886" fg:w="7"/><text x="76.8274%" y="239.50"></text></g><g><title>write (7 samples, 0.61%)</title><rect x="76.5774%" y="213" width="0.6050%" height="15" fill="rgb(248,225,23)" fg:x="886" fg:w="7"/><text x="76.8274%" y="223.50"></text></g><g><title>&lt;tracing_subscriber::fmt::time::SystemTime as tracing_subscriber::fmt::time::FormatTime&gt;::format_time (1 samples, 0.09%)</title><rect x="77.1824%" y="245" width="0.0864%" height="15" fill="rgb(250,108,0)" fg:x="893" fg:w="1"/><text x="77.4324%" y="255.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.1824%" y="229" width="0.0864%" height="15" fill="rgb(228,208,7)" fg:x="893" fg:w="1"/><text x="77.4324%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::fmt::time::datetime::DateTime as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="77.1824%" y="213" width="0.0864%" height="15" fill="rgb(244,45,10)" fg:x="893" fg:w="1"/><text x="77.4324%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.1824%" y="197" width="0.0864%" height="15" fill="rgb(207,125,25)" fg:x="893" fg:w="1"/><text x="77.4324%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.09%)</title><rect x="77.1824%" y="181" width="0.0864%" height="15" fill="rgb(210,195,18)" fg:x="893" fg:w="1"/><text x="77.4324%" y="191.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::FmtLevel as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="77.2688%" y="229" width="0.0864%" height="15" fill="rgb(249,80,12)" fg:x="894" fg:w="1"/><text x="77.5188%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.2688%" y="213" width="0.0864%" height="15" fill="rgb(221,65,9)" fg:x="894" fg:w="1"/><text x="77.5188%" y="223.50"></text></g><g><title>&lt;nu_ansi_term::display::AnsiGenericString&lt;str&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="77.2688%" y="197" width="0.0864%" height="15" fill="rgb(235,49,36)" fg:x="894" fg:w="1"/><text x="77.5188%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (817 samples, 70.61%)</title><rect x="6.8280%" y="325" width="70.6137%" height="15" fill="rgb(225,32,20)" fg:x="79" fg:w="817"/><text x="7.0780%" y="335.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (10 samples, 0.86%)</title><rect x="76.5774%" y="309" width="0.8643%" height="15" fill="rgb(215,141,46)" fg:x="886" fg:w="10"/><text x="76.8274%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (10 samples, 0.86%)</title><rect x="76.5774%" y="293" width="0.8643%" height="15" fill="rgb(250,160,47)" fg:x="886" fg:w="10"/><text x="76.8274%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.86%)</title><rect x="76.5774%" y="277" width="0.8643%" height="15" fill="rgb(216,222,40)" fg:x="886" fg:w="10"/><text x="76.8274%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (3 samples, 0.26%)</title><rect x="77.1824%" y="261" width="0.2593%" height="15" fill="rgb(234,217,39)" fg:x="893" fg:w="3"/><text x="77.4324%" y="271.50"></text></g><g><title>core::fmt::write (2 samples, 0.17%)</title><rect x="77.2688%" y="245" width="0.1729%" height="15" fill="rgb(207,178,40)" fg:x="894" fg:w="2"/><text x="77.5188%" y="255.50"></text></g><g><title>nu_ansi_term::ansi::&lt;impl nu_ansi_term::style::Style&gt;::write_prefix (1 samples, 0.09%)</title><rect x="77.3552%" y="229" width="0.0864%" height="15" fill="rgb(221,136,13)" fg:x="895" fg:w="1"/><text x="77.6052%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.3552%" y="213" width="0.0864%" height="15" fill="rgb(249,199,10)" fg:x="895" fg:w="1"/><text x="77.6052%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.09%)</title><rect x="77.3552%" y="197" width="0.0864%" height="15" fill="rgb(249,222,13)" fg:x="895" fg:w="1"/><text x="77.6052%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::initialize (1 samples, 0.09%)</title><rect x="77.4417%" y="325" width="0.0864%" height="15" fill="rgb(244,185,38)" fg:x="896" fg:w="1"/><text x="77.6917%" y="335.50"></text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="77.4417%" y="309" width="0.0864%" height="15" fill="rgb(236,202,9)" fg:x="896" fg:w="1"/><text x="77.6917%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="77.4417%" y="293" width="0.0864%" height="15" fill="rgb(250,229,37)" fg:x="896" fg:w="1"/><text x="77.6917%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="77.4417%" y="277" width="0.0864%" height="15" fill="rgb(206,174,23)" fg:x="896" fg:w="1"/><text x="77.6917%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="77.4417%" y="261" width="0.0864%" height="15" fill="rgb(211,33,43)" fg:x="896" fg:w="1"/><text x="77.6917%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="77.4417%" y="245" width="0.0864%" height="15" fill="rgb(245,58,50)" fg:x="896" fg:w="1"/><text x="77.6917%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="77.4417%" y="229" width="0.0864%" height="15" fill="rgb(244,68,36)" fg:x="896" fg:w="1"/><text x="77.6917%" y="239.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="77.4417%" y="213" width="0.0864%" height="15" fill="rgb(232,229,15)" fg:x="896" fg:w="1"/><text x="77.6917%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (12 samples, 1.04%)</title><rect x="78.2195%" y="309" width="1.0372%" height="15" fill="rgb(254,30,23)" fg:x="905" fg:w="12"/><text x="78.4695%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (899 samples, 77.70%)</title><rect x="2.0743%" y="373" width="77.7010%" height="15" fill="rgb(235,160,14)" fg:x="24" fg:w="899"/><text x="2.3243%" y="383.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (888 samples, 76.75%)</title><rect x="3.0251%" y="357" width="76.7502%" height="15" fill="rgb(212,155,44)" fg:x="35" fg:w="888"/><text x="3.2751%" y="367.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (888 samples, 76.75%)</title><rect x="3.0251%" y="341" width="76.7502%" height="15" fill="rgb(226,2,50)" fg:x="35" fg:w="888"/><text x="3.2751%" y="351.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (26 samples, 2.25%)</title><rect x="77.5281%" y="325" width="2.2472%" height="15" fill="rgb(234,177,6)" fg:x="897" fg:w="26"/><text x="77.7781%" y="335.50">s..</text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.52%)</title><rect x="79.2567%" y="309" width="0.5186%" height="15" fill="rgb(217,24,9)" fg:x="917" fg:w="6"/><text x="79.5067%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="79.7753%" y="213" width="0.0864%" height="15" fill="rgb(220,13,46)" fg:x="923" fg:w="1"/><text x="80.0253%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="79.7753%" y="197" width="0.0864%" height="15" fill="rgb(239,221,27)" fg:x="923" fg:w="1"/><text x="80.0253%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="79.7753%" y="181" width="0.0864%" height="15" fill="rgb(222,198,25)" fg:x="923" fg:w="1"/><text x="80.0253%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="79.7753%" y="165" width="0.0864%" height="15" fill="rgb(211,99,13)" fg:x="923" fg:w="1"/><text x="80.0253%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="79.8617%" y="165" width="0.0864%" height="15" fill="rgb(232,111,31)" fg:x="924" fg:w="1"/><text x="80.1117%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (3 samples, 0.26%)</title><rect x="79.7753%" y="341" width="0.2593%" height="15" fill="rgb(245,82,37)" fg:x="923" fg:w="3"/><text x="80.0253%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (3 samples, 0.26%)</title><rect x="79.7753%" y="325" width="0.2593%" height="15" fill="rgb(227,149,46)" fg:x="923" fg:w="3"/><text x="80.0253%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (3 samples, 0.26%)</title><rect x="79.7753%" y="309" width="0.2593%" height="15" fill="rgb(218,36,50)" fg:x="923" fg:w="3"/><text x="80.0253%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.26%)</title><rect x="79.7753%" y="293" width="0.2593%" height="15" fill="rgb(226,80,48)" fg:x="923" fg:w="3"/><text x="80.0253%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (3 samples, 0.26%)</title><rect x="79.7753%" y="277" width="0.2593%" height="15" fill="rgb(238,224,15)" fg:x="923" fg:w="3"/><text x="80.0253%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.26%)</title><rect x="79.7753%" y="261" width="0.2593%" height="15" fill="rgb(241,136,10)" fg:x="923" fg:w="3"/><text x="80.0253%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (3 samples, 0.26%)</title><rect x="79.7753%" y="245" width="0.2593%" height="15" fill="rgb(208,32,45)" fg:x="923" fg:w="3"/><text x="80.0253%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (3 samples, 0.26%)</title><rect x="79.7753%" y="229" width="0.2593%" height="15" fill="rgb(207,135,9)" fg:x="923" fg:w="3"/><text x="80.0253%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.17%)</title><rect x="79.8617%" y="213" width="0.1729%" height="15" fill="rgb(206,86,44)" fg:x="924" fg:w="2"/><text x="80.1117%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="79.8617%" y="197" width="0.1729%" height="15" fill="rgb(245,177,15)" fg:x="924" fg:w="2"/><text x="80.1117%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.17%)</title><rect x="79.8617%" y="181" width="0.1729%" height="15" fill="rgb(206,64,50)" fg:x="924" fg:w="2"/><text x="80.1117%" y="191.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="79.9481%" y="165" width="0.0864%" height="15" fill="rgb(234,36,40)" fg:x="925" fg:w="1"/><text x="80.1981%" y="175.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (7 samples, 0.61%)</title><rect x="80.0346%" y="309" width="0.6050%" height="15" fill="rgb(213,64,8)" fg:x="926" fg:w="7"/><text x="80.2846%" y="319.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (7 samples, 0.61%)</title><rect x="80.0346%" y="293" width="0.6050%" height="15" fill="rgb(210,75,36)" fg:x="926" fg:w="7"/><text x="80.2846%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record (7 samples, 0.61%)</title><rect x="80.0346%" y="277" width="0.6050%" height="15" fill="rgb(229,88,21)" fg:x="926" fg:w="7"/><text x="80.2846%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.09%)</title><rect x="80.6396%" y="293" width="0.0864%" height="15" fill="rgb(252,204,47)" fg:x="933" fg:w="1"/><text x="80.8896%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (14 samples, 1.21%)</title><rect x="80.0346%" y="325" width="1.2100%" height="15" fill="rgb(208,77,27)" fg:x="926" fg:w="14"/><text x="80.2846%" y="335.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (7 samples, 0.61%)</title><rect x="80.6396%" y="309" width="0.6050%" height="15" fill="rgb(221,76,26)" fg:x="933" fg:w="7"/><text x="80.8896%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.52%)</title><rect x="80.7260%" y="293" width="0.5186%" height="15" fill="rgb(225,139,18)" fg:x="934" fg:w="6"/><text x="80.9760%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.52%)</title><rect x="80.7260%" y="277" width="0.5186%" height="15" fill="rgb(230,137,11)" fg:x="934" fg:w="6"/><text x="80.9760%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.52%)</title><rect x="80.7260%" y="261" width="0.5186%" height="15" fill="rgb(212,28,1)" fg:x="934" fg:w="6"/><text x="80.9760%" y="271.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (5 samples, 0.43%)</title><rect x="80.8124%" y="245" width="0.4322%" height="15" fill="rgb(248,164,17)" fg:x="935" fg:w="5"/><text x="81.0624%" y="255.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (4 samples, 0.35%)</title><rect x="80.8989%" y="229" width="0.3457%" height="15" fill="rgb(222,171,42)" fg:x="936" fg:w="4"/><text x="81.1489%" y="239.50"></text></g><g><title>cfree (2 samples, 0.17%)</title><rect x="81.2446%" y="325" width="0.1729%" height="15" fill="rgb(243,84,45)" fg:x="940" fg:w="2"/><text x="81.4946%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (1 samples, 0.09%)</title><rect x="81.4175%" y="325" width="0.0864%" height="15" fill="rgb(252,49,23)" fg:x="942" fg:w="1"/><text x="81.6675%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="81.4175%" y="309" width="0.0864%" height="15" fill="rgb(215,19,7)" fg:x="942" fg:w="1"/><text x="81.6675%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (1 samples, 0.09%)</title><rect x="81.4175%" y="293" width="0.0864%" height="15" fill="rgb(238,81,41)" fg:x="942" fg:w="1"/><text x="81.6675%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="81.4175%" y="277" width="0.0864%" height="15" fill="rgb(210,199,37)" fg:x="942" fg:w="1"/><text x="81.6675%" y="287.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="81.4175%" y="261" width="0.0864%" height="15" fill="rgb(244,192,49)" fg:x="942" fg:w="1"/><text x="81.6675%" y="271.50"></text></g><g><title>cfree (4 samples, 0.35%)</title><rect x="81.5903%" y="309" width="0.3457%" height="15" fill="rgb(226,211,11)" fg:x="944" fg:w="4"/><text x="81.8403%" y="319.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 0.26%)</title><rect x="81.9360%" y="309" width="0.2593%" height="15" fill="rgb(236,162,54)" fg:x="948" fg:w="3"/><text x="82.1860%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.09%)</title><rect x="82.1089%" y="293" width="0.0864%" height="15" fill="rgb(220,229,9)" fg:x="950" fg:w="1"/><text x="82.3589%" y="303.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (2 samples, 0.17%)</title><rect x="82.1953%" y="293" width="0.1729%" height="15" fill="rgb(250,87,22)" fg:x="951" fg:w="2"/><text x="82.4453%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (3 samples, 0.26%)</title><rect x="82.1953%" y="309" width="0.2593%" height="15" fill="rgb(239,43,17)" fg:x="951" fg:w="3"/><text x="82.4453%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (1 samples, 0.09%)</title><rect x="82.3682%" y="293" width="0.0864%" height="15" fill="rgb(231,177,25)" fg:x="953" fg:w="1"/><text x="82.6182%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (16 samples, 1.38%)</title><rect x="81.5039%" y="325" width="1.3829%" height="15" fill="rgb(219,179,1)" fg:x="943" fg:w="16"/><text x="81.7539%" y="335.50"></text></g><g><title>nemscraper::process::utils::clean_str (5 samples, 0.43%)</title><rect x="82.4546%" y="309" width="0.4322%" height="15" fill="rgb(238,219,53)" fg:x="954" fg:w="5"/><text x="82.7046%" y="319.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="82.8003%" y="293" width="0.0864%" height="15" fill="rgb(232,167,36)" fg:x="958" fg:w="1"/><text x="83.0503%" y="303.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.09%)</title><rect x="82.8868%" y="245" width="0.0864%" height="15" fill="rgb(244,19,51)" fg:x="959" fg:w="1"/><text x="83.1368%" y="255.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.09%)</title><rect x="82.8868%" y="229" width="0.0864%" height="15" fill="rgb(224,6,22)" fg:x="959" fg:w="1"/><text x="83.1368%" y="239.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="82.8868%" y="213" width="0.0864%" height="15" fill="rgb(224,145,5)" fg:x="959" fg:w="1"/><text x="83.1368%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (3 samples, 0.26%)</title><rect x="82.8868%" y="277" width="0.2593%" height="15" fill="rgb(234,130,49)" fg:x="959" fg:w="3"/><text x="83.1368%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (3 samples, 0.26%)</title><rect x="82.8868%" y="261" width="0.2593%" height="15" fill="rgb(254,6,2)" fg:x="959" fg:w="3"/><text x="83.1368%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.17%)</title><rect x="82.9732%" y="245" width="0.1729%" height="15" fill="rgb(208,96,46)" fg:x="960" fg:w="2"/><text x="83.2232%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.17%)</title><rect x="82.9732%" y="229" width="0.1729%" height="15" fill="rgb(239,3,39)" fg:x="960" fg:w="2"/><text x="83.2232%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.17%)</title><rect x="82.9732%" y="213" width="0.1729%" height="15" fill="rgb(233,210,1)" fg:x="960" fg:w="2"/><text x="83.2232%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (2 samples, 0.17%)</title><rect x="82.9732%" y="197" width="0.1729%" height="15" fill="rgb(244,137,37)" fg:x="960" fg:w="2"/><text x="83.2232%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.09%)</title><rect x="83.0596%" y="181" width="0.0864%" height="15" fill="rgb(240,136,2)" fg:x="961" fg:w="1"/><text x="83.3096%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (3 samples, 0.26%)</title><rect x="83.3189%" y="261" width="0.2593%" height="15" fill="rgb(239,18,37)" fg:x="964" fg:w="3"/><text x="83.5689%" y="271.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="83.4918%" y="245" width="0.0864%" height="15" fill="rgb(218,185,22)" fg:x="966" fg:w="1"/><text x="83.7418%" y="255.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.09%)</title><rect x="83.4918%" y="229" width="0.0864%" height="15" fill="rgb(225,218,4)" fg:x="966" fg:w="1"/><text x="83.7418%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.35%)</title><rect x="83.5782%" y="261" width="0.3457%" height="15" fill="rgb(230,182,32)" fg:x="967" fg:w="4"/><text x="83.8282%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (4 samples, 0.35%)</title><rect x="83.5782%" y="245" width="0.3457%" height="15" fill="rgb(242,56,43)" fg:x="967" fg:w="4"/><text x="83.8282%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.35%)</title><rect x="83.5782%" y="229" width="0.3457%" height="15" fill="rgb(233,99,24)" fg:x="967" fg:w="4"/><text x="83.8282%" y="239.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="83.9239%" y="229" width="0.0864%" height="15" fill="rgb(234,209,42)" fg:x="971" fg:w="1"/><text x="84.1739%" y="239.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (6 samples, 0.52%)</title><rect x="84.0104%" y="213" width="0.5186%" height="15" fill="rgb(227,7,12)" fg:x="972" fg:w="6"/><text x="84.2604%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.35%)</title><rect x="84.1832%" y="197" width="0.3457%" height="15" fill="rgb(245,203,43)" fg:x="974" fg:w="4"/><text x="84.4332%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="84.5290%" y="213" width="0.0864%" height="15" fill="rgb(238,205,33)" fg:x="978" fg:w="1"/><text x="84.7790%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (9 samples, 0.78%)</title><rect x="83.9239%" y="261" width="0.7779%" height="15" fill="rgb(231,56,7)" fg:x="971" fg:w="9"/><text x="84.1739%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (9 samples, 0.78%)</title><rect x="83.9239%" y="245" width="0.7779%" height="15" fill="rgb(244,186,29)" fg:x="971" fg:w="9"/><text x="84.1739%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (8 samples, 0.69%)</title><rect x="84.0104%" y="229" width="0.6914%" height="15" fill="rgb(234,111,31)" fg:x="972" fg:w="8"/><text x="84.2604%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="84.6154%" y="213" width="0.0864%" height="15" fill="rgb(241,149,10)" fg:x="979" fg:w="1"/><text x="84.8654%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 0.43%)</title><rect x="84.7882%" y="229" width="0.4322%" height="15" fill="rgb(249,206,44)" fg:x="981" fg:w="5"/><text x="85.0382%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.35%)</title><rect x="84.8747%" y="213" width="0.3457%" height="15" fill="rgb(251,153,30)" fg:x="982" fg:w="4"/><text x="85.1247%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (61 samples, 5.27%)</title><rect x="80.0346%" y="341" width="5.2723%" height="15" fill="rgb(239,152,38)" fg:x="926" fg:w="61"/><text x="80.2846%" y="351.50">nemscr..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (28 samples, 2.42%)</title><rect x="82.8868%" y="325" width="2.4201%" height="15" fill="rgb(249,139,47)" fg:x="959" fg:w="28"/><text x="83.1368%" y="335.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (28 samples, 2.42%)</title><rect x="82.8868%" y="309" width="2.4201%" height="15" fill="rgb(244,64,35)" fg:x="959" fg:w="28"/><text x="83.1368%" y="319.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (28 samples, 2.42%)</title><rect x="82.8868%" y="293" width="2.4201%" height="15" fill="rgb(216,46,15)" fg:x="959" fg:w="28"/><text x="83.1368%" y="303.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (25 samples, 2.16%)</title><rect x="83.1461%" y="277" width="2.1608%" height="15" fill="rgb(250,74,19)" fg:x="962" fg:w="25"/><text x="83.3961%" y="287.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (7 samples, 0.61%)</title><rect x="84.7018%" y="261" width="0.6050%" height="15" fill="rgb(249,42,33)" fg:x="980" fg:w="7"/><text x="84.9518%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.61%)</title><rect x="84.7018%" y="245" width="0.6050%" height="15" fill="rgb(242,149,17)" fg:x="980" fg:w="7"/><text x="84.9518%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="85.2204%" y="229" width="0.0864%" height="15" fill="rgb(244,29,21)" fg:x="986" fg:w="1"/><text x="85.4704%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="85.2204%" y="213" width="0.0864%" height="15" fill="rgb(220,130,37)" fg:x="986" fg:w="1"/><text x="85.4704%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="85.2204%" y="197" width="0.0864%" height="15" fill="rgb(211,67,2)" fg:x="986" fg:w="1"/><text x="85.4704%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="85.2204%" y="181" width="0.0864%" height="15" fill="rgb(235,68,52)" fg:x="986" fg:w="1"/><text x="85.4704%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="85.2204%" y="165" width="0.0864%" height="15" fill="rgb(246,142,3)" fg:x="986" fg:w="1"/><text x="85.4704%" y="175.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (65 samples, 5.62%)</title><rect x="79.7753%" y="373" width="5.6180%" height="15" fill="rgb(241,25,7)" fg:x="923" fg:w="65"/><text x="80.0253%" y="383.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (65 samples, 5.62%)</title><rect x="79.7753%" y="357" width="5.6180%" height="15" fill="rgb(242,119,39)" fg:x="923" fg:w="65"/><text x="80.0253%" y="367.50">nemscra..</text></g><g><title>std::io::append_to_string (1 samples, 0.09%)</title><rect x="85.3068%" y="341" width="0.0864%" height="15" fill="rgb(241,98,45)" fg:x="987" fg:w="1"/><text x="85.5568%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="85.3068%" y="325" width="0.0864%" height="15" fill="rgb(254,28,30)" fg:x="987" fg:w="1"/><text x="85.5568%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.09%)</title><rect x="86.0847%" y="309" width="0.0864%" height="15" fill="rgb(241,142,54)" fg:x="996" fg:w="1"/><text x="86.3347%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (8 samples, 0.69%)</title><rect x="86.0847%" y="341" width="0.6914%" height="15" fill="rgb(222,85,15)" fg:x="996" fg:w="8"/><text x="86.3347%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (8 samples, 0.69%)</title><rect x="86.0847%" y="325" width="0.6914%" height="15" fill="rgb(210,85,47)" fg:x="996" fg:w="8"/><text x="86.3347%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (7 samples, 0.61%)</title><rect x="86.1711%" y="309" width="0.6050%" height="15" fill="rgb(224,206,25)" fg:x="997" fg:w="7"/><text x="86.4211%" y="319.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.09%)</title><rect x="86.6897%" y="293" width="0.0864%" height="15" fill="rgb(243,201,19)" fg:x="1003" fg:w="1"/><text x="86.9397%" y="303.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (66 samples, 5.70%)</title><rect x="86.9490%" y="277" width="5.7044%" height="15" fill="rgb(236,59,4)" fg:x="1006" fg:w="66"/><text x="87.1990%" y="287.50">zlib_rs..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (69 samples, 5.96%)</title><rect x="86.7761%" y="325" width="5.9637%" height="15" fill="rgb(254,179,45)" fg:x="1004" fg:w="69"/><text x="87.0261%" y="335.50">&lt;flate2:..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (69 samples, 5.96%)</title><rect x="86.7761%" y="309" width="5.9637%" height="15" fill="rgb(226,14,10)" fg:x="1004" fg:w="69"/><text x="87.0261%" y="319.50">&lt;flate2:..</text></g><g><title>zlib_rs::inflate::inflate (69 samples, 5.96%)</title><rect x="86.7761%" y="293" width="5.9637%" height="15" fill="rgb(244,27,41)" fg:x="1004" fg:w="69"/><text x="87.0261%" y="303.50">zlib_rs:..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.09%)</title><rect x="92.6534%" y="277" width="0.0864%" height="15" fill="rgb(235,35,32)" fg:x="1072" fg:w="1"/><text x="92.9034%" y="287.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (80 samples, 6.91%)</title><rect x="86.0847%" y="357" width="6.9144%" height="15" fill="rgb(218,68,31)" fg:x="996" fg:w="80"/><text x="86.3347%" y="367.50">&lt;zip::rea..</text></g><g><title>flate2::zio::read (72 samples, 6.22%)</title><rect x="86.7761%" y="341" width="6.2230%" height="15" fill="rgb(207,120,37)" fg:x="1004" fg:w="72"/><text x="87.0261%" y="351.50">flate2::..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.26%)</title><rect x="92.7398%" y="325" width="0.2593%" height="15" fill="rgb(227,98,0)" fg:x="1073" fg:w="3"/><text x="92.9898%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (13 samples, 1.12%)</title><rect x="92.9991%" y="357" width="1.1236%" height="15" fill="rgb(207,7,3)" fg:x="1076" fg:w="13"/><text x="93.2491%" y="367.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,098 samples, 94.90%)</title><rect x="0.0864%" y="405" width="94.9006%" height="15" fill="rgb(206,98,19)" fg:x="1" fg:w="1098"/><text x="0.3364%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (1,076 samples, 93.00%)</title><rect x="1.9879%" y="389" width="92.9991%" height="15" fill="rgb(217,5,26)" fg:x="23" fg:w="1076"/><text x="2.2379%" y="399.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (111 samples, 9.59%)</title><rect x="85.3933%" y="373" width="9.5938%" height="15" fill="rgb(235,190,38)" fg:x="988" fg:w="111"/><text x="85.6433%" y="383.50">std::io::appen..</text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.86%)</title><rect x="94.1227%" y="357" width="0.8643%" height="15" fill="rgb(247,86,24)" fg:x="1089" fg:w="10"/><text x="94.3727%" y="367.50"></text></g><g><title>bench_zip_to_pa (1,106 samples, 95.59%)</title><rect x="0.0000%" y="565" width="95.5920%" height="15" fill="rgb(205,101,16)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,106 samples, 95.59%)</title><rect x="0.0000%" y="549" width="95.5920%" height="15" fill="rgb(246,168,33)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,106 samples, 95.59%)</title><rect x="0.0000%" y="533" width="95.5920%" height="15" fill="rgb(231,114,1)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,106 samples, 95.59%)</title><rect x="0.0000%" y="517" width="95.5920%" height="15" fill="rgb(207,184,53)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,106 samples, 95.59%)</title><rect x="0.0000%" y="501" width="95.5920%" height="15" fill="rgb(224,95,51)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,106 samples, 95.59%)</title><rect x="0.0000%" y="485" width="95.5920%" height="15" fill="rgb(212,188,45)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,106 samples, 95.59%)</title><rect x="0.0000%" y="469" width="95.5920%" height="15" fill="rgb(223,154,38)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,106 samples, 95.59%)</title><rect x="0.0000%" y="453" width="95.5920%" height="15" fill="rgb(251,22,52)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,106 samples, 95.59%)</title><rect x="0.0000%" y="437" width="95.5920%" height="15" fill="rgb(229,209,22)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,106 samples, 95.59%)</title><rect x="0.0000%" y="421" width="95.5920%" height="15" fill="rgb(234,138,34)" fg:x="0" fg:w="1106"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (7 samples, 0.61%)</title><rect x="94.9870%" y="405" width="0.6050%" height="15" fill="rgb(212,95,11)" fg:x="1099" fg:w="7"/><text x="95.2370%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (7 samples, 0.61%)</title><rect x="94.9870%" y="389" width="0.6050%" height="15" fill="rgb(240,179,47)" fg:x="1099" fg:w="7"/><text x="95.2370%" y="399.50"></text></g><g><title>syscall (4 samples, 0.35%)</title><rect x="95.2463%" y="373" width="0.3457%" height="15" fill="rgb(240,163,11)" fg:x="1102" fg:w="4"/><text x="95.4963%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.17%)</title><rect x="95.6785%" y="373" width="0.1729%" height="15" fill="rgb(236,37,12)" fg:x="1107" fg:w="2"/><text x="95.9285%" y="383.50"></text></g><g><title>clock_gettime (2 samples, 0.17%)</title><rect x="95.6785%" y="357" width="0.1729%" height="15" fill="rgb(232,164,16)" fg:x="1107" fg:w="2"/><text x="95.9285%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 0.43%)</title><rect x="95.8513%" y="341" width="0.4322%" height="15" fill="rgb(244,205,15)" fg:x="1109" fg:w="5"/><text x="96.1013%" y="351.50"></text></g><g><title>syscall (4 samples, 0.35%)</title><rect x="95.9378%" y="325" width="0.3457%" height="15" fill="rgb(223,117,47)" fg:x="1110" fg:w="4"/><text x="96.1878%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (9 samples, 0.78%)</title><rect x="95.8513%" y="373" width="0.7779%" height="15" fill="rgb(244,107,35)" fg:x="1109" fg:w="9"/><text x="96.1013%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (9 samples, 0.78%)</title><rect x="95.8513%" y="357" width="0.7779%" height="15" fill="rgb(205,140,8)" fg:x="1109" fg:w="9"/><text x="96.1013%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (4 samples, 0.35%)</title><rect x="96.2835%" y="341" width="0.3457%" height="15" fill="rgb(228,84,46)" fg:x="1114" fg:w="4"/><text x="96.5335%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (4 samples, 0.35%)</title><rect x="96.2835%" y="325" width="0.3457%" height="15" fill="rgb(254,188,9)" fg:x="1114" fg:w="4"/><text x="96.5335%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.35%)</title><rect x="96.2835%" y="309" width="0.3457%" height="15" fill="rgb(206,112,54)" fg:x="1114" fg:w="4"/><text x="96.5335%" y="319.50"></text></g><g><title>epoll_wait (3 samples, 0.26%)</title><rect x="96.3699%" y="293" width="0.2593%" height="15" fill="rgb(216,84,49)" fg:x="1115" fg:w="3"/><text x="96.6199%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.35%)</title><rect x="96.7156%" y="357" width="0.3457%" height="15" fill="rgb(214,194,35)" fg:x="1119" fg:w="4"/><text x="96.9656%" y="367.50"></text></g><g><title>syscall (3 samples, 0.26%)</title><rect x="96.8021%" y="341" width="0.2593%" height="15" fill="rgb(249,28,3)" fg:x="1120" fg:w="3"/><text x="97.0521%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (9 samples, 0.78%)</title><rect x="97.0614%" y="357" width="0.7779%" height="15" fill="rgb(222,56,52)" fg:x="1123" fg:w="9"/><text x="97.3114%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (9 samples, 0.78%)</title><rect x="97.0614%" y="341" width="0.7779%" height="15" fill="rgb(245,217,50)" fg:x="1123" fg:w="9"/><text x="97.3114%" y="351.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (9 samples, 0.78%)</title><rect x="97.0614%" y="325" width="0.7779%" height="15" fill="rgb(213,201,24)" fg:x="1123" fg:w="9"/><text x="97.3114%" y="335.50"></text></g><g><title>write (8 samples, 0.69%)</title><rect x="97.1478%" y="309" width="0.6914%" height="15" fill="rgb(248,116,28)" fg:x="1124" fg:w="8"/><text x="97.3978%" y="319.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (15 samples, 1.30%)</title><rect x="97.8392%" y="277" width="1.2965%" height="15" fill="rgb(219,72,43)" fg:x="1132" fg:w="15"/><text x="98.0892%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (15 samples, 1.30%)</title><rect x="97.8392%" y="261" width="1.2965%" height="15" fill="rgb(209,138,14)" fg:x="1132" fg:w="15"/><text x="98.0892%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (15 samples, 1.30%)</title><rect x="97.8392%" y="245" width="1.2965%" height="15" fill="rgb(222,18,33)" fg:x="1132" fg:w="15"/><text x="98.0892%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (15 samples, 1.30%)</title><rect x="97.8392%" y="229" width="1.2965%" height="15" fill="rgb(213,199,7)" fg:x="1132" fg:w="15"/><text x="98.0892%" y="239.50"></text></g><g><title>syscall (15 samples, 1.30%)</title><rect x="97.8392%" y="213" width="1.2965%" height="15" fill="rgb(250,110,10)" fg:x="1132" fg:w="15"/><text x="98.0892%" y="223.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="99.1357%" y="181" width="0.0864%" height="15" fill="rgb(248,123,6)" fg:x="1147" fg:w="1"/><text x="99.3857%" y="191.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.09%)</title><rect x="99.2221%" y="165" width="0.0864%" height="15" fill="rgb(206,91,31)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (1 samples, 0.09%)</title><rect x="99.2221%" y="149" width="0.0864%" height="15" fill="rgb(211,154,13)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.09%)</title><rect x="99.2221%" y="133" width="0.0864%" height="15" fill="rgb(225,148,7)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.09%)</title><rect x="99.2221%" y="117" width="0.0864%" height="15" fill="rgb(220,160,43)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.09%)</title><rect x="99.2221%" y="101" width="0.0864%" height="15" fill="rgb(213,52,39)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.09%)</title><rect x="99.2221%" y="85" width="0.0864%" height="15" fill="rgb(243,137,7)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.09%)</title><rect x="99.2221%" y="69" width="0.0864%" height="15" fill="rgb(230,79,13)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.09%)</title><rect x="99.2221%" y="53" width="0.0864%" height="15" fill="rgb(247,105,23)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.09%)</title><rect x="99.2221%" y="37" width="0.0864%" height="15" fill="rgb(223,179,41)" fg:x="1148" fg:w="1"/><text x="99.4721%" y="47.50"></text></g><g><title>all (1,157 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(218,9,34)" fg:x="0" fg:w="1157"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (51 samples, 4.41%)</title><rect x="95.5920%" y="565" width="4.4080%" height="15" fill="rgb(222,106,8)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="575.50">tokio..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (51 samples, 4.41%)</title><rect x="95.5920%" y="549" width="4.4080%" height="15" fill="rgb(211,220,0)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="559.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (51 samples, 4.41%)</title><rect x="95.5920%" y="533" width="4.4080%" height="15" fill="rgb(229,52,16)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="543.50">core:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (51 samples, 4.41%)</title><rect x="95.5920%" y="517" width="4.4080%" height="15" fill="rgb(212,155,18)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="527.50">std::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (51 samples, 4.41%)</title><rect x="95.5920%" y="501" width="4.4080%" height="15" fill="rgb(242,21,14)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="511.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (51 samples, 4.41%)</title><rect x="95.5920%" y="485" width="4.4080%" height="15" fill="rgb(222,19,48)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="495.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (51 samples, 4.41%)</title><rect x="95.5920%" y="469" width="4.4080%" height="15" fill="rgb(232,45,27)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="479.50">tokio..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (51 samples, 4.41%)</title><rect x="95.5920%" y="453" width="4.4080%" height="15" fill="rgb(249,103,42)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="463.50">&lt;toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (51 samples, 4.41%)</title><rect x="95.5920%" y="437" width="4.4080%" height="15" fill="rgb(246,81,33)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="447.50">tokio..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (51 samples, 4.41%)</title><rect x="95.5920%" y="421" width="4.4080%" height="15" fill="rgb(252,33,42)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="431.50">tokio..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (51 samples, 4.41%)</title><rect x="95.5920%" y="405" width="4.4080%" height="15" fill="rgb(209,212,41)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="415.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (51 samples, 4.41%)</title><rect x="95.5920%" y="389" width="4.4080%" height="15" fill="rgb(207,154,6)" fg:x="1106" fg:w="51"/><text x="95.8420%" y="399.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (39 samples, 3.37%)</title><rect x="96.6292%" y="373" width="3.3708%" height="15" fill="rgb(223,64,47)" fg:x="1118" fg:w="39"/><text x="96.8792%" y="383.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (25 samples, 2.16%)</title><rect x="97.8392%" y="357" width="2.1608%" height="15" fill="rgb(211,161,38)" fg:x="1132" fg:w="25"/><text x="98.0892%" y="367.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (25 samples, 2.16%)</title><rect x="97.8392%" y="341" width="2.1608%" height="15" fill="rgb(219,138,40)" fg:x="1132" fg:w="25"/><text x="98.0892%" y="351.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (25 samples, 2.16%)</title><rect x="97.8392%" y="325" width="2.1608%" height="15" fill="rgb(241,228,46)" fg:x="1132" fg:w="25"/><text x="98.0892%" y="335.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (25 samples, 2.16%)</title><rect x="97.8392%" y="309" width="2.1608%" height="15" fill="rgb(223,209,38)" fg:x="1132" fg:w="25"/><text x="98.0892%" y="319.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (25 samples, 2.16%)</title><rect x="97.8392%" y="293" width="2.1608%" height="15" fill="rgb(236,164,45)" fg:x="1132" fg:w="25"/><text x="98.0892%" y="303.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (10 samples, 0.86%)</title><rect x="99.1357%" y="277" width="0.8643%" height="15" fill="rgb(231,15,5)" fg:x="1147" fg:w="10"/><text x="99.3857%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (10 samples, 0.86%)</title><rect x="99.1357%" y="261" width="0.8643%" height="15" fill="rgb(252,35,15)" fg:x="1147" fg:w="10"/><text x="99.3857%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (10 samples, 0.86%)</title><rect x="99.1357%" y="245" width="0.8643%" height="15" fill="rgb(248,181,18)" fg:x="1147" fg:w="10"/><text x="99.3857%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (10 samples, 0.86%)</title><rect x="99.1357%" y="229" width="0.8643%" height="15" fill="rgb(233,39,42)" fg:x="1147" fg:w="10"/><text x="99.3857%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.86%)</title><rect x="99.1357%" y="213" width="0.8643%" height="15" fill="rgb(238,110,33)" fg:x="1147" fg:w="10"/><text x="99.3857%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.86%)</title><rect x="99.1357%" y="197" width="0.8643%" height="15" fill="rgb(233,195,10)" fg:x="1147" fg:w="10"/><text x="99.3857%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (9 samples, 0.78%)</title><rect x="99.2221%" y="181" width="0.7779%" height="15" fill="rgb(254,105,3)" fg:x="1148" fg:w="9"/><text x="99.4721%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (8 samples, 0.69%)</title><rect x="99.3086%" y="165" width="0.6914%" height="15" fill="rgb(221,225,9)" fg:x="1149" fg:w="8"/><text x="99.5586%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (8 samples, 0.69%)</title><rect x="99.3086%" y="149" width="0.6914%" height="15" fill="rgb(224,227,45)" fg:x="1149" fg:w="8"/><text x="99.5586%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.69%)</title><rect x="99.3086%" y="133" width="0.6914%" height="15" fill="rgb(229,198,43)" fg:x="1149" fg:w="8"/><text x="99.5586%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (7 samples, 0.61%)</title><rect x="99.3950%" y="117" width="0.6050%" height="15" fill="rgb(206,209,35)" fg:x="1150" fg:w="7"/><text x="99.6450%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (7 samples, 0.61%)</title><rect x="99.3950%" y="101" width="0.6050%" height="15" fill="rgb(245,195,53)" fg:x="1150" fg:w="7"/><text x="99.6450%" y="111.50"></text></g><g><title>recv (7 samples, 0.61%)</title><rect x="99.3950%" y="85" width="0.6050%" height="15" fill="rgb(240,92,26)" fg:x="1150" fg:w="7"/><text x="99.6450%" y="95.50"></text></g></svg></svg>