<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1471"><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.41%)</title><rect x="0.5438%" y="181" width="0.4079%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="6"/><text x="0.7938%" y="191.50"></text></g><g><title>syscall (6 samples, 0.41%)</title><rect x="0.5438%" y="165" width="0.4079%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="6"/><text x="0.7938%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.82%)</title><rect x="0.4079%" y="341" width="0.8158%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="12"/><text x="0.6579%" y="351.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (12 samples, 0.82%)</title><rect x="0.4079%" y="325" width="0.8158%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="12"/><text x="0.6579%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (12 samples, 0.82%)</title><rect x="0.4079%" y="309" width="0.8158%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="12"/><text x="0.6579%" y="319.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (11 samples, 0.75%)</title><rect x="0.4759%" y="293" width="0.7478%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="11"/><text x="0.7259%" y="303.50"></text></g><g><title>hyper::body::body::Body::poll_inner (11 samples, 0.75%)</title><rect x="0.4759%" y="277" width="0.7478%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="11"/><text x="0.7259%" y="287.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (11 samples, 0.75%)</title><rect x="0.4759%" y="261" width="0.7478%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="11"/><text x="0.7259%" y="271.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (11 samples, 0.75%)</title><rect x="0.4759%" y="245" width="0.7478%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="11"/><text x="0.7259%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (11 samples, 0.75%)</title><rect x="0.4759%" y="229" width="0.7478%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="11"/><text x="0.7259%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 0.68%)</title><rect x="0.5438%" y="213" width="0.6798%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="10"/><text x="0.7938%" y="223.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 0.68%)</title><rect x="0.5438%" y="197" width="0.6798%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="10"/><text x="0.7938%" y="207.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.27%)</title><rect x="0.9517%" y="181" width="0.2719%" height="15" fill="rgb(216,20,37)" fg:x="14" fg:w="4"/><text x="1.2017%" y="191.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.27%)</title><rect x="0.9517%" y="165" width="0.2719%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="4"/><text x="1.2017%" y="175.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (4 samples, 0.27%)</title><rect x="0.9517%" y="149" width="0.2719%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="4"/><text x="1.2017%" y="159.50"></text></g><g><title>write (4 samples, 0.27%)</title><rect x="0.9517%" y="133" width="0.2719%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="4"/><text x="1.2017%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (2 samples, 0.14%)</title><rect x="1.2237%" y="341" width="0.1360%" height="15" fill="rgb(225,20,46)" fg:x="18" fg:w="2"/><text x="1.4737%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.07%)</title><rect x="1.2916%" y="325" width="0.0680%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="1.5416%" y="335.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.07%)</title><rect x="1.2916%" y="309" width="0.0680%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="1"/><text x="1.5416%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.07%)</title><rect x="1.4276%" y="325" width="0.0680%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="1"/><text x="1.6776%" y="335.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.07%)</title><rect x="1.4956%" y="293" width="0.0680%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="1"/><text x="1.7456%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.07%)</title><rect x="1.4956%" y="277" width="0.0680%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="1"/><text x="1.7456%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.07%)</title><rect x="1.4956%" y="261" width="0.0680%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="1"/><text x="1.7456%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.07%)</title><rect x="1.4956%" y="245" width="0.0680%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="1"/><text x="1.7456%" y="255.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="1.5636%" y="293" width="0.0680%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="1"/><text x="1.8136%" y="303.50"></text></g><g><title>nemscraper::process2::csv_processor::parse_csv_fields (2 samples, 0.14%)</title><rect x="1.6315%" y="293" width="0.1360%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="2"/><text x="1.8815%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.07%)</title><rect x="1.7675%" y="293" width="0.0680%" height="15" fill="rgb(225,111,53)" fg:x="26" fg:w="1"/><text x="2.0175%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (1 samples, 0.07%)</title><rect x="1.8355%" y="293" width="0.0680%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="1"/><text x="2.0855%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.07%)</title><rect x="1.8355%" y="277" width="0.0680%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="1"/><text x="2.0855%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.07%)</title><rect x="1.8355%" y="261" width="0.0680%" height="15" fill="rgb(232,36,49)" fg:x="27" fg:w="1"/><text x="2.0855%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.07%)</title><rect x="1.8355%" y="245" width="0.0680%" height="15" fill="rgb(209,103,24)" fg:x="27" fg:w="1"/><text x="2.0855%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.07%)</title><rect x="1.8355%" y="229" width="0.0680%" height="15" fill="rgb(229,88,8)" fg:x="27" fg:w="1"/><text x="2.0855%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.07%)</title><rect x="1.8355%" y="213" width="0.0680%" height="15" fill="rgb(213,181,19)" fg:x="27" fg:w="1"/><text x="2.0855%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.07%)</title><rect x="1.8355%" y="197" width="0.0680%" height="15" fill="rgb(254,191,54)" fg:x="27" fg:w="1"/><text x="2.0855%" y="207.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.07%)</title><rect x="1.8355%" y="181" width="0.0680%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="1"/><text x="2.0855%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.07%)</title><rect x="1.8355%" y="165" width="0.0680%" height="15" fill="rgb(233,36,39)" fg:x="27" fg:w="1"/><text x="2.0855%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.07%)</title><rect x="1.8355%" y="149" width="0.0680%" height="15" fill="rgb(226,3,54)" fg:x="27" fg:w="1"/><text x="2.0855%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.07%)</title><rect x="1.8355%" y="133" width="0.0680%" height="15" fill="rgb(245,192,40)" fg:x="27" fg:w="1"/><text x="2.0855%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.07%)</title><rect x="1.8355%" y="117" width="0.0680%" height="15" fill="rgb(238,167,29)" fg:x="27" fg:w="1"/><text x="2.0855%" y="127.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (7 samples, 0.48%)</title><rect x="1.4956%" y="325" width="0.4759%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="7"/><text x="1.7456%" y="335.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (7 samples, 0.48%)</title><rect x="1.4956%" y="309" width="0.4759%" height="15" fill="rgb(231,60,39)" fg:x="22" fg:w="7"/><text x="1.7456%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.07%)</title><rect x="1.9035%" y="293" width="0.0680%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="1"/><text x="2.1535%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.07%)</title><rect x="1.9035%" y="277" width="0.0680%" height="15" fill="rgb(235,93,37)" fg:x="28" fg:w="1"/><text x="2.1535%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.07%)</title><rect x="1.9035%" y="261" width="0.0680%" height="15" fill="rgb(213,116,39)" fg:x="28" fg:w="1"/><text x="2.1535%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.07%)</title><rect x="1.9035%" y="245" width="0.0680%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="1"/><text x="2.1535%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.07%)</title><rect x="1.9035%" y="229" width="0.0680%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="1"/><text x="2.1535%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.07%)</title><rect x="1.9035%" y="213" width="0.0680%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="1"/><text x="2.1535%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.07%)</title><rect x="2.1754%" y="309" width="0.0680%" height="15" fill="rgb(250,191,14)" fg:x="32" fg:w="1"/><text x="2.4254%" y="319.50"></text></g><g><title>malloc (17 samples, 1.16%)</title><rect x="2.2434%" y="309" width="1.1557%" height="15" fill="rgb(239,60,40)" fg:x="33" fg:w="17"/><text x="2.4934%" y="319.50"></text></g><g><title>alloc::str::join_generic_copy (27 samples, 1.84%)</title><rect x="4.4188%" y="293" width="1.8355%" height="15" fill="rgb(206,27,48)" fg:x="65" fg:w="27"/><text x="4.6688%" y="303.50">a..</text></g><g><title>malloc (10 samples, 0.68%)</title><rect x="5.5744%" y="277" width="0.6798%" height="15" fill="rgb(225,35,8)" fg:x="82" fg:w="10"/><text x="5.8244%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (18 samples, 1.22%)</title><rect x="7.4779%" y="245" width="1.2237%" height="15" fill="rgb(250,213,24)" fg:x="110" fg:w="18"/><text x="7.7279%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 1.22%)</title><rect x="7.4779%" y="229" width="1.2237%" height="15" fill="rgb(247,123,22)" fg:x="110" fg:w="18"/><text x="7.7279%" y="239.50"></text></g><g><title>__libc_realloc (18 samples, 1.22%)</title><rect x="7.4779%" y="213" width="1.2237%" height="15" fill="rgb(231,138,38)" fg:x="110" fg:w="18"/><text x="7.7279%" y="223.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (87 samples, 5.91%)</title><rect x="6.7981%" y="277" width="5.9143%" height="15" fill="rgb(231,145,46)" fg:x="100" fg:w="87"/><text x="7.0481%" y="287.50">arrow_cs..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (87 samples, 5.91%)</title><rect x="6.7981%" y="261" width="5.9143%" height="15" fill="rgb(251,118,11)" fg:x="100" fg:w="87"/><text x="7.0481%" y="271.50">arrow_cs..</text></g><g><title>csv_core::reader::Reader::read_record (59 samples, 4.01%)</title><rect x="8.7016%" y="245" width="4.0109%" height="15" fill="rgb(217,147,25)" fg:x="128" fg:w="59"/><text x="8.9516%" y="255.50">csv_..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (4 samples, 0.27%)</title><rect x="12.7124%" y="261" width="0.2719%" height="15" fill="rgb(247,81,37)" fg:x="187" fg:w="4"/><text x="12.9624%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.20%)</title><rect x="12.7804%" y="245" width="0.2039%" height="15" fill="rgb(209,12,38)" fg:x="188" fg:w="3"/><text x="13.0304%" y="255.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (144 samples, 9.79%)</title><rect x="6.2542%" y="293" width="9.7893%" height="15" fill="rgb(227,1,9)" fg:x="92" fg:w="144"/><text x="6.5042%" y="303.50">arrow_csv::rea..</text></g><g><title>arrow_csv::reader::Decoder::flush (49 samples, 3.33%)</title><rect x="12.7124%" y="277" width="3.3311%" height="15" fill="rgb(248,47,43)" fg:x="187" fg:w="49"/><text x="12.9624%" y="287.50">arr..</text></g><g><title>core::iter::adapters::try_process (45 samples, 3.06%)</title><rect x="12.9844%" y="261" width="3.0591%" height="15" fill="rgb(221,10,30)" fg:x="191" fg:w="45"/><text x="13.2344%" y="271.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 3.06%)</title><rect x="12.9844%" y="245" width="3.0591%" height="15" fill="rgb(210,229,1)" fg:x="191" fg:w="45"/><text x="13.2344%" y="255.50">&lt;al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (45 samples, 3.06%)</title><rect x="12.9844%" y="229" width="3.0591%" height="15" fill="rgb(222,148,37)" fg:x="191" fg:w="45"/><text x="13.2344%" y="239.50">&lt;co..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (45 samples, 3.06%)</title><rect x="12.9844%" y="213" width="3.0591%" height="15" fill="rgb(234,67,33)" fg:x="191" fg:w="45"/><text x="13.2344%" y="223.50">&lt;ar..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (30 samples, 2.04%)</title><rect x="14.0041%" y="197" width="2.0394%" height="15" fill="rgb(247,98,35)" fg:x="206" fg:w="30"/><text x="14.2541%" y="207.50">a..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (6 samples, 0.41%)</title><rect x="15.6356%" y="181" width="0.4079%" height="15" fill="rgb(247,138,52)" fg:x="230" fg:w="6"/><text x="15.8856%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (6 samples, 0.41%)</title><rect x="15.6356%" y="165" width="0.4079%" height="15" fill="rgb(213,79,30)" fg:x="230" fg:w="6"/><text x="15.8856%" y="175.50"></text></g><g><title>cfree (139 samples, 9.45%)</title><rect x="16.0435%" y="293" width="9.4494%" height="15" fill="rgb(246,177,23)" fg:x="236" fg:w="139"/><text x="16.2935%" y="303.50">cfree</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.07%)</title><rect x="25.4929%" y="293" width="0.0680%" height="15" fill="rgb(230,62,27)" fg:x="375" fg:w="1"/><text x="25.7429%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (1 samples, 0.07%)</title><rect x="25.5608%" y="293" width="0.0680%" height="15" fill="rgb(216,154,8)" fg:x="376" fg:w="1"/><text x="25.8108%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="25.5608%" y="277" width="0.0680%" height="15" fill="rgb(244,35,45)" fg:x="376" fg:w="1"/><text x="25.8108%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="25.5608%" y="261" width="0.0680%" height="15" fill="rgb(251,115,12)" fg:x="376" fg:w="1"/><text x="25.8108%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="25.5608%" y="245" width="0.0680%" height="15" fill="rgb(240,54,50)" fg:x="376" fg:w="1"/><text x="25.8108%" y="255.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="25.5608%" y="229" width="0.0680%" height="15" fill="rgb(233,84,52)" fg:x="376" fg:w="1"/><text x="25.8108%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (5 samples, 0.34%)</title><rect x="25.6288%" y="293" width="0.3399%" height="15" fill="rgb(207,117,47)" fg:x="377" fg:w="5"/><text x="25.8788%" y="303.50"></text></g><g><title>cfree (5 samples, 0.34%)</title><rect x="25.6288%" y="277" width="0.3399%" height="15" fill="rgb(249,43,39)" fg:x="377" fg:w="5"/><text x="25.8788%" y="287.50"></text></g><g><title>__default_morecore (5 samples, 0.34%)</title><rect x="25.6288%" y="261" width="0.3399%" height="15" fill="rgb(209,38,44)" fg:x="377" fg:w="5"/><text x="25.8788%" y="271.50"></text></g><g><title>__sbrk (5 samples, 0.34%)</title><rect x="25.6288%" y="245" width="0.3399%" height="15" fill="rgb(236,212,23)" fg:x="377" fg:w="5"/><text x="25.8788%" y="255.50"></text></g><g><title>brk (5 samples, 0.34%)</title><rect x="25.6288%" y="229" width="0.3399%" height="15" fill="rgb(242,79,21)" fg:x="377" fg:w="5"/><text x="25.8788%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (7 samples, 0.48%)</title><rect x="35.0102%" y="277" width="0.4759%" height="15" fill="rgb(211,96,35)" fg:x="515" fg:w="7"/><text x="35.2602%" y="287.50"></text></g><g><title>__rustc::__rdl_dealloc (2 samples, 0.14%)</title><rect x="35.4861%" y="277" width="0.1360%" height="15" fill="rgb(253,215,40)" fg:x="522" fg:w="2"/><text x="35.7361%" y="287.50"></text></g><g><title>__libc_realloc (53 samples, 3.60%)</title><rect x="36.5058%" y="245" width="3.6030%" height="15" fill="rgb(211,81,21)" fg:x="537" fg:w="53"/><text x="36.7558%" y="255.50">__li..</text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.34%)</title><rect x="40.1088%" y="245" width="0.3399%" height="15" fill="rgb(208,190,38)" fg:x="590" fg:w="5"/><text x="40.3588%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (96 samples, 6.53%)</title><rect x="35.6220%" y="277" width="6.5262%" height="15" fill="rgb(235,213,38)" fg:x="524" fg:w="96"/><text x="35.8720%" y="287.50">alloc::ra..</text></g><g><title>alloc::raw_vec::finish_grow (92 samples, 6.25%)</title><rect x="35.8939%" y="261" width="6.2542%" height="15" fill="rgb(237,122,38)" fg:x="528" fg:w="92"/><text x="36.1439%" y="271.50">alloc::r..</text></g><g><title>malloc (25 samples, 1.70%)</title><rect x="40.4487%" y="245" width="1.6995%" height="15" fill="rgb(244,218,35)" fg:x="595" fg:w="25"/><text x="40.6987%" y="255.50"></text></g><g><title>cfree (7 samples, 0.48%)</title><rect x="42.1482%" y="277" width="0.4759%" height="15" fill="rgb(240,68,47)" fg:x="620" fg:w="7"/><text x="42.3982%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (19 samples, 1.29%)</title><rect x="42.6241%" y="277" width="1.2916%" height="15" fill="rgb(210,16,53)" fg:x="627" fg:w="19"/><text x="42.8741%" y="287.50"></text></g><g><title>nemscraper::process2::csv_processor::parse_csv_fields (325 samples, 22.09%)</title><rect x="25.9687%" y="293" width="22.0938%" height="15" fill="rgb(235,124,12)" fg:x="382" fg:w="325"/><text x="26.2187%" y="303.50">nemscraper::process2::csv_processor..</text></g><g><title>malloc (61 samples, 4.15%)</title><rect x="43.9157%" y="277" width="4.1468%" height="15" fill="rgb(224,169,11)" fg:x="646" fg:w="61"/><text x="44.1657%" y="287.50">malloc</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (5 samples, 0.34%)</title><rect x="49.4222%" y="277" width="0.3399%" height="15" fill="rgb(250,166,2)" fg:x="727" fg:w="5"/><text x="49.6722%" y="287.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.34%)</title><rect x="49.4222%" y="261" width="0.3399%" height="15" fill="rgb(242,216,29)" fg:x="727" fg:w="5"/><text x="49.6722%" y="271.50"></text></g><g><title>mallopt (1 samples, 0.07%)</title><rect x="49.6941%" y="245" width="0.0680%" height="15" fill="rgb(230,116,27)" fg:x="731" fg:w="1"/><text x="49.9441%" y="255.50"></text></g><g><title>cfree (13 samples, 0.88%)</title><rect x="49.7621%" y="277" width="0.8838%" height="15" fill="rgb(228,99,48)" fg:x="732" fg:w="13"/><text x="50.0121%" y="287.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (40 samples, 2.72%)</title><rect x="50.6458%" y="277" width="2.7192%" height="15" fill="rgb(253,11,6)" fg:x="745" fg:w="40"/><text x="50.8958%" y="287.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (18 samples, 1.22%)</title><rect x="52.1414%" y="261" width="1.2237%" height="15" fill="rgb(247,143,39)" fg:x="767" fg:w="18"/><text x="52.3914%" y="271.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (2 samples, 0.14%)</title><rect x="54.4528%" y="261" width="0.1360%" height="15" fill="rgb(236,97,10)" fg:x="801" fg:w="2"/><text x="54.7028%" y="271.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.07%)</title><rect x="54.5887%" y="261" width="0.0680%" height="15" fill="rgb(233,208,19)" fg:x="803" fg:w="1"/><text x="54.8387%" y="271.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (3 samples, 0.20%)</title><rect x="55.1326%" y="245" width="0.2039%" height="15" fill="rgb(216,164,2)" fg:x="811" fg:w="3"/><text x="55.3826%" y="255.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (11 samples, 0.75%)</title><rect x="54.6567%" y="261" width="0.7478%" height="15" fill="rgb(220,129,5)" fg:x="804" fg:w="11"/><text x="54.9067%" y="271.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.07%)</title><rect x="55.3365%" y="245" width="0.0680%" height="15" fill="rgb(242,17,10)" fg:x="814" fg:w="1"/><text x="55.5865%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.07%)</title><rect x="55.4045%" y="261" width="0.0680%" height="15" fill="rgb(242,107,0)" fg:x="815" fg:w="1"/><text x="55.6545%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (32 samples, 2.18%)</title><rect x="53.3651%" y="277" width="2.1754%" height="15" fill="rgb(251,28,31)" fg:x="785" fg:w="32"/><text x="53.6151%" y="287.50">n..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.07%)</title><rect x="55.4725%" y="261" width="0.0680%" height="15" fill="rgb(233,223,10)" fg:x="816" fg:w="1"/><text x="55.7225%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.14%)</title><rect x="56.2203%" y="261" width="0.1360%" height="15" fill="rgb(215,21,27)" fg:x="827" fg:w="2"/><text x="56.4703%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (5 samples, 0.34%)</title><rect x="56.3562%" y="261" width="0.3399%" height="15" fill="rgb(232,23,21)" fg:x="829" fg:w="5"/><text x="56.6062%" y="271.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (140 samples, 9.52%)</title><rect x="48.0625%" y="293" width="9.5173%" height="15" fill="rgb(244,5,23)" fg:x="707" fg:w="140"/><text x="48.3125%" y="303.50">nemscraper::pr..</text></g><g><title>nemscraper::process::utils::clean_str (30 samples, 2.04%)</title><rect x="55.5404%" y="277" width="2.0394%" height="15" fill="rgb(226,81,46)" fg:x="817" fg:w="30"/><text x="55.7904%" y="287.50">n..</text></g><g><title>malloc (13 samples, 0.88%)</title><rect x="56.6961%" y="261" width="0.8838%" height="15" fill="rgb(247,70,30)" fg:x="834" fg:w="13"/><text x="56.9461%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;parquet::arrow::arrow_writer::ArrowWriter&lt;std::fs::File&gt;&gt; (1 samples, 0.07%)</title><rect x="57.5799%" y="277" width="0.0680%" height="15" fill="rgb(212,68,19)" fg:x="847" fg:w="1"/><text x="57.8299%" y="287.50"></text></g><g><title>__close (1 samples, 0.07%)</title><rect x="57.5799%" y="261" width="0.0680%" height="15" fill="rgb(240,187,13)" fg:x="847" fg:w="1"/><text x="57.8299%" y="271.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.14%)</title><rect x="57.7158%" y="117" width="0.1360%" height="15" fill="rgb(223,113,26)" fg:x="849" fg:w="2"/><text x="57.9658%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.07%)</title><rect x="57.7838%" y="101" width="0.0680%" height="15" fill="rgb(206,192,2)" fg:x="850" fg:w="1"/><text x="58.0338%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.07%)</title><rect x="57.8518%" y="101" width="0.0680%" height="15" fill="rgb(241,108,4)" fg:x="851" fg:w="1"/><text x="58.1018%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.07%)</title><rect x="57.8518%" y="85" width="0.0680%" height="15" fill="rgb(247,173,49)" fg:x="851" fg:w="1"/><text x="58.1018%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.07%)</title><rect x="57.8518%" y="69" width="0.0680%" height="15" fill="rgb(224,114,35)" fg:x="851" fg:w="1"/><text x="58.1018%" y="79.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.14%)</title><rect x="57.8518%" y="117" width="0.1360%" height="15" fill="rgb(245,159,27)" fg:x="851" fg:w="2"/><text x="58.1018%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.07%)</title><rect x="57.9198%" y="101" width="0.0680%" height="15" fill="rgb(245,172,44)" fg:x="852" fg:w="1"/><text x="58.1698%" y="111.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.14%)</title><rect x="57.9878%" y="117" width="0.1360%" height="15" fill="rgb(236,23,11)" fg:x="853" fg:w="2"/><text x="58.2378%" y="127.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (7 samples, 0.48%)</title><rect x="57.7158%" y="165" width="0.4759%" height="15" fill="rgb(205,117,38)" fg:x="849" fg:w="7"/><text x="57.9658%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.48%)</title><rect x="57.7158%" y="149" width="0.4759%" height="15" fill="rgb(237,72,25)" fg:x="849" fg:w="7"/><text x="57.9658%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 0.48%)</title><rect x="57.7158%" y="133" width="0.4759%" height="15" fill="rgb(244,70,9)" fg:x="849" fg:w="7"/><text x="57.9658%" y="143.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.07%)</title><rect x="58.1237%" y="117" width="0.0680%" height="15" fill="rgb(217,125,39)" fg:x="855" fg:w="1"/><text x="58.3737%" y="127.50"></text></g><g><title>calloc (1 samples, 0.07%)</title><rect x="58.1237%" y="101" width="0.0680%" height="15" fill="rgb(235,36,10)" fg:x="855" fg:w="1"/><text x="58.3737%" y="111.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.07%)</title><rect x="58.1917%" y="165" width="0.0680%" height="15" fill="rgb(251,123,47)" fg:x="856" fg:w="1"/><text x="58.4417%" y="175.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.07%)</title><rect x="58.1917%" y="149" width="0.0680%" height="15" fill="rgb(221,13,13)" fg:x="856" fg:w="1"/><text x="58.4417%" y="159.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.07%)</title><rect x="58.1917%" y="133" width="0.0680%" height="15" fill="rgb(238,131,9)" fg:x="856" fg:w="1"/><text x="58.4417%" y="143.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.07%)</title><rect x="58.1917%" y="117" width="0.0680%" height="15" fill="rgb(211,50,8)" fg:x="856" fg:w="1"/><text x="58.4417%" y="127.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="58.1917%" y="101" width="0.0680%" height="15" fill="rgb(245,182,24)" fg:x="856" fg:w="1"/><text x="58.4417%" y="111.50"></text></g><g><title>&lt;brotli::enc::backward_references::UnionHasher&lt;Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::Prepare (1 samples, 0.07%)</title><rect x="58.5316%" y="133" width="0.0680%" height="15" fill="rgb(242,14,37)" fg:x="861" fg:w="1"/><text x="58.7816%" y="143.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.07%)</title><rect x="63.9701%" y="101" width="0.0680%" height="15" fill="rgb(246,228,12)" fg:x="941" fg:w="1"/><text x="64.2201%" y="111.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (74 samples, 5.03%)</title><rect x="59.4154%" y="117" width="5.0306%" height="15" fill="rgb(213,55,15)" fg:x="874" fg:w="74"/><text x="59.6654%" y="127.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (6 samples, 0.41%)</title><rect x="64.0381%" y="101" width="0.4079%" height="15" fill="rgb(209,9,3)" fg:x="942" fg:w="6"/><text x="64.2881%" y="111.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (87 samples, 5.91%)</title><rect x="58.5996%" y="133" width="5.9143%" height="15" fill="rgb(230,59,30)" fg:x="862" fg:w="87"/><text x="58.8496%" y="143.50">brotli::..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.07%)</title><rect x="64.4460%" y="117" width="0.0680%" height="15" fill="rgb(209,121,21)" fg:x="948" fg:w="1"/><text x="64.6960%" y="127.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (27 samples, 1.84%)</title><rect x="64.5139%" y="133" width="1.8355%" height="15" fill="rgb(220,109,13)" fg:x="949" fg:w="27"/><text x="64.7639%" y="143.50">b..</text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (26 samples, 1.77%)</title><rect x="64.5819%" y="117" width="1.7675%" height="15" fill="rgb(232,18,1)" fg:x="950" fg:w="26"/><text x="64.8319%" y="127.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.07%)</title><rect x="66.3494%" y="133" width="0.0680%" height="15" fill="rgb(215,41,42)" fg:x="976" fg:w="1"/><text x="66.5994%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (27 samples, 1.84%)</title><rect x="66.4174%" y="117" width="1.8355%" height="15" fill="rgb(224,123,36)" fg:x="977" fg:w="27"/><text x="66.6674%" y="127.50">b..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (24 samples, 1.63%)</title><rect x="66.6213%" y="101" width="1.6315%" height="15" fill="rgb(240,125,3)" fg:x="980" fg:w="24"/><text x="66.8713%" y="111.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.07%)</title><rect x="68.1849%" y="85" width="0.0680%" height="15" fill="rgb(205,98,50)" fg:x="1003" fg:w="1"/><text x="68.4349%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.07%)</title><rect x="68.6608%" y="69" width="0.0680%" height="15" fill="rgb(205,185,37)" fg:x="1010" fg:w="1"/><text x="68.9108%" y="79.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.07%)</title><rect x="68.6608%" y="53" width="0.0680%" height="15" fill="rgb(238,207,15)" fg:x="1010" fg:w="1"/><text x="68.9108%" y="63.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.14%)</title><rect x="68.6608%" y="101" width="0.1360%" height="15" fill="rgb(213,199,42)" fg:x="1010" fg:w="2"/><text x="68.9108%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.14%)</title><rect x="68.6608%" y="85" width="0.1360%" height="15" fill="rgb(235,201,11)" fg:x="1010" fg:w="2"/><text x="68.9108%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.07%)</title><rect x="68.7288%" y="69" width="0.0680%" height="15" fill="rgb(207,46,11)" fg:x="1011" fg:w="1"/><text x="68.9788%" y="79.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (11 samples, 0.75%)</title><rect x="68.7967%" y="101" width="0.7478%" height="15" fill="rgb(241,35,35)" fg:x="1012" fg:w="11"/><text x="69.0467%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (22 samples, 1.50%)</title><rect x="68.2529%" y="117" width="1.4956%" height="15" fill="rgb(243,32,47)" fg:x="1004" fg:w="22"/><text x="68.5029%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (3 samples, 0.20%)</title><rect x="69.5445%" y="101" width="0.2039%" height="15" fill="rgb(247,202,23)" fg:x="1023" fg:w="3"/><text x="69.7945%" y="111.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (6 samples, 0.41%)</title><rect x="69.7485%" y="117" width="0.4079%" height="15" fill="rgb(219,102,11)" fg:x="1026" fg:w="6"/><text x="69.9985%" y="127.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.14%)</title><rect x="70.0204%" y="101" width="0.1360%" height="15" fill="rgb(243,110,44)" fg:x="1030" fg:w="2"/><text x="70.2704%" y="111.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.14%)</title><rect x="70.0204%" y="85" width="0.1360%" height="15" fill="rgb(222,74,54)" fg:x="1030" fg:w="2"/><text x="70.2704%" y="95.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (56 samples, 3.81%)</title><rect x="66.4174%" y="133" width="3.8069%" height="15" fill="rgb(216,99,12)" fg:x="977" fg:w="56"/><text x="66.6674%" y="143.50">brot..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.07%)</title><rect x="70.1564%" y="117" width="0.0680%" height="15" fill="rgb(226,22,26)" fg:x="1032" fg:w="1"/><text x="70.4064%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.07%)</title><rect x="70.1564%" y="101" width="0.0680%" height="15" fill="rgb(217,163,10)" fg:x="1032" fg:w="1"/><text x="70.4064%" y="111.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (185 samples, 12.58%)</title><rect x="57.7158%" y="181" width="12.5765%" height="15" fill="rgb(213,25,53)" fg:x="849" fg:w="185"/><text x="57.9658%" y="191.50">parquet::column::wr..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (177 samples, 12.03%)</title><rect x="58.2597%" y="165" width="12.0326%" height="15" fill="rgb(252,105,26)" fg:x="857" fg:w="177"/><text x="58.5097%" y="175.50">parquet::column::w..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (177 samples, 12.03%)</title><rect x="58.2597%" y="149" width="12.0326%" height="15" fill="rgb(220,39,43)" fg:x="857" fg:w="177"/><text x="58.5097%" y="159.50">&lt;parquet::compress..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::error::Error&gt; (1 samples, 0.07%)</title><rect x="70.2243%" y="133" width="0.0680%" height="15" fill="rgb(229,68,48)" fg:x="1033" fg:w="1"/><text x="70.4743%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::convert::&lt;impl core::convert::From&lt;alloc::string::String&gt; for alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;::from::StringError&gt; (1 samples, 0.07%)</title><rect x="70.2243%" y="117" width="0.0680%" height="15" fill="rgb(252,8,32)" fg:x="1033" fg:w="1"/><text x="70.4743%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.07%)</title><rect x="70.2923%" y="117" width="0.0680%" height="15" fill="rgb(223,20,43)" fg:x="1034" fg:w="1"/><text x="70.5423%" y="127.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.14%)</title><rect x="70.2923%" y="165" width="0.1360%" height="15" fill="rgb(229,81,49)" fg:x="1034" fg:w="2"/><text x="70.5423%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.14%)</title><rect x="70.2923%" y="149" width="0.1360%" height="15" fill="rgb(236,28,36)" fg:x="1034" fg:w="2"/><text x="70.5423%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.14%)</title><rect x="70.2923%" y="133" width="0.1360%" height="15" fill="rgb(249,185,26)" fg:x="1034" fg:w="2"/><text x="70.5423%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.07%)</title><rect x="70.3603%" y="117" width="0.0680%" height="15" fill="rgb(249,174,33)" fg:x="1035" fg:w="1"/><text x="70.6103%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (192 samples, 13.05%)</title><rect x="57.6479%" y="261" width="13.0523%" height="15" fill="rgb(233,201,37)" fg:x="848" fg:w="192"/><text x="57.8979%" y="271.50">parquet::arrow::arro..</text></g><g><title>core::iter::adapters::try_process (192 samples, 13.05%)</title><rect x="57.6479%" y="245" width="13.0523%" height="15" fill="rgb(221,78,26)" fg:x="848" fg:w="192"/><text x="57.8979%" y="255.50">core::iter::adapters..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (192 samples, 13.05%)</title><rect x="57.6479%" y="229" width="13.0523%" height="15" fill="rgb(250,127,30)" fg:x="848" fg:w="192"/><text x="57.8979%" y="239.50">alloc::vec::in_place..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (192 samples, 13.05%)</title><rect x="57.6479%" y="213" width="13.0523%" height="15" fill="rgb(230,49,44)" fg:x="848" fg:w="192"/><text x="57.8979%" y="223.50">&lt;alloc::vec::into_it..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (192 samples, 13.05%)</title><rect x="57.6479%" y="197" width="13.0523%" height="15" fill="rgb(229,67,23)" fg:x="848" fg:w="192"/><text x="57.8979%" y="207.50">parquet::arrow::arro..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (6 samples, 0.41%)</title><rect x="70.2923%" y="181" width="0.4079%" height="15" fill="rgb(249,83,47)" fg:x="1034" fg:w="6"/><text x="70.5423%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (4 samples, 0.27%)</title><rect x="70.4283%" y="165" width="0.2719%" height="15" fill="rgb(215,43,3)" fg:x="1036" fg:w="4"/><text x="70.6783%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.27%)</title><rect x="70.4283%" y="149" width="0.2719%" height="15" fill="rgb(238,154,13)" fg:x="1036" fg:w="4"/><text x="70.6783%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (4 samples, 0.27%)</title><rect x="70.4283%" y="133" width="0.2719%" height="15" fill="rgb(219,56,2)" fg:x="1036" fg:w="4"/><text x="70.6783%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (4 samples, 0.27%)</title><rect x="70.4283%" y="117" width="0.2719%" height="15" fill="rgb(233,0,4)" fg:x="1036" fg:w="4"/><text x="70.6783%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.27%)</title><rect x="70.4283%" y="101" width="0.2719%" height="15" fill="rgb(235,30,7)" fg:x="1036" fg:w="4"/><text x="70.6783%" y="111.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.07%)</title><rect x="70.6322%" y="85" width="0.0680%" height="15" fill="rgb(250,79,13)" fg:x="1039" fg:w="1"/><text x="70.8822%" y="95.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 0.07%)</title><rect x="70.7002%" y="245" width="0.0680%" height="15" fill="rgb(211,146,34)" fg:x="1040" fg:w="1"/><text x="70.9502%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.07%)</title><rect x="70.7002%" y="229" width="0.0680%" height="15" fill="rgb(228,22,38)" fg:x="1040" fg:w="1"/><text x="70.9502%" y="239.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.07%)</title><rect x="70.7682%" y="229" width="0.0680%" height="15" fill="rgb(235,168,5)" fg:x="1041" fg:w="1"/><text x="71.0182%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="70.7682%" y="213" width="0.0680%" height="15" fill="rgb(221,155,16)" fg:x="1041" fg:w="1"/><text x="71.0182%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (197 samples, 13.39%)</title><rect x="57.5799%" y="293" width="13.3923%" height="15" fill="rgb(215,215,53)" fg:x="847" fg:w="197"/><text x="57.8299%" y="303.50">parquet::arrow::arro..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (196 samples, 13.32%)</title><rect x="57.6479%" y="277" width="13.3243%" height="15" fill="rgb(223,4,10)" fg:x="848" fg:w="196"/><text x="57.8979%" y="287.50">parquet::arrow::arro..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (4 samples, 0.27%)</title><rect x="70.7002%" y="261" width="0.2719%" height="15" fill="rgb(234,103,6)" fg:x="1040" fg:w="4"/><text x="70.9502%" y="271.50"></text></g><g><title>std::io::copy::stack_buffer_copy (3 samples, 0.20%)</title><rect x="70.7682%" y="245" width="0.2039%" height="15" fill="rgb(227,97,0)" fg:x="1041" fg:w="3"/><text x="71.0182%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.14%)</title><rect x="70.8362%" y="229" width="0.1360%" height="15" fill="rgb(234,150,53)" fg:x="1042" fg:w="2"/><text x="71.0862%" y="239.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (2 samples, 0.14%)</title><rect x="70.8362%" y="213" width="0.1360%" height="15" fill="rgb(228,201,54)" fg:x="1042" fg:w="2"/><text x="71.0862%" y="223.50"></text></g><g><title>write (2 samples, 0.14%)</title><rect x="70.8362%" y="197" width="0.1360%" height="15" fill="rgb(222,22,37)" fg:x="1042" fg:w="2"/><text x="71.0862%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::try_new (1 samples, 0.07%)</title><rect x="70.9721%" y="293" width="0.0680%" height="15" fill="rgb(237,53,32)" fg:x="1044" fg:w="1"/><text x="71.2221%" y="303.50"></text></g><g><title>parquet::arrow::schema::ArrowSchemaConverter::convert (1 samples, 0.07%)</title><rect x="70.9721%" y="277" width="0.0680%" height="15" fill="rgb(233,25,53)" fg:x="1044" fg:w="1"/><text x="71.2221%" y="287.50"></text></g><g><title>parquet::schema::types::SchemaDescriptor::new (1 samples, 0.07%)</title><rect x="70.9721%" y="261" width="0.0680%" height="15" fill="rgb(210,40,34)" fg:x="1044" fg:w="1"/><text x="71.2221%" y="271.50"></text></g><g><title>parquet::schema::types::build_tree (1 samples, 0.07%)</title><rect x="70.9721%" y="245" width="0.0680%" height="15" fill="rgb(241,220,44)" fg:x="1044" fg:w="1"/><text x="71.2221%" y="255.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="70.9721%" y="229" width="0.0680%" height="15" fill="rgb(235,28,35)" fg:x="1044" fg:w="1"/><text x="71.2221%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (5 samples, 0.34%)</title><rect x="71.3120%" y="213" width="0.3399%" height="15" fill="rgb(210,56,17)" fg:x="1049" fg:w="5"/><text x="71.5620%" y="223.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (5 samples, 0.34%)</title><rect x="71.3120%" y="197" width="0.3399%" height="15" fill="rgb(224,130,29)" fg:x="1049" fg:w="5"/><text x="71.5620%" y="207.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.14%)</title><rect x="71.5160%" y="181" width="0.1360%" height="15" fill="rgb(235,212,8)" fg:x="1052" fg:w="2"/><text x="71.7660%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.14%)</title><rect x="71.6519%" y="197" width="0.1360%" height="15" fill="rgb(223,33,50)" fg:x="1054" fg:w="2"/><text x="71.9019%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.14%)</title><rect x="71.6519%" y="181" width="0.1360%" height="15" fill="rgb(219,149,13)" fg:x="1054" fg:w="2"/><text x="71.9019%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (5 samples, 0.34%)</title><rect x="71.7879%" y="165" width="0.3399%" height="15" fill="rgb(250,156,29)" fg:x="1056" fg:w="5"/><text x="72.0379%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.41%)</title><rect x="71.7879%" y="197" width="0.4079%" height="15" fill="rgb(216,193,19)" fg:x="1056" fg:w="6"/><text x="72.0379%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (6 samples, 0.41%)</title><rect x="71.7879%" y="181" width="0.4079%" height="15" fill="rgb(216,135,14)" fg:x="1056" fg:w="6"/><text x="72.0379%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.07%)</title><rect x="72.1278%" y="165" width="0.0680%" height="15" fill="rgb(241,47,5)" fg:x="1061" fg:w="1"/><text x="72.3778%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.07%)</title><rect x="72.1278%" y="149" width="0.0680%" height="15" fill="rgb(233,42,35)" fg:x="1061" fg:w="1"/><text x="72.3778%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (18 samples, 1.22%)</title><rect x="71.0401%" y="245" width="1.2237%" height="15" fill="rgb(231,13,6)" fg:x="1045" fg:w="18"/><text x="71.2901%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (18 samples, 1.22%)</title><rect x="71.0401%" y="229" width="1.2237%" height="15" fill="rgb(207,181,40)" fg:x="1045" fg:w="18"/><text x="71.2901%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (9 samples, 0.61%)</title><rect x="71.6519%" y="213" width="0.6118%" height="15" fill="rgb(254,173,49)" fg:x="1054" fg:w="9"/><text x="71.9019%" y="223.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.07%)</title><rect x="72.1958%" y="197" width="0.0680%" height="15" fill="rgb(221,1,38)" fg:x="1062" fg:w="1"/><text x="72.4458%" y="207.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::cmp::Ord&gt;::cmp (1 samples, 0.07%)</title><rect x="73.8273%" y="213" width="0.0680%" height="15" fill="rgb(206,124,46)" fg:x="1086" fg:w="1"/><text x="74.0773%" y="223.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (3 samples, 0.20%)</title><rect x="74.6431%" y="197" width="0.2039%" height="15" fill="rgb(249,21,11)" fg:x="1098" fg:w="3"/><text x="74.8931%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (32 samples, 2.18%)</title><rect x="72.7396%" y="229" width="2.1754%" height="15" fill="rgb(222,201,40)" fg:x="1070" fg:w="32"/><text x="72.9896%" y="239.50">&lt;..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (15 samples, 1.02%)</title><rect x="73.8953%" y="213" width="1.0197%" height="15" fill="rgb(235,61,29)" fg:x="1087" fg:w="15"/><text x="74.1453%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.07%)</title><rect x="74.8470%" y="197" width="0.0680%" height="15" fill="rgb(219,207,3)" fg:x="1101" fg:w="1"/><text x="75.0970%" y="207.50"></text></g><g><title>parquet::column::writer::compare_greater (7 samples, 0.48%)</title><rect x="76.1387%" y="197" width="0.4759%" height="15" fill="rgb(222,56,46)" fg:x="1120" fg:w="7"/><text x="76.3887%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (36 samples, 2.45%)</title><rect x="74.9150%" y="229" width="2.4473%" height="15" fill="rgb(239,76,54)" fg:x="1102" fg:w="36"/><text x="75.1650%" y="239.50">&lt;p..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (32 samples, 2.18%)</title><rect x="75.1869%" y="213" width="2.1754%" height="15" fill="rgb(231,124,27)" fg:x="1106" fg:w="32"/><text x="75.4369%" y="223.50">p..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (11 samples, 0.75%)</title><rect x="76.6145%" y="197" width="0.7478%" height="15" fill="rgb(249,195,6)" fg:x="1127" fg:w="11"/><text x="76.8645%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.07%)</title><rect x="77.2944%" y="181" width="0.0680%" height="15" fill="rgb(237,174,47)" fg:x="1137" fg:w="1"/><text x="77.5444%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.14%)</title><rect x="77.3623%" y="229" width="0.1360%" height="15" fill="rgb(206,201,31)" fg:x="1138" fg:w="2"/><text x="77.6123%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.14%)</title><rect x="77.3623%" y="213" width="0.1360%" height="15" fill="rgb(231,57,52)" fg:x="1138" fg:w="2"/><text x="77.6123%" y="223.50"></text></g><g><title>__libc_realloc (2 samples, 0.14%)</title><rect x="77.3623%" y="197" width="0.1360%" height="15" fill="rgb(248,177,22)" fg:x="1138" fg:w="2"/><text x="77.6123%" y="207.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="77.6343%" y="197" width="0.0680%" height="15" fill="rgb(215,211,37)" fg:x="1142" fg:w="1"/><text x="77.8843%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (7 samples, 0.48%)</title><rect x="77.4983%" y="213" width="0.4759%" height="15" fill="rgb(241,128,51)" fg:x="1140" fg:w="7"/><text x="77.7483%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.27%)</title><rect x="77.7022%" y="197" width="0.2719%" height="15" fill="rgb(227,165,31)" fg:x="1143" fg:w="4"/><text x="77.9522%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.14%)</title><rect x="77.8382%" y="181" width="0.1360%" height="15" fill="rgb(228,167,24)" fg:x="1145" fg:w="2"/><text x="78.0882%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.07%)</title><rect x="78.1101%" y="181" width="0.0680%" height="15" fill="rgb(228,143,12)" fg:x="1149" fg:w="1"/><text x="78.3601%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (6 samples, 0.41%)</title><rect x="78.1781%" y="181" width="0.4079%" height="15" fill="rgb(249,149,8)" fg:x="1150" fg:w="6"/><text x="78.4281%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (6 samples, 0.41%)</title><rect x="78.1781%" y="165" width="0.4079%" height="15" fill="rgb(243,35,44)" fg:x="1150" fg:w="6"/><text x="78.4281%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (13 samples, 0.88%)</title><rect x="77.9742%" y="213" width="0.8838%" height="15" fill="rgb(246,89,9)" fg:x="1147" fg:w="13"/><text x="78.2242%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (13 samples, 0.88%)</title><rect x="77.9742%" y="197" width="0.8838%" height="15" fill="rgb(233,213,13)" fg:x="1147" fg:w="13"/><text x="78.2242%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.27%)</title><rect x="78.5860%" y="181" width="0.2719%" height="15" fill="rgb(233,141,41)" fg:x="1156" fg:w="4"/><text x="78.8360%" y="191.50"></text></g><g><title>brotli::enc::backward_references::TestStaticDictionaryItem (2 samples, 0.14%)</title><rect x="83.5486%" y="149" width="0.1360%" height="15" fill="rgb(239,167,4)" fg:x="1229" fg:w="2"/><text x="83.7986%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (7 samples, 0.48%)</title><rect x="83.6846%" y="149" width="0.4759%" height="15" fill="rgb(209,217,16)" fg:x="1231" fg:w="7"/><text x="83.9346%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (59 samples, 4.01%)</title><rect x="80.2855%" y="165" width="4.0109%" height="15" fill="rgb(219,88,35)" fg:x="1181" fg:w="59"/><text x="80.5355%" y="175.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.14%)</title><rect x="84.1604%" y="149" width="0.1360%" height="15" fill="rgb(220,193,23)" fg:x="1238" fg:w="2"/><text x="84.4104%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (79 samples, 5.37%)</title><rect x="79.0619%" y="181" width="5.3705%" height="15" fill="rgb(230,90,52)" fg:x="1163" fg:w="79"/><text x="79.3119%" y="191.50">brotli:..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.14%)</title><rect x="84.2964%" y="165" width="0.1360%" height="15" fill="rgb(252,106,19)" fg:x="1240" fg:w="2"/><text x="84.5464%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.07%)</title><rect x="84.7043%" y="117" width="0.0680%" height="15" fill="rgb(206,74,20)" fg:x="1246" fg:w="1"/><text x="84.9543%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (2 samples, 0.14%)</title><rect x="84.7723%" y="117" width="0.1360%" height="15" fill="rgb(230,138,44)" fg:x="1247" fg:w="2"/><text x="85.0223%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (7 samples, 0.48%)</title><rect x="84.6363%" y="133" width="0.4759%" height="15" fill="rgb(235,182,43)" fg:x="1245" fg:w="7"/><text x="84.8863%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (3 samples, 0.20%)</title><rect x="84.9082%" y="117" width="0.2039%" height="15" fill="rgb(242,16,51)" fg:x="1249" fg:w="3"/><text x="85.1582%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.07%)</title><rect x="85.1122%" y="133" width="0.0680%" height="15" fill="rgb(248,9,4)" fg:x="1252" fg:w="1"/><text x="85.3622%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (23 samples, 1.56%)</title><rect x="84.6363%" y="165" width="1.5636%" height="15" fill="rgb(210,31,22)" fg:x="1245" fg:w="23"/><text x="84.8863%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (23 samples, 1.56%)</title><rect x="84.6363%" y="149" width="1.5636%" height="15" fill="rgb(239,54,39)" fg:x="1245" fg:w="23"/><text x="84.8863%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (15 samples, 1.02%)</title><rect x="85.1801%" y="133" width="1.0197%" height="15" fill="rgb(230,99,41)" fg:x="1253" fg:w="15"/><text x="85.4301%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (2 samples, 0.14%)</title><rect x="86.0639%" y="117" width="0.1360%" height="15" fill="rgb(253,106,12)" fg:x="1266" fg:w="2"/><text x="86.3139%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (31 samples, 2.11%)</title><rect x="84.4324%" y="181" width="2.1074%" height="15" fill="rgb(213,46,41)" fg:x="1242" fg:w="31"/><text x="84.6824%" y="191.50">b..</text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (5 samples, 0.34%)</title><rect x="86.1999%" y="165" width="0.3399%" height="15" fill="rgb(215,133,35)" fg:x="1268" fg:w="5"/><text x="86.4499%" y="175.50"></text></g><g><title>brotli::enc::encode::DecideOverLiteralContextModeling (1 samples, 0.07%)</title><rect x="86.5398%" y="181" width="0.0680%" height="15" fill="rgb(213,28,5)" fg:x="1273" fg:w="1"/><text x="86.7898%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (9 samples, 0.61%)</title><rect x="86.6077%" y="181" width="0.6118%" height="15" fill="rgb(215,77,49)" fg:x="1274" fg:w="9"/><text x="86.8577%" y="191.50"></text></g><g><title>calloc (1 samples, 0.07%)</title><rect x="87.1516%" y="165" width="0.0680%" height="15" fill="rgb(248,100,22)" fg:x="1282" fg:w="1"/><text x="87.4016%" y="175.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (11 samples, 0.75%)</title><rect x="87.2196%" y="181" width="0.7478%" height="15" fill="rgb(208,67,9)" fg:x="1283" fg:w="11"/><text x="87.4696%" y="191.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (3 samples, 0.20%)</title><rect x="87.7634%" y="165" width="0.2039%" height="15" fill="rgb(219,133,21)" fg:x="1291" fg:w="3"/><text x="88.0134%" y="175.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.07%)</title><rect x="87.8994%" y="149" width="0.0680%" height="15" fill="rgb(246,46,29)" fg:x="1293" fg:w="1"/><text x="88.1494%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (138 samples, 9.38%)</title><rect x="78.8579%" y="197" width="9.3814%" height="15" fill="rgb(246,185,52)" fg:x="1160" fg:w="138"/><text x="79.1079%" y="207.50">brotli::enc::..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (4 samples, 0.27%)</title><rect x="87.9674%" y="181" width="0.2719%" height="15" fill="rgb(252,136,11)" fg:x="1294" fg:w="4"/><text x="88.2174%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (4 samples, 0.27%)</title><rect x="87.9674%" y="165" width="0.2719%" height="15" fill="rgb(219,138,53)" fg:x="1294" fg:w="4"/><text x="88.2174%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (139 samples, 9.45%)</title><rect x="78.8579%" y="213" width="9.4494%" height="15" fill="rgb(211,51,23)" fg:x="1160" fg:w="139"/><text x="79.1079%" y="223.50">&lt;parquet::comp..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.07%)</title><rect x="88.2393%" y="197" width="0.0680%" height="15" fill="rgb(247,221,28)" fg:x="1298" fg:w="1"/><text x="88.4893%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.07%)</title><rect x="88.2393%" y="181" width="0.0680%" height="15" fill="rgb(251,222,45)" fg:x="1298" fg:w="1"/><text x="88.4893%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::UnionHasher&lt;Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::StitchToPreviousBlock (1 samples, 0.07%)</title><rect x="88.2393%" y="165" width="0.0680%" height="15" fill="rgb(217,162,53)" fg:x="1298" fg:w="1"/><text x="88.4893%" y="175.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (1,273 samples, 86.54%)</title><rect x="1.9714%" y="325" width="86.5398%" height="15" fill="rgb(229,93,14)" fg:x="29" fg:w="1273"/><text x="2.2214%" y="335.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (1,252 samples, 85.11%)</title><rect x="3.3990%" y="309" width="85.1122%" height="15" fill="rgb(209,67,49)" fg:x="50" fg:w="1252"/><text x="3.6490%" y="319.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (257 samples, 17.47%)</title><rect x="71.0401%" y="293" width="17.4711%" height="15" fill="rgb(213,87,29)" fg:x="1045" fg:w="257"/><text x="71.2901%" y="303.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (257 samples, 17.47%)</title><rect x="71.0401%" y="277" width="17.4711%" height="15" fill="rgb(205,151,52)" fg:x="1045" fg:w="257"/><text x="71.2901%" y="287.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (257 samples, 17.47%)</title><rect x="71.0401%" y="261" width="17.4711%" height="15" fill="rgb(253,215,39)" fg:x="1045" fg:w="257"/><text x="71.2901%" y="271.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (239 samples, 16.25%)</title><rect x="72.2638%" y="245" width="16.2475%" height="15" fill="rgb(221,220,41)" fg:x="1063" fg:w="239"/><text x="72.5138%" y="255.50">parquet::column::writer::..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (162 samples, 11.01%)</title><rect x="77.4983%" y="229" width="11.0129%" height="15" fill="rgb(218,133,21)" fg:x="1140" fg:w="162"/><text x="77.7483%" y="239.50">parquet::column:..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (3 samples, 0.20%)</title><rect x="88.3073%" y="213" width="0.2039%" height="15" fill="rgb(221,193,43)" fg:x="1299" fg:w="3"/><text x="88.5573%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 0.61%)</title><rect x="88.7831%" y="309" width="0.6118%" height="15" fill="rgb(240,128,52)" fg:x="1306" fg:w="9"/><text x="89.0331%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.54%)</title><rect x="89.3950%" y="309" width="0.5438%" height="15" fill="rgb(253,114,12)" fg:x="1315" fg:w="8"/><text x="89.6450%" y="319.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.07%)</title><rect x="89.9388%" y="261" width="0.0680%" height="15" fill="rgb(215,223,47)" fg:x="1323" fg:w="1"/><text x="90.1888%" y="271.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.14%)</title><rect x="90.1428%" y="245" width="0.1360%" height="15" fill="rgb(248,225,23)" fg:x="1326" fg:w="2"/><text x="90.3928%" y="255.50"></text></g><g><title>crc32fast::Hasher::update (12 samples, 0.82%)</title><rect x="89.9388%" y="277" width="0.8158%" height="15" fill="rgb(250,108,0)" fg:x="1323" fg:w="12"/><text x="90.1888%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (11 samples, 0.75%)</title><rect x="90.0068%" y="261" width="0.7478%" height="15" fill="rgb(228,208,7)" fg:x="1324" fg:w="11"/><text x="90.2568%" y="271.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (7 samples, 0.48%)</title><rect x="90.2787%" y="245" width="0.4759%" height="15" fill="rgb(244,45,10)" fg:x="1328" fg:w="7"/><text x="90.5287%" y="255.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (74 samples, 5.03%)</title><rect x="91.2984%" y="213" width="5.0306%" height="15" fill="rgb(207,125,25)" fg:x="1343" fg:w="74"/><text x="91.5484%" y="223.50">zlib_r..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.07%)</title><rect x="96.3290%" y="213" width="0.0680%" height="15" fill="rgb(210,195,18)" fg:x="1417" fg:w="1"/><text x="96.5790%" y="223.50"></text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (4 samples, 0.27%)</title><rect x="96.3970%" y="213" width="0.2719%" height="15" fill="rgb(249,80,12)" fg:x="1418" fg:w="4"/><text x="96.6470%" y="223.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (88 samples, 5.98%)</title><rect x="90.8226%" y="261" width="5.9823%" height="15" fill="rgb(221,65,9)" fg:x="1336" fg:w="88"/><text x="91.0726%" y="271.50">&lt;flate2:..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (88 samples, 5.98%)</title><rect x="90.8226%" y="245" width="5.9823%" height="15" fill="rgb(235,49,36)" fg:x="1336" fg:w="88"/><text x="91.0726%" y="255.50">&lt;flate2:..</text></g><g><title>zlib_rs::inflate::inflate (88 samples, 5.98%)</title><rect x="90.8226%" y="229" width="5.9823%" height="15" fill="rgb(225,32,20)" fg:x="1336" fg:w="88"/><text x="91.0726%" y="239.50">zlib_rs:..</text></g><g><title>zlib_rs::inflate::writer::Writer::extend_from_window_runtime_dispatch (2 samples, 0.14%)</title><rect x="96.6689%" y="213" width="0.1360%" height="15" fill="rgb(215,141,46)" fg:x="1422" fg:w="2"/><text x="96.9189%" y="223.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,425 samples, 96.87%)</title><rect x="0.0000%" y="357" width="96.8729%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="1425"/><text x="0.2500%" y="367.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (1,405 samples, 95.51%)</title><rect x="1.3596%" y="341" width="95.5133%" height="15" fill="rgb(216,222,40)" fg:x="20" fg:w="1405"/><text x="1.6096%" y="351.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (123 samples, 8.36%)</title><rect x="88.5112%" y="325" width="8.3617%" height="15" fill="rgb(234,217,39)" fg:x="1302" fg:w="123"/><text x="88.7612%" y="335.50">std::io::app..</text></g><g><title>std::io::default_read_buf (102 samples, 6.93%)</title><rect x="89.9388%" y="309" width="6.9341%" height="15" fill="rgb(207,178,40)" fg:x="1323" fg:w="102"/><text x="90.1888%" y="319.50">std::io::..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (102 samples, 6.93%)</title><rect x="89.9388%" y="293" width="6.9341%" height="15" fill="rgb(221,136,13)" fg:x="1323" fg:w="102"/><text x="90.1888%" y="303.50">&lt;zip::crc..</text></g><g><title>flate2::zio::read (90 samples, 6.12%)</title><rect x="90.7546%" y="277" width="6.1183%" height="15" fill="rgb(249,199,10)" fg:x="1335" fg:w="90"/><text x="91.0046%" y="287.50">flate2::..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="96.8049%" y="261" width="0.0680%" height="15" fill="rgb(249,222,13)" fg:x="1424" fg:w="1"/><text x="97.0549%" y="271.50"></text></g><g><title>bench_zip_to_pa (1,427 samples, 97.01%)</title><rect x="0.0000%" y="517" width="97.0088%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="527.50">bench_zip_to_pa</text></g><g><title>_start (1,427 samples, 97.01%)</title><rect x="0.0000%" y="501" width="97.0088%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="511.50">_start</text></g><g><title>__libc_start_main (1,427 samples, 97.01%)</title><rect x="0.0000%" y="485" width="97.0088%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="495.50">__libc_start_main</text></g><g><title>main (1,427 samples, 97.01%)</title><rect x="0.0000%" y="469" width="97.0088%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (1,427 samples, 97.01%)</title><rect x="0.0000%" y="453" width="97.0088%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,427 samples, 97.01%)</title><rect x="0.0000%" y="437" width="97.0088%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,427 samples, 97.01%)</title><rect x="0.0000%" y="421" width="97.0088%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,427 samples, 97.01%)</title><rect x="0.0000%" y="405" width="97.0088%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="415.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,427 samples, 97.01%)</title><rect x="0.0000%" y="389" width="97.0088%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,427 samples, 97.01%)</title><rect x="0.0000%" y="373" width="97.0088%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="1427"/><text x="0.2500%" y="383.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.14%)</title><rect x="96.8729%" y="357" width="0.1360%" height="15" fill="rgb(212,155,44)" fg:x="1425" fg:w="2"/><text x="97.1229%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.14%)</title><rect x="96.8729%" y="341" width="0.1360%" height="15" fill="rgb(226,2,50)" fg:x="1425" fg:w="2"/><text x="97.1229%" y="351.50"></text></g><g><title>syscall (2 samples, 0.14%)</title><rect x="96.8729%" y="325" width="0.1360%" height="15" fill="rgb(234,177,6)" fg:x="1425" fg:w="2"/><text x="97.1229%" y="335.50"></text></g><g><title>powf64 (1 samples, 0.07%)</title><rect x="97.0088%" y="325" width="0.0680%" height="15" fill="rgb(217,24,9)" fg:x="1427" fg:w="1"/><text x="97.2588%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.07%)</title><rect x="97.0768%" y="325" width="0.0680%" height="15" fill="rgb(220,13,46)" fg:x="1428" fg:w="1"/><text x="97.3268%" y="335.50"></text></g><g><title>clock_gettime (1 samples, 0.07%)</title><rect x="97.0768%" y="309" width="0.0680%" height="15" fill="rgb(239,221,27)" fg:x="1428" fg:w="1"/><text x="97.3268%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.07%)</title><rect x="97.1448%" y="293" width="0.0680%" height="15" fill="rgb(222,198,25)" fg:x="1429" fg:w="1"/><text x="97.3948%" y="303.50"></text></g><g><title>syscall (1 samples, 0.07%)</title><rect x="97.1448%" y="277" width="0.0680%" height="15" fill="rgb(211,99,13)" fg:x="1429" fg:w="1"/><text x="97.3948%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.07%)</title><rect x="97.2808%" y="277" width="0.0680%" height="15" fill="rgb(232,111,31)" fg:x="1431" fg:w="1"/><text x="97.5308%" y="287.50"></text></g><g><title>clock_gettime (1 samples, 0.07%)</title><rect x="97.2808%" y="261" width="0.0680%" height="15" fill="rgb(245,82,37)" fg:x="1431" fg:w="1"/><text x="97.5308%" y="271.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.07%)</title><rect x="97.3487%" y="277" width="0.0680%" height="15" fill="rgb(227,149,46)" fg:x="1432" fg:w="1"/><text x="97.5987%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10 samples, 0.68%)</title><rect x="97.1448%" y="325" width="0.6798%" height="15" fill="rgb(218,36,50)" fg:x="1429" fg:w="10"/><text x="97.3948%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (10 samples, 0.68%)</title><rect x="97.1448%" y="309" width="0.6798%" height="15" fill="rgb(226,80,48)" fg:x="1429" fg:w="10"/><text x="97.3948%" y="319.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (9 samples, 0.61%)</title><rect x="97.2128%" y="293" width="0.6118%" height="15" fill="rgb(238,224,15)" fg:x="1430" fg:w="9"/><text x="97.4628%" y="303.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (6 samples, 0.41%)</title><rect x="97.4167%" y="277" width="0.4079%" height="15" fill="rgb(241,136,10)" fg:x="1433" fg:w="6"/><text x="97.6667%" y="287.50"></text></g><g><title>mio::poll::Poll::poll (6 samples, 0.41%)</title><rect x="97.4167%" y="261" width="0.4079%" height="15" fill="rgb(208,32,45)" fg:x="1433" fg:w="6"/><text x="97.6667%" y="271.50"></text></g><g><title>epoll_wait (5 samples, 0.34%)</title><rect x="97.4847%" y="245" width="0.3399%" height="15" fill="rgb(207,135,9)" fg:x="1434" fg:w="5"/><text x="97.7347%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.07%)</title><rect x="97.8246%" y="293" width="0.0680%" height="15" fill="rgb(206,86,44)" fg:x="1439" fg:w="1"/><text x="98.0746%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.41%)</title><rect x="97.8246%" y="309" width="0.4079%" height="15" fill="rgb(245,177,15)" fg:x="1439" fg:w="6"/><text x="98.0746%" y="319.50"></text></g><g><title>syscall (5 samples, 0.34%)</title><rect x="97.8926%" y="293" width="0.3399%" height="15" fill="rgb(206,64,50)" fg:x="1440" fg:w="5"/><text x="98.1426%" y="303.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (7 samples, 0.48%)</title><rect x="98.2325%" y="309" width="0.4759%" height="15" fill="rgb(234,36,40)" fg:x="1445" fg:w="7"/><text x="98.4825%" y="319.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (7 samples, 0.48%)</title><rect x="98.2325%" y="293" width="0.4759%" height="15" fill="rgb(213,64,8)" fg:x="1445" fg:w="7"/><text x="98.4825%" y="303.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (7 samples, 0.48%)</title><rect x="98.2325%" y="277" width="0.4759%" height="15" fill="rgb(210,75,36)" fg:x="1445" fg:w="7"/><text x="98.4825%" y="287.50"></text></g><g><title>write (7 samples, 0.48%)</title><rect x="98.2325%" y="261" width="0.4759%" height="15" fill="rgb(229,88,21)" fg:x="1445" fg:w="7"/><text x="98.4825%" y="271.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (9 samples, 0.61%)</title><rect x="98.7084%" y="229" width="0.6118%" height="15" fill="rgb(252,204,47)" fg:x="1452" fg:w="9"/><text x="98.9584%" y="239.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (9 samples, 0.61%)</title><rect x="98.7084%" y="213" width="0.6118%" height="15" fill="rgb(208,77,27)" fg:x="1452" fg:w="9"/><text x="98.9584%" y="223.50"></text></g><g><title>tokio::runtime::park::wake (9 samples, 0.61%)</title><rect x="98.7084%" y="197" width="0.6118%" height="15" fill="rgb(221,76,26)" fg:x="1452" fg:w="9"/><text x="98.9584%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.61%)</title><rect x="98.7084%" y="181" width="0.6118%" height="15" fill="rgb(225,139,18)" fg:x="1452" fg:w="9"/><text x="98.9584%" y="191.50"></text></g><g><title>syscall (9 samples, 0.61%)</title><rect x="98.7084%" y="165" width="0.6118%" height="15" fill="rgb(230,137,11)" fg:x="1452" fg:w="9"/><text x="98.9584%" y="175.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.07%)</title><rect x="99.3882%" y="117" width="0.0680%" height="15" fill="rgb(212,28,1)" fg:x="1462" fg:w="1"/><text x="99.6382%" y="127.50"></text></g><g><title>all (1,471 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="1471"/><text x="0.2500%" y="543.50"></text></g><g><title>tokio-runtime-w (44 samples, 2.99%)</title><rect x="97.0088%" y="517" width="2.9912%" height="15" fill="rgb(222,171,42)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="527.50">tok..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (44 samples, 2.99%)</title><rect x="97.0088%" y="501" width="2.9912%" height="15" fill="rgb(243,84,45)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="511.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (44 samples, 2.99%)</title><rect x="97.0088%" y="485" width="2.9912%" height="15" fill="rgb(252,49,23)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="495.50">cor..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (44 samples, 2.99%)</title><rect x="97.0088%" y="469" width="2.9912%" height="15" fill="rgb(215,19,7)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="479.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (44 samples, 2.99%)</title><rect x="97.0088%" y="453" width="2.9912%" height="15" fill="rgb(238,81,41)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="463.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (44 samples, 2.99%)</title><rect x="97.0088%" y="437" width="2.9912%" height="15" fill="rgb(210,199,37)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="447.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (44 samples, 2.99%)</title><rect x="97.0088%" y="421" width="2.9912%" height="15" fill="rgb(244,192,49)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="431.50">tok..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (44 samples, 2.99%)</title><rect x="97.0088%" y="405" width="2.9912%" height="15" fill="rgb(226,211,11)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="415.50">&lt;to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (44 samples, 2.99%)</title><rect x="97.0088%" y="389" width="2.9912%" height="15" fill="rgb(236,162,54)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="399.50">tok..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (44 samples, 2.99%)</title><rect x="97.0088%" y="373" width="2.9912%" height="15" fill="rgb(220,229,9)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="383.50">tok..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (44 samples, 2.99%)</title><rect x="97.0088%" y="357" width="2.9912%" height="15" fill="rgb(250,87,22)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="367.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (44 samples, 2.99%)</title><rect x="97.0088%" y="341" width="2.9912%" height="15" fill="rgb(239,43,17)" fg:x="1427" fg:w="44"/><text x="97.2588%" y="351.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (32 samples, 2.18%)</title><rect x="97.8246%" y="325" width="2.1754%" height="15" fill="rgb(231,177,25)" fg:x="1439" fg:w="32"/><text x="98.0746%" y="335.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (19 samples, 1.29%)</title><rect x="98.7084%" y="309" width="1.2916%" height="15" fill="rgb(219,179,1)" fg:x="1452" fg:w="19"/><text x="98.9584%" y="319.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (19 samples, 1.29%)</title><rect x="98.7084%" y="293" width="1.2916%" height="15" fill="rgb(238,219,53)" fg:x="1452" fg:w="19"/><text x="98.9584%" y="303.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (19 samples, 1.29%)</title><rect x="98.7084%" y="277" width="1.2916%" height="15" fill="rgb(232,167,36)" fg:x="1452" fg:w="19"/><text x="98.9584%" y="287.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (19 samples, 1.29%)</title><rect x="98.7084%" y="261" width="1.2916%" height="15" fill="rgb(244,19,51)" fg:x="1452" fg:w="19"/><text x="98.9584%" y="271.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (19 samples, 1.29%)</title><rect x="98.7084%" y="245" width="1.2916%" height="15" fill="rgb(224,6,22)" fg:x="1452" fg:w="19"/><text x="98.9584%" y="255.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (10 samples, 0.68%)</title><rect x="99.3202%" y="229" width="0.6798%" height="15" fill="rgb(224,145,5)" fg:x="1461" fg:w="10"/><text x="99.5702%" y="239.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (10 samples, 0.68%)</title><rect x="99.3202%" y="213" width="0.6798%" height="15" fill="rgb(234,130,49)" fg:x="1461" fg:w="10"/><text x="99.5702%" y="223.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (10 samples, 0.68%)</title><rect x="99.3202%" y="197" width="0.6798%" height="15" fill="rgb(254,6,2)" fg:x="1461" fg:w="10"/><text x="99.5702%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (10 samples, 0.68%)</title><rect x="99.3202%" y="181" width="0.6798%" height="15" fill="rgb(208,96,46)" fg:x="1461" fg:w="10"/><text x="99.5702%" y="191.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.68%)</title><rect x="99.3202%" y="165" width="0.6798%" height="15" fill="rgb(239,3,39)" fg:x="1461" fg:w="10"/><text x="99.5702%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 0.68%)</title><rect x="99.3202%" y="149" width="0.6798%" height="15" fill="rgb(233,210,1)" fg:x="1461" fg:w="10"/><text x="99.5702%" y="159.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (9 samples, 0.61%)</title><rect x="99.3882%" y="133" width="0.6118%" height="15" fill="rgb(244,137,37)" fg:x="1462" fg:w="9"/><text x="99.6382%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (8 samples, 0.54%)</title><rect x="99.4562%" y="117" width="0.5438%" height="15" fill="rgb(240,136,2)" fg:x="1463" fg:w="8"/><text x="99.7062%" y="127.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (7 samples, 0.48%)</title><rect x="99.5241%" y="101" width="0.4759%" height="15" fill="rgb(239,18,37)" fg:x="1464" fg:w="7"/><text x="99.7741%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (7 samples, 0.48%)</title><rect x="99.5241%" y="85" width="0.4759%" height="15" fill="rgb(218,185,22)" fg:x="1464" fg:w="7"/><text x="99.7741%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (7 samples, 0.48%)</title><rect x="99.5241%" y="69" width="0.4759%" height="15" fill="rgb(225,218,4)" fg:x="1464" fg:w="7"/><text x="99.7741%" y="79.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (6 samples, 0.41%)</title><rect x="99.5921%" y="53" width="0.4079%" height="15" fill="rgb(230,182,32)" fg:x="1465" fg:w="6"/><text x="99.8421%" y="63.50"></text></g><g><title>recv (6 samples, 0.41%)</title><rect x="99.5921%" y="37" width="0.4079%" height="15" fill="rgb(242,56,43)" fg:x="1465" fg:w="6"/><text x="99.8421%" y="47.50"></text></g></svg></svg>