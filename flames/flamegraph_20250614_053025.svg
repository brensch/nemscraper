<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="787"><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.64%)</title><rect x="1.0165%" y="213" width="0.6353%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="5"/><text x="1.2665%" y="223.50"></text></g><g><title>syscall (5 samples, 0.64%)</title><rect x="1.0165%" y="197" width="0.6353%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="5"/><text x="1.2665%" y="207.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (9 samples, 1.14%)</title><rect x="0.8895%" y="373" width="1.1436%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="9"/><text x="1.1395%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (9 samples, 1.14%)</title><rect x="0.8895%" y="357" width="1.1436%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="9"/><text x="1.1395%" y="367.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (9 samples, 1.14%)</title><rect x="0.8895%" y="341" width="1.1436%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="9"/><text x="1.1395%" y="351.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (9 samples, 1.14%)</title><rect x="0.8895%" y="325" width="1.1436%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="9"/><text x="1.1395%" y="335.50"></text></g><g><title>hyper::body::body::Body::poll_inner (9 samples, 1.14%)</title><rect x="0.8895%" y="309" width="1.1436%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="9"/><text x="1.1395%" y="319.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (8 samples, 1.02%)</title><rect x="1.0165%" y="293" width="1.0165%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="8"/><text x="1.2665%" y="303.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (8 samples, 1.02%)</title><rect x="1.0165%" y="277" width="1.0165%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="8"/><text x="1.2665%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 1.02%)</title><rect x="1.0165%" y="261" width="1.0165%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="8"/><text x="1.2665%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (8 samples, 1.02%)</title><rect x="1.0165%" y="245" width="1.0165%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="8"/><text x="1.2665%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (8 samples, 1.02%)</title><rect x="1.0165%" y="229" width="1.0165%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="8"/><text x="1.2665%" y="239.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (3 samples, 0.38%)</title><rect x="1.6518%" y="213" width="0.3812%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="3"/><text x="1.9018%" y="223.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.25%)</title><rect x="1.7789%" y="197" width="0.2541%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="2"/><text x="2.0289%" y="207.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (2 samples, 0.25%)</title><rect x="1.7789%" y="181" width="0.2541%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="2"/><text x="2.0289%" y="191.50"></text></g><g><title>write (2 samples, 0.25%)</title><rect x="1.7789%" y="165" width="0.2541%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="2"/><text x="2.0289%" y="175.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.25%)</title><rect x="2.1601%" y="325" width="0.2541%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="2"/><text x="2.4101%" y="335.50"></text></g><g><title>crc32fast::Hasher::update (11 samples, 1.40%)</title><rect x="2.0330%" y="357" width="1.3977%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="11"/><text x="2.2830%" y="367.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (11 samples, 1.40%)</title><rect x="2.0330%" y="341" width="1.3977%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="11"/><text x="2.2830%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (8 samples, 1.02%)</title><rect x="2.4142%" y="325" width="1.0165%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="8"/><text x="2.6642%" y="335.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.13%)</title><rect x="3.3037%" y="309" width="0.1271%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="1"/><text x="3.5537%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="5.8450%" y="341" width="0.1271%" height="15" fill="rgb(235,183,28)" fg:x="46" fg:w="1"/><text x="6.0950%" y="351.50"></text></g><g><title>__libc_realloc (1 samples, 0.13%)</title><rect x="5.8450%" y="325" width="0.1271%" height="15" fill="rgb(221,5,38)" fg:x="46" fg:w="1"/><text x="6.0950%" y="335.50"></text></g><g><title>mremap (1 samples, 0.13%)</title><rect x="5.8450%" y="309" width="0.1271%" height="15" fill="rgb(247,18,42)" fg:x="46" fg:w="1"/><text x="6.0950%" y="319.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (60 samples, 7.62%)</title><rect x="6.0991%" y="277" width="7.6239%" height="15" fill="rgb(241,131,45)" fg:x="48" fg:w="60"/><text x="6.3491%" y="287.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (2 samples, 0.25%)</title><rect x="13.7230%" y="277" width="0.2541%" height="15" fill="rgb(249,31,29)" fg:x="108" fg:w="2"/><text x="13.9730%" y="287.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (64 samples, 8.13%)</title><rect x="5.9720%" y="325" width="8.1321%" height="15" fill="rgb(225,111,53)" fg:x="47" fg:w="64"/><text x="6.2220%" y="335.50">&lt;flate2::me..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (64 samples, 8.13%)</title><rect x="5.9720%" y="309" width="8.1321%" height="15" fill="rgb(238,160,17)" fg:x="47" fg:w="64"/><text x="6.2220%" y="319.50">&lt;flate2::ff..</text></g><g><title>zlib_rs::inflate::inflate (64 samples, 8.13%)</title><rect x="5.9720%" y="293" width="8.1321%" height="15" fill="rgb(214,148,48)" fg:x="47" fg:w="64"/><text x="6.2220%" y="303.50">zlib_rs::in..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.13%)</title><rect x="13.9771%" y="277" width="0.1271%" height="15" fill="rgb(232,36,49)" fg:x="110" fg:w="1"/><text x="14.2271%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (97 samples, 12.33%)</title><rect x="2.0330%" y="373" width="12.3253%" height="15" fill="rgb(209,103,24)" fg:x="16" fg:w="97"/><text x="2.2830%" y="383.50">&lt;std::io::buffered..</text></g><g><title>std::io::default_read_to_end (86 samples, 10.93%)</title><rect x="3.4307%" y="357" width="10.9276%" height="15" fill="rgb(229,88,8)" fg:x="27" fg:w="86"/><text x="3.6807%" y="367.50">std::io::default..</text></g><g><title>flate2::zio::read (66 samples, 8.39%)</title><rect x="5.9720%" y="341" width="8.3863%" height="15" fill="rgb(213,181,19)" fg:x="47" fg:w="66"/><text x="6.2220%" y="351.50">flate2::zio:..</text></g><g><title>std::io::default_read_buf (2 samples, 0.25%)</title><rect x="14.1042%" y="325" width="0.2541%" height="15" fill="rgb(254,191,54)" fg:x="111" fg:w="2"/><text x="14.3542%" y="335.50"></text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.25%)</title><rect x="14.1042%" y="309" width="0.2541%" height="15" fill="rgb(241,83,37)" fg:x="111" fg:w="2"/><text x="14.3542%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.64%)</title><rect x="14.8666%" y="357" width="0.6353%" height="15" fill="rgb(233,36,39)" fg:x="117" fg:w="5"/><text x="15.1166%" y="367.50"></text></g><g><title>tokio::io::util::read_line::finish_string_read (2 samples, 0.25%)</title><rect x="15.5019%" y="357" width="0.2541%" height="15" fill="rgb(226,3,54)" fg:x="122" fg:w="2"/><text x="15.7519%" y="367.50"></text></g><g><title>&lt;tokio::io::util::read_line::ReadLine&lt;R&gt; as core::future::future::Future&gt;::poll (23 samples, 2.92%)</title><rect x="14.3583%" y="373" width="2.9225%" height="15" fill="rgb(245,192,40)" fg:x="113" fg:w="23"/><text x="14.6083%" y="383.50">&lt;t..</text></g><g><title>tokio::io::util::read_until::read_until_internal (12 samples, 1.52%)</title><rect x="15.7560%" y="357" width="1.5248%" height="15" fill="rgb(238,167,29)" fg:x="124" fg:w="12"/><text x="16.0060%" y="367.50"></text></g><g><title>tokio::util::memchr::memchr (2 samples, 0.25%)</title><rect x="17.0267%" y="341" width="0.2541%" height="15" fill="rgb(232,182,51)" fg:x="134" fg:w="2"/><text x="17.2767%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.13%)</title><rect x="17.2808%" y="373" width="0.1271%" height="15" fill="rgb(231,60,39)" fg:x="136" fg:w="1"/><text x="17.5308%" y="383.50"></text></g><g><title>openssl::ssl::SslContextBuilder::load_verify_locations (1 samples, 0.13%)</title><rect x="17.4079%" y="277" width="0.1271%" height="15" fill="rgb(208,69,12)" fg:x="137" fg:w="1"/><text x="17.6579%" y="287.50"></text></g><g><title>SSL_CTX_load_verify_locations (1 samples, 0.13%)</title><rect x="17.4079%" y="261" width="0.1271%" height="15" fill="rgb(235,93,37)" fg:x="137" fg:w="1"/><text x="17.6579%" y="271.50"></text></g><g><title>X509_STORE_load_file_ex (1 samples, 0.13%)</title><rect x="17.4079%" y="245" width="0.1271%" height="15" fill="rgb(213,116,39)" fg:x="137" fg:w="1"/><text x="17.6579%" y="255.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.13%)</title><rect x="17.4079%" y="229" width="0.1271%" height="15" fill="rgb(222,207,29)" fg:x="137" fg:w="1"/><text x="17.6579%" y="239.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.13%)</title><rect x="17.4079%" y="213" width="0.1271%" height="15" fill="rgb(206,96,30)" fg:x="137" fg:w="1"/><text x="17.6579%" y="223.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.13%)</title><rect x="17.4079%" y="197" width="0.1271%" height="15" fill="rgb(218,138,4)" fg:x="137" fg:w="1"/><text x="17.6579%" y="207.50"></text></g><g><title>ASN1_item_ex_d2i (1 samples, 0.13%)</title><rect x="17.4079%" y="181" width="0.1271%" height="15" fill="rgb(250,191,14)" fg:x="137" fg:w="1"/><text x="17.6579%" y="191.50"></text></g><g><title>google_cloud_auth::token::DefaultTokenSourceProvider::new::{{closure}} (2 samples, 0.25%)</title><rect x="17.4079%" y="373" width="0.2541%" height="15" fill="rgb(239,60,40)" fg:x="137" fg:w="2"/><text x="17.6579%" y="383.50"></text></g><g><title>google_cloud_auth::token_source::service_account_token_source::OAuth2ServiceAccountTokenSource::new (2 samples, 0.25%)</title><rect x="17.4079%" y="357" width="0.2541%" height="15" fill="rgb(206,27,48)" fg:x="137" fg:w="2"/><text x="17.6579%" y="367.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (2 samples, 0.25%)</title><rect x="17.4079%" y="341" width="0.2541%" height="15" fill="rgb(225,35,8)" fg:x="137" fg:w="2"/><text x="17.6579%" y="351.50"></text></g><g><title>reqwest::connect::ConnectorBuilder::new_default_tls (2 samples, 0.25%)</title><rect x="17.4079%" y="325" width="0.2541%" height="15" fill="rgb(250,213,24)" fg:x="137" fg:w="2"/><text x="17.6579%" y="335.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (2 samples, 0.25%)</title><rect x="17.4079%" y="309" width="0.2541%" height="15" fill="rgb(247,123,22)" fg:x="137" fg:w="2"/><text x="17.6579%" y="319.50"></text></g><g><title>native_tls::imp::TlsConnector::new (2 samples, 0.25%)</title><rect x="17.4079%" y="293" width="0.2541%" height="15" fill="rgb(231,138,38)" fg:x="137" fg:w="2"/><text x="17.6579%" y="303.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (1 samples, 0.13%)</title><rect x="17.5349%" y="277" width="0.1271%" height="15" fill="rgb(231,145,46)" fg:x="138" fg:w="1"/><text x="17.7849%" y="287.50"></text></g><g><title>X509_STORE_set_default_paths_ex (1 samples, 0.13%)</title><rect x="17.5349%" y="261" width="0.1271%" height="15" fill="rgb(251,118,11)" fg:x="138" fg:w="1"/><text x="17.7849%" y="271.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.13%)</title><rect x="17.5349%" y="245" width="0.1271%" height="15" fill="rgb(217,147,25)" fg:x="138" fg:w="1"/><text x="17.7849%" y="255.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.13%)</title><rect x="17.5349%" y="229" width="0.1271%" height="15" fill="rgb(247,81,37)" fg:x="138" fg:w="1"/><text x="17.7849%" y="239.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.13%)</title><rect x="17.5349%" y="213" width="0.1271%" height="15" fill="rgb(209,12,38)" fg:x="138" fg:w="1"/><text x="17.7849%" y="223.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (1 samples, 0.13%)</title><rect x="17.5349%" y="197" width="0.1271%" height="15" fill="rgb(227,1,9)" fg:x="138" fg:w="1"/><text x="17.7849%" y="207.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.13%)</title><rect x="17.5349%" y="181" width="0.1271%" height="15" fill="rgb(248,47,43)" fg:x="138" fg:w="1"/><text x="17.7849%" y="191.50"></text></g><g><title>OSSL_DECODER_is_a (1 samples, 0.13%)</title><rect x="17.5349%" y="165" width="0.1271%" height="15" fill="rgb(221,10,30)" fg:x="138" fg:w="1"/><text x="17.7849%" y="175.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.13%)</title><rect x="17.5349%" y="149" width="0.1271%" height="15" fill="rgb(210,229,1)" fg:x="138" fg:w="1"/><text x="17.7849%" y="159.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.13%)</title><rect x="17.5349%" y="133" width="0.1271%" height="15" fill="rgb(222,148,37)" fg:x="138" fg:w="1"/><text x="17.7849%" y="143.50"></text></g><g><title>openssl::ssl::SslContextBuilder::load_verify_locations (1 samples, 0.13%)</title><rect x="17.6620%" y="277" width="0.1271%" height="15" fill="rgb(234,67,33)" fg:x="139" fg:w="1"/><text x="17.9120%" y="287.50"></text></g><g><title>SSL_CTX_load_verify_locations (1 samples, 0.13%)</title><rect x="17.6620%" y="261" width="0.1271%" height="15" fill="rgb(247,98,35)" fg:x="139" fg:w="1"/><text x="17.9120%" y="271.50"></text></g><g><title>X509_STORE_load_file_ex (1 samples, 0.13%)</title><rect x="17.6620%" y="245" width="0.1271%" height="15" fill="rgb(247,138,52)" fg:x="139" fg:w="1"/><text x="17.9120%" y="255.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.13%)</title><rect x="17.6620%" y="229" width="0.1271%" height="15" fill="rgb(213,79,30)" fg:x="139" fg:w="1"/><text x="17.9120%" y="239.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.13%)</title><rect x="17.6620%" y="213" width="0.1271%" height="15" fill="rgb(246,177,23)" fg:x="139" fg:w="1"/><text x="17.9120%" y="223.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.13%)</title><rect x="17.6620%" y="197" width="0.1271%" height="15" fill="rgb(230,62,27)" fg:x="139" fg:w="1"/><text x="17.9120%" y="207.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (1 samples, 0.13%)</title><rect x="17.6620%" y="181" width="0.1271%" height="15" fill="rgb(216,154,8)" fg:x="139" fg:w="1"/><text x="17.9120%" y="191.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.13%)</title><rect x="17.6620%" y="165" width="0.1271%" height="15" fill="rgb(244,35,45)" fg:x="139" fg:w="1"/><text x="17.9120%" y="175.50"></text></g><g><title>OSSL_DECODER_is_a (1 samples, 0.13%)</title><rect x="17.6620%" y="149" width="0.1271%" height="15" fill="rgb(251,115,12)" fg:x="139" fg:w="1"/><text x="17.9120%" y="159.50"></text></g><g><title>CRYPTO_strndup (1 samples, 0.13%)</title><rect x="17.6620%" y="133" width="0.1271%" height="15" fill="rgb(240,54,50)" fg:x="139" fg:w="1"/><text x="17.9120%" y="143.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="17.6620%" y="117" width="0.1271%" height="15" fill="rgb(233,84,52)" fg:x="139" fg:w="1"/><text x="17.9120%" y="127.50"></text></g><g><title>google_cloud_storage::client::Client::new (2 samples, 0.25%)</title><rect x="17.6620%" y="373" width="0.2541%" height="15" fill="rgb(207,117,47)" fg:x="139" fg:w="2"/><text x="17.9120%" y="383.50"></text></g><g><title>reqwest::async_impl::client::Client::new (2 samples, 0.25%)</title><rect x="17.6620%" y="357" width="0.2541%" height="15" fill="rgb(249,43,39)" fg:x="139" fg:w="2"/><text x="17.9120%" y="367.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (2 samples, 0.25%)</title><rect x="17.6620%" y="341" width="0.2541%" height="15" fill="rgb(209,38,44)" fg:x="139" fg:w="2"/><text x="17.9120%" y="351.50"></text></g><g><title>reqwest::connect::ConnectorBuilder::new_default_tls (2 samples, 0.25%)</title><rect x="17.6620%" y="325" width="0.2541%" height="15" fill="rgb(236,212,23)" fg:x="139" fg:w="2"/><text x="17.9120%" y="335.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (2 samples, 0.25%)</title><rect x="17.6620%" y="309" width="0.2541%" height="15" fill="rgb(242,79,21)" fg:x="139" fg:w="2"/><text x="17.9120%" y="319.50"></text></g><g><title>native_tls::imp::TlsConnector::new (2 samples, 0.25%)</title><rect x="17.6620%" y="293" width="0.2541%" height="15" fill="rgb(211,96,35)" fg:x="139" fg:w="2"/><text x="17.9120%" y="303.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (1 samples, 0.13%)</title><rect x="17.7891%" y="277" width="0.1271%" height="15" fill="rgb(253,215,40)" fg:x="140" fg:w="1"/><text x="18.0391%" y="287.50"></text></g><g><title>X509_STORE_set_default_paths_ex (1 samples, 0.13%)</title><rect x="17.7891%" y="261" width="0.1271%" height="15" fill="rgb(211,81,21)" fg:x="140" fg:w="1"/><text x="18.0391%" y="271.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.13%)</title><rect x="17.7891%" y="245" width="0.1271%" height="15" fill="rgb(208,190,38)" fg:x="140" fg:w="1"/><text x="18.0391%" y="255.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.13%)</title><rect x="17.7891%" y="229" width="0.1271%" height="15" fill="rgb(235,213,38)" fg:x="140" fg:w="1"/><text x="18.0391%" y="239.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.13%)</title><rect x="17.7891%" y="213" width="0.1271%" height="15" fill="rgb(237,122,38)" fg:x="140" fg:w="1"/><text x="18.0391%" y="223.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (1 samples, 0.13%)</title><rect x="17.7891%" y="197" width="0.1271%" height="15" fill="rgb(244,218,35)" fg:x="140" fg:w="1"/><text x="18.0391%" y="207.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.13%)</title><rect x="17.7891%" y="181" width="0.1271%" height="15" fill="rgb(240,68,47)" fg:x="140" fg:w="1"/><text x="18.0391%" y="191.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.13%)</title><rect x="17.7891%" y="165" width="0.1271%" height="15" fill="rgb(210,16,53)" fg:x="140" fg:w="1"/><text x="18.0391%" y="175.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.13%)</title><rect x="17.7891%" y="149" width="0.1271%" height="15" fill="rgb(235,124,12)" fg:x="140" fg:w="1"/><text x="18.0391%" y="159.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.13%)</title><rect x="17.9161%" y="325" width="0.1271%" height="15" fill="rgb(224,169,11)" fg:x="141" fg:w="1"/><text x="18.1661%" y="335.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.13%)</title><rect x="17.9161%" y="309" width="0.1271%" height="15" fill="rgb(250,166,2)" fg:x="141" fg:w="1"/><text x="18.1661%" y="319.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::csv_to_arrow_batch (2 samples, 0.25%)</title><rect x="17.9161%" y="357" width="0.2541%" height="15" fill="rgb(242,216,29)" fg:x="141" fg:w="2"/><text x="18.1661%" y="367.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (2 samples, 0.25%)</title><rect x="17.9161%" y="341" width="0.2541%" height="15" fill="rgb(230,116,27)" fg:x="141" fg:w="2"/><text x="18.1661%" y="351.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.13%)</title><rect x="18.0432%" y="325" width="0.1271%" height="15" fill="rgb(228,99,48)" fg:x="142" fg:w="1"/><text x="18.2932%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.13%)</title><rect x="18.0432%" y="309" width="0.1271%" height="15" fill="rgb(253,11,6)" fg:x="142" fg:w="1"/><text x="18.2932%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.13%)</title><rect x="18.0432%" y="293" width="0.1271%" height="15" fill="rgb(247,143,39)" fg:x="142" fg:w="1"/><text x="18.2932%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.13%)</title><rect x="18.0432%" y="277" width="0.1271%" height="15" fill="rgb(236,97,10)" fg:x="142" fg:w="1"/><text x="18.2932%" y="287.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.13%)</title><rect x="18.0432%" y="261" width="0.1271%" height="15" fill="rgb(233,208,19)" fg:x="142" fg:w="1"/><text x="18.2932%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1 samples, 0.13%)</title><rect x="18.0432%" y="245" width="0.1271%" height="15" fill="rgb(216,164,2)" fg:x="142" fg:w="1"/><text x="18.2932%" y="255.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}} (3 samples, 0.38%)</title><rect x="17.9161%" y="373" width="0.3812%" height="15" fill="rgb(220,129,5)" fg:x="141" fg:w="3"/><text x="18.1661%" y="383.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::write_parquet_to_memory (1 samples, 0.13%)</title><rect x="18.1703%" y="357" width="0.1271%" height="15" fill="rgb(242,17,10)" fg:x="143" fg:w="1"/><text x="18.4203%" y="367.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.13%)</title><rect x="18.1703%" y="341" width="0.1271%" height="15" fill="rgb(242,107,0)" fg:x="143" fg:w="1"/><text x="18.4203%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.13%)</title><rect x="18.1703%" y="325" width="0.1271%" height="15" fill="rgb(251,28,31)" fg:x="143" fg:w="1"/><text x="18.4203%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.13%)</title><rect x="18.1703%" y="309" width="0.1271%" height="15" fill="rgb(233,223,10)" fg:x="143" fg:w="1"/><text x="18.4203%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.13%)</title><rect x="18.1703%" y="293" width="0.1271%" height="15" fill="rgb(215,21,27)" fg:x="143" fg:w="1"/><text x="18.4203%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.13%)</title><rect x="18.1703%" y="277" width="0.1271%" height="15" fill="rgb(232,23,21)" fg:x="143" fg:w="1"/><text x="18.4203%" y="287.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.13%)</title><rect x="18.1703%" y="261" width="0.1271%" height="15" fill="rgb(244,5,23)" fg:x="143" fg:w="1"/><text x="18.4203%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.13%)</title><rect x="18.1703%" y="245" width="0.1271%" height="15" fill="rgb(226,81,46)" fg:x="143" fg:w="1"/><text x="18.4203%" y="255.50"></text></g><g><title>malloc (20 samples, 2.54%)</title><rect x="18.8056%" y="357" width="2.5413%" height="15" fill="rgb(247,70,30)" fg:x="148" fg:w="20"/><text x="19.0556%" y="367.50">ma..</text></g><g><title>cfree (25 samples, 3.18%)</title><rect x="21.3469%" y="341" width="3.1766%" height="15" fill="rgb(212,68,19)" fg:x="168" fg:w="25"/><text x="21.5969%" y="351.50">cfr..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::fmt::Debug&gt;::fmt (2 samples, 0.25%)</title><rect x="26.4295%" y="325" width="0.2541%" height="15" fill="rgb(240,187,13)" fg:x="208" fg:w="2"/><text x="26.6795%" y="335.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.13%)</title><rect x="26.6836%" y="325" width="0.1271%" height="15" fill="rgb(223,113,26)" fg:x="210" fg:w="1"/><text x="26.9336%" y="335.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (4 samples, 0.51%)</title><rect x="26.8107%" y="325" width="0.5083%" height="15" fill="rgb(206,192,2)" fg:x="211" fg:w="4"/><text x="27.0607%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (4 samples, 0.51%)</title><rect x="26.8107%" y="309" width="0.5083%" height="15" fill="rgb(241,108,4)" fg:x="211" fg:w="4"/><text x="27.0607%" y="319.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="27.1919%" y="293" width="0.1271%" height="15" fill="rgb(247,173,49)" fg:x="214" fg:w="1"/><text x="27.4419%" y="303.50"></text></g><g><title>cfree (14 samples, 1.78%)</title><rect x="27.3189%" y="325" width="1.7789%" height="15" fill="rgb(224,114,35)" fg:x="215" fg:w="14"/><text x="27.5689%" y="335.50">c..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (34 samples, 4.32%)</title><rect x="29.0978%" y="325" width="4.3202%" height="15" fill="rgb(245,159,27)" fg:x="229" fg:w="34"/><text x="29.3478%" y="335.50">core:..</text></g><g><title>core::num::dec2flt::parse::parse_number (17 samples, 2.16%)</title><rect x="31.2579%" y="309" width="2.1601%" height="15" fill="rgb(245,172,44)" fg:x="246" fg:w="17"/><text x="31.5079%" y="319.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (8 samples, 1.02%)</title><rect x="34.9428%" y="309" width="1.0165%" height="15" fill="rgb(236,23,11)" fg:x="275" fg:w="8"/><text x="35.1928%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (11 samples, 1.40%)</title><rect x="35.9593%" y="309" width="1.3977%" height="15" fill="rgb(205,117,38)" fg:x="283" fg:w="11"/><text x="36.2093%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (3 samples, 0.38%)</title><rect x="36.9759%" y="293" width="0.3812%" height="15" fill="rgb(237,72,25)" fg:x="291" fg:w="3"/><text x="37.2259%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (32 samples, 4.07%)</title><rect x="33.4180%" y="325" width="4.0661%" height="15" fill="rgb(244,70,9)" fg:x="263" fg:w="32"/><text x="33.6680%" y="335.50">nems..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.13%)</title><rect x="37.3571%" y="309" width="0.1271%" height="15" fill="rgb(217,125,39)" fg:x="294" fg:w="1"/><text x="37.6071%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.13%)</title><rect x="38.8818%" y="309" width="0.1271%" height="15" fill="rgb(235,36,10)" fg:x="306" fg:w="1"/><text x="39.1318%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (11 samples, 1.40%)</title><rect x="39.0089%" y="309" width="1.3977%" height="15" fill="rgb(251,123,47)" fg:x="307" fg:w="11"/><text x="39.2589%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (140 samples, 17.79%)</title><rect x="24.5235%" y="341" width="17.7891%" height="15" fill="rgb(221,13,13)" fg:x="193" fg:w="140"/><text x="24.7735%" y="351.50">nemscraper::process::convert..</text></g><g><title>nemscraper::process::utils::clean_str (38 samples, 4.83%)</title><rect x="37.4841%" y="325" width="4.8285%" height="15" fill="rgb(238,131,9)" fg:x="295" fg:w="38"/><text x="37.7341%" y="335.50">nemscr..</text></g><g><title>malloc (15 samples, 1.91%)</title><rect x="40.4066%" y="309" width="1.9060%" height="15" fill="rgb(211,50,8)" fg:x="318" fg:w="15"/><text x="40.6566%" y="319.50">m..</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::build_csv_content (10 samples, 1.27%)</title><rect x="42.3126%" y="341" width="1.2706%" height="15" fill="rgb(245,182,24)" fg:x="333" fg:w="10"/><text x="42.5626%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (20 samples, 2.54%)</title><rect x="49.4282%" y="277" width="2.5413%" height="15" fill="rgb(242,14,37)" fg:x="389" fg:w="20"/><text x="49.6782%" y="287.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 2.54%)</title><rect x="49.4282%" y="261" width="2.5413%" height="15" fill="rgb(246,228,12)" fg:x="389" fg:w="20"/><text x="49.6782%" y="271.50">al..</text></g><g><title>__libc_realloc (20 samples, 2.54%)</title><rect x="49.4282%" y="245" width="2.5413%" height="15" fill="rgb(213,55,15)" fg:x="389" fg:w="20"/><text x="49.6782%" y="255.50">__..</text></g><g><title>__default_morecore (1 samples, 0.13%)</title><rect x="51.8424%" y="229" width="0.1271%" height="15" fill="rgb(209,9,3)" fg:x="408" fg:w="1"/><text x="52.0924%" y="239.50"></text></g><g><title>__sbrk (1 samples, 0.13%)</title><rect x="51.8424%" y="213" width="0.1271%" height="15" fill="rgb(230,59,30)" fg:x="408" fg:w="1"/><text x="52.0924%" y="223.50"></text></g><g><title>brk (1 samples, 0.13%)</title><rect x="51.8424%" y="197" width="0.1271%" height="15" fill="rgb(209,121,21)" fg:x="408" fg:w="1"/><text x="52.0924%" y="207.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (131 samples, 16.65%)</title><rect x="44.9809%" y="309" width="16.6455%" height="15" fill="rgb(220,109,13)" fg:x="354" fg:w="131"/><text x="45.2309%" y="319.50">arrow_csv::reader::Decoder..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (131 samples, 16.65%)</title><rect x="44.9809%" y="293" width="16.6455%" height="15" fill="rgb(232,18,1)" fg:x="354" fg:w="131"/><text x="45.2309%" y="303.50">arrow_csv::reader::records..</text></g><g><title>csv_core::reader::Reader::read_record (76 samples, 9.66%)</title><rect x="51.9695%" y="277" width="9.6569%" height="15" fill="rgb(215,41,42)" fg:x="409" fg:w="76"/><text x="52.2195%" y="287.50">csv_core::read..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.13%)</title><rect x="61.6264%" y="293" width="0.1271%" height="15" fill="rgb(224,123,36)" fg:x="485" fg:w="1"/><text x="61.8764%" y="303.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (15 samples, 1.91%)</title><rect x="61.7535%" y="293" width="1.9060%" height="15" fill="rgb(240,125,3)" fg:x="486" fg:w="15"/><text x="62.0035%" y="303.50">a..</text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.89%)</title><rect x="62.7700%" y="277" width="0.8895%" height="15" fill="rgb(205,98,50)" fg:x="494" fg:w="7"/><text x="63.0200%" y="287.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (252 samples, 32.02%)</title><rect x="43.5832%" y="325" width="32.0203%" height="15" fill="rgb(205,185,37)" fg:x="343" fg:w="252"/><text x="43.8332%" y="335.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (110 samples, 13.98%)</title><rect x="61.6264%" y="309" width="13.9771%" height="15" fill="rgb(238,207,15)" fg:x="485" fg:w="110"/><text x="61.8764%" y="319.50">arrow_csv::reader::De..</text></g><g><title>core::iter::adapters::try_process (94 samples, 11.94%)</title><rect x="63.6595%" y="293" width="11.9441%" height="15" fill="rgb(213,199,42)" fg:x="501" fg:w="94"/><text x="63.9095%" y="303.50">core::iter::adapte..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (94 samples, 11.94%)</title><rect x="63.6595%" y="277" width="11.9441%" height="15" fill="rgb(235,201,11)" fg:x="501" fg:w="94"/><text x="63.9095%" y="287.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (94 samples, 11.94%)</title><rect x="63.6595%" y="261" width="11.9441%" height="15" fill="rgb(207,46,11)" fg:x="501" fg:w="94"/><text x="63.9095%" y="271.50">&lt;core::iter::adapt..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (94 samples, 11.94%)</title><rect x="63.6595%" y="245" width="11.9441%" height="15" fill="rgb(241,35,35)" fg:x="501" fg:w="94"/><text x="63.9095%" y="255.50">&lt;arrow_array::arra..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (70 samples, 8.89%)</title><rect x="66.7090%" y="229" width="8.8945%" height="15" fill="rgb(243,32,47)" fg:x="525" fg:w="70"/><text x="66.9590%" y="239.50">arrow_array::..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (8 samples, 1.02%)</title><rect x="74.5870%" y="213" width="1.0165%" height="15" fill="rgb(247,202,23)" fg:x="587" fg:w="8"/><text x="74.8370%" y="223.50"></text></g><g><title>__rustc::__rdl_realloc (8 samples, 1.02%)</title><rect x="74.5870%" y="197" width="1.0165%" height="15" fill="rgb(219,102,11)" fg:x="587" fg:w="8"/><text x="74.8370%" y="207.50"></text></g><g><title>posix_memalign (1 samples, 0.13%)</title><rect x="75.4765%" y="181" width="0.1271%" height="15" fill="rgb(243,110,44)" fg:x="594" fg:w="1"/><text x="75.7265%" y="191.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::csv_to_arrow_batch (256 samples, 32.53%)</title><rect x="43.5832%" y="341" width="32.5286%" height="15" fill="rgb(222,74,54)" fg:x="343" fg:w="256"/><text x="43.8332%" y="351.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProc..</text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (4 samples, 0.51%)</title><rect x="75.6036%" y="325" width="0.5083%" height="15" fill="rgb(216,99,12)" fg:x="595" fg:w="4"/><text x="75.8536%" y="335.50"></text></g><g><title>cfree (4 samples, 0.51%)</title><rect x="75.6036%" y="309" width="0.5083%" height="15" fill="rgb(226,22,26)" fg:x="595" fg:w="4"/><text x="75.8536%" y="319.50"></text></g><g><title>__default_morecore (4 samples, 0.51%)</title><rect x="75.6036%" y="293" width="0.5083%" height="15" fill="rgb(217,163,10)" fg:x="595" fg:w="4"/><text x="75.8536%" y="303.50"></text></g><g><title>__sbrk (4 samples, 0.51%)</title><rect x="75.6036%" y="277" width="0.5083%" height="15" fill="rgb(213,25,53)" fg:x="595" fg:w="4"/><text x="75.8536%" y="287.50"></text></g><g><title>brk (4 samples, 0.51%)</title><rect x="75.6036%" y="261" width="0.5083%" height="15" fill="rgb(252,105,26)" fg:x="595" fg:w="4"/><text x="75.8536%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;parquet::data_type::Int64Type&gt;&gt; (1 samples, 0.13%)</title><rect x="76.1118%" y="213" width="0.1271%" height="15" fill="rgb(220,39,43)" fg:x="599" fg:w="1"/><text x="76.3618%" y="223.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="76.1118%" y="197" width="0.1271%" height="15" fill="rgb(229,68,48)" fg:x="599" fg:w="1"/><text x="76.3618%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.13%)</title><rect x="76.2389%" y="213" width="0.1271%" height="15" fill="rgb(252,8,32)" fg:x="600" fg:w="1"/><text x="76.4889%" y="223.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.13%)</title><rect x="76.2389%" y="197" width="0.1271%" height="15" fill="rgb(223,20,43)" fg:x="600" fg:w="1"/><text x="76.4889%" y="207.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.13%)</title><rect x="76.2389%" y="181" width="0.1271%" height="15" fill="rgb(229,81,49)" fg:x="600" fg:w="1"/><text x="76.4889%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.13%)</title><rect x="76.3659%" y="213" width="0.1271%" height="15" fill="rgb(236,28,36)" fg:x="601" fg:w="1"/><text x="76.6159%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.13%)</title><rect x="76.3659%" y="197" width="0.1271%" height="15" fill="rgb(249,185,26)" fg:x="601" fg:w="1"/><text x="76.6159%" y="207.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.13%)</title><rect x="76.3659%" y="181" width="0.1271%" height="15" fill="rgb(249,174,33)" fg:x="601" fg:w="1"/><text x="76.6159%" y="191.50"></text></g><g><title>cfree (1 samples, 0.13%)</title><rect x="76.3659%" y="165" width="0.1271%" height="15" fill="rgb(233,201,37)" fg:x="601" fg:w="1"/><text x="76.6159%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (9 samples, 1.14%)</title><rect x="76.1118%" y="309" width="1.1436%" height="15" fill="rgb(221,78,26)" fg:x="599" fg:w="9"/><text x="76.3618%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 1.14%)</title><rect x="76.1118%" y="293" width="1.1436%" height="15" fill="rgb(250,127,30)" fg:x="599" fg:w="9"/><text x="76.3618%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (9 samples, 1.14%)</title><rect x="76.1118%" y="277" width="1.1436%" height="15" fill="rgb(230,49,44)" fg:x="599" fg:w="9"/><text x="76.3618%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 1.14%)</title><rect x="76.1118%" y="261" width="1.1436%" height="15" fill="rgb(229,67,23)" fg:x="599" fg:w="9"/><text x="76.3618%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (9 samples, 1.14%)</title><rect x="76.1118%" y="245" width="1.1436%" height="15" fill="rgb(249,83,47)" fg:x="599" fg:w="9"/><text x="76.3618%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (9 samples, 1.14%)</title><rect x="76.1118%" y="229" width="1.1436%" height="15" fill="rgb(215,43,3)" fg:x="599" fg:w="9"/><text x="76.3618%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (6 samples, 0.76%)</title><rect x="76.4930%" y="213" width="0.7624%" height="15" fill="rgb(238,154,13)" fg:x="602" fg:w="6"/><text x="76.7430%" y="223.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.76%)</title><rect x="76.4930%" y="197" width="0.7624%" height="15" fill="rgb(219,56,2)" fg:x="602" fg:w="6"/><text x="76.7430%" y="207.50"></text></g><g><title>snap::compress::Encoder::compress (6 samples, 0.76%)</title><rect x="76.4930%" y="181" width="0.7624%" height="15" fill="rgb(233,0,4)" fg:x="602" fg:w="6"/><text x="76.7430%" y="191.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.13%)</title><rect x="77.2554%" y="309" width="0.1271%" height="15" fill="rgb(235,30,7)" fg:x="608" fg:w="1"/><text x="77.5054%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.13%)</title><rect x="77.2554%" y="293" width="0.1271%" height="15" fill="rgb(250,79,13)" fg:x="608" fg:w="1"/><text x="77.5054%" y="303.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.13%)</title><rect x="77.2554%" y="277" width="0.1271%" height="15" fill="rgb(211,146,34)" fg:x="608" fg:w="1"/><text x="77.5054%" y="287.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.13%)</title><rect x="77.2554%" y="261" width="0.1271%" height="15" fill="rgb(228,22,38)" fg:x="608" fg:w="1"/><text x="77.5054%" y="271.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.13%)</title><rect x="77.2554%" y="245" width="0.1271%" height="15" fill="rgb(235,168,5)" fg:x="608" fg:w="1"/><text x="77.5054%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (11 samples, 1.40%)</title><rect x="76.1118%" y="325" width="1.3977%" height="15" fill="rgb(221,155,16)" fg:x="599" fg:w="11"/><text x="76.3618%" y="335.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::close (1 samples, 0.13%)</title><rect x="77.3825%" y="309" width="0.1271%" height="15" fill="rgb(215,215,53)" fg:x="609" fg:w="1"/><text x="77.6325%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 0.13%)</title><rect x="77.3825%" y="293" width="0.1271%" height="15" fill="rgb(223,4,10)" fg:x="609" fg:w="1"/><text x="77.6325%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.13%)</title><rect x="77.3825%" y="277" width="0.1271%" height="15" fill="rgb(234,103,6)" fg:x="609" fg:w="1"/><text x="77.6325%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="77.3825%" y="261" width="0.1271%" height="15" fill="rgb(227,97,0)" fg:x="609" fg:w="1"/><text x="77.6325%" y="271.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="77.3825%" y="245" width="0.1271%" height="15" fill="rgb(234,150,53)" fg:x="609" fg:w="1"/><text x="77.6325%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (15 samples, 1.91%)</title><rect x="77.7637%" y="277" width="1.9060%" height="15" fill="rgb(228,201,54)" fg:x="612" fg:w="15"/><text x="78.0137%" y="287.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (15 samples, 1.91%)</title><rect x="77.7637%" y="261" width="1.9060%" height="15" fill="rgb(222,22,37)" fg:x="612" fg:w="15"/><text x="78.0137%" y="271.50">p..</text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (12 samples, 1.52%)</title><rect x="78.1449%" y="245" width="1.5248%" height="15" fill="rgb(237,53,32)" fg:x="615" fg:w="12"/><text x="78.3949%" y="255.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (10 samples, 1.27%)</title><rect x="78.3990%" y="229" width="1.2706%" height="15" fill="rgb(233,25,53)" fg:x="617" fg:w="10"/><text x="78.6490%" y="239.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (5 samples, 0.64%)</title><rect x="79.0343%" y="213" width="0.6353%" height="15" fill="rgb(210,40,34)" fg:x="622" fg:w="5"/><text x="79.2843%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.13%)</title><rect x="82.4651%" y="245" width="0.1271%" height="15" fill="rgb(241,220,44)" fg:x="649" fg:w="1"/><text x="82.7151%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="82.4651%" y="229" width="0.1271%" height="15" fill="rgb(235,28,35)" fg:x="649" fg:w="1"/><text x="82.7151%" y="239.50"></text></g><g><title>__libc_realloc (1 samples, 0.13%)</title><rect x="82.4651%" y="213" width="0.1271%" height="15" fill="rgb(210,56,17)" fg:x="649" fg:w="1"/><text x="82.7151%" y="223.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="82.5921%" y="245" width="0.1271%" height="15" fill="rgb(224,130,29)" fg:x="650" fg:w="1"/><text x="82.8421%" y="255.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.13%)</title><rect x="83.6086%" y="229" width="0.1271%" height="15" fill="rgb(235,212,8)" fg:x="658" fg:w="1"/><text x="83.8586%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (22 samples, 2.80%)</title><rect x="81.0673%" y="261" width="2.7954%" height="15" fill="rgb(223,33,50)" fg:x="638" fg:w="22"/><text x="81.3173%" y="271.50">&lt;p..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (9 samples, 1.14%)</title><rect x="82.7192%" y="245" width="1.1436%" height="15" fill="rgb(219,149,13)" fg:x="651" fg:w="9"/><text x="82.9692%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.13%)</title><rect x="83.7357%" y="229" width="0.1271%" height="15" fill="rgb(250,156,29)" fg:x="659" fg:w="1"/><text x="83.9857%" y="239.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="84.3710%" y="245" width="0.1271%" height="15" fill="rgb(216,193,19)" fg:x="664" fg:w="1"/><text x="84.6210%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.13%)</title><rect x="85.5146%" y="229" width="0.1271%" height="15" fill="rgb(216,135,14)" fg:x="673" fg:w="1"/><text x="85.7646%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="85.5146%" y="213" width="0.1271%" height="15" fill="rgb(241,47,5)" fg:x="673" fg:w="1"/><text x="85.7646%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.13%)</title><rect x="85.5146%" y="197" width="0.1271%" height="15" fill="rgb(233,42,35)" fg:x="673" fg:w="1"/><text x="85.7646%" y="207.50"></text></g><g><title>parquet::column::writer::compare_greater (14 samples, 1.78%)</title><rect x="85.6417%" y="229" width="1.7789%" height="15" fill="rgb(231,13,6)" fg:x="674" fg:w="14"/><text x="85.8917%" y="239.50">p..</text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (50 samples, 6.35%)</title><rect x="83.8628%" y="261" width="6.3532%" height="15" fill="rgb(207,181,40)" fg:x="660" fg:w="50"/><text x="84.1128%" y="271.50">&lt;parquet..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (45 samples, 5.72%)</title><rect x="84.4981%" y="245" width="5.7179%" height="15" fill="rgb(254,173,49)" fg:x="665" fg:w="45"/><text x="84.7481%" y="255.50">parquet..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (22 samples, 2.80%)</title><rect x="87.4206%" y="229" width="2.7954%" height="15" fill="rgb(221,1,38)" fg:x="688" fg:w="22"/><text x="87.6706%" y="239.50">pa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.38%)</title><rect x="89.8348%" y="213" width="0.3812%" height="15" fill="rgb(206,124,46)" fg:x="707" fg:w="3"/><text x="90.0848%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (5 samples, 0.64%)</title><rect x="90.2160%" y="245" width="0.6353%" height="15" fill="rgb(249,21,11)" fg:x="710" fg:w="5"/><text x="90.4660%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.13%)</title><rect x="90.7243%" y="229" width="0.1271%" height="15" fill="rgb(222,201,40)" fg:x="714" fg:w="1"/><text x="90.9743%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.13%)</title><rect x="90.7243%" y="213" width="0.1271%" height="15" fill="rgb(235,61,29)" fg:x="714" fg:w="1"/><text x="90.9743%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (6 samples, 0.76%)</title><rect x="90.9784%" y="213" width="0.7624%" height="15" fill="rgb(219,207,3)" fg:x="716" fg:w="6"/><text x="91.2284%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (6 samples, 0.76%)</title><rect x="90.9784%" y="197" width="0.7624%" height="15" fill="rgb(222,56,46)" fg:x="716" fg:w="6"/><text x="91.2284%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (12 samples, 1.52%)</title><rect x="90.8513%" y="245" width="1.5248%" height="15" fill="rgb(239,76,54)" fg:x="715" fg:w="12"/><text x="91.1013%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (12 samples, 1.52%)</title><rect x="90.8513%" y="229" width="1.5248%" height="15" fill="rgb(231,124,27)" fg:x="715" fg:w="12"/><text x="91.1013%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (5 samples, 0.64%)</title><rect x="91.7408%" y="213" width="0.6353%" height="15" fill="rgb(249,195,6)" fg:x="722" fg:w="5"/><text x="91.9908%" y="223.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.76%)</title><rect x="92.3761%" y="245" width="0.7624%" height="15" fill="rgb(237,174,47)" fg:x="727" fg:w="6"/><text x="92.6261%" y="255.50"></text></g><g><title>snap::compress::Encoder::compress (6 samples, 0.76%)</title><rect x="92.3761%" y="229" width="0.7624%" height="15" fill="rgb(206,201,31)" fg:x="727" fg:w="6"/><text x="92.6261%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (125 samples, 15.88%)</title><rect x="77.5095%" y="309" width="15.8831%" height="15" fill="rgb(231,57,52)" fg:x="610" fg:w="125"/><text x="77.7595%" y="319.50">parquet::arrow::arrow_wr..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (123 samples, 15.63%)</title><rect x="77.7637%" y="293" width="15.6290%" height="15" fill="rgb(248,177,22)" fg:x="612" fg:w="123"/><text x="78.0137%" y="303.50">parquet::arrow::arrow_wr..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (108 samples, 13.72%)</title><rect x="79.6696%" y="277" width="13.7230%" height="15" fill="rgb(215,211,37)" fg:x="627" fg:w="108"/><text x="79.9196%" y="287.50">parquet::column::writ..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (25 samples, 3.18%)</title><rect x="90.2160%" y="261" width="3.1766%" height="15" fill="rgb(241,128,51)" fg:x="710" fg:w="25"/><text x="90.4660%" y="271.50">par..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (2 samples, 0.25%)</title><rect x="93.1385%" y="245" width="0.2541%" height="15" fill="rgb(227,165,31)" fg:x="733" fg:w="2"/><text x="93.3885%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (126 samples, 16.01%)</title><rect x="77.5095%" y="325" width="16.0102%" height="15" fill="rgb(228,167,24)" fg:x="610" fg:w="126"/><text x="77.7595%" y="335.50">parquet::arrow::arrow_wri..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriterFactory::create_row_group_writer (1 samples, 0.13%)</title><rect x="93.3926%" y="309" width="0.1271%" height="15" fill="rgb(228,143,12)" fg:x="735" fg:w="1"/><text x="93.6426%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::get_column_writers (1 samples, 0.13%)</title><rect x="93.3926%" y="293" width="0.1271%" height="15" fill="rgb(249,149,8)" fg:x="735" fg:w="1"/><text x="93.6426%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriterFactory::get_arrow_column_writer (1 samples, 0.13%)</title><rect x="93.3926%" y="277" width="0.1271%" height="15" fill="rgb(243,35,44)" fg:x="735" fg:w="1"/><text x="93.6426%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriterFactory::get_arrow_column_writer::{{closure}} (1 samples, 0.13%)</title><rect x="93.3926%" y="261" width="0.1271%" height="15" fill="rgb(246,89,9)" fg:x="735" fg:w="1"/><text x="93.6426%" y="271.50"></text></g><g><title>parquet::column::writer::get_column_writer (1 samples, 0.13%)</title><rect x="93.3926%" y="245" width="0.1271%" height="15" fill="rgb(233,213,13)" fg:x="735" fg:w="1"/><text x="93.6426%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::try_new (1 samples, 0.13%)</title><rect x="93.3926%" y="229" width="0.1271%" height="15" fill="rgb(233,141,41)" fg:x="735" fg:w="1"/><text x="93.6426%" y="239.50"></text></g><g><title>parquet::file::properties::WriterProperties::dictionary_enabled (1 samples, 0.13%)</title><rect x="93.3926%" y="213" width="0.1271%" height="15" fill="rgb(239,167,4)" fg:x="735" fg:w="1"/><text x="93.6426%" y="223.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::write_parquet_to_memory (138 samples, 17.53%)</title><rect x="76.1118%" y="341" width="17.5349%" height="15" fill="rgb(209,217,16)" fg:x="599" fg:w="138"/><text x="76.3618%" y="351.50">nemscraper::process::gcs_pr..</text></g><g><title>parquet::file::writer::SerializedFileWriter&lt;W&gt;::finish (1 samples, 0.13%)</title><rect x="93.5197%" y="325" width="0.1271%" height="15" fill="rgb(219,88,35)" fg:x="736" fg:w="1"/><text x="93.7697%" y="335.50"></text></g><g><title>parquet::file::metadata::writer::ThriftMetadataWriter&lt;W&gt;::finish (1 samples, 0.13%)</title><rect x="93.5197%" y="309" width="0.1271%" height="15" fill="rgb(220,193,23)" fg:x="736" fg:w="1"/><text x="93.7697%" y="319.50"></text></g><g><title>&lt;parquet::format::ColumnIndex as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.13%)</title><rect x="93.5197%" y="293" width="0.1271%" height="15" fill="rgb(230,90,52)" fg:x="736" fg:w="1"/><text x="93.7697%" y="303.50"></text></g><g><title>&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_bytes (1 samples, 0.13%)</title><rect x="93.5197%" y="277" width="0.1271%" height="15" fill="rgb(252,106,19)" fg:x="736" fg:w="1"/><text x="93.7697%" y="287.50"></text></g><g><title>reqwest::async_impl::response::Response::json::{{closure}} (1 samples, 0.13%)</title><rect x="93.6468%" y="341" width="0.1271%" height="15" fill="rgb(206,74,20)" fg:x="737" fg:w="1"/><text x="93.8968%" y="351.50"></text></g><g><title>reqwest::async_impl::response::Response::bytes::{{closure}} (1 samples, 0.13%)</title><rect x="93.6468%" y="325" width="0.1271%" height="15" fill="rgb(230,138,44)" fg:x="737" fg:w="1"/><text x="93.8968%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body_util::combinators::collect::Collect&lt;reqwest::async_impl::decoder::Decoder&gt;&gt; (1 samples, 0.13%)</title><rect x="93.6468%" y="309" width="0.1271%" height="15" fill="rgb(235,182,43)" fg:x="737" fg:w="1"/><text x="93.8968%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body_util::stream::StreamBody&lt;sync_wrapper::SyncStream&lt;futures_util::stream::try_stream::MapErr&lt;futures_util::stream::try_stream::MapOk&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,reqwest::error::Error&gt;+core::marker::Send+core::marker::Sync&gt;&gt;,reqwest::async_impl::body::Body::stream&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;bytes::bytes::Bytes,reqwest::error::Error&gt;+core::marker::Send+core::marker::Sync&gt;&gt;&gt;::{{closure}}&gt;,&lt;reqwest::error::Error as core::convert::Into&lt;alloc::boxed::Box&lt;dyn core::error::Error+core::marker::Send+core::marker::Sync&gt;&gt;&gt;::into&gt;&gt;&gt;&gt; (1 samples, 0.13%)</title><rect x="93.6468%" y="293" width="0.1271%" height="15" fill="rgb(242,16,51)" fg:x="737" fg:w="1"/><text x="93.8968%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::incoming::Incoming&gt; (1 samples, 0.13%)</title><rect x="93.6468%" y="277" width="0.1271%" height="15" fill="rgb(248,9,4)" fg:x="737" fg:w="1"/><text x="93.8968%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.13%)</title><rect x="93.6468%" y="261" width="0.1271%" height="15" fill="rgb(210,31,22)" fg:x="737" fg:w="1"/><text x="93.8968%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.13%)</title><rect x="93.6468%" y="245" width="0.1271%" height="15" fill="rgb(239,54,39)" fg:x="737" fg:w="1"/><text x="93.8968%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.13%)</title><rect x="93.6468%" y="229" width="0.1271%" height="15" fill="rgb(230,99,41)" fg:x="737" fg:w="1"/><text x="93.8968%" y="239.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (1 samples, 0.13%)</title><rect x="93.6468%" y="213" width="0.1271%" height="15" fill="rgb(253,106,12)" fg:x="737" fg:w="1"/><text x="93.8968%" y="223.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.13%)</title><rect x="93.6468%" y="197" width="0.1271%" height="15" fill="rgb(213,46,41)" fg:x="737" fg:w="1"/><text x="93.8968%" y="207.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 0.13%)</title><rect x="93.6468%" y="181" width="0.1271%" height="15" fill="rgb(215,133,35)" fg:x="737" fg:w="1"/><text x="93.8968%" y="191.50"></text></g><g><title>write (1 samples, 0.13%)</title><rect x="93.6468%" y="165" width="0.1271%" height="15" fill="rgb(213,28,5)" fg:x="737" fg:w="1"/><text x="93.8968%" y="175.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (739 samples, 93.90%)</title><rect x="0.0000%" y="405" width="93.9009%" height="15" fill="rgb(215,77,49)" fg:x="0" fg:w="739"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::stream_zip_to_parquet_gcs::{{closure}}::{{closure}} (739 samples, 93.90%)</title><rect x="0.0000%" y="389" width="93.9009%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="739"/><text x="0.2500%" y="399.50">nemscraper::process::split::stream_zip_to_parquet_gcs::{{closure}}::{{closure}}</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::process_line::{{closure}} (595 samples, 75.60%)</title><rect x="18.2973%" y="373" width="75.6036%" height="15" fill="rgb(208,67,9)" fg:x="144" fg:w="595"/><text x="18.5473%" y="383.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::process_line::{{closure}}</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}} (571 samples, 72.55%)</title><rect x="21.3469%" y="357" width="72.5540%" height="15" fill="rgb(219,133,21)" fg:x="168" fg:w="571"/><text x="21.5969%" y="367.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}}</text></g><g><title>reqwest_middleware::client::ClientWithMiddleware::execute_with_extensions::{{closure}} (1 samples, 0.13%)</title><rect x="93.7738%" y="341" width="0.1271%" height="15" fill="rgb(246,46,29)" fg:x="738" fg:w="1"/><text x="94.0238%" y="351.50"></text></g><g><title>reqwest_middleware::middleware::Next::run::{{closure}} (1 samples, 0.13%)</title><rect x="93.7738%" y="325" width="0.1271%" height="15" fill="rgb(246,185,52)" fg:x="738" fg:w="1"/><text x="94.0238%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.13%)</title><rect x="93.7738%" y="309" width="0.1271%" height="15" fill="rgb(252,136,11)" fg:x="738" fg:w="1"/><text x="94.0238%" y="319.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.13%)</title><rect x="93.7738%" y="293" width="0.1271%" height="15" fill="rgb(219,138,53)" fg:x="738" fg:w="1"/><text x="94.0238%" y="303.50"></text></g><g><title>&lt;tower_http::follow_redirect::ResponseFuture&lt;S,ReqBody,P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.13%)</title><rect x="93.7738%" y="277" width="0.1271%" height="15" fill="rgb(211,51,23)" fg:x="738" fg:w="1"/><text x="94.0238%" y="287.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (1 samples, 0.13%)</title><rect x="93.7738%" y="261" width="0.1271%" height="15" fill="rgb(247,221,28)" fg:x="738" fg:w="1"/><text x="94.0238%" y="271.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.13%)</title><rect x="93.7738%" y="245" width="0.1271%" height="15" fill="rgb(251,222,45)" fg:x="738" fg:w="1"/><text x="94.0238%" y="255.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (1 samples, 0.13%)</title><rect x="93.7738%" y="229" width="0.1271%" height="15" fill="rgb(217,162,53)" fg:x="738" fg:w="1"/><text x="94.0238%" y="239.50"></text></g><g><title>&lt;tokio::sync::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.13%)</title><rect x="93.7738%" y="213" width="0.1271%" height="15" fill="rgb(229,93,14)" fg:x="738" fg:w="1"/><text x="94.0238%" y="223.50"></text></g><g><title>chrono::offset::local::Local::now (1 samples, 0.13%)</title><rect x="93.9009%" y="405" width="0.1271%" height="15" fill="rgb(209,67,49)" fg:x="739" fg:w="1"/><text x="94.1509%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.13%)</title><rect x="93.9009%" y="389" width="0.1271%" height="15" fill="rgb(213,87,29)" fg:x="739" fg:w="1"/><text x="94.1509%" y="399.50"></text></g><g><title>&lt;chrono::offset::local::inner::Cache as core::default::Default&gt;::default (1 samples, 0.13%)</title><rect x="93.9009%" y="373" width="0.1271%" height="15" fill="rgb(205,151,52)" fg:x="739" fg:w="1"/><text x="94.1509%" y="383.50"></text></g><g><title>chrono::offset::local::inner::current_zone (1 samples, 0.13%)</title><rect x="93.9009%" y="357" width="0.1271%" height="15" fill="rgb(253,215,39)" fg:x="739" fg:w="1"/><text x="94.1509%" y="367.50"></text></g><g><title>chrono::offset::local::tz_info::timezone::TimeZone::from_posix_tz (1 samples, 0.13%)</title><rect x="93.9009%" y="341" width="0.1271%" height="15" fill="rgb(221,220,41)" fg:x="739" fg:w="1"/><text x="94.1509%" y="351.50"></text></g><g><title>std::fs::read::inner (1 samples, 0.13%)</title><rect x="93.9009%" y="325" width="0.1271%" height="15" fill="rgb(218,133,21)" fg:x="739" fg:w="1"/><text x="94.1509%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.13%)</title><rect x="93.9009%" y="309" width="0.1271%" height="15" fill="rgb(221,193,43)" fg:x="739" fg:w="1"/><text x="94.1509%" y="319.50"></text></g><g><title>malloc (1 samples, 0.13%)</title><rect x="93.9009%" y="293" width="0.1271%" height="15" fill="rgb(240,128,52)" fg:x="739" fg:w="1"/><text x="94.1509%" y="303.50"></text></g><g><title>bench_zip_to_pa (745 samples, 94.66%)</title><rect x="0.0000%" y="581" width="94.6633%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="745"/><text x="0.2500%" y="591.50">bench_zip_to_pa</text></g><g><title>_start (745 samples, 94.66%)</title><rect x="0.0000%" y="565" width="94.6633%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="745"/><text x="0.2500%" y="575.50">_start</text></g><g><title>__libc_start_main (745 samples, 94.66%)</title><rect x="0.0000%" y="549" width="94.6633%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="745"/><text x="0.2500%" y="559.50">__libc_start_main</text></g><g><title>main (745 samples, 94.66%)</title><rect x="0.0000%" y="533" width="94.6633%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="745"/><text x="0.2500%" y="543.50">main</text></g><g><title>std::rt::lang_start_internal (745 samples, 94.66%)</title><rect x="0.0000%" y="517" width="94.6633%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="745"/><text x="0.2500%" y="527.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (745 samples, 94.66%)</title><rect x="0.0000%" y="501" width="94.6633%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="745"/><text x="0.2500%" y="511.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (745 samples, 94.66%)</title><rect x="0.0000%" y="485" width="94.6633%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="745"/><text x="0.2500%" y="495.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (745 samples, 94.66%)</title><rect x="0.0000%" y="469" width="94.6633%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="745"/><text x="0.2500%" y="479.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (745 samples, 94.66%)</title><rect x="0.0000%" y="453" width="94.6633%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="745"/><text x="0.2500%" y="463.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (745 samples, 94.66%)</title><rect x="0.0000%" y="437" width="94.6633%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="745"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (745 samples, 94.66%)</title><rect x="0.0000%" y="421" width="94.6633%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="745"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 0.64%)</title><rect x="94.0280%" y="405" width="0.6353%" height="15" fill="rgb(225,32,20)" fg:x="740" fg:w="5"/><text x="94.2780%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 0.64%)</title><rect x="94.0280%" y="389" width="0.6353%" height="15" fill="rgb(215,141,46)" fg:x="740" fg:w="5"/><text x="94.2780%" y="399.50"></text></g><g><title>syscall (4 samples, 0.51%)</title><rect x="94.1550%" y="373" width="0.5083%" height="15" fill="rgb(250,160,47)" fg:x="741" fg:w="4"/><text x="94.4050%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.13%)</title><rect x="94.7903%" y="389" width="0.1271%" height="15" fill="rgb(216,222,40)" fg:x="746" fg:w="1"/><text x="95.0403%" y="399.50"></text></g><g><title>clock_gettime (1 samples, 0.13%)</title><rect x="94.7903%" y="373" width="0.1271%" height="15" fill="rgb(234,217,39)" fg:x="746" fg:w="1"/><text x="95.0403%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.25%)</title><rect x="94.9174%" y="357" width="0.2541%" height="15" fill="rgb(207,178,40)" fg:x="747" fg:w="2"/><text x="95.1674%" y="367.50"></text></g><g><title>syscall (2 samples, 0.25%)</title><rect x="94.9174%" y="341" width="0.2541%" height="15" fill="rgb(221,136,13)" fg:x="747" fg:w="2"/><text x="95.1674%" y="351.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.13%)</title><rect x="95.1715%" y="357" width="0.1271%" height="15" fill="rgb(249,199,10)" fg:x="749" fg:w="1"/><text x="95.4215%" y="367.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.13%)</title><rect x="95.1715%" y="341" width="0.1271%" height="15" fill="rgb(249,222,13)" fg:x="749" fg:w="1"/><text x="95.4215%" y="351.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 0.25%)</title><rect x="95.2986%" y="325" width="0.2541%" height="15" fill="rgb(244,185,38)" fg:x="750" fg:w="2"/><text x="95.5486%" y="335.50"></text></g><g><title>epoll_wait (2 samples, 0.25%)</title><rect x="95.2986%" y="309" width="0.2541%" height="15" fill="rgb(236,202,9)" fg:x="750" fg:w="2"/><text x="95.5486%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (6 samples, 0.76%)</title><rect x="94.9174%" y="389" width="0.7624%" height="15" fill="rgb(250,229,37)" fg:x="747" fg:w="6"/><text x="95.1674%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (6 samples, 0.76%)</title><rect x="94.9174%" y="373" width="0.7624%" height="15" fill="rgb(206,174,23)" fg:x="747" fg:w="6"/><text x="95.1674%" y="383.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 0.38%)</title><rect x="95.2986%" y="357" width="0.3812%" height="15" fill="rgb(211,33,43)" fg:x="750" fg:w="3"/><text x="95.5486%" y="367.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (3 samples, 0.38%)</title><rect x="95.2986%" y="341" width="0.3812%" height="15" fill="rgb(245,58,50)" fg:x="750" fg:w="3"/><text x="95.5486%" y="351.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.13%)</title><rect x="95.5527%" y="325" width="0.1271%" height="15" fill="rgb(244,68,36)" fg:x="752" fg:w="1"/><text x="95.8027%" y="335.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.13%)</title><rect x="95.5527%" y="309" width="0.1271%" height="15" fill="rgb(232,229,15)" fg:x="752" fg:w="1"/><text x="95.8027%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.13%)</title><rect x="95.5527%" y="293" width="0.1271%" height="15" fill="rgb(254,30,23)" fg:x="752" fg:w="1"/><text x="95.8027%" y="303.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.13%)</title><rect x="95.5527%" y="277" width="0.1271%" height="15" fill="rgb(235,160,14)" fg:x="752" fg:w="1"/><text x="95.8027%" y="287.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.13%)</title><rect x="95.5527%" y="261" width="0.1271%" height="15" fill="rgb(212,155,44)" fg:x="752" fg:w="1"/><text x="95.8027%" y="271.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.38%)</title><rect x="95.6798%" y="373" width="0.3812%" height="15" fill="rgb(226,2,50)" fg:x="753" fg:w="3"/><text x="95.9298%" y="383.50"></text></g><g><title>syscall (3 samples, 0.38%)</title><rect x="95.6798%" y="357" width="0.3812%" height="15" fill="rgb(234,177,6)" fg:x="753" fg:w="3"/><text x="95.9298%" y="367.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (3 samples, 0.38%)</title><rect x="96.0610%" y="373" width="0.3812%" height="15" fill="rgb(217,24,9)" fg:x="756" fg:w="3"/><text x="96.3110%" y="383.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (3 samples, 0.38%)</title><rect x="96.0610%" y="357" width="0.3812%" height="15" fill="rgb(220,13,46)" fg:x="756" fg:w="3"/><text x="96.3110%" y="367.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (3 samples, 0.38%)</title><rect x="96.0610%" y="341" width="0.3812%" height="15" fill="rgb(239,221,27)" fg:x="756" fg:w="3"/><text x="96.3110%" y="351.50"></text></g><g><title>write (3 samples, 0.38%)</title><rect x="96.0610%" y="325" width="0.3812%" height="15" fill="rgb(222,198,25)" fg:x="756" fg:w="3"/><text x="96.3110%" y="335.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.13%)</title><rect x="96.4422%" y="213" width="0.1271%" height="15" fill="rgb(211,99,13)" fg:x="759" fg:w="1"/><text x="96.6922%" y="223.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (7 samples, 0.89%)</title><rect x="96.4422%" y="277" width="0.8895%" height="15" fill="rgb(232,111,31)" fg:x="759" fg:w="7"/><text x="96.6922%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (7 samples, 0.89%)</title><rect x="96.4422%" y="261" width="0.8895%" height="15" fill="rgb(245,82,37)" fg:x="759" fg:w="7"/><text x="96.6922%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (7 samples, 0.89%)</title><rect x="96.4422%" y="245" width="0.8895%" height="15" fill="rgb(227,149,46)" fg:x="759" fg:w="7"/><text x="96.6922%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.89%)</title><rect x="96.4422%" y="229" width="0.8895%" height="15" fill="rgb(218,36,50)" fg:x="759" fg:w="7"/><text x="96.6922%" y="239.50"></text></g><g><title>syscall (6 samples, 0.76%)</title><rect x="96.5693%" y="213" width="0.7624%" height="15" fill="rgb(226,80,48)" fg:x="760" fg:w="6"/><text x="96.8193%" y="223.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.13%)</title><rect x="97.4587%" y="133" width="0.1271%" height="15" fill="rgb(238,224,15)" fg:x="767" fg:w="1"/><text x="97.7087%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.13%)</title><rect x="97.4587%" y="117" width="0.1271%" height="15" fill="rgb(241,136,10)" fg:x="767" fg:w="1"/><text x="97.7087%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (5 samples, 0.64%)</title><rect x="97.4587%" y="165" width="0.6353%" height="15" fill="rgb(208,32,45)" fg:x="767" fg:w="5"/><text x="97.7087%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (5 samples, 0.64%)</title><rect x="97.4587%" y="149" width="0.6353%" height="15" fill="rgb(207,135,9)" fg:x="767" fg:w="5"/><text x="97.7087%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (4 samples, 0.51%)</title><rect x="97.5858%" y="133" width="0.5083%" height="15" fill="rgb(206,86,44)" fg:x="768" fg:w="4"/><text x="97.8358%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (4 samples, 0.51%)</title><rect x="97.5858%" y="117" width="0.5083%" height="15" fill="rgb(245,177,15)" fg:x="768" fg:w="4"/><text x="97.8358%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (3 samples, 0.38%)</title><rect x="97.7128%" y="101" width="0.3812%" height="15" fill="rgb(206,64,50)" fg:x="769" fg:w="3"/><text x="97.9628%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (3 samples, 0.38%)</title><rect x="97.7128%" y="85" width="0.3812%" height="15" fill="rgb(234,36,40)" fg:x="769" fg:w="3"/><text x="97.9628%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (3 samples, 0.38%)</title><rect x="97.7128%" y="69" width="0.3812%" height="15" fill="rgb(213,64,8)" fg:x="769" fg:w="3"/><text x="97.9628%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (2 samples, 0.25%)</title><rect x="97.8399%" y="53" width="0.2541%" height="15" fill="rgb(210,75,36)" fg:x="770" fg:w="2"/><text x="98.0899%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (2 samples, 0.25%)</title><rect x="97.8399%" y="37" width="0.2541%" height="15" fill="rgb(229,88,21)" fg:x="770" fg:w="2"/><text x="98.0899%" y="47.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (19 samples, 2.41%)</title><rect x="96.4422%" y="373" width="2.4142%" height="15" fill="rgb(252,204,47)" fg:x="759" fg:w="19"/><text x="96.6922%" y="383.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (19 samples, 2.41%)</title><rect x="96.4422%" y="357" width="2.4142%" height="15" fill="rgb(208,77,27)" fg:x="759" fg:w="19"/><text x="96.6922%" y="367.50">to..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (19 samples, 2.41%)</title><rect x="96.4422%" y="341" width="2.4142%" height="15" fill="rgb(221,76,26)" fg:x="759" fg:w="19"/><text x="96.6922%" y="351.50">&lt;f..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (19 samples, 2.41%)</title><rect x="96.4422%" y="325" width="2.4142%" height="15" fill="rgb(225,139,18)" fg:x="759" fg:w="19"/><text x="96.6922%" y="335.50">&lt;h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (19 samples, 2.41%)</title><rect x="96.4422%" y="309" width="2.4142%" height="15" fill="rgb(230,137,11)" fg:x="759" fg:w="19"/><text x="96.6922%" y="319.50">hy..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (19 samples, 2.41%)</title><rect x="96.4422%" y="293" width="2.4142%" height="15" fill="rgb(212,28,1)" fg:x="759" fg:w="19"/><text x="96.6922%" y="303.50">hy..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (12 samples, 1.52%)</title><rect x="97.3316%" y="277" width="1.5248%" height="15" fill="rgb(248,164,17)" fg:x="766" fg:w="12"/><text x="97.5816%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (11 samples, 1.40%)</title><rect x="97.4587%" y="261" width="1.3977%" height="15" fill="rgb(222,171,42)" fg:x="767" fg:w="11"/><text x="97.7087%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (11 samples, 1.40%)</title><rect x="97.4587%" y="245" width="1.3977%" height="15" fill="rgb(243,84,45)" fg:x="767" fg:w="11"/><text x="97.7087%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (11 samples, 1.40%)</title><rect x="97.4587%" y="229" width="1.3977%" height="15" fill="rgb(252,49,23)" fg:x="767" fg:w="11"/><text x="97.7087%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.40%)</title><rect x="97.4587%" y="213" width="1.3977%" height="15" fill="rgb(215,19,7)" fg:x="767" fg:w="11"/><text x="97.7087%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.40%)</title><rect x="97.4587%" y="197" width="1.3977%" height="15" fill="rgb(238,81,41)" fg:x="767" fg:w="11"/><text x="97.7087%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (11 samples, 1.40%)</title><rect x="97.4587%" y="181" width="1.3977%" height="15" fill="rgb(210,199,37)" fg:x="767" fg:w="11"/><text x="97.7087%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (6 samples, 0.76%)</title><rect x="98.0940%" y="165" width="0.7624%" height="15" fill="rgb(244,192,49)" fg:x="772" fg:w="6"/><text x="98.3440%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (5 samples, 0.64%)</title><rect x="98.2211%" y="149" width="0.6353%" height="15" fill="rgb(226,211,11)" fg:x="773" fg:w="5"/><text x="98.4711%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.51%)</title><rect x="98.3482%" y="133" width="0.5083%" height="15" fill="rgb(236,162,54)" fg:x="774" fg:w="4"/><text x="98.5982%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.51%)</title><rect x="98.3482%" y="117" width="0.5083%" height="15" fill="rgb(220,229,9)" fg:x="774" fg:w="4"/><text x="98.5982%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (4 samples, 0.51%)</title><rect x="98.3482%" y="101" width="0.5083%" height="15" fill="rgb(250,87,22)" fg:x="774" fg:w="4"/><text x="98.5982%" y="111.50"></text></g><g><title>recv (4 samples, 0.51%)</title><rect x="98.3482%" y="85" width="0.5083%" height="15" fill="rgb(239,43,17)" fg:x="774" fg:w="4"/><text x="98.5982%" y="95.50"></text></g><g><title>BIO_write (1 samples, 0.13%)</title><rect x="99.2376%" y="197" width="0.1271%" height="15" fill="rgb(231,177,25)" fg:x="781" fg:w="1"/><text x="99.4876%" y="207.50"></text></g><g><title>openssl::ssl::bio::bwrite (1 samples, 0.13%)</title><rect x="99.2376%" y="181" width="0.1271%" height="15" fill="rgb(219,179,1)" fg:x="781" fg:w="1"/><text x="99.4876%" y="191.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (1 samples, 0.13%)</title><rect x="99.2376%" y="165" width="0.1271%" height="15" fill="rgb(238,219,53)" fg:x="781" fg:w="1"/><text x="99.4876%" y="175.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (1 samples, 0.13%)</title><rect x="99.2376%" y="149" width="0.1271%" height="15" fill="rgb(232,167,36)" fg:x="781" fg:w="1"/><text x="99.4876%" y="159.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (1 samples, 0.13%)</title><rect x="99.2376%" y="133" width="0.1271%" height="15" fill="rgb(244,19,51)" fg:x="781" fg:w="1"/><text x="99.4876%" y="143.50"></text></g><g><title>__send (1 samples, 0.13%)</title><rect x="99.2376%" y="117" width="0.1271%" height="15" fill="rgb(224,6,22)" fg:x="781" fg:w="1"/><text x="99.4876%" y="127.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (5 samples, 0.64%)</title><rect x="99.1105%" y="293" width="0.6353%" height="15" fill="rgb(224,145,5)" fg:x="780" fg:w="5"/><text x="99.3605%" y="303.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (5 samples, 0.64%)</title><rect x="99.1105%" y="277" width="0.6353%" height="15" fill="rgb(234,130,49)" fg:x="780" fg:w="5"/><text x="99.3605%" y="287.50"></text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write (5 samples, 0.64%)</title><rect x="99.1105%" y="261" width="0.6353%" height="15" fill="rgb(254,6,2)" fg:x="780" fg:w="5"/><text x="99.3605%" y="271.50"></text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (5 samples, 0.64%)</title><rect x="99.1105%" y="245" width="0.6353%" height="15" fill="rgb(208,96,46)" fg:x="780" fg:w="5"/><text x="99.3605%" y="255.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Write&gt;::write (5 samples, 0.64%)</title><rect x="99.1105%" y="229" width="0.6353%" height="15" fill="rgb(239,3,39)" fg:x="780" fg:w="5"/><text x="99.3605%" y="239.50"></text></g><g><title>SSL_write_ex (5 samples, 0.64%)</title><rect x="99.1105%" y="213" width="0.6353%" height="15" fill="rgb(233,210,1)" fg:x="780" fg:w="5"/><text x="99.3605%" y="223.50"></text></g><g><title>EVP_EncryptUpdate (3 samples, 0.38%)</title><rect x="99.3647%" y="197" width="0.3812%" height="15" fill="rgb(244,137,37)" fg:x="782" fg:w="3"/><text x="99.6147%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (1 samples, 0.13%)</title><rect x="99.7459%" y="293" width="0.1271%" height="15" fill="rgb(240,136,2)" fg:x="785" fg:w="1"/><text x="99.9959%" y="303.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::maybe_notify (1 samples, 0.13%)</title><rect x="99.7459%" y="277" width="0.1271%" height="15" fill="rgb(239,18,37)" fg:x="785" fg:w="1"/><text x="99.9959%" y="287.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.13%)</title><rect x="99.7459%" y="261" width="0.1271%" height="15" fill="rgb(218,185,22)" fg:x="785" fg:w="1"/><text x="99.9959%" y="271.50"></text></g><g><title>&lt;hyper_util::rt::tokio::TokioIo&lt;T&gt; as hyper::rt::io::Read&gt;::poll_read (1 samples, 0.13%)</title><rect x="99.7459%" y="245" width="0.1271%" height="15" fill="rgb(225,218,4)" fg:x="785" fg:w="1"/><text x="99.9959%" y="255.50"></text></g><g><title>&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.13%)</title><rect x="99.7459%" y="229" width="0.1271%" height="15" fill="rgb(230,182,32)" fg:x="785" fg:w="1"/><text x="99.9959%" y="239.50"></text></g><g><title>&lt;native_tls::imp::TlsStream&lt;S&gt; as std::io::Read&gt;::read (1 samples, 0.13%)</title><rect x="99.7459%" y="213" width="0.1271%" height="15" fill="rgb(242,56,43)" fg:x="785" fg:w="1"/><text x="99.9959%" y="223.50"></text></g><g><title>SSL_read_ex (1 samples, 0.13%)</title><rect x="99.7459%" y="197" width="0.1271%" height="15" fill="rgb(233,99,24)" fg:x="785" fg:w="1"/><text x="99.9959%" y="207.50"></text></g><g><title>BIO_read (1 samples, 0.13%)</title><rect x="99.7459%" y="181" width="0.1271%" height="15" fill="rgb(234,209,42)" fg:x="785" fg:w="1"/><text x="99.9959%" y="191.50"></text></g><g><title>openssl::ssl::bio::bread (1 samples, 0.13%)</title><rect x="99.7459%" y="165" width="0.1271%" height="15" fill="rgb(227,7,12)" fg:x="785" fg:w="1"/><text x="99.9959%" y="175.50"></text></g><g><title>openssl_sys::openssl::bio::BIO_set_retry_read (1 samples, 0.13%)</title><rect x="99.7459%" y="149" width="0.1271%" height="15" fill="rgb(245,203,43)" fg:x="785" fg:w="1"/><text x="99.9959%" y="159.50"></text></g><g><title>all (787 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(238,205,33)" fg:x="0" fg:w="787"/><text x="0.2500%" y="607.50"></text></g><g><title>tokio-runtime-w (42 samples, 5.34%)</title><rect x="94.6633%" y="581" width="5.3367%" height="15" fill="rgb(231,56,7)" fg:x="745" fg:w="42"/><text x="94.9133%" y="591.50">tokio-r..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (42 samples, 5.34%)</title><rect x="94.6633%" y="565" width="5.3367%" height="15" fill="rgb(244,186,29)" fg:x="745" fg:w="42"/><text x="94.9133%" y="575.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (42 samples, 5.34%)</title><rect x="94.6633%" y="549" width="5.3367%" height="15" fill="rgb(234,111,31)" fg:x="745" fg:w="42"/><text x="94.9133%" y="559.50">core::o..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (42 samples, 5.34%)</title><rect x="94.6633%" y="533" width="5.3367%" height="15" fill="rgb(241,149,10)" fg:x="745" fg:w="42"/><text x="94.9133%" y="543.50">std::sy..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (42 samples, 5.34%)</title><rect x="94.6633%" y="517" width="5.3367%" height="15" fill="rgb(249,206,44)" fg:x="745" fg:w="42"/><text x="94.9133%" y="527.50">tokio::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (42 samples, 5.34%)</title><rect x="94.6633%" y="501" width="5.3367%" height="15" fill="rgb(251,153,30)" fg:x="745" fg:w="42"/><text x="94.9133%" y="511.50">tokio::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (42 samples, 5.34%)</title><rect x="94.6633%" y="485" width="5.3367%" height="15" fill="rgb(239,152,38)" fg:x="745" fg:w="42"/><text x="94.9133%" y="495.50">tokio::..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 5.34%)</title><rect x="94.6633%" y="469" width="5.3367%" height="15" fill="rgb(249,139,47)" fg:x="745" fg:w="42"/><text x="94.9133%" y="479.50">&lt;tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (42 samples, 5.34%)</title><rect x="94.6633%" y="453" width="5.3367%" height="15" fill="rgb(244,64,35)" fg:x="745" fg:w="42"/><text x="94.9133%" y="463.50">tokio::..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (42 samples, 5.34%)</title><rect x="94.6633%" y="437" width="5.3367%" height="15" fill="rgb(216,46,15)" fg:x="745" fg:w="42"/><text x="94.9133%" y="447.50">tokio::..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (42 samples, 5.34%)</title><rect x="94.6633%" y="421" width="5.3367%" height="15" fill="rgb(250,74,19)" fg:x="745" fg:w="42"/><text x="94.9133%" y="431.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (42 samples, 5.34%)</title><rect x="94.6633%" y="405" width="5.3367%" height="15" fill="rgb(249,42,33)" fg:x="745" fg:w="42"/><text x="94.9133%" y="415.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (34 samples, 4.32%)</title><rect x="95.6798%" y="389" width="4.3202%" height="15" fill="rgb(242,149,17)" fg:x="753" fg:w="34"/><text x="95.9298%" y="399.50">tokio..</text></g><g><title>tokio::runtime::task::raw::poll (9 samples, 1.14%)</title><rect x="98.8564%" y="373" width="1.1436%" height="15" fill="rgb(244,29,21)" fg:x="778" fg:w="9"/><text x="99.1064%" y="383.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (9 samples, 1.14%)</title><rect x="98.8564%" y="357" width="1.1436%" height="15" fill="rgb(220,130,37)" fg:x="778" fg:w="9"/><text x="99.1064%" y="367.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8 samples, 1.02%)</title><rect x="98.9835%" y="341" width="1.0165%" height="15" fill="rgb(211,67,2)" fg:x="779" fg:w="8"/><text x="99.2335%" y="351.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (8 samples, 1.02%)</title><rect x="98.9835%" y="325" width="1.0165%" height="15" fill="rgb(235,68,52)" fg:x="779" fg:w="8"/><text x="99.2335%" y="335.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (8 samples, 1.02%)</title><rect x="98.9835%" y="309" width="1.0165%" height="15" fill="rgb(246,142,3)" fg:x="779" fg:w="8"/><text x="99.2335%" y="319.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body_and_end (1 samples, 0.13%)</title><rect x="99.8729%" y="293" width="0.1271%" height="15" fill="rgb(241,25,7)" fg:x="786" fg:w="1"/><text x="100.1229%" y="303.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (1 samples, 0.13%)</title><rect x="99.8729%" y="277" width="0.1271%" height="15" fill="rgb(242,119,39)" fg:x="786" fg:w="1"/><text x="100.1229%" y="287.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (1 samples, 0.13%)</title><rect x="99.8729%" y="261" width="0.1271%" height="15" fill="rgb(241,98,45)" fg:x="786" fg:w="1"/><text x="100.1229%" y="271.50"></text></g></svg></svg>