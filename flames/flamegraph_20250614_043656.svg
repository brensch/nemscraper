<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1078"><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.37%)</title><rect x="0.3711%" y="229" width="0.3711%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="4"/><text x="0.6211%" y="239.50"></text></g><g><title>syscall (4 samples, 0.37%)</title><rect x="0.3711%" y="213" width="0.3711%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="4"/><text x="0.6211%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (7 samples, 0.65%)</title><rect x="0.3711%" y="389" width="0.6494%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="7"/><text x="0.6211%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (7 samples, 0.65%)</title><rect x="0.3711%" y="373" width="0.6494%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="7"/><text x="0.6211%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (7 samples, 0.65%)</title><rect x="0.3711%" y="357" width="0.6494%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="7"/><text x="0.6211%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (7 samples, 0.65%)</title><rect x="0.3711%" y="341" width="0.6494%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="7"/><text x="0.6211%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (7 samples, 0.65%)</title><rect x="0.3711%" y="325" width="0.6494%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="7"/><text x="0.6211%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (7 samples, 0.65%)</title><rect x="0.3711%" y="309" width="0.6494%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="7"/><text x="0.6211%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (7 samples, 0.65%)</title><rect x="0.3711%" y="293" width="0.6494%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="7"/><text x="0.6211%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (7 samples, 0.65%)</title><rect x="0.3711%" y="277" width="0.6494%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="7"/><text x="0.6211%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (7 samples, 0.65%)</title><rect x="0.3711%" y="261" width="0.6494%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="7"/><text x="0.6211%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (7 samples, 0.65%)</title><rect x="0.3711%" y="245" width="0.6494%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="7"/><text x="0.6211%" y="255.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (3 samples, 0.28%)</title><rect x="0.7421%" y="229" width="0.2783%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="3"/><text x="0.9921%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (3 samples, 0.28%)</title><rect x="0.7421%" y="213" width="0.2783%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="3"/><text x="0.9921%" y="223.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (3 samples, 0.28%)</title><rect x="0.7421%" y="197" width="0.2783%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="3"/><text x="0.9921%" y="207.50"></text></g><g><title>write (3 samples, 0.28%)</title><rect x="0.7421%" y="181" width="0.2783%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="3"/><text x="0.9921%" y="191.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (5 samples, 0.46%)</title><rect x="1.4842%" y="325" width="0.4638%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="5"/><text x="1.7342%" y="335.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (5 samples, 0.46%)</title><rect x="1.4842%" y="309" width="0.4638%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="5"/><text x="1.7342%" y="319.50"></text></g><g><title>csv_core::reader::Reader::read_record (3 samples, 0.28%)</title><rect x="1.6698%" y="293" width="0.2783%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="3"/><text x="1.9198%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (10 samples, 0.93%)</title><rect x="1.4842%" y="341" width="0.9276%" height="15" fill="rgb(226,26,5)" fg:x="16" fg:w="10"/><text x="1.7342%" y="351.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (5 samples, 0.46%)</title><rect x="1.9481%" y="325" width="0.4638%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="5"/><text x="2.1981%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.46%)</title><rect x="1.9481%" y="309" width="0.4638%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="5"/><text x="2.1981%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.46%)</title><rect x="1.9481%" y="293" width="0.4638%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="5"/><text x="2.1981%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.46%)</title><rect x="1.9481%" y="277" width="0.4638%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="5"/><text x="2.1981%" y="287.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (5 samples, 0.46%)</title><rect x="1.9481%" y="261" width="0.4638%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="5"/><text x="2.1981%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (2 samples, 0.19%)</title><rect x="2.2263%" y="245" width="0.1855%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="2"/><text x="2.4763%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.09%)</title><rect x="2.3191%" y="229" width="0.0928%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="1"/><text x="2.5691%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.09%)</title><rect x="2.3191%" y="213" width="0.0928%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="1"/><text x="2.5691%" y="223.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="2.4119%" y="341" width="0.0928%" height="15" fill="rgb(214,148,48)" fg:x="26" fg:w="1"/><text x="2.6619%" y="351.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.19%)</title><rect x="2.5046%" y="325" width="0.1855%" height="15" fill="rgb(232,36,49)" fg:x="27" fg:w="2"/><text x="2.7546%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (2 samples, 0.19%)</title><rect x="2.5046%" y="309" width="0.1855%" height="15" fill="rgb(209,103,24)" fg:x="27" fg:w="2"/><text x="2.7546%" y="319.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (2 samples, 0.19%)</title><rect x="2.6902%" y="325" width="0.1855%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="2"/><text x="2.9402%" y="335.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (2 samples, 0.19%)</title><rect x="2.6902%" y="309" width="0.1855%" height="15" fill="rgb(213,181,19)" fg:x="29" fg:w="2"/><text x="2.9402%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.09%)</title><rect x="2.7829%" y="293" width="0.0928%" height="15" fill="rgb(254,191,54)" fg:x="30" fg:w="1"/><text x="3.0329%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (5 samples, 0.46%)</title><rect x="2.5046%" y="341" width="0.4638%" height="15" fill="rgb(241,83,37)" fg:x="27" fg:w="5"/><text x="2.7546%" y="351.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.09%)</title><rect x="2.8757%" y="325" width="0.0928%" height="15" fill="rgb(233,36,39)" fg:x="31" fg:w="1"/><text x="3.1257%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (4 samples, 0.37%)</title><rect x="2.9685%" y="341" width="0.3711%" height="15" fill="rgb(226,3,54)" fg:x="32" fg:w="4"/><text x="3.2185%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (4 samples, 0.37%)</title><rect x="2.9685%" y="325" width="0.3711%" height="15" fill="rgb(245,192,40)" fg:x="32" fg:w="4"/><text x="3.2185%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (4 samples, 0.37%)</title><rect x="2.9685%" y="309" width="0.3711%" height="15" fill="rgb(238,167,29)" fg:x="32" fg:w="4"/><text x="3.2185%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.37%)</title><rect x="2.9685%" y="293" width="0.3711%" height="15" fill="rgb(232,182,51)" fg:x="32" fg:w="4"/><text x="3.2185%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (4 samples, 0.37%)</title><rect x="2.9685%" y="277" width="0.3711%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="4"/><text x="3.2185%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.37%)</title><rect x="2.9685%" y="261" width="0.3711%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="4"/><text x="3.2185%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (4 samples, 0.37%)</title><rect x="2.9685%" y="245" width="0.3711%" height="15" fill="rgb(235,93,37)" fg:x="32" fg:w="4"/><text x="3.2185%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (4 samples, 0.37%)</title><rect x="2.9685%" y="229" width="0.3711%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="4"/><text x="3.2185%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (4 samples, 0.37%)</title><rect x="2.9685%" y="213" width="0.3711%" height="15" fill="rgb(222,207,29)" fg:x="32" fg:w="4"/><text x="3.2185%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.37%)</title><rect x="2.9685%" y="197" width="0.3711%" height="15" fill="rgb(206,96,30)" fg:x="32" fg:w="4"/><text x="3.2185%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (4 samples, 0.37%)</title><rect x="2.9685%" y="181" width="0.3711%" height="15" fill="rgb(218,138,4)" fg:x="32" fg:w="4"/><text x="3.2185%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.37%)</title><rect x="2.9685%" y="165" width="0.3711%" height="15" fill="rgb(250,191,14)" fg:x="32" fg:w="4"/><text x="3.2185%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.09%)</title><rect x="3.3395%" y="293" width="0.0928%" height="15" fill="rgb(239,60,40)" fg:x="36" fg:w="1"/><text x="3.5895%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.09%)</title><rect x="3.3395%" y="277" width="0.0928%" height="15" fill="rgb(206,27,48)" fg:x="36" fg:w="1"/><text x="3.5895%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="3.3395%" y="261" width="0.0928%" height="15" fill="rgb(225,35,8)" fg:x="36" fg:w="1"/><text x="3.5895%" y="271.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="3.3395%" y="245" width="0.0928%" height="15" fill="rgb(250,213,24)" fg:x="36" fg:w="1"/><text x="3.5895%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="3.3395%" y="229" width="0.0928%" height="15" fill="rgb(247,123,22)" fg:x="36" fg:w="1"/><text x="3.5895%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.09%)</title><rect x="3.4323%" y="277" width="0.0928%" height="15" fill="rgb(231,138,38)" fg:x="37" fg:w="1"/><text x="3.6823%" y="287.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="3.6178%" y="213" width="0.0928%" height="15" fill="rgb(231,145,46)" fg:x="39" fg:w="1"/><text x="3.8678%" y="223.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="3.6178%" y="197" width="0.0928%" height="15" fill="rgb(251,118,11)" fg:x="39" fg:w="1"/><text x="3.8678%" y="207.50"></text></g><g><title>brotli::enc::backward_references::adv_prepare_distance_cache (1 samples, 0.09%)</title><rect x="3.7106%" y="213" width="0.0928%" height="15" fill="rgb(217,147,25)" fg:x="40" fg:w="1"/><text x="3.9606%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (4 samples, 0.37%)</title><rect x="3.5250%" y="229" width="0.3711%" height="15" fill="rgb(247,81,37)" fg:x="38" fg:w="4"/><text x="3.7750%" y="239.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="3.8033%" y="213" width="0.0928%" height="15" fill="rgb(209,12,38)" fg:x="41" fg:w="1"/><text x="4.0533%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="3.8961%" y="229" width="0.0928%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="1"/><text x="4.1461%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="3.8961%" y="213" width="0.0928%" height="15" fill="rgb(248,47,43)" fg:x="42" fg:w="1"/><text x="4.1461%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="3.8961%" y="197" width="0.0928%" height="15" fill="rgb(221,10,30)" fg:x="42" fg:w="1"/><text x="4.1461%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="3.8961%" y="181" width="0.0928%" height="15" fill="rgb(210,229,1)" fg:x="42" fg:w="1"/><text x="4.1461%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="3.8961%" y="165" width="0.0928%" height="15" fill="rgb(222,148,37)" fg:x="42" fg:w="1"/><text x="4.1461%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (6 samples, 0.56%)</title><rect x="3.5250%" y="245" width="0.5566%" height="15" fill="rgb(234,67,33)" fg:x="38" fg:w="6"/><text x="3.7750%" y="255.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="3.9889%" y="229" width="0.0928%" height="15" fill="rgb(247,98,35)" fg:x="43" fg:w="1"/><text x="4.2389%" y="239.50"></text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::finalize (30 samples, 2.78%)</title><rect x="1.3915%" y="373" width="2.7829%" height="15" fill="rgb(247,138,52)" fg:x="15" fg:w="30"/><text x="1.6415%" y="383.50">ne..</text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::flush_current_chunk (30 samples, 2.78%)</title><rect x="1.3915%" y="357" width="2.7829%" height="15" fill="rgb(213,79,30)" fg:x="15" fg:w="30"/><text x="1.6415%" y="367.50">ne..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (9 samples, 0.83%)</title><rect x="3.3395%" y="341" width="0.8349%" height="15" fill="rgb(246,177,23)" fg:x="36" fg:w="9"/><text x="3.5895%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (9 samples, 0.83%)</title><rect x="3.3395%" y="325" width="0.8349%" height="15" fill="rgb(230,62,27)" fg:x="36" fg:w="9"/><text x="3.5895%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (9 samples, 0.83%)</title><rect x="3.3395%" y="309" width="0.8349%" height="15" fill="rgb(216,154,8)" fg:x="36" fg:w="9"/><text x="3.5895%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (8 samples, 0.74%)</title><rect x="3.4323%" y="293" width="0.7421%" height="15" fill="rgb(244,35,45)" fg:x="37" fg:w="8"/><text x="3.6823%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (7 samples, 0.65%)</title><rect x="3.5250%" y="277" width="0.6494%" height="15" fill="rgb(251,115,12)" fg:x="38" fg:w="7"/><text x="3.7750%" y="287.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.65%)</title><rect x="3.5250%" y="261" width="0.6494%" height="15" fill="rgb(240,54,50)" fg:x="38" fg:w="7"/><text x="3.7750%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="4.0816%" y="245" width="0.0928%" height="15" fill="rgb(233,84,52)" fg:x="44" fg:w="1"/><text x="4.3316%" y="255.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="4.0816%" y="229" width="0.0928%" height="15" fill="rgb(207,117,47)" fg:x="44" fg:w="1"/><text x="4.3316%" y="239.50"></text></g><g><title>malloc (27 samples, 2.50%)</title><rect x="4.5455%" y="357" width="2.5046%" height="15" fill="rgb(249,43,39)" fg:x="49" fg:w="27"/><text x="4.7955%" y="367.50">ma..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.28%)</title><rect x="12.5232%" y="293" width="0.2783%" height="15" fill="rgb(209,38,44)" fg:x="135" fg:w="3"/><text x="12.7732%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.28%)</title><rect x="12.5232%" y="277" width="0.2783%" height="15" fill="rgb(236,212,23)" fg:x="135" fg:w="3"/><text x="12.7732%" y="287.50"></text></g><g><title>__libc_realloc (3 samples, 0.28%)</title><rect x="12.5232%" y="261" width="0.2783%" height="15" fill="rgb(242,79,21)" fg:x="135" fg:w="3"/><text x="12.7732%" y="271.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (103 samples, 9.55%)</title><rect x="9.9258%" y="325" width="9.5547%" height="15" fill="rgb(211,96,35)" fg:x="107" fg:w="103"/><text x="10.1758%" y="335.50">arrow_csv::rea..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (103 samples, 9.55%)</title><rect x="9.9258%" y="309" width="9.5547%" height="15" fill="rgb(253,215,40)" fg:x="107" fg:w="103"/><text x="10.1758%" y="319.50">arrow_csv::rea..</text></g><g><title>csv_core::reader::Reader::read_record (72 samples, 6.68%)</title><rect x="12.8015%" y="293" width="6.6790%" height="15" fill="rgb(211,81,21)" fg:x="138" fg:w="72"/><text x="13.0515%" y="303.50">csv_core:..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (11 samples, 1.02%)</title><rect x="19.4805%" y="309" width="1.0204%" height="15" fill="rgb(208,190,38)" fg:x="210" fg:w="11"/><text x="19.7305%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.65%)</title><rect x="19.8516%" y="293" width="0.6494%" height="15" fill="rgb(235,213,38)" fg:x="214" fg:w="7"/><text x="20.1016%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (251 samples, 23.28%)</title><rect x="9.0909%" y="341" width="23.2839%" height="15" fill="rgb(237,122,38)" fg:x="98" fg:w="251"/><text x="9.3409%" y="351.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (139 samples, 12.89%)</title><rect x="19.4805%" y="325" width="12.8942%" height="15" fill="rgb(244,218,35)" fg:x="210" fg:w="139"/><text x="19.7305%" y="335.50">arrow_csv::reader::..</text></g><g><title>core::iter::adapters::try_process (128 samples, 11.87%)</title><rect x="20.5009%" y="309" width="11.8738%" height="15" fill="rgb(240,68,47)" fg:x="221" fg:w="128"/><text x="20.7509%" y="319.50">core::iter::adapte..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (128 samples, 11.87%)</title><rect x="20.5009%" y="293" width="11.8738%" height="15" fill="rgb(210,16,53)" fg:x="221" fg:w="128"/><text x="20.7509%" y="303.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (128 samples, 11.87%)</title><rect x="20.5009%" y="277" width="11.8738%" height="15" fill="rgb(235,124,12)" fg:x="221" fg:w="128"/><text x="20.7509%" y="287.50">&lt;core::iter::adapt..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (128 samples, 11.87%)</title><rect x="20.5009%" y="261" width="11.8738%" height="15" fill="rgb(224,169,11)" fg:x="221" fg:w="128"/><text x="20.7509%" y="271.50">&lt;arrow_array::arra..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (93 samples, 8.63%)</title><rect x="23.7477%" y="245" width="8.6271%" height="15" fill="rgb(250,166,2)" fg:x="256" fg:w="93"/><text x="23.9977%" y="255.50">arrow_array:..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (12 samples, 1.11%)</title><rect x="31.2616%" y="229" width="1.1132%" height="15" fill="rgb(242,216,29)" fg:x="337" fg:w="12"/><text x="31.5116%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (12 samples, 1.11%)</title><rect x="31.2616%" y="213" width="1.1132%" height="15" fill="rgb(230,116,27)" fg:x="337" fg:w="12"/><text x="31.5116%" y="223.50"></text></g><g><title>cfree (20 samples, 1.86%)</title><rect x="32.3748%" y="341" width="1.8553%" height="15" fill="rgb(228,99,48)" fg:x="349" fg:w="20"/><text x="32.6248%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (2 samples, 0.19%)</title><rect x="34.2301%" y="341" width="0.1855%" height="15" fill="rgb(253,11,6)" fg:x="369" fg:w="2"/><text x="34.4801%" y="351.50"></text></g><g><title>cfree (2 samples, 0.19%)</title><rect x="34.2301%" y="325" width="0.1855%" height="15" fill="rgb(247,143,39)" fg:x="369" fg:w="2"/><text x="34.4801%" y="335.50"></text></g><g><title>__munmap (2 samples, 0.19%)</title><rect x="34.2301%" y="309" width="0.1855%" height="15" fill="rgb(236,97,10)" fg:x="369" fg:w="2"/><text x="34.4801%" y="319.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.09%)</title><rect x="36.2709%" y="325" width="0.0928%" height="15" fill="rgb(233,208,19)" fg:x="391" fg:w="1"/><text x="36.5209%" y="335.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (6 samples, 0.56%)</title><rect x="36.3636%" y="325" width="0.5566%" height="15" fill="rgb(216,164,2)" fg:x="392" fg:w="6"/><text x="36.6136%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (6 samples, 0.56%)</title><rect x="36.3636%" y="309" width="0.5566%" height="15" fill="rgb(220,129,5)" fg:x="392" fg:w="6"/><text x="36.6136%" y="319.50"></text></g><g><title>cfree (12 samples, 1.11%)</title><rect x="36.9202%" y="325" width="1.1132%" height="15" fill="rgb(242,17,10)" fg:x="398" fg:w="12"/><text x="37.1702%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (38 samples, 3.53%)</title><rect x="38.0334%" y="325" width="3.5250%" height="15" fill="rgb(242,107,0)" fg:x="410" fg:w="38"/><text x="38.2834%" y="335.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (22 samples, 2.04%)</title><rect x="39.5176%" y="309" width="2.0408%" height="15" fill="rgb(251,28,31)" fg:x="426" fg:w="22"/><text x="39.7676%" y="319.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (1 samples, 0.09%)</title><rect x="42.8571%" y="309" width="0.0928%" height="15" fill="rgb(233,223,10)" fg:x="462" fg:w="1"/><text x="43.1071%" y="319.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.09%)</title><rect x="42.9499%" y="309" width="0.0928%" height="15" fill="rgb(215,21,27)" fg:x="463" fg:w="1"/><text x="43.1999%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (7 samples, 0.65%)</title><rect x="43.0427%" y="309" width="0.6494%" height="15" fill="rgb(232,23,21)" fg:x="464" fg:w="7"/><text x="43.2927%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.09%)</title><rect x="43.5993%" y="293" width="0.0928%" height="15" fill="rgb(244,5,23)" fg:x="470" fg:w="1"/><text x="43.8493%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (24 samples, 2.23%)</title><rect x="41.5584%" y="325" width="2.2263%" height="15" fill="rgb(226,81,46)" fg:x="448" fg:w="24"/><text x="41.8084%" y="335.50">n..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="43.6920%" y="309" width="0.0928%" height="15" fill="rgb(247,70,30)" fg:x="471" fg:w="1"/><text x="43.9420%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (3 samples, 0.28%)</title><rect x="44.8980%" y="309" width="0.2783%" height="15" fill="rgb(212,68,19)" fg:x="484" fg:w="3"/><text x="45.1480%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (8 samples, 0.74%)</title><rect x="45.1763%" y="309" width="0.7421%" height="15" fill="rgb(240,187,13)" fg:x="487" fg:w="8"/><text x="45.4263%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (134 samples, 12.43%)</title><rect x="34.4156%" y="341" width="12.4304%" height="15" fill="rgb(223,113,26)" fg:x="371" fg:w="134"/><text x="34.6656%" y="351.50">nemscraper::process..</text></g><g><title>nemscraper::process::utils::clean_str (33 samples, 3.06%)</title><rect x="43.7848%" y="325" width="3.0612%" height="15" fill="rgb(206,192,2)" fg:x="472" fg:w="33"/><text x="44.0348%" y="335.50">nem..</text></g><g><title>malloc (10 samples, 0.93%)</title><rect x="45.9184%" y="309" width="0.9276%" height="15" fill="rgb(241,108,4)" fg:x="495" fg:w="10"/><text x="46.1684%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;parquet::arrow::arrow_writer::ArrowWriter&lt;std::fs::File&gt;&gt; (1 samples, 0.09%)</title><rect x="46.8460%" y="325" width="0.0928%" height="15" fill="rgb(247,173,49)" fg:x="505" fg:w="1"/><text x="47.0960%" y="335.50"></text></g><g><title>__close (1 samples, 0.09%)</title><rect x="46.8460%" y="309" width="0.0928%" height="15" fill="rgb(224,114,35)" fg:x="505" fg:w="1"/><text x="47.0960%" y="319.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.09%)</title><rect x="46.9388%" y="309" width="0.0928%" height="15" fill="rgb(245,159,27)" fg:x="506" fg:w="1"/><text x="47.1888%" y="319.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="46.9388%" y="293" width="0.0928%" height="15" fill="rgb(245,172,44)" fg:x="506" fg:w="1"/><text x="47.1888%" y="303.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="47.0315%" y="181" width="0.0928%" height="15" fill="rgb(236,23,11)" fg:x="507" fg:w="1"/><text x="47.2815%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="47.0315%" y="165" width="0.0928%" height="15" fill="rgb(205,117,38)" fg:x="507" fg:w="1"/><text x="47.2815%" y="175.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="47.1243%" y="181" width="0.0928%" height="15" fill="rgb(237,72,25)" fg:x="508" fg:w="1"/><text x="47.3743%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="47.1243%" y="165" width="0.0928%" height="15" fill="rgb(244,70,9)" fg:x="508" fg:w="1"/><text x="47.3743%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.28%)</title><rect x="47.2171%" y="165" width="0.2783%" height="15" fill="rgb(217,125,39)" fg:x="509" fg:w="3"/><text x="47.4671%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.19%)</title><rect x="47.3098%" y="149" width="0.1855%" height="15" fill="rgb(235,36,10)" fg:x="510" fg:w="2"/><text x="47.5598%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="47.4026%" y="133" width="0.0928%" height="15" fill="rgb(251,123,47)" fg:x="511" fg:w="1"/><text x="47.6526%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="47.4954%" y="165" width="0.0928%" height="15" fill="rgb(221,13,13)" fg:x="512" fg:w="1"/><text x="47.7454%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="47.4954%" y="149" width="0.0928%" height="15" fill="rgb(238,131,9)" fg:x="512" fg:w="1"/><text x="47.7454%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (7 samples, 0.65%)</title><rect x="47.0315%" y="213" width="0.6494%" height="15" fill="rgb(211,50,8)" fg:x="507" fg:w="7"/><text x="47.2815%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.65%)</title><rect x="47.0315%" y="197" width="0.6494%" height="15" fill="rgb(245,182,24)" fg:x="507" fg:w="7"/><text x="47.2815%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (5 samples, 0.46%)</title><rect x="47.2171%" y="181" width="0.4638%" height="15" fill="rgb(242,14,37)" fg:x="509" fg:w="5"/><text x="47.4671%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="47.5881%" y="165" width="0.0928%" height="15" fill="rgb(246,228,12)" fg:x="513" fg:w="1"/><text x="47.8381%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="47.6809%" y="213" width="0.0928%" height="15" fill="rgb(213,55,15)" fg:x="514" fg:w="1"/><text x="47.9309%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="47.6809%" y="197" width="0.0928%" height="15" fill="rgb(209,9,3)" fg:x="514" fg:w="1"/><text x="47.9309%" y="207.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.09%)</title><rect x="47.6809%" y="181" width="0.0928%" height="15" fill="rgb(230,59,30)" fg:x="514" fg:w="1"/><text x="47.9309%" y="191.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (17 samples, 1.58%)</title><rect x="47.0315%" y="229" width="1.5770%" height="15" fill="rgb(209,121,21)" fg:x="507" fg:w="17"/><text x="47.2815%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (9 samples, 0.83%)</title><rect x="47.7737%" y="213" width="0.8349%" height="15" fill="rgb(220,109,13)" fg:x="515" fg:w="9"/><text x="48.0237%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (9 samples, 0.83%)</title><rect x="47.7737%" y="197" width="0.8349%" height="15" fill="rgb(232,18,1)" fg:x="515" fg:w="9"/><text x="48.0237%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (9 samples, 0.83%)</title><rect x="47.7737%" y="181" width="0.8349%" height="15" fill="rgb(215,41,42)" fg:x="515" fg:w="9"/><text x="48.0237%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (9 samples, 0.83%)</title><rect x="47.7737%" y="165" width="0.8349%" height="15" fill="rgb(224,123,36)" fg:x="515" fg:w="9"/><text x="48.0237%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (20 samples, 1.86%)</title><rect x="46.8460%" y="341" width="1.8553%" height="15" fill="rgb(240,125,3)" fg:x="505" fg:w="20"/><text x="47.0960%" y="351.50">p..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (19 samples, 1.76%)</title><rect x="46.9388%" y="325" width="1.7625%" height="15" fill="rgb(205,98,50)" fg:x="506" fg:w="19"/><text x="47.1888%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (18 samples, 1.67%)</title><rect x="47.0315%" y="309" width="1.6698%" height="15" fill="rgb(205,185,37)" fg:x="507" fg:w="18"/><text x="47.2815%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.67%)</title><rect x="47.0315%" y="293" width="1.6698%" height="15" fill="rgb(238,207,15)" fg:x="507" fg:w="18"/><text x="47.2815%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (18 samples, 1.67%)</title><rect x="47.0315%" y="277" width="1.6698%" height="15" fill="rgb(213,199,42)" fg:x="507" fg:w="18"/><text x="47.2815%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.67%)</title><rect x="47.0315%" y="261" width="1.6698%" height="15" fill="rgb(235,201,11)" fg:x="507" fg:w="18"/><text x="47.2815%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (18 samples, 1.67%)</title><rect x="47.0315%" y="245" width="1.6698%" height="15" fill="rgb(207,46,11)" fg:x="507" fg:w="18"/><text x="47.2815%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (1 samples, 0.09%)</title><rect x="48.6085%" y="229" width="0.0928%" height="15" fill="rgb(241,35,35)" fg:x="524" fg:w="1"/><text x="48.8585%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="48.6085%" y="213" width="0.0928%" height="15" fill="rgb(243,32,47)" fg:x="524" fg:w="1"/><text x="48.8585%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="48.6085%" y="197" width="0.0928%" height="15" fill="rgb(247,202,23)" fg:x="524" fg:w="1"/><text x="48.8585%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="48.6085%" y="181" width="0.0928%" height="15" fill="rgb(219,102,11)" fg:x="524" fg:w="1"/><text x="48.8585%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="48.6085%" y="165" width="0.0928%" height="15" fill="rgb(243,110,44)" fg:x="524" fg:w="1"/><text x="48.8585%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="48.6085%" y="149" width="0.0928%" height="15" fill="rgb(222,74,54)" fg:x="524" fg:w="1"/><text x="48.8585%" y="159.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (8 samples, 0.74%)</title><rect x="49.0724%" y="261" width="0.7421%" height="15" fill="rgb(216,99,12)" fg:x="529" fg:w="8"/><text x="49.3224%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (6 samples, 0.56%)</title><rect x="49.2579%" y="245" width="0.5566%" height="15" fill="rgb(226,22,26)" fg:x="531" fg:w="6"/><text x="49.5079%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.37%)</title><rect x="49.4434%" y="229" width="0.3711%" height="15" fill="rgb(217,163,10)" fg:x="533" fg:w="4"/><text x="49.6934%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="49.8145%" y="245" width="0.0928%" height="15" fill="rgb(213,25,53)" fg:x="537" fg:w="1"/><text x="50.0645%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="49.8145%" y="229" width="0.0928%" height="15" fill="rgb(252,105,26)" fg:x="537" fg:w="1"/><text x="50.0645%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="49.9072%" y="165" width="0.0928%" height="15" fill="rgb(220,39,43)" fg:x="538" fg:w="1"/><text x="50.1572%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="49.9072%" y="149" width="0.0928%" height="15" fill="rgb(229,68,48)" fg:x="538" fg:w="1"/><text x="50.1572%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.19%)</title><rect x="49.9072%" y="213" width="0.1855%" height="15" fill="rgb(252,8,32)" fg:x="538" fg:w="2"/><text x="50.1572%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.19%)</title><rect x="49.9072%" y="197" width="0.1855%" height="15" fill="rgb(223,20,43)" fg:x="538" fg:w="2"/><text x="50.1572%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.19%)</title><rect x="49.9072%" y="181" width="0.1855%" height="15" fill="rgb(229,81,49)" fg:x="538" fg:w="2"/><text x="50.1572%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="50.0000%" y="165" width="0.0928%" height="15" fill="rgb(236,28,36)" fg:x="539" fg:w="1"/><text x="50.2500%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (16 samples, 1.48%)</title><rect x="48.7013%" y="293" width="1.4842%" height="15" fill="rgb(249,185,26)" fg:x="525" fg:w="16"/><text x="48.9513%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (16 samples, 1.48%)</title><rect x="48.7013%" y="277" width="1.4842%" height="15" fill="rgb(249,174,33)" fg:x="525" fg:w="16"/><text x="48.9513%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.37%)</title><rect x="49.8145%" y="261" width="0.3711%" height="15" fill="rgb(233,201,37)" fg:x="537" fg:w="4"/><text x="50.0645%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.28%)</title><rect x="49.9072%" y="245" width="0.2783%" height="15" fill="rgb(221,78,26)" fg:x="538" fg:w="3"/><text x="50.1572%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.28%)</title><rect x="49.9072%" y="229" width="0.2783%" height="15" fill="rgb(250,127,30)" fg:x="538" fg:w="3"/><text x="50.1572%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="50.0928%" y="213" width="0.0928%" height="15" fill="rgb(230,49,44)" fg:x="540" fg:w="1"/><text x="50.3428%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (31 samples, 2.88%)</title><rect x="51.0204%" y="277" width="2.8757%" height="15" fill="rgb(229,67,23)" fg:x="550" fg:w="31"/><text x="51.2704%" y="287.50">&lt;p..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (17 samples, 1.58%)</title><rect x="52.3191%" y="261" width="1.5770%" height="15" fill="rgb(249,83,47)" fg:x="564" fg:w="17"/><text x="52.5691%" y="271.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (5 samples, 0.46%)</title><rect x="53.4323%" y="245" width="0.4638%" height="15" fill="rgb(215,43,3)" fg:x="576" fg:w="5"/><text x="53.6823%" y="255.50"></text></g><g><title>parquet::column::writer::compare_greater (7 samples, 0.65%)</title><rect x="54.7310%" y="245" width="0.6494%" height="15" fill="rgb(238,154,13)" fg:x="590" fg:w="7"/><text x="54.9810%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (32 samples, 2.97%)</title><rect x="53.8961%" y="277" width="2.9685%" height="15" fill="rgb(219,56,2)" fg:x="581" fg:w="32"/><text x="54.1461%" y="287.50">&lt;pa..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (30 samples, 2.78%)</title><rect x="54.0816%" y="261" width="2.7829%" height="15" fill="rgb(233,0,4)" fg:x="583" fg:w="30"/><text x="54.3316%" y="271.50">pa..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (16 samples, 1.48%)</title><rect x="55.3803%" y="245" width="1.4842%" height="15" fill="rgb(235,30,7)" fg:x="597" fg:w="16"/><text x="55.6303%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.46%)</title><rect x="56.4007%" y="229" width="0.4638%" height="15" fill="rgb(250,79,13)" fg:x="608" fg:w="5"/><text x="56.6507%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (4 samples, 0.37%)</title><rect x="56.8646%" y="261" width="0.3711%" height="15" fill="rgb(211,146,34)" fg:x="613" fg:w="4"/><text x="57.1146%" y="271.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (2 samples, 0.19%)</title><rect x="57.0501%" y="245" width="0.1855%" height="15" fill="rgb(228,22,38)" fg:x="615" fg:w="2"/><text x="57.3001%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.19%)</title><rect x="57.0501%" y="229" width="0.1855%" height="15" fill="rgb(235,168,5)" fg:x="615" fg:w="2"/><text x="57.3001%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.37%)</title><rect x="57.3284%" y="229" width="0.3711%" height="15" fill="rgb(221,155,16)" fg:x="618" fg:w="4"/><text x="57.5784%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (4 samples, 0.37%)</title><rect x="57.3284%" y="213" width="0.3711%" height="15" fill="rgb(215,215,53)" fg:x="618" fg:w="4"/><text x="57.5784%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (9 samples, 0.83%)</title><rect x="57.2356%" y="261" width="0.8349%" height="15" fill="rgb(223,4,10)" fg:x="617" fg:w="9"/><text x="57.4856%" y="271.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (9 samples, 0.83%)</title><rect x="57.2356%" y="245" width="0.8349%" height="15" fill="rgb(234,103,6)" fg:x="617" fg:w="9"/><text x="57.4856%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.37%)</title><rect x="57.6994%" y="229" width="0.3711%" height="15" fill="rgb(227,97,0)" fg:x="622" fg:w="4"/><text x="57.9494%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.09%)</title><rect x="57.9777%" y="213" width="0.0928%" height="15" fill="rgb(234,150,53)" fg:x="625" fg:w="1"/><text x="58.2277%" y="223.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (4 samples, 0.37%)</title><rect x="63.2653%" y="213" width="0.3711%" height="15" fill="rgb(228,201,54)" fg:x="682" fg:w="4"/><text x="63.5153%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (49 samples, 4.55%)</title><rect x="59.2764%" y="229" width="4.5455%" height="15" fill="rgb(222,22,37)" fg:x="639" fg:w="49"/><text x="59.5264%" y="239.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.19%)</title><rect x="63.6364%" y="213" width="0.1855%" height="15" fill="rgb(237,53,32)" fg:x="686" fg:w="2"/><text x="63.8864%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (62 samples, 5.75%)</title><rect x="58.2560%" y="245" width="5.7514%" height="15" fill="rgb(233,25,53)" fg:x="628" fg:w="62"/><text x="58.5060%" y="255.50">brotli:..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.19%)</title><rect x="63.8219%" y="229" width="0.1855%" height="15" fill="rgb(210,40,34)" fg:x="688" fg:w="2"/><text x="64.0719%" y="239.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (11 samples, 1.02%)</title><rect x="64.0074%" y="245" width="1.0204%" height="15" fill="rgb(241,220,44)" fg:x="690" fg:w="11"/><text x="64.2574%" y="255.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (10 samples, 0.93%)</title><rect x="64.1002%" y="229" width="0.9276%" height="15" fill="rgb(235,28,35)" fg:x="691" fg:w="10"/><text x="64.3502%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="65.0278%" y="245" width="0.0928%" height="15" fill="rgb(210,56,17)" fg:x="701" fg:w="1"/><text x="65.2778%" y="255.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="71.9852%" y="197" width="0.0928%" height="15" fill="rgb(224,130,29)" fg:x="776" fg:w="1"/><text x="72.2352%" y="207.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (5 samples, 0.46%)</title><rect x="72.0779%" y="197" width="0.4638%" height="15" fill="rgb(235,212,8)" fg:x="777" fg:w="5"/><text x="72.3279%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (83 samples, 7.70%)</title><rect x="65.1206%" y="229" width="7.6994%" height="15" fill="rgb(223,33,50)" fg:x="702" fg:w="83"/><text x="65.3706%" y="239.50">brotli::enc..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (63 samples, 5.84%)</title><rect x="66.9759%" y="213" width="5.8442%" height="15" fill="rgb(219,149,13)" fg:x="722" fg:w="63"/><text x="67.2259%" y="223.50">&lt;brotli..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (3 samples, 0.28%)</title><rect x="72.5417%" y="197" width="0.2783%" height="15" fill="rgb(250,156,29)" fg:x="782" fg:w="3"/><text x="72.7917%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::MetaBlockSplit&lt;Alloc&gt;::destroy (1 samples, 0.09%)</title><rect x="72.8200%" y="229" width="0.0928%" height="15" fill="rgb(216,193,19)" fg:x="785" fg:w="1"/><text x="73.0700%" y="239.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.09%)</title><rect x="72.8200%" y="213" width="0.0928%" height="15" fill="rgb(216,135,14)" fg:x="785" fg:w="1"/><text x="73.0700%" y="223.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="74.2115%" y="181" width="0.0928%" height="15" fill="rgb(241,47,5)" fg:x="800" fg:w="1"/><text x="74.4615%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (9 samples, 0.83%)</title><rect x="74.2115%" y="213" width="0.8349%" height="15" fill="rgb(233,42,35)" fg:x="800" fg:w="9"/><text x="74.4615%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (9 samples, 0.83%)</title><rect x="74.2115%" y="197" width="0.8349%" height="15" fill="rgb(231,13,6)" fg:x="800" fg:w="9"/><text x="74.4615%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (8 samples, 0.74%)</title><rect x="74.3043%" y="181" width="0.7421%" height="15" fill="rgb(207,181,40)" fg:x="801" fg:w="8"/><text x="74.5543%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="75.0464%" y="213" width="0.0928%" height="15" fill="rgb(254,173,49)" fg:x="809" fg:w="1"/><text x="75.2964%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (4 samples, 0.37%)</title><rect x="75.1391%" y="213" width="0.3711%" height="15" fill="rgb(221,1,38)" fg:x="810" fg:w="4"/><text x="75.3891%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (29 samples, 2.69%)</title><rect x="72.9128%" y="229" width="2.6902%" height="15" fill="rgb(206,124,46)" fg:x="786" fg:w="29"/><text x="73.1628%" y="239.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.09%)</title><rect x="75.5102%" y="213" width="0.0928%" height="15" fill="rgb(249,21,11)" fg:x="814" fg:w="1"/><text x="75.7602%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.19%)</title><rect x="75.6030%" y="229" width="0.1855%" height="15" fill="rgb(222,201,40)" fg:x="815" fg:w="2"/><text x="75.8530%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (11 samples, 1.02%)</title><rect x="75.7885%" y="229" width="1.0204%" height="15" fill="rgb(235,61,29)" fg:x="817" fg:w="11"/><text x="76.0385%" y="239.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.19%)</title><rect x="76.6234%" y="213" width="0.1855%" height="15" fill="rgb(219,207,3)" fg:x="826" fg:w="2"/><text x="76.8734%" y="223.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.19%)</title><rect x="76.6234%" y="197" width="0.1855%" height="15" fill="rgb(222,56,46)" fg:x="826" fg:w="2"/><text x="76.8734%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (218 samples, 20.22%)</title><rect x="56.8646%" y="277" width="20.2226%" height="15" fill="rgb(239,76,54)" fg:x="613" fg:w="218"/><text x="57.1146%" y="287.50">parquet::column::writer::Generic..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (205 samples, 19.02%)</title><rect x="58.0705%" y="261" width="19.0167%" height="15" fill="rgb(231,124,27)" fg:x="626" fg:w="205"/><text x="58.3205%" y="271.50">&lt;parquet::compression::brotli_..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (129 samples, 11.97%)</title><rect x="65.1206%" y="245" width="11.9666%" height="15" fill="rgb(249,195,6)" fg:x="702" fg:w="129"/><text x="65.3706%" y="255.50">brotli::enc::write..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (3 samples, 0.28%)</title><rect x="76.8089%" y="229" width="0.2783%" height="15" fill="rgb(237,174,47)" fg:x="828" fg:w="3"/><text x="77.0589%" y="239.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (3 samples, 0.28%)</title><rect x="76.8089%" y="213" width="0.2783%" height="15" fill="rgb(206,201,31)" fg:x="828" fg:w="3"/><text x="77.0589%" y="223.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="82.3748%" y="213" width="0.0928%" height="15" fill="rgb(231,57,52)" fg:x="888" fg:w="1"/><text x="82.6248%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (57 samples, 5.29%)</title><rect x="77.2727%" y="245" width="5.2876%" height="15" fill="rgb(248,177,22)" fg:x="833" fg:w="57"/><text x="77.5227%" y="255.50">brotli..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (53 samples, 4.92%)</title><rect x="77.6438%" y="229" width="4.9165%" height="15" fill="rgb(215,211,37)" fg:x="837" fg:w="53"/><text x="77.8938%" y="239.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="82.4675%" y="213" width="0.0928%" height="15" fill="rgb(241,128,51)" fg:x="889" fg:w="1"/><text x="82.7175%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="82.5603%" y="245" width="0.0928%" height="15" fill="rgb(227,165,31)" fg:x="890" fg:w="1"/><text x="82.8103%" y="255.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="82.6531%" y="213" width="0.0928%" height="15" fill="rgb(228,167,24)" fg:x="891" fg:w="1"/><text x="82.9031%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="82.6531%" y="197" width="0.0928%" height="15" fill="rgb(228,143,12)" fg:x="891" fg:w="1"/><text x="82.9031%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="82.6531%" y="181" width="0.0928%" height="15" fill="rgb(249,149,8)" fg:x="891" fg:w="1"/><text x="82.9031%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (5 samples, 0.46%)</title><rect x="82.6531%" y="229" width="0.4638%" height="15" fill="rgb(243,35,44)" fg:x="891" fg:w="5"/><text x="82.9031%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (4 samples, 0.37%)</title><rect x="82.7458%" y="213" width="0.3711%" height="15" fill="rgb(246,89,9)" fg:x="892" fg:w="4"/><text x="82.9958%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (375 samples, 34.79%)</title><rect x="48.7013%" y="309" width="34.7866%" height="15" fill="rgb(233,213,13)" fg:x="525" fg:w="375"/><text x="48.9513%" y="319.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (359 samples, 33.30%)</title><rect x="50.1855%" y="293" width="33.3024%" height="15" fill="rgb(233,141,41)" fg:x="541" fg:w="359"/><text x="50.4355%" y="303.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (69 samples, 6.40%)</title><rect x="77.0872%" y="277" width="6.4007%" height="15" fill="rgb(239,167,4)" fg:x="831" fg:w="69"/><text x="77.3372%" y="287.50">parquet:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (69 samples, 6.40%)</title><rect x="77.0872%" y="261" width="6.4007%" height="15" fill="rgb(209,217,16)" fg:x="831" fg:w="69"/><text x="77.3372%" y="271.50">&lt;parquet..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (9 samples, 0.83%)</title><rect x="82.6531%" y="245" width="0.8349%" height="15" fill="rgb(219,88,35)" fg:x="891" fg:w="9"/><text x="82.9031%" y="255.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (4 samples, 0.37%)</title><rect x="83.1169%" y="229" width="0.3711%" height="15" fill="rgb(220,193,23)" fg:x="896" fg:w="4"/><text x="83.3669%" y="239.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.09%)</title><rect x="83.3952%" y="213" width="0.0928%" height="15" fill="rgb(230,90,52)" fg:x="899" fg:w="1"/><text x="83.6452%" y="223.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="83.3952%" y="197" width="0.0928%" height="15" fill="rgb(252,106,19)" fg:x="899" fg:w="1"/><text x="83.6452%" y="207.50"></text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::process_line (861 samples, 79.87%)</title><rect x="4.1744%" y="373" width="79.8701%" height="15" fill="rgb(206,74,20)" fg:x="45" fg:w="861"/><text x="4.4244%" y="383.50">nemscraper::process::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::flush_current_chunk (830 samples, 76.99%)</title><rect x="7.0501%" y="357" width="76.9944%" height="15" fill="rgb(230,138,44)" fg:x="76" fg:w="830"/><text x="7.3001%" y="367.50">nemscraper::process::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (381 samples, 35.34%)</title><rect x="48.7013%" y="341" width="35.3432%" height="15" fill="rgb(235,182,43)" fg:x="525" fg:w="381"/><text x="48.9513%" y="351.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (381 samples, 35.34%)</title><rect x="48.7013%" y="325" width="35.3432%" height="15" fill="rgb(242,16,51)" fg:x="525" fg:w="381"/><text x="48.9513%" y="335.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (6 samples, 0.56%)</title><rect x="83.4879%" y="309" width="0.5566%" height="15" fill="rgb(248,9,4)" fg:x="900" fg:w="6"/><text x="83.7379%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (6 samples, 0.56%)</title><rect x="83.4879%" y="293" width="0.5566%" height="15" fill="rgb(210,31,22)" fg:x="900" fg:w="6"/><text x="83.7379%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 0.83%)</title><rect x="84.5083%" y="357" width="0.8349%" height="15" fill="rgb(239,54,39)" fg:x="911" fg:w="9"/><text x="84.7583%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.46%)</title><rect x="85.3432%" y="357" width="0.4638%" height="15" fill="rgb(230,99,41)" fg:x="920" fg:w="5"/><text x="85.5932%" y="367.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.09%)</title><rect x="85.8071%" y="309" width="0.0928%" height="15" fill="rgb(253,106,12)" fg:x="925" fg:w="1"/><text x="86.0571%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (9 samples, 0.83%)</title><rect x="85.8071%" y="325" width="0.8349%" height="15" fill="rgb(213,46,41)" fg:x="925" fg:w="9"/><text x="86.0571%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (8 samples, 0.74%)</title><rect x="85.8998%" y="309" width="0.7421%" height="15" fill="rgb(215,133,35)" fg:x="926" fg:w="8"/><text x="86.1498%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (7 samples, 0.65%)</title><rect x="85.9926%" y="293" width="0.6494%" height="15" fill="rgb(213,28,5)" fg:x="927" fg:w="7"/><text x="86.2426%" y="303.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (2 samples, 0.19%)</title><rect x="86.4564%" y="277" width="0.1855%" height="15" fill="rgb(215,77,49)" fg:x="932" fg:w="2"/><text x="86.7064%" y="287.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (77 samples, 7.14%)</title><rect x="87.1985%" y="261" width="7.1429%" height="15" fill="rgb(248,100,22)" fg:x="940" fg:w="77"/><text x="87.4485%" y="271.50">zlib_rs::i..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (84 samples, 7.79%)</title><rect x="86.7347%" y="309" width="7.7922%" height="15" fill="rgb(208,67,9)" fg:x="935" fg:w="84"/><text x="86.9847%" y="319.50">&lt;flate2::me..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (84 samples, 7.79%)</title><rect x="86.7347%" y="293" width="7.7922%" height="15" fill="rgb(219,133,21)" fg:x="935" fg:w="84"/><text x="86.9847%" y="303.50">&lt;flate2::ff..</text></g><g><title>zlib_rs::inflate::inflate (84 samples, 7.79%)</title><rect x="86.7347%" y="277" width="7.7922%" height="15" fill="rgb(246,46,29)" fg:x="935" fg:w="84"/><text x="86.9847%" y="287.50">zlib_rs::in..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (2 samples, 0.19%)</title><rect x="94.3414%" y="261" width="0.1855%" height="15" fill="rgb(246,185,52)" fg:x="1017" fg:w="2"/><text x="94.5914%" y="271.50"></text></g><g><title>nemscraper::process::csv_processor::process_csv_entry_unified (1,010 samples, 93.69%)</title><rect x="1.0204%" y="389" width="93.6920%" height="15" fill="rgb(252,136,11)" fg:x="11" fg:w="1010"/><text x="1.2704%" y="399.50">nemscraper::process::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (115 samples, 10.67%)</title><rect x="84.0445%" y="373" width="10.6679%" height="15" fill="rgb(219,138,53)" fg:x="906" fg:w="115"/><text x="84.2945%" y="383.50">std::io::append_..</text></g><g><title>std::io::default_read_buf (96 samples, 8.91%)</title><rect x="85.8071%" y="357" width="8.9054%" height="15" fill="rgb(211,51,23)" fg:x="925" fg:w="96"/><text x="86.0571%" y="367.50">std::io::defa..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (96 samples, 8.91%)</title><rect x="85.8071%" y="341" width="8.9054%" height="15" fill="rgb(247,221,28)" fg:x="925" fg:w="96"/><text x="86.0571%" y="351.50">&lt;zip::crc32::..</text></g><g><title>flate2::zio::read (87 samples, 8.07%)</title><rect x="86.6419%" y="325" width="8.0705%" height="15" fill="rgb(251,222,45)" fg:x="934" fg:w="87"/><text x="86.8919%" y="335.50">flate2::zio..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.19%)</title><rect x="94.5269%" y="309" width="0.1855%" height="15" fill="rgb(217,162,53)" fg:x="1019" fg:w="2"/><text x="94.7769%" y="319.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,022 samples, 94.81%)</title><rect x="0.0000%" y="405" width="94.8052%" height="15" fill="rgb(229,93,14)" fg:x="0" fg:w="1022"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>reqwest::async_impl::decoder::Decoder::detect (1 samples, 0.09%)</title><rect x="94.7124%" y="389" width="0.0928%" height="15" fill="rgb(209,67,49)" fg:x="1021" fg:w="1"/><text x="94.9624%" y="399.50"></text></g><g><title>bench_zip_to_pa (1,025 samples, 95.08%)</title><rect x="0.0000%" y="565" width="95.0835%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,025 samples, 95.08%)</title><rect x="0.0000%" y="549" width="95.0835%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,025 samples, 95.08%)</title><rect x="0.0000%" y="533" width="95.0835%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,025 samples, 95.08%)</title><rect x="0.0000%" y="517" width="95.0835%" height="15" fill="rgb(221,220,41)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,025 samples, 95.08%)</title><rect x="0.0000%" y="501" width="95.0835%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,025 samples, 95.08%)</title><rect x="0.0000%" y="485" width="95.0835%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,025 samples, 95.08%)</title><rect x="0.0000%" y="469" width="95.0835%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,025 samples, 95.08%)</title><rect x="0.0000%" y="453" width="95.0835%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,025 samples, 95.08%)</title><rect x="0.0000%" y="437" width="95.0835%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,025 samples, 95.08%)</title><rect x="0.0000%" y="421" width="95.0835%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="1025"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.28%)</title><rect x="94.8052%" y="405" width="0.2783%" height="15" fill="rgb(250,108,0)" fg:x="1022" fg:w="3"/><text x="95.0552%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.28%)</title><rect x="94.8052%" y="389" width="0.2783%" height="15" fill="rgb(228,208,7)" fg:x="1022" fg:w="3"/><text x="95.0552%" y="399.50"></text></g><g><title>syscall (2 samples, 0.19%)</title><rect x="94.8980%" y="373" width="0.1855%" height="15" fill="rgb(244,45,10)" fg:x="1023" fg:w="2"/><text x="95.1480%" y="383.50"></text></g><g><title>powf64 (1 samples, 0.09%)</title><rect x="95.3618%" y="373" width="0.0928%" height="15" fill="rgb(207,125,25)" fg:x="1028" fg:w="1"/><text x="95.6118%" y="383.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.09%)</title><rect x="95.4545%" y="373" width="0.0928%" height="15" fill="rgb(210,195,18)" fg:x="1029" fg:w="1"/><text x="95.7045%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.09%)</title><rect x="95.4545%" y="357" width="0.0928%" height="15" fill="rgb(249,80,12)" fg:x="1029" fg:w="1"/><text x="95.7045%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.28%)</title><rect x="95.6401%" y="341" width="0.2783%" height="15" fill="rgb(221,65,9)" fg:x="1031" fg:w="3"/><text x="95.8901%" y="351.50"></text></g><g><title>syscall (3 samples, 0.28%)</title><rect x="95.6401%" y="325" width="0.2783%" height="15" fill="rgb(235,49,36)" fg:x="1031" fg:w="3"/><text x="95.8901%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (9 samples, 0.83%)</title><rect x="95.5473%" y="373" width="0.8349%" height="15" fill="rgb(225,32,20)" fg:x="1030" fg:w="9"/><text x="95.7973%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (8 samples, 0.74%)</title><rect x="95.6401%" y="357" width="0.7421%" height="15" fill="rgb(215,141,46)" fg:x="1031" fg:w="8"/><text x="95.8901%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.46%)</title><rect x="95.9184%" y="341" width="0.4638%" height="15" fill="rgb(250,160,47)" fg:x="1034" fg:w="5"/><text x="96.1684%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (5 samples, 0.46%)</title><rect x="95.9184%" y="325" width="0.4638%" height="15" fill="rgb(216,222,40)" fg:x="1034" fg:w="5"/><text x="96.1684%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.37%)</title><rect x="96.0111%" y="309" width="0.3711%" height="15" fill="rgb(234,217,39)" fg:x="1035" fg:w="4"/><text x="96.2611%" y="319.50"></text></g><g><title>epoll_wait (4 samples, 0.37%)</title><rect x="96.0111%" y="293" width="0.3711%" height="15" fill="rgb(207,178,40)" fg:x="1035" fg:w="4"/><text x="96.2611%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.65%)</title><rect x="96.3822%" y="357" width="0.6494%" height="15" fill="rgb(221,136,13)" fg:x="1039" fg:w="7"/><text x="96.6322%" y="367.50"></text></g><g><title>syscall (7 samples, 0.65%)</title><rect x="96.3822%" y="341" width="0.6494%" height="15" fill="rgb(249,199,10)" fg:x="1039" fg:w="7"/><text x="96.6322%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (5 samples, 0.46%)</title><rect x="97.0315%" y="357" width="0.4638%" height="15" fill="rgb(249,222,13)" fg:x="1046" fg:w="5"/><text x="97.2815%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (5 samples, 0.46%)</title><rect x="97.0315%" y="341" width="0.4638%" height="15" fill="rgb(244,185,38)" fg:x="1046" fg:w="5"/><text x="97.2815%" y="351.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (5 samples, 0.46%)</title><rect x="97.0315%" y="325" width="0.4638%" height="15" fill="rgb(236,202,9)" fg:x="1046" fg:w="5"/><text x="97.2815%" y="335.50"></text></g><g><title>write (5 samples, 0.46%)</title><rect x="97.0315%" y="309" width="0.4638%" height="15" fill="rgb(250,229,37)" fg:x="1046" fg:w="5"/><text x="97.2815%" y="319.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::is_end_stream (1 samples, 0.09%)</title><rect x="97.4954%" y="277" width="0.0928%" height="15" fill="rgb(206,174,23)" fg:x="1051" fg:w="1"/><text x="97.7454%" y="287.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (10 samples, 0.93%)</title><rect x="97.5881%" y="277" width="0.9276%" height="15" fill="rgb(211,33,43)" fg:x="1052" fg:w="10"/><text x="97.8381%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (10 samples, 0.93%)</title><rect x="97.5881%" y="261" width="0.9276%" height="15" fill="rgb(245,58,50)" fg:x="1052" fg:w="10"/><text x="97.8381%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (9 samples, 0.83%)</title><rect x="97.6809%" y="245" width="0.8349%" height="15" fill="rgb(244,68,36)" fg:x="1053" fg:w="9"/><text x="97.9309%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.83%)</title><rect x="97.6809%" y="229" width="0.8349%" height="15" fill="rgb(232,229,15)" fg:x="1053" fg:w="9"/><text x="97.9309%" y="239.50"></text></g><g><title>syscall (9 samples, 0.83%)</title><rect x="97.6809%" y="213" width="0.8349%" height="15" fill="rgb(254,30,23)" fg:x="1053" fg:w="9"/><text x="97.9309%" y="223.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="98.7013%" y="181" width="0.0928%" height="15" fill="rgb(235,160,14)" fg:x="1064" fg:w="1"/><text x="98.9513%" y="191.50"></text></g><g><title>rustls::vecbuf::ChunkVecBuffer::consume (1 samples, 0.09%)</title><rect x="98.7013%" y="165" width="0.0928%" height="15" fill="rgb(212,155,44)" fg:x="1064" fg:w="1"/><text x="98.9513%" y="175.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="98.7013%" y="149" width="0.0928%" height="15" fill="rgb(226,2,50)" fg:x="1064" fg:w="1"/><text x="98.9513%" y="159.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.09%)</title><rect x="98.8868%" y="133" width="0.0928%" height="15" fill="rgb(234,177,6)" fg:x="1066" fg:w="1"/><text x="99.1368%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.09%)</title><rect x="98.8868%" y="117" width="0.0928%" height="15" fill="rgb(217,24,9)" fg:x="1066" fg:w="1"/><text x="99.1368%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (4 samples, 0.37%)</title><rect x="98.7941%" y="165" width="0.3711%" height="15" fill="rgb(220,13,46)" fg:x="1065" fg:w="4"/><text x="99.0441%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (3 samples, 0.28%)</title><rect x="98.8868%" y="149" width="0.2783%" height="15" fill="rgb(239,221,27)" fg:x="1066" fg:w="3"/><text x="99.1368%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (2 samples, 0.19%)</title><rect x="98.9796%" y="133" width="0.1855%" height="15" fill="rgb(222,198,25)" fg:x="1067" fg:w="2"/><text x="99.2296%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (2 samples, 0.19%)</title><rect x="98.9796%" y="117" width="0.1855%" height="15" fill="rgb(211,99,13)" fg:x="1067" fg:w="2"/><text x="99.2296%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (2 samples, 0.19%)</title><rect x="98.9796%" y="101" width="0.1855%" height="15" fill="rgb(232,111,31)" fg:x="1067" fg:w="2"/><text x="99.2296%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (2 samples, 0.19%)</title><rect x="98.9796%" y="85" width="0.1855%" height="15" fill="rgb(245,82,37)" fg:x="1067" fg:w="2"/><text x="99.2296%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (2 samples, 0.19%)</title><rect x="98.9796%" y="69" width="0.1855%" height="15" fill="rgb(227,149,46)" fg:x="1067" fg:w="2"/><text x="99.2296%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (2 samples, 0.19%)</title><rect x="98.9796%" y="53" width="0.1855%" height="15" fill="rgb(218,36,50)" fg:x="1067" fg:w="2"/><text x="99.2296%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (2 samples, 0.19%)</title><rect x="98.9796%" y="37" width="0.1855%" height="15" fill="rgb(226,80,48)" fg:x="1067" fg:w="2"/><text x="99.2296%" y="47.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (7 samples, 0.65%)</title><rect x="99.2579%" y="117" width="0.6494%" height="15" fill="rgb(238,224,15)" fg:x="1070" fg:w="7"/><text x="99.5079%" y="127.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (7 samples, 0.65%)</title><rect x="99.2579%" y="101" width="0.6494%" height="15" fill="rgb(241,136,10)" fg:x="1070" fg:w="7"/><text x="99.5079%" y="111.50"></text></g><g><title>recv (7 samples, 0.65%)</title><rect x="99.2579%" y="85" width="0.6494%" height="15" fill="rgb(208,32,45)" fg:x="1070" fg:w="7"/><text x="99.5079%" y="95.50"></text></g><g><title>all (1,078 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="1078"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (53 samples, 4.92%)</title><rect x="95.0835%" y="565" width="4.9165%" height="15" fill="rgb(206,86,44)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="575.50">tokio-..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (53 samples, 4.92%)</title><rect x="95.0835%" y="549" width="4.9165%" height="15" fill="rgb(245,177,15)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="559.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (53 samples, 4.92%)</title><rect x="95.0835%" y="533" width="4.9165%" height="15" fill="rgb(206,64,50)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="543.50">core::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (53 samples, 4.92%)</title><rect x="95.0835%" y="517" width="4.9165%" height="15" fill="rgb(234,36,40)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="527.50">std::s..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (53 samples, 4.92%)</title><rect x="95.0835%" y="501" width="4.9165%" height="15" fill="rgb(213,64,8)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="511.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (53 samples, 4.92%)</title><rect x="95.0835%" y="485" width="4.9165%" height="15" fill="rgb(210,75,36)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="495.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (53 samples, 4.92%)</title><rect x="95.0835%" y="469" width="4.9165%" height="15" fill="rgb(229,88,21)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="479.50">tokio:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 4.92%)</title><rect x="95.0835%" y="453" width="4.9165%" height="15" fill="rgb(252,204,47)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="463.50">&lt;tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (53 samples, 4.92%)</title><rect x="95.0835%" y="437" width="4.9165%" height="15" fill="rgb(208,77,27)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="447.50">tokio:..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (53 samples, 4.92%)</title><rect x="95.0835%" y="421" width="4.9165%" height="15" fill="rgb(221,76,26)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="431.50">tokio:..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (53 samples, 4.92%)</title><rect x="95.0835%" y="405" width="4.9165%" height="15" fill="rgb(225,139,18)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="415.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (53 samples, 4.92%)</title><rect x="95.0835%" y="389" width="4.9165%" height="15" fill="rgb(230,137,11)" fg:x="1025" fg:w="53"/><text x="95.3335%" y="399.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (39 samples, 3.62%)</title><rect x="96.3822%" y="373" width="3.6178%" height="15" fill="rgb(212,28,1)" fg:x="1039" fg:w="39"/><text x="96.6322%" y="383.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (27 samples, 2.50%)</title><rect x="97.4954%" y="357" width="2.5046%" height="15" fill="rgb(248,164,17)" fg:x="1051" fg:w="27"/><text x="97.7454%" y="367.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (27 samples, 2.50%)</title><rect x="97.4954%" y="341" width="2.5046%" height="15" fill="rgb(222,171,42)" fg:x="1051" fg:w="27"/><text x="97.7454%" y="351.50">to..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (27 samples, 2.50%)</title><rect x="97.4954%" y="325" width="2.5046%" height="15" fill="rgb(243,84,45)" fg:x="1051" fg:w="27"/><text x="97.7454%" y="335.50">&lt;f..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (27 samples, 2.50%)</title><rect x="97.4954%" y="309" width="2.5046%" height="15" fill="rgb(252,49,23)" fg:x="1051" fg:w="27"/><text x="97.7454%" y="319.50">&lt;h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (27 samples, 2.50%)</title><rect x="97.4954%" y="293" width="2.5046%" height="15" fill="rgb(215,19,7)" fg:x="1051" fg:w="27"/><text x="97.7454%" y="303.50">hy..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (16 samples, 1.48%)</title><rect x="98.5158%" y="277" width="1.4842%" height="15" fill="rgb(238,81,41)" fg:x="1062" fg:w="16"/><text x="98.7658%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (16 samples, 1.48%)</title><rect x="98.5158%" y="261" width="1.4842%" height="15" fill="rgb(210,199,37)" fg:x="1062" fg:w="16"/><text x="98.7658%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (16 samples, 1.48%)</title><rect x="98.5158%" y="245" width="1.4842%" height="15" fill="rgb(244,192,49)" fg:x="1062" fg:w="16"/><text x="98.7658%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (16 samples, 1.48%)</title><rect x="98.5158%" y="229" width="1.4842%" height="15" fill="rgb(226,211,11)" fg:x="1062" fg:w="16"/><text x="98.7658%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 1.39%)</title><rect x="98.6085%" y="213" width="1.3915%" height="15" fill="rgb(236,162,54)" fg:x="1063" fg:w="15"/><text x="98.8585%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 1.39%)</title><rect x="98.6085%" y="197" width="1.3915%" height="15" fill="rgb(220,229,9)" fg:x="1063" fg:w="15"/><text x="98.8585%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (13 samples, 1.21%)</title><rect x="98.7941%" y="181" width="1.2059%" height="15" fill="rgb(250,87,22)" fg:x="1065" fg:w="13"/><text x="99.0441%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (9 samples, 0.83%)</title><rect x="99.1651%" y="165" width="0.8349%" height="15" fill="rgb(239,43,17)" fg:x="1069" fg:w="9"/><text x="99.4151%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (9 samples, 0.83%)</title><rect x="99.1651%" y="149" width="0.8349%" height="15" fill="rgb(231,177,25)" fg:x="1069" fg:w="9"/><text x="99.4151%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.74%)</title><rect x="99.2579%" y="133" width="0.7421%" height="15" fill="rgb(219,179,1)" fg:x="1070" fg:w="8"/><text x="99.5079%" y="143.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.09%)</title><rect x="99.9072%" y="117" width="0.0928%" height="15" fill="rgb(238,219,53)" fg:x="1077" fg:w="1"/><text x="100.1572%" y="127.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.09%)</title><rect x="99.9072%" y="101" width="0.0928%" height="15" fill="rgb(232,167,36)" fg:x="1077" fg:w="1"/><text x="100.1572%" y="111.50"></text></g></svg></svg>