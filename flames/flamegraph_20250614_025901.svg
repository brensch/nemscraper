<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="297"><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.34%)</title><rect x="2.6936%" y="181" width="0.3367%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="1"/><text x="2.9436%" y="191.50"></text></g><g><title>clock_gettime (1 samples, 0.34%)</title><rect x="2.6936%" y="165" width="0.3367%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="1"/><text x="2.9436%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 2.36%)</title><rect x="2.6936%" y="197" width="2.3569%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="7"/><text x="2.9436%" y="207.50">p..</text></g><g><title>syscall (6 samples, 2.02%)</title><rect x="3.0303%" y="181" width="2.0202%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="6"/><text x="3.2803%" y="191.50">s..</text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.67%)</title><rect x="5.0505%" y="197" width="0.6734%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="2"/><text x="5.3005%" y="207.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.67%)</title><rect x="5.0505%" y="181" width="0.6734%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="2"/><text x="5.3005%" y="191.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (2 samples, 0.67%)</title><rect x="5.0505%" y="165" width="0.6734%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="2"/><text x="5.3005%" y="175.50"></text></g><g><title>write (2 samples, 0.67%)</title><rect x="5.0505%" y="149" width="0.6734%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="2"/><text x="5.3005%" y="159.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (11 samples, 3.70%)</title><rect x="2.3569%" y="357" width="3.7037%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="11"/><text x="2.6069%" y="367.50">&lt;req..</text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (11 samples, 3.70%)</title><rect x="2.3569%" y="341" width="3.7037%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="11"/><text x="2.6069%" y="351.50">&lt;req..</text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (11 samples, 3.70%)</title><rect x="2.3569%" y="325" width="3.7037%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="11"/><text x="2.6069%" y="335.50">&lt;req..</text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (11 samples, 3.70%)</title><rect x="2.3569%" y="309" width="3.7037%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="11"/><text x="2.6069%" y="319.50">&lt;hyp..</text></g><g><title>hyper::body::body::Body::poll_inner (11 samples, 3.70%)</title><rect x="2.3569%" y="293" width="3.7037%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="11"/><text x="2.6069%" y="303.50">hype..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (11 samples, 3.70%)</title><rect x="2.3569%" y="277" width="3.7037%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="11"/><text x="2.6069%" y="287.50">&lt;fut..</text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (11 samples, 3.70%)</title><rect x="2.3569%" y="261" width="3.7037%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="11"/><text x="2.6069%" y="271.50">futu..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (10 samples, 3.37%)</title><rect x="2.6936%" y="245" width="3.3670%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="10"/><text x="2.9436%" y="255.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 3.37%)</title><rect x="2.6936%" y="229" width="3.3670%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="10"/><text x="2.9436%" y="239.50">tok..</text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 3.37%)</title><rect x="2.6936%" y="213" width="3.3670%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="10"/><text x="2.9436%" y="223.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (1 samples, 0.34%)</title><rect x="5.7239%" y="197" width="0.3367%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="1"/><text x="5.9739%" y="207.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.34%)</title><rect x="6.0606%" y="357" width="0.3367%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="1"/><text x="6.3106%" y="367.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.34%)</title><rect x="6.0606%" y="341" width="0.3367%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="1"/><text x="6.3106%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.34%)</title><rect x="6.0606%" y="325" width="0.3367%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="1"/><text x="6.3106%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (1 samples, 0.34%)</title><rect x="6.0606%" y="309" width="0.3367%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="1"/><text x="6.3106%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.67%)</title><rect x="9.7643%" y="293" width="0.6734%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="2"/><text x="10.0143%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.67%)</title><rect x="10.7744%" y="277" width="0.6734%" height="15" fill="rgb(241,131,45)" fg:x="32" fg:w="2"/><text x="11.0244%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.67%)</title><rect x="10.7744%" y="261" width="0.6734%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="2"/><text x="11.0244%" y="271.50"></text></g><g><title>__libc_realloc (2 samples, 0.67%)</title><rect x="10.7744%" y="245" width="0.6734%" height="15" fill="rgb(225,111,53)" fg:x="32" fg:w="2"/><text x="11.0244%" y="255.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (19 samples, 6.40%)</title><rect x="10.4377%" y="293" width="6.3973%" height="15" fill="rgb(238,160,17)" fg:x="31" fg:w="19"/><text x="10.6877%" y="303.50">nemscrap..</text></g><g><title>malloc (16 samples, 5.39%)</title><rect x="11.4478%" y="277" width="5.3872%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="16"/><text x="11.6978%" y="287.50">malloc</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.34%)</title><rect x="23.2323%" y="277" width="0.3367%" height="15" fill="rgb(232,36,49)" fg:x="69" fg:w="1"/><text x="23.4823%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.34%)</title><rect x="23.2323%" y="261" width="0.3367%" height="15" fill="rgb(209,103,24)" fg:x="69" fg:w="1"/><text x="23.4823%" y="271.50"></text></g><g><title>__libc_realloc (1 samples, 0.34%)</title><rect x="23.2323%" y="245" width="0.3367%" height="15" fill="rgb(229,88,8)" fg:x="69" fg:w="1"/><text x="23.4823%" y="255.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (2 samples, 0.67%)</title><rect x="23.5690%" y="277" width="0.6734%" height="15" fill="rgb(213,181,19)" fg:x="70" fg:w="2"/><text x="23.8190%" y="287.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.34%)</title><rect x="23.9057%" y="261" width="0.3367%" height="15" fill="rgb(254,191,54)" fg:x="71" fg:w="1"/><text x="24.1557%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.34%)</title><rect x="23.9057%" y="245" width="0.3367%" height="15" fill="rgb(241,83,37)" fg:x="71" fg:w="1"/><text x="24.1557%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="23.9057%" y="229" width="0.3367%" height="15" fill="rgb(233,36,39)" fg:x="71" fg:w="1"/><text x="24.1557%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.34%)</title><rect x="23.9057%" y="213" width="0.3367%" height="15" fill="rgb(226,3,54)" fg:x="71" fg:w="1"/><text x="24.1557%" y="223.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="23.9057%" y="197" width="0.3367%" height="15" fill="rgb(245,192,40)" fg:x="71" fg:w="1"/><text x="24.1557%" y="207.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1 samples, 0.34%)</title><rect x="23.9057%" y="181" width="0.3367%" height="15" fill="rgb(238,167,29)" fg:x="71" fg:w="1"/><text x="24.1557%" y="191.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.34%)</title><rect x="23.9057%" y="165" width="0.3367%" height="15" fill="rgb(232,182,51)" fg:x="71" fg:w="1"/><text x="24.1557%" y="175.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.34%)</title><rect x="23.9057%" y="149" width="0.3367%" height="15" fill="rgb(231,60,39)" fg:x="71" fg:w="1"/><text x="24.1557%" y="159.50"></text></g><g><title>posix_memalign (1 samples, 0.34%)</title><rect x="23.9057%" y="133" width="0.3367%" height="15" fill="rgb(208,69,12)" fg:x="71" fg:w="1"/><text x="24.1557%" y="143.50"></text></g><g><title>cfree (10 samples, 3.37%)</title><rect x="24.2424%" y="277" width="3.3670%" height="15" fill="rgb(235,93,37)" fg:x="72" fg:w="10"/><text x="24.4924%" y="287.50">cfr..</text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (14 samples, 4.71%)</title><rect x="27.6094%" y="277" width="4.7138%" height="15" fill="rgb(213,116,39)" fg:x="82" fg:w="14"/><text x="27.8594%" y="287.50">core:..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 4.71%)</title><rect x="27.6094%" y="261" width="4.7138%" height="15" fill="rgb(222,207,29)" fg:x="82" fg:w="14"/><text x="27.8594%" y="271.50">alloc..</text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (14 samples, 4.71%)</title><rect x="27.6094%" y="245" width="4.7138%" height="15" fill="rgb(206,96,30)" fg:x="82" fg:w="14"/><text x="27.8594%" y="255.50">core:..</text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 4.71%)</title><rect x="27.6094%" y="229" width="4.7138%" height="15" fill="rgb(218,138,4)" fg:x="82" fg:w="14"/><text x="27.8594%" y="239.50">alloc..</text></g><g><title>cfree (14 samples, 4.71%)</title><rect x="27.6094%" y="213" width="4.7138%" height="15" fill="rgb(250,191,14)" fg:x="82" fg:w="14"/><text x="27.8594%" y="223.50">cfree</text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.34%)</title><rect x="32.3232%" y="277" width="0.3367%" height="15" fill="rgb(239,60,40)" fg:x="96" fg:w="1"/><text x="32.5732%" y="287.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.34%)</title><rect x="32.3232%" y="261" width="0.3367%" height="15" fill="rgb(206,27,48)" fg:x="96" fg:w="1"/><text x="32.5732%" y="271.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.34%)</title><rect x="32.6599%" y="117" width="0.3367%" height="15" fill="rgb(225,35,8)" fg:x="97" fg:w="1"/><text x="32.9099%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.34%)</title><rect x="32.6599%" y="101" width="0.3367%" height="15" fill="rgb(250,213,24)" fg:x="97" fg:w="1"/><text x="32.9099%" y="111.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.67%)</title><rect x="32.6599%" y="165" width="0.6734%" height="15" fill="rgb(247,123,22)" fg:x="97" fg:w="2"/><text x="32.9099%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.67%)</title><rect x="32.6599%" y="149" width="0.6734%" height="15" fill="rgb(231,138,38)" fg:x="97" fg:w="2"/><text x="32.9099%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.67%)</title><rect x="32.6599%" y="133" width="0.6734%" height="15" fill="rgb(231,145,46)" fg:x="97" fg:w="2"/><text x="32.9099%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.34%)</title><rect x="32.9966%" y="117" width="0.3367%" height="15" fill="rgb(251,118,11)" fg:x="98" fg:w="1"/><text x="33.2466%" y="127.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (3 samples, 1.01%)</title><rect x="32.6599%" y="181" width="1.0101%" height="15" fill="rgb(217,147,25)" fg:x="97" fg:w="3"/><text x="32.9099%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.34%)</title><rect x="33.3333%" y="165" width="0.3367%" height="15" fill="rgb(247,81,37)" fg:x="99" fg:w="1"/><text x="33.5833%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.34%)</title><rect x="33.3333%" y="149" width="0.3367%" height="15" fill="rgb(209,12,38)" fg:x="99" fg:w="1"/><text x="33.5833%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.34%)</title><rect x="33.3333%" y="133" width="0.3367%" height="15" fill="rgb(227,1,9)" fg:x="99" fg:w="1"/><text x="33.5833%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.34%)</title><rect x="33.3333%" y="117" width="0.3367%" height="15" fill="rgb(248,47,43)" fg:x="99" fg:w="1"/><text x="33.5833%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (4 samples, 1.35%)</title><rect x="32.6599%" y="277" width="1.3468%" height="15" fill="rgb(221,10,30)" fg:x="97" fg:w="4"/><text x="32.9099%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (4 samples, 1.35%)</title><rect x="32.6599%" y="261" width="1.3468%" height="15" fill="rgb(210,229,1)" fg:x="97" fg:w="4"/><text x="32.9099%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 1.35%)</title><rect x="32.6599%" y="245" width="1.3468%" height="15" fill="rgb(222,148,37)" fg:x="97" fg:w="4"/><text x="32.9099%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (4 samples, 1.35%)</title><rect x="32.6599%" y="229" width="1.3468%" height="15" fill="rgb(234,67,33)" fg:x="97" fg:w="4"/><text x="32.9099%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 1.35%)</title><rect x="32.6599%" y="213" width="1.3468%" height="15" fill="rgb(247,98,35)" fg:x="97" fg:w="4"/><text x="32.9099%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (4 samples, 1.35%)</title><rect x="32.6599%" y="197" width="1.3468%" height="15" fill="rgb(247,138,52)" fg:x="97" fg:w="4"/><text x="32.9099%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (1 samples, 0.34%)</title><rect x="33.6700%" y="181" width="0.3367%" height="15" fill="rgb(213,79,30)" fg:x="100" fg:w="1"/><text x="33.9200%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.34%)</title><rect x="33.6700%" y="165" width="0.3367%" height="15" fill="rgb(246,177,23)" fg:x="100" fg:w="1"/><text x="33.9200%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.34%)</title><rect x="33.6700%" y="149" width="0.3367%" height="15" fill="rgb(230,62,27)" fg:x="100" fg:w="1"/><text x="33.9200%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.34%)</title><rect x="33.6700%" y="133" width="0.3367%" height="15" fill="rgb(216,154,8)" fg:x="100" fg:w="1"/><text x="33.9200%" y="143.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.34%)</title><rect x="33.6700%" y="117" width="0.3367%" height="15" fill="rgb(244,35,45)" fg:x="100" fg:w="1"/><text x="33.9200%" y="127.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (52 samples, 17.51%)</title><rect x="16.8350%" y="293" width="17.5084%" height="15" fill="rgb(251,115,12)" fg:x="50" fg:w="52"/><text x="17.0850%" y="303.50">nemscraper::process::chunk:..</text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.34%)</title><rect x="34.0067%" y="277" width="0.3367%" height="15" fill="rgb(240,54,50)" fg:x="101" fg:w="1"/><text x="34.2567%" y="287.50"></text></g><g><title>open64 (1 samples, 0.34%)</title><rect x="34.0067%" y="261" width="0.3367%" height="15" fill="rgb(233,84,52)" fg:x="101" fg:w="1"/><text x="34.2567%" y="271.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 3.03%)</title><rect x="37.3737%" y="277" width="3.0303%" height="15" fill="rgb(207,117,47)" fg:x="111" fg:w="9"/><text x="37.6237%" y="287.50">cor..</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (105 samples, 35.35%)</title><rect x="7.0707%" y="341" width="35.3535%" height="15" fill="rgb(249,43,39)" fg:x="21" fg:w="105"/><text x="7.3207%" y="351.50">nemscraper::process::csv_batch_processor::CsvBatchProcess..</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (99 samples, 33.33%)</title><rect x="9.0909%" y="325" width="33.3333%" height="15" fill="rgb(209,38,44)" fg:x="27" fg:w="99"/><text x="9.3409%" y="335.50">nemscraper::process::csv_batch_processor::CsvBatchProc..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (99 samples, 33.33%)</title><rect x="9.0909%" y="309" width="33.3333%" height="15" fill="rgb(236,212,23)" fg:x="27" fg:w="99"/><text x="9.3409%" y="319.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (24 samples, 8.08%)</title><rect x="34.3434%" y="293" width="8.0808%" height="15" fill="rgb(242,79,21)" fg:x="102" fg:w="24"/><text x="34.5934%" y="303.50">std::io::ap..</text></g><g><title>core::str::converts::from_utf8 (6 samples, 2.02%)</title><rect x="40.4040%" y="277" width="2.0202%" height="15" fill="rgb(211,96,35)" fg:x="120" fg:w="6"/><text x="40.6540%" y="287.50">c..</text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (1 samples, 0.34%)</title><rect x="42.4242%" y="309" width="0.3367%" height="15" fill="rgb(253,215,40)" fg:x="126" fg:w="1"/><text x="42.6742%" y="319.50"></text></g><g><title>cfree (1 samples, 0.34%)</title><rect x="43.0976%" y="293" width="0.3367%" height="15" fill="rgb(211,81,21)" fg:x="128" fg:w="1"/><text x="43.3476%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (1 samples, 0.34%)</title><rect x="43.4343%" y="293" width="0.3367%" height="15" fill="rgb(208,190,38)" fg:x="129" fg:w="1"/><text x="43.6843%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.34%)</title><rect x="43.4343%" y="277" width="0.3367%" height="15" fill="rgb(235,213,38)" fg:x="129" fg:w="1"/><text x="43.6843%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (1 samples, 0.34%)</title><rect x="43.4343%" y="261" width="0.3367%" height="15" fill="rgb(237,122,38)" fg:x="129" fg:w="1"/><text x="43.6843%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.34%)</title><rect x="43.4343%" y="245" width="0.3367%" height="15" fill="rgb(244,218,35)" fg:x="129" fg:w="1"/><text x="43.6843%" y="255.50"></text></g><g><title>cfree (1 samples, 0.34%)</title><rect x="43.4343%" y="229" width="0.3367%" height="15" fill="rgb(240,68,47)" fg:x="129" fg:w="1"/><text x="43.6843%" y="239.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (4 samples, 1.35%)</title><rect x="42.7609%" y="309" width="1.3468%" height="15" fill="rgb(210,16,53)" fg:x="127" fg:w="4"/><text x="43.0109%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.34%)</title><rect x="43.7710%" y="293" width="0.3367%" height="15" fill="rgb(235,124,12)" fg:x="130" fg:w="1"/><text x="44.0210%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.34%)</title><rect x="43.7710%" y="277" width="0.3367%" height="15" fill="rgb(224,169,11)" fg:x="130" fg:w="1"/><text x="44.0210%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.34%)</title><rect x="43.7710%" y="261" width="0.3367%" height="15" fill="rgb(250,166,2)" fg:x="130" fg:w="1"/><text x="44.0210%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.34%)</title><rect x="43.7710%" y="245" width="0.3367%" height="15" fill="rgb(242,216,29)" fg:x="130" fg:w="1"/><text x="44.0210%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.34%)</title><rect x="43.7710%" y="229" width="0.3367%" height="15" fill="rgb(230,116,27)" fg:x="130" fg:w="1"/><text x="44.0210%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.34%)</title><rect x="43.7710%" y="213" width="0.3367%" height="15" fill="rgb(228,99,48)" fg:x="130" fg:w="1"/><text x="44.0210%" y="223.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.34%)</title><rect x="43.7710%" y="197" width="0.3367%" height="15" fill="rgb(253,11,6)" fg:x="130" fg:w="1"/><text x="44.0210%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.34%)</title><rect x="43.7710%" y="181" width="0.3367%" height="15" fill="rgb(247,143,39)" fg:x="130" fg:w="1"/><text x="44.0210%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.34%)</title><rect x="43.7710%" y="165" width="0.3367%" height="15" fill="rgb(236,97,10)" fg:x="130" fg:w="1"/><text x="44.0210%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.34%)</title><rect x="43.7710%" y="149" width="0.3367%" height="15" fill="rgb(233,208,19)" fg:x="130" fg:w="1"/><text x="44.0210%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.34%)</title><rect x="43.7710%" y="133" width="0.3367%" height="15" fill="rgb(216,164,2)" fg:x="130" fg:w="1"/><text x="44.0210%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.34%)</title><rect x="43.7710%" y="117" width="0.3367%" height="15" fill="rgb(220,129,5)" fg:x="130" fg:w="1"/><text x="44.0210%" y="127.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (8 samples, 2.69%)</title><rect x="42.4242%" y="341" width="2.6936%" height="15" fill="rgb(242,17,10)" fg:x="126" fg:w="8"/><text x="42.6742%" y="351.50">ne..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (8 samples, 2.69%)</title><rect x="42.4242%" y="325" width="2.6936%" height="15" fill="rgb(242,107,0)" fg:x="126" fg:w="8"/><text x="42.6742%" y="335.50">ne..</text></g><g><title>std::io::append_to_string (3 samples, 1.01%)</title><rect x="44.1077%" y="309" width="1.0101%" height="15" fill="rgb(251,28,31)" fg:x="131" fg:w="3"/><text x="44.3577%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.34%)</title><rect x="44.7811%" y="293" width="0.3367%" height="15" fill="rgb(233,223,10)" fg:x="133" fg:w="1"/><text x="45.0311%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.67%)</title><rect x="47.8114%" y="277" width="0.6734%" height="15" fill="rgb(215,21,27)" fg:x="142" fg:w="2"/><text x="48.0614%" y="287.50"></text></g><g><title>crc32fast::Hasher::update (5 samples, 1.68%)</title><rect x="47.8114%" y="309" width="1.6835%" height="15" fill="rgb(232,23,21)" fg:x="142" fg:w="5"/><text x="48.0614%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (5 samples, 1.68%)</title><rect x="47.8114%" y="293" width="1.6835%" height="15" fill="rgb(244,5,23)" fg:x="142" fg:w="5"/><text x="48.0614%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (3 samples, 1.01%)</title><rect x="48.4848%" y="277" width="1.0101%" height="15" fill="rgb(226,81,46)" fg:x="144" fg:w="3"/><text x="48.7348%" y="287.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (69 samples, 23.23%)</title><rect x="52.1886%" y="245" width="23.2323%" height="15" fill="rgb(247,70,30)" fg:x="155" fg:w="69"/><text x="52.4386%" y="255.50">zlib_rs::inflate::inflate_fast_help_a..</text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (1 samples, 0.34%)</title><rect x="75.4209%" y="245" width="0.3367%" height="15" fill="rgb(212,68,19)" fg:x="224" fg:w="1"/><text x="75.6709%" y="255.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (84 samples, 28.28%)</title><rect x="47.8114%" y="325" width="28.2828%" height="15" fill="rgb(240,187,13)" fg:x="142" fg:w="84"/><text x="48.0614%" y="335.50">&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read</text></g><g><title>flate2::zio::read (79 samples, 26.60%)</title><rect x="49.4949%" y="309" width="26.5993%" height="15" fill="rgb(223,113,26)" fg:x="147" fg:w="79"/><text x="49.7449%" y="319.50">flate2::zio::read</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (79 samples, 26.60%)</title><rect x="49.4949%" y="293" width="26.5993%" height="15" fill="rgb(206,192,2)" fg:x="147" fg:w="79"/><text x="49.7449%" y="303.50">&lt;flate2::mem::Decompress as flate2::zio::Op..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (79 samples, 26.60%)</title><rect x="49.4949%" y="277" width="26.5993%" height="15" fill="rgb(241,108,4)" fg:x="147" fg:w="79"/><text x="49.7449%" y="287.50">&lt;flate2::ffi::c::Inflate as flate2::ffi::In..</text></g><g><title>zlib_rs::inflate::inflate (79 samples, 26.60%)</title><rect x="49.4949%" y="261" width="26.5993%" height="15" fill="rgb(247,173,49)" fg:x="147" fg:w="79"/><text x="49.7449%" y="271.50">zlib_rs::inflate::inflate</text></g><g><title>zlib_rs::inflate::writer::Writer::extend_from_window_runtime_dispatch (1 samples, 0.34%)</title><rect x="75.7576%" y="245" width="0.3367%" height="15" fill="rgb(224,114,35)" fg:x="225" fg:w="1"/><text x="76.0076%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (20 samples, 6.73%)</title><rect x="76.0943%" y="325" width="6.7340%" height="15" fill="rgb(245,159,27)" fg:x="226" fg:w="20"/><text x="76.3443%" y="335.50">core::sli..</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (252 samples, 84.85%)</title><rect x="0.3367%" y="373" width="84.8485%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="252"/><text x="0.5867%" y="383.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (234 samples, 78.79%)</title><rect x="6.3973%" y="357" width="78.7879%" height="15" fill="rgb(236,23,11)" fg:x="19" fg:w="234"/><text x="6.6473%" y="367.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (119 samples, 40.07%)</title><rect x="45.1178%" y="341" width="40.0673%" height="15" fill="rgb(205,117,38)" fg:x="134" fg:w="119"/><text x="45.3678%" y="351.50">std::io::append_to_string</text></g><g><title>core::str::converts::from_utf8 (7 samples, 2.36%)</title><rect x="82.8283%" y="325" width="2.3569%" height="15" fill="rgb(237,72,25)" fg:x="246" fg:w="7"/><text x="83.0783%" y="335.50">c..</text></g><g><title>bench_zip_to_pa (256 samples, 86.20%)</title><rect x="0.0000%" y="533" width="86.1953%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="256"/><text x="0.2500%" y="543.50">bench_zip_to_pa</text></g><g><title>_start (256 samples, 86.20%)</title><rect x="0.0000%" y="517" width="86.1953%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="256"/><text x="0.2500%" y="527.50">_start</text></g><g><title>__libc_start_main (256 samples, 86.20%)</title><rect x="0.0000%" y="501" width="86.1953%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="256"/><text x="0.2500%" y="511.50">__libc_start_main</text></g><g><title>main (256 samples, 86.20%)</title><rect x="0.0000%" y="485" width="86.1953%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="256"/><text x="0.2500%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (256 samples, 86.20%)</title><rect x="0.0000%" y="469" width="86.1953%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="256"/><text x="0.2500%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (256 samples, 86.20%)</title><rect x="0.0000%" y="453" width="86.1953%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="256"/><text x="0.2500%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (256 samples, 86.20%)</title><rect x="0.0000%" y="437" width="86.1953%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="256"/><text x="0.2500%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (256 samples, 86.20%)</title><rect x="0.0000%" y="421" width="86.1953%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="256"/><text x="0.2500%" y="431.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (256 samples, 86.20%)</title><rect x="0.0000%" y="405" width="86.1953%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="256"/><text x="0.2500%" y="415.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (256 samples, 86.20%)</title><rect x="0.0000%" y="389" width="86.1953%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="256"/><text x="0.2500%" y="399.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 1.01%)</title><rect x="85.1852%" y="373" width="1.0101%" height="15" fill="rgb(213,55,15)" fg:x="253" fg:w="3"/><text x="85.4352%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 1.01%)</title><rect x="85.1852%" y="357" width="1.0101%" height="15" fill="rgb(209,9,3)" fg:x="253" fg:w="3"/><text x="85.4352%" y="367.50"></text></g><g><title>syscall (3 samples, 1.01%)</title><rect x="85.1852%" y="341" width="1.0101%" height="15" fill="rgb(230,59,30)" fg:x="253" fg:w="3"/><text x="85.4352%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.67%)</title><rect x="86.8687%" y="309" width="0.6734%" height="15" fill="rgb(209,121,21)" fg:x="258" fg:w="2"/><text x="87.1187%" y="319.50"></text></g><g><title>syscall (2 samples, 0.67%)</title><rect x="86.8687%" y="293" width="0.6734%" height="15" fill="rgb(220,109,13)" fg:x="258" fg:w="2"/><text x="87.1187%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.34%)</title><rect x="87.5421%" y="293" width="0.3367%" height="15" fill="rgb(232,18,1)" fg:x="260" fg:w="1"/><text x="87.7921%" y="303.50"></text></g><g><title>clock_gettime (1 samples, 0.34%)</title><rect x="87.5421%" y="277" width="0.3367%" height="15" fill="rgb(215,41,42)" fg:x="260" fg:w="1"/><text x="87.7921%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10 samples, 3.37%)</title><rect x="86.5320%" y="341" width="3.3670%" height="15" fill="rgb(224,123,36)" fg:x="257" fg:w="10"/><text x="86.7820%" y="351.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (10 samples, 3.37%)</title><rect x="86.5320%" y="325" width="3.3670%" height="15" fill="rgb(240,125,3)" fg:x="257" fg:w="10"/><text x="86.7820%" y="335.50">tok..</text></g><g><title>tokio::runtime::time::Driver::park_internal (7 samples, 2.36%)</title><rect x="87.5421%" y="309" width="2.3569%" height="15" fill="rgb(205,98,50)" fg:x="260" fg:w="7"/><text x="87.7921%" y="319.50">t..</text></g><g><title>tokio::runtime::io::driver::Driver::turn (6 samples, 2.02%)</title><rect x="87.8788%" y="293" width="2.0202%" height="15" fill="rgb(205,185,37)" fg:x="261" fg:w="6"/><text x="88.1288%" y="303.50">t..</text></g><g><title>mio::poll::Poll::poll (6 samples, 2.02%)</title><rect x="87.8788%" y="277" width="2.0202%" height="15" fill="rgb(238,207,15)" fg:x="261" fg:w="6"/><text x="88.1288%" y="287.50">m..</text></g><g><title>epoll_wait (6 samples, 2.02%)</title><rect x="87.8788%" y="261" width="2.0202%" height="15" fill="rgb(213,199,42)" fg:x="261" fg:w="6"/><text x="88.1288%" y="271.50">e..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 1.35%)</title><rect x="89.8990%" y="325" width="1.3468%" height="15" fill="rgb(235,201,11)" fg:x="267" fg:w="4"/><text x="90.1490%" y="335.50"></text></g><g><title>syscall (3 samples, 1.01%)</title><rect x="90.2357%" y="309" width="1.0101%" height="15" fill="rgb(207,46,11)" fg:x="268" fg:w="3"/><text x="90.4857%" y="319.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (8 samples, 2.69%)</title><rect x="91.2458%" y="325" width="2.6936%" height="15" fill="rgb(241,35,35)" fg:x="271" fg:w="8"/><text x="91.4958%" y="335.50">to..</text></g><g><title>mio::sys::unix::waker::Waker::wake (7 samples, 2.36%)</title><rect x="91.5825%" y="309" width="2.3569%" height="15" fill="rgb(243,32,47)" fg:x="272" fg:w="7"/><text x="91.8325%" y="319.50">m..</text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (7 samples, 2.36%)</title><rect x="91.5825%" y="293" width="2.3569%" height="15" fill="rgb(247,202,23)" fg:x="272" fg:w="7"/><text x="91.8325%" y="303.50">&lt;..</text></g><g><title>write (7 samples, 2.36%)</title><rect x="91.5825%" y="277" width="2.3569%" height="15" fill="rgb(219,102,11)" fg:x="272" fg:w="7"/><text x="91.8325%" y="287.50">w..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.34%)</title><rect x="93.9394%" y="325" width="0.3367%" height="15" fill="rgb(243,110,44)" fg:x="279" fg:w="1"/><text x="94.1894%" y="335.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::is_end_stream (1 samples, 0.34%)</title><rect x="94.2761%" y="245" width="0.3367%" height="15" fill="rgb(222,74,54)" fg:x="280" fg:w="1"/><text x="94.5261%" y="255.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (7 samples, 2.36%)</title><rect x="94.6128%" y="245" width="2.3569%" height="15" fill="rgb(216,99,12)" fg:x="281" fg:w="7"/><text x="94.8628%" y="255.50">h..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (7 samples, 2.36%)</title><rect x="94.6128%" y="229" width="2.3569%" height="15" fill="rgb(226,22,26)" fg:x="281" fg:w="7"/><text x="94.8628%" y="239.50">f..</text></g><g><title>tokio::runtime::park::wake (7 samples, 2.36%)</title><rect x="94.6128%" y="213" width="2.3569%" height="15" fill="rgb(217,163,10)" fg:x="281" fg:w="7"/><text x="94.8628%" y="223.50">t..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 2.36%)</title><rect x="94.6128%" y="197" width="2.3569%" height="15" fill="rgb(213,25,53)" fg:x="281" fg:w="7"/><text x="94.8628%" y="207.50">p..</text></g><g><title>syscall (7 samples, 2.36%)</title><rect x="94.6128%" y="181" width="2.3569%" height="15" fill="rgb(252,105,26)" fg:x="281" fg:w="7"/><text x="94.8628%" y="191.50">s..</text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.34%)</title><rect x="97.9798%" y="133" width="0.3367%" height="15" fill="rgb(220,39,43)" fg:x="291" fg:w="1"/><text x="98.2298%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (1 samples, 0.34%)</title><rect x="97.9798%" y="117" width="0.3367%" height="15" fill="rgb(229,68,48)" fg:x="291" fg:w="1"/><text x="98.2298%" y="127.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.34%)</title><rect x="97.9798%" y="101" width="0.3367%" height="15" fill="rgb(252,8,32)" fg:x="291" fg:w="1"/><text x="98.2298%" y="111.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.34%)</title><rect x="97.9798%" y="85" width="0.3367%" height="15" fill="rgb(223,20,43)" fg:x="291" fg:w="1"/><text x="98.2298%" y="95.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.34%)</title><rect x="97.9798%" y="69" width="0.3367%" height="15" fill="rgb(229,81,49)" fg:x="291" fg:w="1"/><text x="98.2298%" y="79.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.34%)</title><rect x="97.9798%" y="53" width="0.3367%" height="15" fill="rgb(236,28,36)" fg:x="291" fg:w="1"/><text x="98.2298%" y="63.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.34%)</title><rect x="97.9798%" y="37" width="0.3367%" height="15" fill="rgb(249,185,26)" fg:x="291" fg:w="1"/><text x="98.2298%" y="47.50"></text></g><g><title>all (297 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="297"/><text x="0.2500%" y="559.50"></text></g><g><title>tokio-runtime-w (41 samples, 13.80%)</title><rect x="86.1953%" y="533" width="13.8047%" height="15" fill="rgb(233,201,37)" fg:x="256" fg:w="41"/><text x="86.4453%" y="543.50">tokio-runtime-w</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (41 samples, 13.80%)</title><rect x="86.1953%" y="517" width="13.8047%" height="15" fill="rgb(221,78,26)" fg:x="256" fg:w="41"/><text x="86.4453%" y="527.50">std::sys::pal::unix::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (41 samples, 13.80%)</title><rect x="86.1953%" y="501" width="13.8047%" height="15" fill="rgb(250,127,30)" fg:x="256" fg:w="41"/><text x="86.4453%" y="511.50">core::ops::function::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (41 samples, 13.80%)</title><rect x="86.1953%" y="485" width="13.8047%" height="15" fill="rgb(230,49,44)" fg:x="256" fg:w="41"/><text x="86.4453%" y="495.50">std::sys::backtrace::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (41 samples, 13.80%)</title><rect x="86.1953%" y="469" width="13.8047%" height="15" fill="rgb(229,67,23)" fg:x="256" fg:w="41"/><text x="86.4453%" y="479.50">tokio::runtime::block..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (41 samples, 13.80%)</title><rect x="86.1953%" y="453" width="13.8047%" height="15" fill="rgb(249,83,47)" fg:x="256" fg:w="41"/><text x="86.4453%" y="463.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (41 samples, 13.80%)</title><rect x="86.1953%" y="437" width="13.8047%" height="15" fill="rgb(215,43,3)" fg:x="256" fg:w="41"/><text x="86.4453%" y="447.50">tokio::runtime::task:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 13.80%)</title><rect x="86.1953%" y="421" width="13.8047%" height="15" fill="rgb(238,154,13)" fg:x="256" fg:w="41"/><text x="86.4453%" y="431.50">&lt;tokio::runtime::bloc..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (41 samples, 13.80%)</title><rect x="86.1953%" y="405" width="13.8047%" height="15" fill="rgb(219,56,2)" fg:x="256" fg:w="41"/><text x="86.4453%" y="415.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (41 samples, 13.80%)</title><rect x="86.1953%" y="389" width="13.8047%" height="15" fill="rgb(233,0,4)" fg:x="256" fg:w="41"/><text x="86.4453%" y="399.50">tokio::runtime::conte..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (41 samples, 13.80%)</title><rect x="86.1953%" y="373" width="13.8047%" height="15" fill="rgb(235,30,7)" fg:x="256" fg:w="41"/><text x="86.4453%" y="383.50">tokio::runtime::conte..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (41 samples, 13.80%)</title><rect x="86.1953%" y="357" width="13.8047%" height="15" fill="rgb(250,79,13)" fg:x="256" fg:w="41"/><text x="86.4453%" y="367.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (30 samples, 10.10%)</title><rect x="89.8990%" y="341" width="10.1010%" height="15" fill="rgb(211,146,34)" fg:x="267" fg:w="30"/><text x="90.1490%" y="351.50">tokio::runtime:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (17 samples, 5.72%)</title><rect x="94.2761%" y="325" width="5.7239%" height="15" fill="rgb(228,22,38)" fg:x="280" fg:w="17"/><text x="94.5261%" y="335.50">tokio::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (17 samples, 5.72%)</title><rect x="94.2761%" y="309" width="5.7239%" height="15" fill="rgb(235,168,5)" fg:x="280" fg:w="17"/><text x="94.5261%" y="319.50">tokio::..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (17 samples, 5.72%)</title><rect x="94.2761%" y="293" width="5.7239%" height="15" fill="rgb(221,155,16)" fg:x="280" fg:w="17"/><text x="94.5261%" y="303.50">&lt;future..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (17 samples, 5.72%)</title><rect x="94.2761%" y="277" width="5.7239%" height="15" fill="rgb(215,215,53)" fg:x="280" fg:w="17"/><text x="94.5261%" y="287.50">&lt;hyper:..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (17 samples, 5.72%)</title><rect x="94.2761%" y="261" width="5.7239%" height="15" fill="rgb(223,4,10)" fg:x="280" fg:w="17"/><text x="94.5261%" y="271.50">hyper::..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (9 samples, 3.03%)</title><rect x="96.9697%" y="245" width="3.0303%" height="15" fill="rgb(234,103,6)" fg:x="288" fg:w="9"/><text x="97.2197%" y="255.50">hyp..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (9 samples, 3.03%)</title><rect x="96.9697%" y="229" width="3.0303%" height="15" fill="rgb(227,97,0)" fg:x="288" fg:w="9"/><text x="97.2197%" y="239.50">hyp..</text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (9 samples, 3.03%)</title><rect x="96.9697%" y="213" width="3.0303%" height="15" fill="rgb(234,150,53)" fg:x="288" fg:w="9"/><text x="97.2197%" y="223.50">&lt;hy..</text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (9 samples, 3.03%)</title><rect x="96.9697%" y="197" width="3.0303%" height="15" fill="rgb(228,201,54)" fg:x="288" fg:w="9"/><text x="97.2197%" y="207.50">hyp..</text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 2.69%)</title><rect x="97.3064%" y="181" width="2.6936%" height="15" fill="rgb(222,22,37)" fg:x="289" fg:w="8"/><text x="97.5564%" y="191.50">&lt;r..</text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 2.69%)</title><rect x="97.3064%" y="165" width="2.6936%" height="15" fill="rgb(237,53,32)" fg:x="289" fg:w="8"/><text x="97.5564%" y="175.50">&lt;t..</text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (6 samples, 2.02%)</title><rect x="97.9798%" y="149" width="2.0202%" height="15" fill="rgb(233,25,53)" fg:x="291" fg:w="6"/><text x="98.2298%" y="159.50">t..</text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (5 samples, 1.68%)</title><rect x="98.3165%" y="133" width="1.6835%" height="15" fill="rgb(210,40,34)" fg:x="292" fg:w="5"/><text x="98.5665%" y="143.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (5 samples, 1.68%)</title><rect x="98.3165%" y="117" width="1.6835%" height="15" fill="rgb(241,220,44)" fg:x="292" fg:w="5"/><text x="98.5665%" y="127.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (5 samples, 1.68%)</title><rect x="98.3165%" y="101" width="1.6835%" height="15" fill="rgb(235,28,35)" fg:x="292" fg:w="5"/><text x="98.5665%" y="111.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (5 samples, 1.68%)</title><rect x="98.3165%" y="85" width="1.6835%" height="15" fill="rgb(210,56,17)" fg:x="292" fg:w="5"/><text x="98.5665%" y="95.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (5 samples, 1.68%)</title><rect x="98.3165%" y="69" width="1.6835%" height="15" fill="rgb(224,130,29)" fg:x="292" fg:w="5"/><text x="98.5665%" y="79.50"></text></g><g><title>recv (5 samples, 1.68%)</title><rect x="98.3165%" y="53" width="1.6835%" height="15" fill="rgb(235,212,8)" fg:x="292" fg:w="5"/><text x="98.5665%" y="63.50"></text></g></svg></svg>