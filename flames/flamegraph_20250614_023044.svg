<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="413"><g><title>cfree (1 samples, 0.24%)</title><rect x="0.4843%" y="325" width="0.2421%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.7343%" y="335.50"></text></g><g><title>__munmap (1 samples, 0.24%)</title><rect x="0.4843%" y="309" width="0.2421%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.7343%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (3 samples, 0.73%)</title><rect x="1.9370%" y="261" width="0.7264%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="3"/><text x="2.1870%" y="271.50"></text></g><g><title>malloc (2 samples, 0.48%)</title><rect x="2.1792%" y="245" width="0.4843%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="2"/><text x="2.4292%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.24%)</title><rect x="2.9056%" y="181" width="0.2421%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="1"/><text x="3.1556%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.24%)</title><rect x="2.9056%" y="165" width="0.2421%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="1"/><text x="3.1556%" y="175.50"></text></g><g><title>__libc_realloc (1 samples, 0.24%)</title><rect x="2.9056%" y="149" width="0.2421%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="1"/><text x="3.1556%" y="159.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (4 samples, 0.97%)</title><rect x="2.6634%" y="213" width="0.9685%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="4"/><text x="2.9134%" y="223.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (4 samples, 0.97%)</title><rect x="2.6634%" y="197" width="0.9685%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="4"/><text x="2.9134%" y="207.50"></text></g><g><title>csv_core::reader::Reader::read_record (2 samples, 0.48%)</title><rect x="3.1477%" y="181" width="0.4843%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="2"/><text x="3.3977%" y="191.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (6 samples, 1.45%)</title><rect x="2.6634%" y="229" width="1.4528%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="6"/><text x="2.9134%" y="239.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (2 samples, 0.48%)</title><rect x="3.6320%" y="213" width="0.4843%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="2"/><text x="3.8820%" y="223.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.48%)</title><rect x="3.6320%" y="197" width="0.4843%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="2"/><text x="3.8820%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.48%)</title><rect x="3.6320%" y="181" width="0.4843%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="2"/><text x="3.8820%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.48%)</title><rect x="3.6320%" y="165" width="0.4843%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="2"/><text x="3.8820%" y="175.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (2 samples, 0.48%)</title><rect x="3.6320%" y="149" width="0.4843%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="2"/><text x="3.8820%" y="159.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (2 samples, 0.48%)</title><rect x="3.6320%" y="133" width="0.4843%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="2"/><text x="3.8820%" y="143.50"></text></g><g><title>cfree (1 samples, 0.24%)</title><rect x="4.1162%" y="229" width="0.2421%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="1"/><text x="4.3662%" y="239.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.48%)</title><rect x="4.6005%" y="213" width="0.4843%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="2"/><text x="4.8505%" y="223.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.24%)</title><rect x="4.8426%" y="197" width="0.2421%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="1"/><text x="5.0926%" y="207.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (4 samples, 0.97%)</title><rect x="4.3584%" y="229" width="0.9685%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="4"/><text x="4.6084%" y="239.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.24%)</title><rect x="5.0847%" y="213" width="0.2421%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="1"/><text x="5.3347%" y="223.50"></text></g><g><title>malloc (1 samples, 0.24%)</title><rect x="5.0847%" y="197" width="0.2421%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="1"/><text x="5.3347%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.24%)</title><rect x="5.3269%" y="181" width="0.2421%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="1"/><text x="5.5769%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.24%)</title><rect x="5.3269%" y="165" width="0.2421%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="1"/><text x="5.5769%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.24%)</title><rect x="5.3269%" y="149" width="0.2421%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="1"/><text x="5.5769%" y="159.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.24%)</title><rect x="5.3269%" y="133" width="0.2421%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="5.5769%" y="143.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.24%)</title><rect x="5.3269%" y="117" width="0.2421%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="5.5769%" y="127.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (13 samples, 3.15%)</title><rect x="2.6634%" y="245" width="3.1477%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="13"/><text x="2.9134%" y="255.50">nem..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (2 samples, 0.48%)</title><rect x="5.3269%" y="229" width="0.4843%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="2"/><text x="5.5769%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (2 samples, 0.48%)</title><rect x="5.3269%" y="213" width="0.4843%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="2"/><text x="5.5769%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (2 samples, 0.48%)</title><rect x="5.3269%" y="197" width="0.4843%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="2"/><text x="5.5769%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.24%)</title><rect x="5.5690%" y="181" width="0.2421%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="5.8190%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.24%)</title><rect x="5.5690%" y="165" width="0.2421%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="5.8190%" y="175.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.24%)</title><rect x="5.5690%" y="149" width="0.2421%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="1"/><text x="5.8190%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.24%)</title><rect x="5.8111%" y="133" width="0.2421%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="1"/><text x="6.0611%" y="143.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.24%)</title><rect x="5.8111%" y="117" width="0.2421%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="1"/><text x="6.0611%" y="127.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.24%)</title><rect x="5.8111%" y="101" width="0.2421%" height="15" fill="rgb(245,192,40)" fg:x="24" fg:w="1"/><text x="6.0611%" y="111.50"></text></g><g><title>malloc (1 samples, 0.24%)</title><rect x="5.8111%" y="85" width="0.2421%" height="15" fill="rgb(238,167,29)" fg:x="24" fg:w="1"/><text x="6.0611%" y="95.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.24%)</title><rect x="6.0533%" y="133" width="0.2421%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="1"/><text x="6.3033%" y="143.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.24%)</title><rect x="6.0533%" y="117" width="0.2421%" height="15" fill="rgb(231,60,39)" fg:x="25" fg:w="1"/><text x="6.3033%" y="127.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.24%)</title><rect x="6.0533%" y="101" width="0.2421%" height="15" fill="rgb(208,69,12)" fg:x="25" fg:w="1"/><text x="6.3033%" y="111.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.24%)</title><rect x="6.0533%" y="85" width="0.2421%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="1"/><text x="6.3033%" y="95.50"></text></g><g><title>&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.24%)</title><rect x="6.0533%" y="69" width="0.2421%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="1"/><text x="6.3033%" y="79.50"></text></g><g><title>thrift::protocol::TFieldIdentifier::new (1 samples, 0.24%)</title><rect x="6.0533%" y="53" width="0.2421%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="1"/><text x="6.3033%" y="63.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.24%)</title><rect x="6.0533%" y="37" width="0.2421%" height="15" fill="rgb(206,96,30)" fg:x="25" fg:w="1"/><text x="6.3033%" y="47.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (16 samples, 3.87%)</title><rect x="2.6634%" y="261" width="3.8741%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="16"/><text x="2.9134%" y="271.50">nems..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (3 samples, 0.73%)</title><rect x="5.8111%" y="245" width="0.7264%" height="15" fill="rgb(250,191,14)" fg:x="24" fg:w="3"/><text x="6.0611%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (3 samples, 0.73%)</title><rect x="5.8111%" y="229" width="0.7264%" height="15" fill="rgb(239,60,40)" fg:x="24" fg:w="3"/><text x="6.0611%" y="239.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.73%)</title><rect x="5.8111%" y="213" width="0.7264%" height="15" fill="rgb(206,27,48)" fg:x="24" fg:w="3"/><text x="6.0611%" y="223.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (3 samples, 0.73%)</title><rect x="5.8111%" y="197" width="0.7264%" height="15" fill="rgb(225,35,8)" fg:x="24" fg:w="3"/><text x="6.0611%" y="207.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.73%)</title><rect x="5.8111%" y="181" width="0.7264%" height="15" fill="rgb(250,213,24)" fg:x="24" fg:w="3"/><text x="6.0611%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (3 samples, 0.73%)</title><rect x="5.8111%" y="165" width="0.7264%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="3"/><text x="6.0611%" y="175.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (3 samples, 0.73%)</title><rect x="5.8111%" y="149" width="0.7264%" height="15" fill="rgb(231,138,38)" fg:x="24" fg:w="3"/><text x="6.0611%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.24%)</title><rect x="6.2954%" y="133" width="0.2421%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="1"/><text x="6.5454%" y="143.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.24%)</title><rect x="6.2954%" y="117" width="0.2421%" height="15" fill="rgb(251,118,11)" fg:x="26" fg:w="1"/><text x="6.5454%" y="127.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.24%)</title><rect x="6.2954%" y="101" width="0.2421%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="1"/><text x="6.5454%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.48%)</title><rect x="7.7482%" y="245" width="0.4843%" height="15" fill="rgb(247,81,37)" fg:x="32" fg:w="2"/><text x="7.9982%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.48%)</title><rect x="7.7482%" y="229" width="0.4843%" height="15" fill="rgb(209,12,38)" fg:x="32" fg:w="2"/><text x="7.9982%" y="239.50"></text></g><g><title>__libc_realloc (2 samples, 0.48%)</title><rect x="7.7482%" y="213" width="0.4843%" height="15" fill="rgb(227,1,9)" fg:x="32" fg:w="2"/><text x="7.9982%" y="223.50"></text></g><g><title>alloc::str::join_generic_copy (1 samples, 0.24%)</title><rect x="8.2324%" y="245" width="0.2421%" height="15" fill="rgb(248,47,43)" fg:x="34" fg:w="1"/><text x="8.4824%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (14 samples, 3.39%)</title><rect x="12.3487%" y="197" width="3.3898%" height="15" fill="rgb(221,10,30)" fg:x="51" fg:w="14"/><text x="12.5987%" y="207.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 3.39%)</title><rect x="12.3487%" y="181" width="3.3898%" height="15" fill="rgb(210,229,1)" fg:x="51" fg:w="14"/><text x="12.5987%" y="191.50">all..</text></g><g><title>__libc_realloc (14 samples, 3.39%)</title><rect x="12.3487%" y="165" width="3.3898%" height="15" fill="rgb(222,148,37)" fg:x="51" fg:w="14"/><text x="12.5987%" y="175.50">__l..</text></g><g><title>arrow_csv::reader::Decoder::decode (61 samples, 14.77%)</title><rect x="8.9588%" y="229" width="14.7700%" height="15" fill="rgb(234,67,33)" fg:x="37" fg:w="61"/><text x="9.2088%" y="239.50">arrow_csv::reader::Deco..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (61 samples, 14.77%)</title><rect x="8.9588%" y="213" width="14.7700%" height="15" fill="rgb(247,98,35)" fg:x="37" fg:w="61"/><text x="9.2088%" y="223.50">arrow_csv::reader::reco..</text></g><g><title>csv_core::reader::Reader::read_record (33 samples, 7.99%)</title><rect x="15.7385%" y="197" width="7.9903%" height="15" fill="rgb(247,138,52)" fg:x="65" fg:w="33"/><text x="15.9885%" y="207.50">csv_core::r..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (3 samples, 0.73%)</title><rect x="23.7288%" y="213" width="0.7264%" height="15" fill="rgb(213,79,30)" fg:x="98" fg:w="3"/><text x="23.9788%" y="223.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (36 samples, 8.72%)</title><rect x="31.4770%" y="149" width="8.7167%" height="15" fill="rgb(246,177,23)" fg:x="130" fg:w="36"/><text x="31.7270%" y="159.50">arrow_array:..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.48%)</title><rect x="39.7094%" y="133" width="0.4843%" height="15" fill="rgb(230,62,27)" fg:x="164" fg:w="2"/><text x="39.9594%" y="143.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.48%)</title><rect x="39.7094%" y="117" width="0.4843%" height="15" fill="rgb(216,154,8)" fg:x="164" fg:w="2"/><text x="39.9594%" y="127.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (1 samples, 0.24%)</title><rect x="40.1937%" y="149" width="0.2421%" height="15" fill="rgb(244,35,45)" fg:x="166" fg:w="1"/><text x="40.4437%" y="159.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (1 samples, 0.24%)</title><rect x="40.1937%" y="133" width="0.2421%" height="15" fill="rgb(251,115,12)" fg:x="166" fg:w="1"/><text x="40.4437%" y="143.50"></text></g><g><title>&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (1 samples, 0.24%)</title><rect x="40.1937%" y="117" width="0.2421%" height="15" fill="rgb(240,54,50)" fg:x="166" fg:w="1"/><text x="40.4437%" y="127.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (133 samples, 32.20%)</title><rect x="8.4746%" y="245" width="32.2034%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="133"/><text x="8.7246%" y="255.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (70 samples, 16.95%)</title><rect x="23.7288%" y="229" width="16.9492%" height="15" fill="rgb(207,117,47)" fg:x="98" fg:w="70"/><text x="23.9788%" y="239.50">arrow_csv::reader::Decoder..</text></g><g><title>core::iter::adapters::try_process (67 samples, 16.22%)</title><rect x="24.4552%" y="213" width="16.2228%" height="15" fill="rgb(249,43,39)" fg:x="101" fg:w="67"/><text x="24.7052%" y="223.50">core::iter::adapters::try..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (67 samples, 16.22%)</title><rect x="24.4552%" y="197" width="16.2228%" height="15" fill="rgb(209,38,44)" fg:x="101" fg:w="67"/><text x="24.7052%" y="207.50">&lt;alloc::vec::Vec&lt;T&gt; as al..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (67 samples, 16.22%)</title><rect x="24.4552%" y="181" width="16.2228%" height="15" fill="rgb(236,212,23)" fg:x="101" fg:w="67"/><text x="24.7052%" y="191.50">&lt;core::iter::adapters::ma..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (67 samples, 16.22%)</title><rect x="24.4552%" y="165" width="16.2228%" height="15" fill="rgb(242,79,21)" fg:x="101" fg:w="67"/><text x="24.7052%" y="175.50">&lt;arrow_array::array::byte..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::with_capacity (1 samples, 0.24%)</title><rect x="40.4358%" y="149" width="0.2421%" height="15" fill="rgb(211,96,35)" fg:x="167" fg:w="1"/><text x="40.6858%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.24%)</title><rect x="40.4358%" y="133" width="0.2421%" height="15" fill="rgb(253,215,40)" fg:x="167" fg:w="1"/><text x="40.6858%" y="143.50"></text></g><g><title>posix_memalign (1 samples, 0.24%)</title><rect x="40.4358%" y="117" width="0.2421%" height="15" fill="rgb(211,81,21)" fg:x="167" fg:w="1"/><text x="40.6858%" y="127.50"></text></g><g><title>cfree (1 samples, 0.24%)</title><rect x="40.6780%" y="245" width="0.2421%" height="15" fill="rgb(208,190,38)" fg:x="168" fg:w="1"/><text x="40.9280%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (5 samples, 1.21%)</title><rect x="49.1525%" y="229" width="1.2107%" height="15" fill="rgb(235,213,38)" fg:x="203" fg:w="5"/><text x="49.4025%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 1.21%)</title><rect x="49.1525%" y="213" width="1.2107%" height="15" fill="rgb(237,122,38)" fg:x="203" fg:w="5"/><text x="49.4025%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.24%)</title><rect x="50.1211%" y="197" width="0.2421%" height="15" fill="rgb(244,218,35)" fg:x="207" fg:w="1"/><text x="50.3711%" y="207.50"></text></g><g><title>cfree (24 samples, 5.81%)</title><rect x="50.3632%" y="229" width="5.8111%" height="15" fill="rgb(240,68,47)" fg:x="208" fg:w="24"/><text x="50.6132%" y="239.50">cfree</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (19 samples, 4.60%)</title><rect x="56.1743%" y="229" width="4.6005%" height="15" fill="rgb(210,16,53)" fg:x="232" fg:w="19"/><text x="56.4243%" y="239.50">core:..</text></g><g><title>core::num::dec2flt::parse::parse_number (6 samples, 1.45%)</title><rect x="59.3220%" y="213" width="1.4528%" height="15" fill="rgb(235,124,12)" fg:x="245" fg:w="6"/><text x="59.5720%" y="223.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (2 samples, 0.48%)</title><rect x="61.0169%" y="213" width="0.4843%" height="15" fill="rgb(224,169,11)" fg:x="252" fg:w="2"/><text x="61.2669%" y="223.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (4 samples, 0.97%)</title><rect x="60.7748%" y="229" width="0.9685%" height="15" fill="rgb(250,166,2)" fg:x="251" fg:w="4"/><text x="61.0248%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.24%)</title><rect x="61.5012%" y="213" width="0.2421%" height="15" fill="rgb(242,216,29)" fg:x="254" fg:w="1"/><text x="61.7512%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;anyhow::error::ErrorImpl&lt;anyhow::wrapper::MessageError&lt;&amp;str&gt;&gt;&gt; (2 samples, 0.48%)</title><rect x="62.9540%" y="213" width="0.4843%" height="15" fill="rgb(230,116,27)" fg:x="260" fg:w="2"/><text x="63.2040%" y="223.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (7 samples, 1.69%)</title><rect x="63.4383%" y="213" width="1.6949%" height="15" fill="rgb(228,99,48)" fg:x="262" fg:w="7"/><text x="63.6883%" y="223.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (113 samples, 27.36%)</title><rect x="40.9201%" y="245" width="27.3608%" height="15" fill="rgb(253,11,6)" fg:x="169" fg:w="113"/><text x="41.1701%" y="255.50">nemscraper::process::convert::convert_to_fin..</text></g><g><title>nemscraper::process::utils::clean_str (27 samples, 6.54%)</title><rect x="61.7433%" y="229" width="6.5375%" height="15" fill="rgb(247,143,39)" fg:x="255" fg:w="27"/><text x="61.9933%" y="239.50">nemscrape..</text></g><g><title>malloc (13 samples, 3.15%)</title><rect x="65.1332%" y="213" width="3.1477%" height="15" fill="rgb(236,97,10)" fg:x="269" fg:w="13"/><text x="65.3832%" y="223.50">mal..</text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (2 samples, 0.48%)</title><rect x="68.5230%" y="165" width="0.4843%" height="15" fill="rgb(233,208,19)" fg:x="283" fg:w="2"/><text x="68.7730%" y="175.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.24%)</title><rect x="68.7651%" y="149" width="0.2421%" height="15" fill="rgb(216,164,2)" fg:x="284" fg:w="1"/><text x="69.0151%" y="159.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.24%)</title><rect x="68.7651%" y="133" width="0.2421%" height="15" fill="rgb(220,129,5)" fg:x="284" fg:w="1"/><text x="69.0151%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (4 samples, 0.97%)</title><rect x="68.2809%" y="197" width="0.9685%" height="15" fill="rgb(242,17,10)" fg:x="282" fg:w="4"/><text x="68.5309%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (4 samples, 0.97%)</title><rect x="68.2809%" y="181" width="0.9685%" height="15" fill="rgb(242,107,0)" fg:x="282" fg:w="4"/><text x="68.5309%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.24%)</title><rect x="69.0073%" y="165" width="0.2421%" height="15" fill="rgb(251,28,31)" fg:x="285" fg:w="1"/><text x="69.2573%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.24%)</title><rect x="69.0073%" y="149" width="0.2421%" height="15" fill="rgb(233,223,10)" fg:x="285" fg:w="1"/><text x="69.2573%" y="159.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.24%)</title><rect x="69.0073%" y="133" width="0.2421%" height="15" fill="rgb(215,21,27)" fg:x="285" fg:w="1"/><text x="69.2573%" y="143.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.24%)</title><rect x="69.0073%" y="117" width="0.2421%" height="15" fill="rgb(232,23,21)" fg:x="285" fg:w="1"/><text x="69.2573%" y="127.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (14 samples, 3.39%)</title><rect x="72.3971%" y="181" width="3.3898%" height="15" fill="rgb(244,5,23)" fg:x="299" fg:w="14"/><text x="72.6471%" y="191.50">&lt;pa..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (10 samples, 2.42%)</title><rect x="73.3656%" y="165" width="2.4213%" height="15" fill="rgb(226,81,46)" fg:x="303" fg:w="10"/><text x="73.6156%" y="175.50">pa..</text></g><g><title>malloc (1 samples, 0.24%)</title><rect x="77.4818%" y="165" width="0.2421%" height="15" fill="rgb(247,70,30)" fg:x="320" fg:w="1"/><text x="77.7318%" y="175.50"></text></g><g><title>parquet::column::writer::compare_greater (11 samples, 2.66%)</title><rect x="80.1453%" y="149" width="2.6634%" height="15" fill="rgb(212,68,19)" fg:x="331" fg:w="11"/><text x="80.3953%" y="159.50">pa..</text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (49 samples, 11.86%)</title><rect x="75.7869%" y="181" width="11.8644%" height="15" fill="rgb(240,187,13)" fg:x="313" fg:w="49"/><text x="76.0369%" y="191.50">&lt;parquet::column::..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (41 samples, 9.93%)</title><rect x="77.7240%" y="165" width="9.9274%" height="15" fill="rgb(223,113,26)" fg:x="321" fg:w="41"/><text x="77.9740%" y="175.50">parquet::colum..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (20 samples, 4.84%)</title><rect x="82.8087%" y="149" width="4.8426%" height="15" fill="rgb(206,192,2)" fg:x="342" fg:w="20"/><text x="83.0587%" y="159.50">parque..</text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.24%)</title><rect x="87.6513%" y="165" width="0.2421%" height="15" fill="rgb(241,108,4)" fg:x="362" fg:w="1"/><text x="87.9013%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (9 samples, 2.18%)</title><rect x="87.8935%" y="165" width="2.1792%" height="15" fill="rgb(247,173,49)" fg:x="363" fg:w="9"/><text x="88.1435%" y="175.50">&lt;..</text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (9 samples, 2.18%)</title><rect x="87.8935%" y="149" width="2.1792%" height="15" fill="rgb(224,114,35)" fg:x="363" fg:w="9"/><text x="88.1435%" y="159.50">p..</text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.97%)</title><rect x="89.1041%" y="133" width="0.9685%" height="15" fill="rgb(245,159,27)" fg:x="368" fg:w="4"/><text x="89.3541%" y="143.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.24%)</title><rect x="90.0726%" y="165" width="0.2421%" height="15" fill="rgb(245,172,44)" fg:x="372" fg:w="1"/><text x="90.3226%" y="175.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.24%)</title><rect x="90.0726%" y="149" width="0.2421%" height="15" fill="rgb(236,23,11)" fg:x="372" fg:w="1"/><text x="90.3226%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (95 samples, 23.00%)</title><rect x="68.2809%" y="213" width="23.0024%" height="15" fill="rgb(205,117,38)" fg:x="282" fg:w="95"/><text x="68.5309%" y="223.50">parquet::arrow::arrow_writer::ArrowC..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (91 samples, 22.03%)</title><rect x="69.2494%" y="197" width="22.0339%" height="15" fill="rgb(237,72,25)" fg:x="286" fg:w="91"/><text x="69.4994%" y="207.50">parquet::column::writer::GenericCol..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (15 samples, 3.63%)</title><rect x="87.6513%" y="181" width="3.6320%" height="15" fill="rgb(244,70,9)" fg:x="362" fg:w="15"/><text x="87.9013%" y="191.50">parq..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (4 samples, 0.97%)</title><rect x="90.3148%" y="165" width="0.9685%" height="15" fill="rgb(217,125,39)" fg:x="373" fg:w="4"/><text x="90.5648%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (99 samples, 23.97%)</title><rect x="68.2809%" y="245" width="23.9709%" height="15" fill="rgb(235,36,10)" fg:x="282" fg:w="99"/><text x="68.5309%" y="255.50">parquet::arrow::arrow_writer::ArrowWri..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (99 samples, 23.97%)</title><rect x="68.2809%" y="229" width="23.9709%" height="15" fill="rgb(251,123,47)" fg:x="282" fg:w="99"/><text x="68.5309%" y="239.50">parquet::arrow::arrow_writer::ArrowRow..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (4 samples, 0.97%)</title><rect x="91.2833%" y="213" width="0.9685%" height="15" fill="rgb(221,13,13)" fg:x="377" fg:w="4"/><text x="91.5333%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (4 samples, 0.97%)</title><rect x="91.2833%" y="197" width="0.9685%" height="15" fill="rgb(238,131,9)" fg:x="377" fg:w="4"/><text x="91.5333%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (355 samples, 85.96%)</title><rect x="6.5375%" y="261" width="85.9564%" height="15" fill="rgb(211,50,8)" fg:x="27" fg:w="355"/><text x="6.7875%" y="271.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.24%)</title><rect x="92.2518%" y="245" width="0.2421%" height="15" fill="rgb(245,182,24)" fg:x="381" fg:w="1"/><text x="92.5018%" y="255.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.24%)</title><rect x="92.2518%" y="229" width="0.2421%" height="15" fill="rgb(242,14,37)" fg:x="381" fg:w="1"/><text x="92.5018%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.24%)</title><rect x="92.2518%" y="213" width="0.2421%" height="15" fill="rgb(246,228,12)" fg:x="381" fg:w="1"/><text x="92.5018%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.24%)</title><rect x="92.2518%" y="197" width="0.2421%" height="15" fill="rgb(213,55,15)" fg:x="381" fg:w="1"/><text x="92.5018%" y="207.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.24%)</title><rect x="92.2518%" y="181" width="0.2421%" height="15" fill="rgb(209,9,3)" fg:x="381" fg:w="1"/><text x="92.5018%" y="191.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.24%)</title><rect x="92.2518%" y="165" width="0.2421%" height="15" fill="rgb(230,59,30)" fg:x="381" fg:w="1"/><text x="92.5018%" y="175.50"></text></g><g><title>write (1 samples, 0.24%)</title><rect x="92.2518%" y="149" width="0.2421%" height="15" fill="rgb(209,121,21)" fg:x="381" fg:w="1"/><text x="92.5018%" y="159.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.24%)</title><rect x="93.4625%" y="245" width="0.2421%" height="15" fill="rgb(220,109,13)" fg:x="386" fg:w="1"/><text x="93.7125%" y="255.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (385 samples, 93.22%)</title><rect x="0.7264%" y="309" width="93.2203%" height="15" fill="rgb(232,18,1)" fg:x="3" fg:w="385"/><text x="0.9764%" y="319.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (381 samples, 92.25%)</title><rect x="1.6949%" y="293" width="92.2518%" height="15" fill="rgb(215,41,42)" fg:x="7" fg:w="381"/><text x="1.9449%" y="303.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (381 samples, 92.25%)</title><rect x="1.6949%" y="277" width="92.2518%" height="15" fill="rgb(224,123,36)" fg:x="7" fg:w="381"/><text x="1.9449%" y="287.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (6 samples, 1.45%)</title><rect x="92.4939%" y="261" width="1.4528%" height="15" fill="rgb(240,125,3)" fg:x="382" fg:w="6"/><text x="92.7439%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.24%)</title><rect x="93.7046%" y="245" width="0.2421%" height="15" fill="rgb(205,98,50)" fg:x="387" fg:w="1"/><text x="93.9546%" y="255.50"></text></g><g><title>crc32fast::Hasher::update (6 samples, 1.45%)</title><rect x="94.6731%" y="277" width="1.4528%" height="15" fill="rgb(205,185,37)" fg:x="391" fg:w="6"/><text x="94.9231%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (6 samples, 1.45%)</title><rect x="94.6731%" y="261" width="1.4528%" height="15" fill="rgb(238,207,15)" fg:x="391" fg:w="6"/><text x="94.9231%" y="271.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (5 samples, 1.21%)</title><rect x="94.9153%" y="245" width="1.2107%" height="15" fill="rgb(213,199,42)" fg:x="392" fg:w="5"/><text x="95.1653%" y="255.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.24%)</title><rect x="95.8838%" y="229" width="0.2421%" height="15" fill="rgb(235,201,11)" fg:x="396" fg:w="1"/><text x="96.1338%" y="239.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (6 samples, 1.45%)</title><rect x="96.1259%" y="213" width="1.4528%" height="15" fill="rgb(207,46,11)" fg:x="397" fg:w="6"/><text x="96.3759%" y="223.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (13 samples, 3.15%)</title><rect x="94.6731%" y="293" width="3.1477%" height="15" fill="rgb(241,35,35)" fg:x="391" fg:w="13"/><text x="94.9231%" y="303.50">&lt;zi..</text></g><g><title>flate2::zio::read (7 samples, 1.69%)</title><rect x="96.1259%" y="277" width="1.6949%" height="15" fill="rgb(243,32,47)" fg:x="397" fg:w="7"/><text x="96.3759%" y="287.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (7 samples, 1.69%)</title><rect x="96.1259%" y="261" width="1.6949%" height="15" fill="rgb(247,202,23)" fg:x="397" fg:w="7"/><text x="96.3759%" y="271.50"></text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (7 samples, 1.69%)</title><rect x="96.1259%" y="245" width="1.6949%" height="15" fill="rgb(219,102,11)" fg:x="397" fg:w="7"/><text x="96.3759%" y="255.50"></text></g><g><title>zlib_rs::inflate::inflate (7 samples, 1.69%)</title><rect x="96.1259%" y="229" width="1.6949%" height="15" fill="rgb(243,110,44)" fg:x="397" fg:w="7"/><text x="96.3759%" y="239.50"></text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.24%)</title><rect x="97.5787%" y="213" width="0.2421%" height="15" fill="rgb(222,74,54)" fg:x="403" fg:w="1"/><text x="97.8287%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.48%)</title><rect x="97.8208%" y="293" width="0.4843%" height="15" fill="rgb(216,99,12)" fg:x="404" fg:w="2"/><text x="98.0708%" y="303.50"></text></g><g><title>bench_zip_to_pa (409 samples, 99.03%)</title><rect x="0.0000%" y="501" width="99.0315%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="409"/><text x="0.2500%" y="511.50">bench_zip_to_pa</text></g><g><title>_start (409 samples, 99.03%)</title><rect x="0.0000%" y="485" width="99.0315%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="409"/><text x="0.2500%" y="495.50">_start</text></g><g><title>__libc_start_main (409 samples, 99.03%)</title><rect x="0.0000%" y="469" width="99.0315%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="409"/><text x="0.2500%" y="479.50">__libc_start_main</text></g><g><title>main (409 samples, 99.03%)</title><rect x="0.0000%" y="453" width="99.0315%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="409"/><text x="0.2500%" y="463.50">main</text></g><g><title>std::rt::lang_start_internal (409 samples, 99.03%)</title><rect x="0.0000%" y="437" width="99.0315%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="409"/><text x="0.2500%" y="447.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (409 samples, 99.03%)</title><rect x="0.0000%" y="421" width="99.0315%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="409"/><text x="0.2500%" y="431.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (409 samples, 99.03%)</title><rect x="0.0000%" y="405" width="99.0315%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="409"/><text x="0.2500%" y="415.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (409 samples, 99.03%)</title><rect x="0.0000%" y="389" width="99.0315%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="409"/><text x="0.2500%" y="399.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (409 samples, 99.03%)</title><rect x="0.0000%" y="373" width="99.0315%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="409"/><text x="0.2500%" y="383.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (409 samples, 99.03%)</title><rect x="0.0000%" y="357" width="99.0315%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="409"/><text x="0.2500%" y="367.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (409 samples, 99.03%)</title><rect x="0.0000%" y="341" width="99.0315%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="409"/><text x="0.2500%" y="351.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (406 samples, 98.31%)</title><rect x="0.7264%" y="325" width="98.3051%" height="15" fill="rgb(249,174,33)" fg:x="3" fg:w="406"/><text x="0.9764%" y="335.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (21 samples, 5.08%)</title><rect x="93.9467%" y="309" width="5.0847%" height="15" fill="rgb(233,201,37)" fg:x="388" fg:w="21"/><text x="94.1967%" y="319.50">std::i..</text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.73%)</title><rect x="98.3051%" y="293" width="0.7264%" height="15" fill="rgb(221,78,26)" fg:x="406" fg:w="3"/><text x="98.5551%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.24%)</title><rect x="99.0315%" y="293" width="0.2421%" height="15" fill="rgb(250,127,30)" fg:x="409" fg:w="1"/><text x="99.2815%" y="303.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (1 samples, 0.24%)</title><rect x="99.2736%" y="293" width="0.2421%" height="15" fill="rgb(230,49,44)" fg:x="410" fg:w="1"/><text x="99.5236%" y="303.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.24%)</title><rect x="99.2736%" y="277" width="0.2421%" height="15" fill="rgb(229,67,23)" fg:x="410" fg:w="1"/><text x="99.5236%" y="287.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.24%)</title><rect x="99.2736%" y="261" width="0.2421%" height="15" fill="rgb(249,83,47)" fg:x="410" fg:w="1"/><text x="99.5236%" y="271.50"></text></g><g><title>write (1 samples, 0.24%)</title><rect x="99.2736%" y="245" width="0.2421%" height="15" fill="rgb(215,43,3)" fg:x="410" fg:w="1"/><text x="99.5236%" y="255.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (1 samples, 0.24%)</title><rect x="99.5157%" y="213" width="0.2421%" height="15" fill="rgb(238,154,13)" fg:x="411" fg:w="1"/><text x="99.7657%" y="223.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (1 samples, 0.24%)</title><rect x="99.5157%" y="197" width="0.2421%" height="15" fill="rgb(219,56,2)" fg:x="411" fg:w="1"/><text x="99.7657%" y="207.50"></text></g><g><title>tokio::runtime::park::wake (1 samples, 0.24%)</title><rect x="99.5157%" y="181" width="0.2421%" height="15" fill="rgb(233,0,4)" fg:x="411" fg:w="1"/><text x="99.7657%" y="191.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.24%)</title><rect x="99.5157%" y="165" width="0.2421%" height="15" fill="rgb(235,30,7)" fg:x="411" fg:w="1"/><text x="99.7657%" y="175.50"></text></g><g><title>syscall (1 samples, 0.24%)</title><rect x="99.5157%" y="149" width="0.2421%" height="15" fill="rgb(250,79,13)" fg:x="411" fg:w="1"/><text x="99.7657%" y="159.50"></text></g><g><title>all (413 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="413"/><text x="0.2500%" y="527.50"></text></g><g><title>tokio-runtime-w (4 samples, 0.97%)</title><rect x="99.0315%" y="501" width="0.9685%" height="15" fill="rgb(228,22,38)" fg:x="409" fg:w="4"/><text x="99.2815%" y="511.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 0.97%)</title><rect x="99.0315%" y="485" width="0.9685%" height="15" fill="rgb(235,168,5)" fg:x="409" fg:w="4"/><text x="99.2815%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.97%)</title><rect x="99.0315%" y="469" width="0.9685%" height="15" fill="rgb(221,155,16)" fg:x="409" fg:w="4"/><text x="99.2815%" y="479.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (4 samples, 0.97%)</title><rect x="99.0315%" y="453" width="0.9685%" height="15" fill="rgb(215,215,53)" fg:x="409" fg:w="4"/><text x="99.2815%" y="463.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (4 samples, 0.97%)</title><rect x="99.0315%" y="437" width="0.9685%" height="15" fill="rgb(223,4,10)" fg:x="409" fg:w="4"/><text x="99.2815%" y="447.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.97%)</title><rect x="99.0315%" y="421" width="0.9685%" height="15" fill="rgb(234,103,6)" fg:x="409" fg:w="4"/><text x="99.2815%" y="431.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.97%)</title><rect x="99.0315%" y="405" width="0.9685%" height="15" fill="rgb(227,97,0)" fg:x="409" fg:w="4"/><text x="99.2815%" y="415.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.97%)</title><rect x="99.0315%" y="389" width="0.9685%" height="15" fill="rgb(234,150,53)" fg:x="409" fg:w="4"/><text x="99.2815%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (4 samples, 0.97%)</title><rect x="99.0315%" y="373" width="0.9685%" height="15" fill="rgb(228,201,54)" fg:x="409" fg:w="4"/><text x="99.2815%" y="383.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (4 samples, 0.97%)</title><rect x="99.0315%" y="357" width="0.9685%" height="15" fill="rgb(222,22,37)" fg:x="409" fg:w="4"/><text x="99.2815%" y="367.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (4 samples, 0.97%)</title><rect x="99.0315%" y="341" width="0.9685%" height="15" fill="rgb(237,53,32)" fg:x="409" fg:w="4"/><text x="99.2815%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (4 samples, 0.97%)</title><rect x="99.0315%" y="325" width="0.9685%" height="15" fill="rgb(233,25,53)" fg:x="409" fg:w="4"/><text x="99.2815%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.97%)</title><rect x="99.0315%" y="309" width="0.9685%" height="15" fill="rgb(210,40,34)" fg:x="409" fg:w="4"/><text x="99.2815%" y="319.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.48%)</title><rect x="99.5157%" y="293" width="0.4843%" height="15" fill="rgb(241,220,44)" fg:x="411" fg:w="2"/><text x="99.7657%" y="303.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.48%)</title><rect x="99.5157%" y="277" width="0.4843%" height="15" fill="rgb(235,28,35)" fg:x="411" fg:w="2"/><text x="99.7657%" y="287.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.48%)</title><rect x="99.5157%" y="261" width="0.4843%" height="15" fill="rgb(210,56,17)" fg:x="411" fg:w="2"/><text x="99.7657%" y="271.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.48%)</title><rect x="99.5157%" y="245" width="0.4843%" height="15" fill="rgb(224,130,29)" fg:x="411" fg:w="2"/><text x="99.7657%" y="255.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (2 samples, 0.48%)</title><rect x="99.5157%" y="229" width="0.4843%" height="15" fill="rgb(235,212,8)" fg:x="411" fg:w="2"/><text x="99.7657%" y="239.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (1 samples, 0.24%)</title><rect x="99.7579%" y="213" width="0.2421%" height="15" fill="rgb(223,33,50)" fg:x="412" fg:w="1"/><text x="100.0079%" y="223.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (1 samples, 0.24%)</title><rect x="99.7579%" y="197" width="0.2421%" height="15" fill="rgb(219,149,13)" fg:x="412" fg:w="1"/><text x="100.0079%" y="207.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (1 samples, 0.24%)</title><rect x="99.7579%" y="181" width="0.2421%" height="15" fill="rgb(250,156,29)" fg:x="412" fg:w="1"/><text x="100.0079%" y="191.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.24%)</title><rect x="99.7579%" y="165" width="0.2421%" height="15" fill="rgb(216,193,19)" fg:x="412" fg:w="1"/><text x="100.0079%" y="175.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.24%)</title><rect x="99.7579%" y="149" width="0.2421%" height="15" fill="rgb(216,135,14)" fg:x="412" fg:w="1"/><text x="100.0079%" y="159.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.24%)</title><rect x="99.7579%" y="133" width="0.2421%" height="15" fill="rgb(241,47,5)" fg:x="412" fg:w="1"/><text x="100.0079%" y="143.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (1 samples, 0.24%)</title><rect x="99.7579%" y="117" width="0.2421%" height="15" fill="rgb(233,42,35)" fg:x="412" fg:w="1"/><text x="100.0079%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.24%)</title><rect x="99.7579%" y="101" width="0.2421%" height="15" fill="rgb(231,13,6)" fg:x="412" fg:w="1"/><text x="100.0079%" y="111.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (1 samples, 0.24%)</title><rect x="99.7579%" y="85" width="0.2421%" height="15" fill="rgb(207,181,40)" fg:x="412" fg:w="1"/><text x="100.0079%" y="95.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.24%)</title><rect x="99.7579%" y="69" width="0.2421%" height="15" fill="rgb(254,173,49)" fg:x="412" fg:w="1"/><text x="100.0079%" y="79.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.24%)</title><rect x="99.7579%" y="53" width="0.2421%" height="15" fill="rgb(221,1,38)" fg:x="412" fg:w="1"/><text x="100.0079%" y="63.50"></text></g></svg></svg>