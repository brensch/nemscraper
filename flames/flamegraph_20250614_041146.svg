<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="446"><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.22%)</title><rect x="0.4484%" y="341" width="0.2242%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="1"/><text x="0.6984%" y="351.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1 samples, 0.22%)</title><rect x="0.4484%" y="325" width="0.2242%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.6984%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 0.22%)</title><rect x="0.4484%" y="309" width="0.2242%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.6984%" y="319.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 0.22%)</title><rect x="0.4484%" y="293" width="0.2242%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.6984%" y="303.50"></text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 0.22%)</title><rect x="0.4484%" y="277" width="0.2242%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.6984%" y="287.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.22%)</title><rect x="0.4484%" y="261" width="0.2242%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.6984%" y="271.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1 samples, 0.22%)</title><rect x="0.4484%" y="245" width="0.2242%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.6984%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.22%)</title><rect x="0.4484%" y="229" width="0.2242%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="1"/><text x="0.6984%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.22%)</title><rect x="0.4484%" y="213" width="0.2242%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="1"/><text x="0.6984%" y="223.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.22%)</title><rect x="0.4484%" y="197" width="0.2242%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.6984%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.22%)</title><rect x="0.4484%" y="181" width="0.2242%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.6984%" y="191.50"></text></g><g><title>syscall (1 samples, 0.22%)</title><rect x="0.4484%" y="165" width="0.2242%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.6984%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (4 samples, 0.90%)</title><rect x="2.0179%" y="277" width="0.8969%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="4"/><text x="2.2679%" y="287.50"></text></g><g><title>malloc (4 samples, 0.90%)</title><rect x="2.0179%" y="261" width="0.8969%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="4"/><text x="2.2679%" y="271.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.22%)</title><rect x="2.9148%" y="245" width="0.2242%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="1"/><text x="3.1648%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.22%)</title><rect x="2.9148%" y="229" width="0.2242%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="3.1648%" y="239.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.22%)</title><rect x="2.9148%" y="213" width="0.2242%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="1"/><text x="3.1648%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.22%)</title><rect x="2.9148%" y="197" width="0.2242%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="1"/><text x="3.1648%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.22%)</title><rect x="2.9148%" y="181" width="0.2242%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="1"/><text x="3.1648%" y="191.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.22%)</title><rect x="2.9148%" y="165" width="0.2242%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="1"/><text x="3.1648%" y="175.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (2 samples, 0.45%)</title><rect x="3.1390%" y="245" width="0.4484%" height="15" fill="rgb(249,33,26)" fg:x="14" fg:w="2"/><text x="3.3890%" y="255.50"></text></g><g><title>nemscraper::process::utils::clean_str (2 samples, 0.45%)</title><rect x="3.1390%" y="229" width="0.4484%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="2"/><text x="3.3890%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.22%)</title><rect x="3.3632%" y="213" width="0.2242%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="1"/><text x="3.6132%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (4 samples, 0.90%)</title><rect x="2.9148%" y="261" width="0.8969%" height="15" fill="rgb(247,18,42)" fg:x="13" fg:w="4"/><text x="3.1648%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.22%)</title><rect x="3.5874%" y="245" width="0.2242%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="3.8374%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.22%)</title><rect x="3.5874%" y="229" width="0.2242%" height="15" fill="rgb(249,31,29)" fg:x="16" fg:w="1"/><text x="3.8374%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.22%)</title><rect x="3.5874%" y="213" width="0.2242%" height="15" fill="rgb(225,111,53)" fg:x="16" fg:w="1"/><text x="3.8374%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.22%)</title><rect x="3.5874%" y="197" width="0.2242%" height="15" fill="rgb(238,160,17)" fg:x="16" fg:w="1"/><text x="3.8374%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.22%)</title><rect x="3.5874%" y="181" width="0.2242%" height="15" fill="rgb(214,148,48)" fg:x="16" fg:w="1"/><text x="3.8374%" y="191.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.22%)</title><rect x="3.5874%" y="165" width="0.2242%" height="15" fill="rgb(232,36,49)" fg:x="16" fg:w="1"/><text x="3.8374%" y="175.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.22%)</title><rect x="3.5874%" y="149" width="0.2242%" height="15" fill="rgb(209,103,24)" fg:x="16" fg:w="1"/><text x="3.8374%" y="159.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.22%)</title><rect x="3.8117%" y="133" width="0.2242%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="1"/><text x="4.0617%" y="143.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.22%)</title><rect x="3.8117%" y="117" width="0.2242%" height="15" fill="rgb(213,181,19)" fg:x="17" fg:w="1"/><text x="4.0617%" y="127.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.22%)</title><rect x="3.8117%" y="101" width="0.2242%" height="15" fill="rgb(254,191,54)" fg:x="17" fg:w="1"/><text x="4.0617%" y="111.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.45%)</title><rect x="3.8117%" y="149" width="0.4484%" height="15" fill="rgb(241,83,37)" fg:x="17" fg:w="2"/><text x="4.0617%" y="159.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.22%)</title><rect x="4.0359%" y="133" width="0.2242%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="1"/><text x="4.2859%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (12 samples, 2.69%)</title><rect x="4.2601%" y="117" width="2.6906%" height="15" fill="rgb(226,3,54)" fg:x="19" fg:w="12"/><text x="4.5101%" y="127.50">br..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (11 samples, 2.47%)</title><rect x="4.4843%" y="101" width="2.4664%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="11"/><text x="4.7343%" y="111.50">&lt;b..</text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.22%)</title><rect x="6.9507%" y="101" width="0.2242%" height="15" fill="rgb(238,167,29)" fg:x="31" fg:w="1"/><text x="7.2007%" y="111.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.22%)</title><rect x="6.9507%" y="85" width="0.2242%" height="15" fill="rgb(232,182,51)" fg:x="31" fg:w="1"/><text x="7.2007%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.22%)</title><rect x="7.1749%" y="101" width="0.2242%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="1"/><text x="7.4249%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.22%)</title><rect x="7.1749%" y="85" width="0.2242%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="1"/><text x="7.4249%" y="95.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.22%)</title><rect x="7.3991%" y="101" width="0.2242%" height="15" fill="rgb(235,93,37)" fg:x="33" fg:w="1"/><text x="7.6491%" y="111.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (18 samples, 4.04%)</title><rect x="3.8117%" y="165" width="4.0359%" height="15" fill="rgb(213,116,39)" fg:x="17" fg:w="18"/><text x="4.0617%" y="175.50">parq..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (16 samples, 3.59%)</title><rect x="4.2601%" y="149" width="3.5874%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="16"/><text x="4.5101%" y="159.50">parq..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (16 samples, 3.59%)</title><rect x="4.2601%" y="133" width="3.5874%" height="15" fill="rgb(206,96,30)" fg:x="19" fg:w="16"/><text x="4.5101%" y="143.50">&lt;par..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (4 samples, 0.90%)</title><rect x="6.9507%" y="117" width="0.8969%" height="15" fill="rgb(218,138,4)" fg:x="31" fg:w="4"/><text x="7.2007%" y="127.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.22%)</title><rect x="7.6233%" y="101" width="0.2242%" height="15" fill="rgb(250,191,14)" fg:x="34" fg:w="1"/><text x="7.8733%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.22%)</title><rect x="7.6233%" y="85" width="0.2242%" height="15" fill="rgb(239,60,40)" fg:x="34" fg:w="1"/><text x="7.8733%" y="95.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.22%)</title><rect x="7.8475%" y="149" width="0.2242%" height="15" fill="rgb(206,27,48)" fg:x="35" fg:w="1"/><text x="8.0975%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.22%)</title><rect x="7.8475%" y="133" width="0.2242%" height="15" fill="rgb(225,35,8)" fg:x="35" fg:w="1"/><text x="8.0975%" y="143.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.22%)</title><rect x="7.8475%" y="117" width="0.2242%" height="15" fill="rgb(250,213,24)" fg:x="35" fg:w="1"/><text x="8.0975%" y="127.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.22%)</title><rect x="7.8475%" y="101" width="0.2242%" height="15" fill="rgb(247,123,22)" fg:x="35" fg:w="1"/><text x="8.0975%" y="111.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (24 samples, 5.38%)</title><rect x="2.9148%" y="277" width="5.3812%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="24"/><text x="3.1648%" y="287.50">nemscra..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (20 samples, 4.48%)</title><rect x="3.8117%" y="261" width="4.4843%" height="15" fill="rgb(231,145,46)" fg:x="17" fg:w="20"/><text x="4.0617%" y="271.50">parqu..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (20 samples, 4.48%)</title><rect x="3.8117%" y="245" width="4.4843%" height="15" fill="rgb(251,118,11)" fg:x="17" fg:w="20"/><text x="4.0617%" y="255.50">parqu..</text></g><g><title>core::iter::adapters::try_process (20 samples, 4.48%)</title><rect x="3.8117%" y="229" width="4.4843%" height="15" fill="rgb(217,147,25)" fg:x="17" fg:w="20"/><text x="4.0617%" y="239.50">core:..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (20 samples, 4.48%)</title><rect x="3.8117%" y="213" width="4.4843%" height="15" fill="rgb(247,81,37)" fg:x="17" fg:w="20"/><text x="4.0617%" y="223.50">alloc..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 4.48%)</title><rect x="3.8117%" y="197" width="4.4843%" height="15" fill="rgb(209,12,38)" fg:x="17" fg:w="20"/><text x="4.0617%" y="207.50">&lt;allo..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (20 samples, 4.48%)</title><rect x="3.8117%" y="181" width="4.4843%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="20"/><text x="4.0617%" y="191.50">parqu..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (2 samples, 0.45%)</title><rect x="7.8475%" y="165" width="0.4484%" height="15" fill="rgb(248,47,43)" fg:x="35" fg:w="2"/><text x="8.0975%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.22%)</title><rect x="8.0717%" y="149" width="0.2242%" height="15" fill="rgb(221,10,30)" fg:x="36" fg:w="1"/><text x="8.3217%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.22%)</title><rect x="8.0717%" y="133" width="0.2242%" height="15" fill="rgb(210,229,1)" fg:x="36" fg:w="1"/><text x="8.3217%" y="143.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.22%)</title><rect x="8.0717%" y="117" width="0.2242%" height="15" fill="rgb(222,148,37)" fg:x="36" fg:w="1"/><text x="8.3217%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (10 samples, 2.24%)</title><rect x="13.4529%" y="213" width="2.2422%" height="15" fill="rgb(234,67,33)" fg:x="60" fg:w="10"/><text x="13.7029%" y="223.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 2.24%)</title><rect x="13.4529%" y="197" width="2.2422%" height="15" fill="rgb(247,98,35)" fg:x="60" fg:w="10"/><text x="13.7029%" y="207.50">a..</text></g><g><title>__libc_realloc (10 samples, 2.24%)</title><rect x="13.4529%" y="181" width="2.2422%" height="15" fill="rgb(247,138,52)" fg:x="60" fg:w="10"/><text x="13.7029%" y="191.50">_..</text></g><g><title>arrow_csv::reader::Decoder::decode (63 samples, 14.13%)</title><rect x="9.6413%" y="245" width="14.1256%" height="15" fill="rgb(213,79,30)" fg:x="43" fg:w="63"/><text x="9.8913%" y="255.50">arrow_csv::reader::De..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (63 samples, 14.13%)</title><rect x="9.6413%" y="229" width="14.1256%" height="15" fill="rgb(246,177,23)" fg:x="43" fg:w="63"/><text x="9.8913%" y="239.50">arrow_csv::reader::re..</text></g><g><title>csv_core::reader::Reader::read_record (36 samples, 8.07%)</title><rect x="15.6951%" y="213" width="8.0717%" height="15" fill="rgb(230,62,27)" fg:x="70" fg:w="36"/><text x="15.9451%" y="223.50">csv_core::r..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (5 samples, 1.12%)</title><rect x="23.7668%" y="229" width="1.1211%" height="15" fill="rgb(216,154,8)" fg:x="106" fg:w="5"/><text x="24.0168%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.22%)</title><rect x="24.6637%" y="213" width="0.2242%" height="15" fill="rgb(244,35,45)" fg:x="110" fg:w="1"/><text x="24.9137%" y="223.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (30 samples, 6.73%)</title><rect x="28.9238%" y="165" width="6.7265%" height="15" fill="rgb(251,115,12)" fg:x="129" fg:w="30"/><text x="29.1738%" y="175.50">arrow_arr..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.45%)</title><rect x="35.2018%" y="149" width="0.4484%" height="15" fill="rgb(240,54,50)" fg:x="157" fg:w="2"/><text x="35.4518%" y="159.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.45%)</title><rect x="35.2018%" y="133" width="0.4484%" height="15" fill="rgb(233,84,52)" fg:x="157" fg:w="2"/><text x="35.4518%" y="143.50"></text></g><g><title>cfree (1 samples, 0.22%)</title><rect x="35.4260%" y="117" width="0.2242%" height="15" fill="rgb(207,117,47)" fg:x="158" fg:w="1"/><text x="35.6760%" y="127.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.22%)</title><rect x="35.6502%" y="149" width="0.2242%" height="15" fill="rgb(249,43,39)" fg:x="159" fg:w="1"/><text x="35.9002%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.22%)</title><rect x="35.6502%" y="133" width="0.2242%" height="15" fill="rgb(209,38,44)" fg:x="159" fg:w="1"/><text x="35.9002%" y="143.50"></text></g><g><title>posix_memalign (1 samples, 0.22%)</title><rect x="35.6502%" y="117" width="0.2242%" height="15" fill="rgb(236,212,23)" fg:x="159" fg:w="1"/><text x="35.9002%" y="127.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (50 samples, 11.21%)</title><rect x="24.8879%" y="181" width="11.2108%" height="15" fill="rgb(242,79,21)" fg:x="111" fg:w="50"/><text x="25.1379%" y="191.50">&lt;arrow_array::arr..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (2 samples, 0.45%)</title><rect x="35.6502%" y="165" width="0.4484%" height="15" fill="rgb(211,96,35)" fg:x="159" fg:w="2"/><text x="35.9002%" y="175.50"></text></g><g><title>arrow_data::data::ArrayDataBuilder::add_buffer (1 samples, 0.22%)</title><rect x="35.8744%" y="149" width="0.2242%" height="15" fill="rgb(253,215,40)" fg:x="160" fg:w="1"/><text x="36.1244%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.22%)</title><rect x="35.8744%" y="133" width="0.2242%" height="15" fill="rgb(211,81,21)" fg:x="160" fg:w="1"/><text x="36.1244%" y="143.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (120 samples, 26.91%)</title><rect x="9.4170%" y="261" width="26.9058%" height="15" fill="rgb(208,190,38)" fg:x="42" fg:w="120"/><text x="9.6670%" y="271.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (56 samples, 12.56%)</title><rect x="23.7668%" y="245" width="12.5561%" height="15" fill="rgb(235,213,38)" fg:x="106" fg:w="56"/><text x="24.0168%" y="255.50">arrow_csv::reader::..</text></g><g><title>core::iter::adapters::try_process (51 samples, 11.43%)</title><rect x="24.8879%" y="229" width="11.4350%" height="15" fill="rgb(237,122,38)" fg:x="111" fg:w="51"/><text x="25.1379%" y="239.50">core::iter::adapt..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 11.43%)</title><rect x="24.8879%" y="213" width="11.4350%" height="15" fill="rgb(244,218,35)" fg:x="111" fg:w="51"/><text x="25.1379%" y="223.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (51 samples, 11.43%)</title><rect x="24.8879%" y="197" width="11.4350%" height="15" fill="rgb(240,68,47)" fg:x="111" fg:w="51"/><text x="25.1379%" y="207.50">&lt;core::iter::adap..</text></g><g><title>malloc (1 samples, 0.22%)</title><rect x="36.0987%" y="181" width="0.2242%" height="15" fill="rgb(210,16,53)" fg:x="161" fg:w="1"/><text x="36.3487%" y="191.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build (1 samples, 0.22%)</title><rect x="36.3229%" y="261" width="0.2242%" height="15" fill="rgb(235,124,12)" fg:x="162" fg:w="1"/><text x="36.5729%" y="271.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build_decoder (1 samples, 0.22%)</title><rect x="36.3229%" y="245" width="0.2242%" height="15" fill="rgb(224,169,11)" fg:x="162" fg:w="1"/><text x="36.5729%" y="255.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (1 samples, 0.22%)</title><rect x="36.3229%" y="229" width="0.2242%" height="15" fill="rgb(250,166,2)" fg:x="162" fg:w="1"/><text x="36.5729%" y="239.50"></text></g><g><title>cfree (2 samples, 0.45%)</title><rect x="36.5471%" y="261" width="0.4484%" height="15" fill="rgb(242,216,29)" fg:x="163" fg:w="2"/><text x="36.7971%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (2 samples, 0.45%)</title><rect x="36.9955%" y="261" width="0.4484%" height="15" fill="rgb(230,116,27)" fg:x="165" fg:w="2"/><text x="37.2455%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.45%)</title><rect x="36.9955%" y="245" width="0.4484%" height="15" fill="rgb(228,99,48)" fg:x="165" fg:w="2"/><text x="37.2455%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt32Type&gt;&gt; (2 samples, 0.45%)</title><rect x="36.9955%" y="229" width="0.4484%" height="15" fill="rgb(253,11,6)" fg:x="165" fg:w="2"/><text x="37.2455%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.45%)</title><rect x="36.9955%" y="213" width="0.4484%" height="15" fill="rgb(247,143,39)" fg:x="165" fg:w="2"/><text x="37.2455%" y="223.50"></text></g><g><title>cfree (2 samples, 0.45%)</title><rect x="36.9955%" y="197" width="0.4484%" height="15" fill="rgb(236,97,10)" fg:x="165" fg:w="2"/><text x="37.2455%" y="207.50"></text></g><g><title>__default_morecore (2 samples, 0.45%)</title><rect x="36.9955%" y="181" width="0.4484%" height="15" fill="rgb(233,208,19)" fg:x="165" fg:w="2"/><text x="37.2455%" y="191.50"></text></g><g><title>__sbrk (2 samples, 0.45%)</title><rect x="36.9955%" y="165" width="0.4484%" height="15" fill="rgb(216,164,2)" fg:x="165" fg:w="2"/><text x="37.2455%" y="175.50"></text></g><g><title>brk (2 samples, 0.45%)</title><rect x="36.9955%" y="149" width="0.4484%" height="15" fill="rgb(220,129,5)" fg:x="165" fg:w="2"/><text x="37.2455%" y="159.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.45%)</title><rect x="43.9462%" y="245" width="0.4484%" height="15" fill="rgb(242,17,10)" fg:x="196" fg:w="2"/><text x="44.1962%" y="255.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.45%)</title><rect x="43.9462%" y="229" width="0.4484%" height="15" fill="rgb(242,107,0)" fg:x="196" fg:w="2"/><text x="44.1962%" y="239.50"></text></g><g><title>cfree (15 samples, 3.36%)</title><rect x="44.3946%" y="245" width="3.3632%" height="15" fill="rgb(251,28,31)" fg:x="198" fg:w="15"/><text x="44.6446%" y="255.50">cfr..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (21 samples, 4.71%)</title><rect x="47.7578%" y="245" width="4.7085%" height="15" fill="rgb(233,223,10)" fg:x="213" fg:w="21"/><text x="48.0078%" y="255.50">core:..</text></g><g><title>core::num::dec2flt::parse::parse_number (7 samples, 1.57%)</title><rect x="50.8969%" y="229" width="1.5695%" height="15" fill="rgb(215,21,27)" fg:x="227" fg:w="7"/><text x="51.1469%" y="239.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (2 samples, 0.45%)</title><rect x="52.9148%" y="229" width="0.4484%" height="15" fill="rgb(232,23,21)" fg:x="236" fg:w="2"/><text x="53.1648%" y="239.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (6 samples, 1.35%)</title><rect x="52.4664%" y="245" width="1.3453%" height="15" fill="rgb(244,5,23)" fg:x="234" fg:w="6"/><text x="52.7164%" y="255.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (2 samples, 0.45%)</title><rect x="53.3632%" y="229" width="0.4484%" height="15" fill="rgb(226,81,46)" fg:x="238" fg:w="2"/><text x="53.6132%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.22%)</title><rect x="56.2780%" y="229" width="0.2242%" height="15" fill="rgb(247,70,30)" fg:x="251" fg:w="1"/><text x="56.5280%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (11 samples, 2.47%)</title><rect x="56.5022%" y="229" width="2.4664%" height="15" fill="rgb(212,68,19)" fg:x="252" fg:w="11"/><text x="56.7522%" y="239.50">co..</text></g><g><title>nemscraper::process::convert::convert_to_final_types (107 samples, 23.99%)</title><rect x="37.4439%" y="261" width="23.9910%" height="15" fill="rgb(240,187,13)" fg:x="167" fg:w="107"/><text x="37.6939%" y="271.50">nemscraper::process::convert::convert_..</text></g><g><title>nemscraper::process::utils::clean_str (34 samples, 7.62%)</title><rect x="53.8117%" y="245" width="7.6233%" height="15" fill="rgb(223,113,26)" fg:x="240" fg:w="34"/><text x="54.0617%" y="255.50">nemscraper..</text></g><g><title>malloc (11 samples, 2.47%)</title><rect x="58.9686%" y="229" width="2.4664%" height="15" fill="rgb(206,192,2)" fg:x="263" fg:w="11"/><text x="59.2186%" y="239.50">ma..</text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.22%)</title><rect x="61.6592%" y="181" width="0.2242%" height="15" fill="rgb(241,108,4)" fg:x="275" fg:w="1"/><text x="61.9092%" y="191.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.22%)</title><rect x="61.6592%" y="165" width="0.2242%" height="15" fill="rgb(247,173,49)" fg:x="275" fg:w="1"/><text x="61.9092%" y="175.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.22%)</title><rect x="61.6592%" y="149" width="0.2242%" height="15" fill="rgb(224,114,35)" fg:x="275" fg:w="1"/><text x="61.9092%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (3 samples, 0.67%)</title><rect x="61.4350%" y="213" width="0.6726%" height="15" fill="rgb(245,159,27)" fg:x="274" fg:w="3"/><text x="61.6850%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (3 samples, 0.67%)</title><rect x="61.4350%" y="197" width="0.6726%" height="15" fill="rgb(245,172,44)" fg:x="274" fg:w="3"/><text x="61.6850%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.22%)</title><rect x="61.8834%" y="181" width="0.2242%" height="15" fill="rgb(236,23,11)" fg:x="276" fg:w="1"/><text x="62.1334%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.22%)</title><rect x="61.8834%" y="165" width="0.2242%" height="15" fill="rgb(205,117,38)" fg:x="276" fg:w="1"/><text x="62.1334%" y="175.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.22%)</title><rect x="61.8834%" y="149" width="0.2242%" height="15" fill="rgb(237,72,25)" fg:x="276" fg:w="1"/><text x="62.1334%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (24 samples, 5.38%)</title><rect x="64.3498%" y="197" width="5.3812%" height="15" fill="rgb(244,70,9)" fg:x="287" fg:w="24"/><text x="64.5998%" y="207.50">&lt;parque..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (14 samples, 3.14%)</title><rect x="66.5919%" y="181" width="3.1390%" height="15" fill="rgb(217,125,39)" fg:x="297" fg:w="14"/><text x="66.8419%" y="191.50">par..</text></g><g><title>ahash::random_state::RandomState::hash_one (2 samples, 0.45%)</title><rect x="69.2825%" y="165" width="0.4484%" height="15" fill="rgb(235,36,10)" fg:x="309" fg:w="2"/><text x="69.5325%" y="175.50"></text></g><g><title>malloc (3 samples, 0.67%)</title><rect x="70.1794%" y="181" width="0.6726%" height="15" fill="rgb(251,123,47)" fg:x="313" fg:w="3"/><text x="70.4294%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.22%)</title><rect x="74.4395%" y="165" width="0.2242%" height="15" fill="rgb(221,13,13)" fg:x="332" fg:w="1"/><text x="74.6895%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.22%)</title><rect x="74.4395%" y="149" width="0.2242%" height="15" fill="rgb(238,131,9)" fg:x="332" fg:w="1"/><text x="74.6895%" y="159.50"></text></g><g><title>__libc_realloc (1 samples, 0.22%)</title><rect x="74.4395%" y="133" width="0.2242%" height="15" fill="rgb(211,50,8)" fg:x="332" fg:w="1"/><text x="74.6895%" y="143.50"></text></g><g><title>parquet::column::writer::compare_greater (9 samples, 2.02%)</title><rect x="74.6637%" y="165" width="2.0179%" height="15" fill="rgb(245,182,24)" fg:x="333" fg:w="9"/><text x="74.9137%" y="175.50">p..</text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (54 samples, 12.11%)</title><rect x="69.7309%" y="197" width="12.1076%" height="15" fill="rgb(242,14,37)" fg:x="311" fg:w="54"/><text x="69.9809%" y="207.50">&lt;parquet::column::..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (49 samples, 10.99%)</title><rect x="70.8520%" y="181" width="10.9865%" height="15" fill="rgb(246,228,12)" fg:x="316" fg:w="49"/><text x="71.1020%" y="191.50">parquet::column:..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (23 samples, 5.16%)</title><rect x="76.6816%" y="165" width="5.1570%" height="15" fill="rgb(213,55,15)" fg:x="342" fg:w="23"/><text x="76.9316%" y="175.50">parque..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.22%)</title><rect x="81.6143%" y="149" width="0.2242%" height="15" fill="rgb(209,9,3)" fg:x="364" fg:w="1"/><text x="81.8643%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.22%)</title><rect x="81.6143%" y="133" width="0.2242%" height="15" fill="rgb(230,59,30)" fg:x="364" fg:w="1"/><text x="81.8643%" y="143.50"></text></g><g><title>__libc_realloc (1 samples, 0.22%)</title><rect x="81.6143%" y="117" width="0.2242%" height="15" fill="rgb(209,121,21)" fg:x="364" fg:w="1"/><text x="81.8643%" y="127.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.22%)</title><rect x="81.8386%" y="181" width="0.2242%" height="15" fill="rgb(220,109,13)" fg:x="365" fg:w="1"/><text x="82.0886%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (6 samples, 1.35%)</title><rect x="82.0628%" y="181" width="1.3453%" height="15" fill="rgb(232,18,1)" fg:x="366" fg:w="6"/><text x="82.3128%" y="191.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (6 samples, 1.35%)</title><rect x="82.0628%" y="165" width="1.3453%" height="15" fill="rgb(215,41,42)" fg:x="366" fg:w="6"/><text x="82.3128%" y="175.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.90%)</title><rect x="82.5112%" y="149" width="0.8969%" height="15" fill="rgb(224,123,36)" fg:x="368" fg:w="4"/><text x="82.7612%" y="159.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.22%)</title><rect x="83.1839%" y="133" width="0.2242%" height="15" fill="rgb(240,125,3)" fg:x="371" fg:w="1"/><text x="83.4339%" y="143.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.22%)</title><rect x="86.3229%" y="117" width="0.2242%" height="15" fill="rgb(205,98,50)" fg:x="385" fg:w="1"/><text x="86.5729%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (15 samples, 3.36%)</title><rect x="83.4081%" y="149" width="3.3632%" height="15" fill="rgb(205,185,37)" fg:x="372" fg:w="15"/><text x="83.6581%" y="159.50">bro..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (11 samples, 2.47%)</title><rect x="84.3049%" y="133" width="2.4664%" height="15" fill="rgb(238,207,15)" fg:x="376" fg:w="11"/><text x="84.5549%" y="143.50">&lt;b..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.22%)</title><rect x="86.5471%" y="117" width="0.2242%" height="15" fill="rgb(213,199,42)" fg:x="386" fg:w="1"/><text x="86.7971%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.22%)</title><rect x="86.7713%" y="133" width="0.2242%" height="15" fill="rgb(235,201,11)" fg:x="387" fg:w="1"/><text x="87.0213%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.22%)</title><rect x="86.7713%" y="117" width="0.2242%" height="15" fill="rgb(207,46,11)" fg:x="387" fg:w="1"/><text x="87.0213%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.22%)</title><rect x="86.7713%" y="101" width="0.2242%" height="15" fill="rgb(241,35,35)" fg:x="387" fg:w="1"/><text x="87.0213%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.22%)</title><rect x="86.7713%" y="85" width="0.2242%" height="15" fill="rgb(243,32,47)" fg:x="387" fg:w="1"/><text x="87.0213%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (5 samples, 1.12%)</title><rect x="86.7713%" y="149" width="1.1211%" height="15" fill="rgb(247,202,23)" fg:x="387" fg:w="5"/><text x="87.0213%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (4 samples, 0.90%)</title><rect x="86.9955%" y="133" width="0.8969%" height="15" fill="rgb(219,102,11)" fg:x="388" fg:w="4"/><text x="87.2455%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (9 samples, 2.02%)</title><rect x="87.8924%" y="149" width="2.0179%" height="15" fill="rgb(243,110,44)" fg:x="392" fg:w="9"/><text x="88.1424%" y="159.50">b..</text></g><g><title>brotli::enc::encode::ChooseHasher (1 samples, 0.22%)</title><rect x="89.6861%" y="133" width="0.2242%" height="15" fill="rgb(222,74,54)" fg:x="400" fg:w="1"/><text x="89.9361%" y="143.50"></text></g><g><title>calloc (1 samples, 0.22%)</title><rect x="90.3587%" y="133" width="0.2242%" height="15" fill="rgb(216,99,12)" fg:x="403" fg:w="1"/><text x="90.6087%" y="143.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (4 samples, 0.90%)</title><rect x="89.9103%" y="149" width="0.8969%" height="15" fill="rgb(226,22,26)" fg:x="401" fg:w="4"/><text x="90.1603%" y="159.50"></text></g><g><title>malloc (1 samples, 0.22%)</title><rect x="90.5830%" y="133" width="0.2242%" height="15" fill="rgb(217,163,10)" fg:x="404" fg:w="1"/><text x="90.8330%" y="143.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (2 samples, 0.45%)</title><rect x="90.8072%" y="149" width="0.4484%" height="15" fill="rgb(213,25,53)" fg:x="405" fg:w="2"/><text x="91.0572%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (2 samples, 0.45%)</title><rect x="90.8072%" y="133" width="0.4484%" height="15" fill="rgb(252,105,26)" fg:x="405" fg:w="2"/><text x="91.0572%" y="143.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (36 samples, 8.07%)</title><rect x="83.4081%" y="181" width="8.0717%" height="15" fill="rgb(220,39,43)" fg:x="372" fg:w="36"/><text x="83.6581%" y="191.50">&lt;parquet::c..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (36 samples, 8.07%)</title><rect x="83.4081%" y="165" width="8.0717%" height="15" fill="rgb(229,68,48)" fg:x="372" fg:w="36"/><text x="83.6581%" y="175.50">brotli::enc..</text></g><g><title>malloc (1 samples, 0.22%)</title><rect x="91.2556%" y="149" width="0.2242%" height="15" fill="rgb(252,8,32)" fg:x="407" fg:w="1"/><text x="91.5056%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (140 samples, 31.39%)</title><rect x="61.4350%" y="229" width="31.3901%" height="15" fill="rgb(223,20,43)" fg:x="274" fg:w="140"/><text x="61.6850%" y="239.50">parquet::arrow::arrow_writer::ArrowColumnWriter::wr..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (137 samples, 30.72%)</title><rect x="62.1076%" y="213" width="30.7175%" height="15" fill="rgb(229,81,49)" fg:x="277" fg:w="137"/><text x="62.3576%" y="223.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::w..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (49 samples, 10.99%)</title><rect x="81.8386%" y="197" width="10.9865%" height="15" fill="rgb(236,28,36)" fg:x="365" fg:w="49"/><text x="82.0886%" y="207.50">parquet::column:..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (6 samples, 1.35%)</title><rect x="91.4798%" y="181" width="1.3453%" height="15" fill="rgb(249,185,26)" fg:x="408" fg:w="6"/><text x="91.7298%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::try_new (1 samples, 0.22%)</title><rect x="92.8251%" y="213" width="0.2242%" height="15" fill="rgb(249,174,33)" fg:x="414" fg:w="1"/><text x="93.0751%" y="223.50"></text></g><g><title>&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (1 samples, 0.22%)</title><rect x="92.8251%" y="197" width="0.2242%" height="15" fill="rgb(233,201,37)" fg:x="414" fg:w="1"/><text x="93.0751%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (142 samples, 31.84%)</title><rect x="61.4350%" y="261" width="31.8386%" height="15" fill="rgb(221,78,26)" fg:x="274" fg:w="142"/><text x="61.6850%" y="271.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (142 samples, 31.84%)</title><rect x="61.4350%" y="245" width="31.8386%" height="15" fill="rgb(250,127,30)" fg:x="274" fg:w="142"/><text x="61.6850%" y="255.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (2 samples, 0.45%)</title><rect x="92.8251%" y="229" width="0.4484%" height="15" fill="rgb(230,49,44)" fg:x="414" fg:w="2"/><text x="93.0751%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (1 samples, 0.22%)</title><rect x="93.0493%" y="213" width="0.2242%" height="15" fill="rgb(229,67,23)" fg:x="415" fg:w="1"/><text x="93.2993%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (3 samples, 0.67%)</title><rect x="93.2735%" y="213" width="0.6726%" height="15" fill="rgb(249,83,47)" fg:x="416" fg:w="3"/><text x="93.5235%" y="223.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (3 samples, 0.67%)</title><rect x="93.2735%" y="197" width="0.6726%" height="15" fill="rgb(215,43,3)" fg:x="416" fg:w="3"/><text x="93.5235%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.67%)</title><rect x="93.2735%" y="181" width="0.6726%" height="15" fill="rgb(238,154,13)" fg:x="416" fg:w="3"/><text x="93.5235%" y="191.50"></text></g><g><title>write (3 samples, 0.67%)</title><rect x="93.2735%" y="165" width="0.6726%" height="15" fill="rgb(219,56,2)" fg:x="416" fg:w="3"/><text x="93.5235%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (383 samples, 85.87%)</title><rect x="8.2960%" y="277" width="85.8744%" height="15" fill="rgb(233,0,4)" fg:x="37" fg:w="383"/><text x="8.5460%" y="287.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (4 samples, 0.90%)</title><rect x="93.2735%" y="261" width="0.8969%" height="15" fill="rgb(235,30,7)" fg:x="416" fg:w="4"/><text x="93.5235%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.90%)</title><rect x="93.2735%" y="245" width="0.8969%" height="15" fill="rgb(250,79,13)" fg:x="416" fg:w="4"/><text x="93.5235%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.90%)</title><rect x="93.2735%" y="229" width="0.8969%" height="15" fill="rgb(211,146,34)" fg:x="416" fg:w="4"/><text x="93.5235%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.22%)</title><rect x="93.9462%" y="213" width="0.2242%" height="15" fill="rgb(228,22,38)" fg:x="419" fg:w="1"/><text x="94.1962%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.45%)</title><rect x="94.6188%" y="261" width="0.4484%" height="15" fill="rgb(235,168,5)" fg:x="422" fg:w="2"/><text x="94.8688%" y="271.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (422 samples, 94.62%)</title><rect x="0.6726%" y="325" width="94.6188%" height="15" fill="rgb(221,155,16)" fg:x="3" fg:w="422"/><text x="0.9226%" y="335.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (417 samples, 93.50%)</title><rect x="1.7937%" y="309" width="93.4978%" height="15" fill="rgb(215,215,53)" fg:x="8" fg:w="417"/><text x="2.0437%" y="319.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (417 samples, 93.50%)</title><rect x="1.7937%" y="293" width="93.4978%" height="15" fill="rgb(223,4,10)" fg:x="8" fg:w="417"/><text x="2.0437%" y="303.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (5 samples, 1.12%)</title><rect x="94.1704%" y="277" width="1.1211%" height="15" fill="rgb(234,103,6)" fg:x="420" fg:w="5"/><text x="94.4204%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.22%)</title><rect x="95.0673%" y="261" width="0.2242%" height="15" fill="rgb(227,97,0)" fg:x="424" fg:w="1"/><text x="95.3173%" y="271.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (10 samples, 2.24%)</title><rect x="95.9641%" y="229" width="2.2422%" height="15" fill="rgb(234,150,53)" fg:x="428" fg:w="10"/><text x="96.2141%" y="239.50">z..</text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (13 samples, 2.91%)</title><rect x="95.5157%" y="309" width="2.9148%" height="15" fill="rgb(228,201,54)" fg:x="426" fg:w="13"/><text x="95.7657%" y="319.50">&lt;z..</text></g><g><title>flate2::zio::read (13 samples, 2.91%)</title><rect x="95.5157%" y="293" width="2.9148%" height="15" fill="rgb(222,22,37)" fg:x="426" fg:w="13"/><text x="95.7657%" y="303.50">fl..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (12 samples, 2.69%)</title><rect x="95.7399%" y="277" width="2.6906%" height="15" fill="rgb(237,53,32)" fg:x="427" fg:w="12"/><text x="95.9899%" y="287.50">&lt;f..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (12 samples, 2.69%)</title><rect x="95.7399%" y="261" width="2.6906%" height="15" fill="rgb(233,25,53)" fg:x="427" fg:w="12"/><text x="95.9899%" y="271.50">&lt;f..</text></g><g><title>zlib_rs::inflate::inflate (12 samples, 2.69%)</title><rect x="95.7399%" y="245" width="2.6906%" height="15" fill="rgb(210,40,34)" fg:x="427" fg:w="12"/><text x="95.9899%" y="255.50">zl..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.22%)</title><rect x="98.2063%" y="229" width="0.2242%" height="15" fill="rgb(241,220,44)" fg:x="438" fg:w="1"/><text x="98.4563%" y="239.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.45%)</title><rect x="98.4305%" y="309" width="0.4484%" height="15" fill="rgb(235,28,35)" fg:x="439" fg:w="2"/><text x="98.6805%" y="319.50"></text></g><g><title>bench_zip_to_pa (442 samples, 99.10%)</title><rect x="0.0000%" y="517" width="99.1031%" height="15" fill="rgb(210,56,17)" fg:x="0" fg:w="442"/><text x="0.2500%" y="527.50">bench_zip_to_pa</text></g><g><title>_start (442 samples, 99.10%)</title><rect x="0.0000%" y="501" width="99.1031%" height="15" fill="rgb(224,130,29)" fg:x="0" fg:w="442"/><text x="0.2500%" y="511.50">_start</text></g><g><title>__libc_start_main (442 samples, 99.10%)</title><rect x="0.0000%" y="485" width="99.1031%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="442"/><text x="0.2500%" y="495.50">__libc_start_main</text></g><g><title>main (442 samples, 99.10%)</title><rect x="0.0000%" y="469" width="99.1031%" height="15" fill="rgb(223,33,50)" fg:x="0" fg:w="442"/><text x="0.2500%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (442 samples, 99.10%)</title><rect x="0.0000%" y="453" width="99.1031%" height="15" fill="rgb(219,149,13)" fg:x="0" fg:w="442"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (442 samples, 99.10%)</title><rect x="0.0000%" y="437" width="99.1031%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="442"/><text x="0.2500%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (442 samples, 99.10%)</title><rect x="0.0000%" y="421" width="99.1031%" height="15" fill="rgb(216,193,19)" fg:x="0" fg:w="442"/><text x="0.2500%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (442 samples, 99.10%)</title><rect x="0.0000%" y="405" width="99.1031%" height="15" fill="rgb(216,135,14)" fg:x="0" fg:w="442"/><text x="0.2500%" y="415.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (442 samples, 99.10%)</title><rect x="0.0000%" y="389" width="99.1031%" height="15" fill="rgb(241,47,5)" fg:x="0" fg:w="442"/><text x="0.2500%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (442 samples, 99.10%)</title><rect x="0.0000%" y="373" width="99.1031%" height="15" fill="rgb(233,42,35)" fg:x="0" fg:w="442"/><text x="0.2500%" y="383.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (442 samples, 99.10%)</title><rect x="0.0000%" y="357" width="99.1031%" height="15" fill="rgb(231,13,6)" fg:x="0" fg:w="442"/><text x="0.2500%" y="367.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (439 samples, 98.43%)</title><rect x="0.6726%" y="341" width="98.4305%" height="15" fill="rgb(207,181,40)" fg:x="3" fg:w="439"/><text x="0.9226%" y="351.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (17 samples, 3.81%)</title><rect x="95.2915%" y="325" width="3.8117%" height="15" fill="rgb(254,173,49)" fg:x="425" fg:w="17"/><text x="95.5415%" y="335.50">std:..</text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.22%)</title><rect x="98.8789%" y="309" width="0.2242%" height="15" fill="rgb(221,1,38)" fg:x="441" fg:w="1"/><text x="99.1289%" y="319.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.22%)</title><rect x="99.1031%" y="309" width="0.2242%" height="15" fill="rgb(206,124,46)" fg:x="442" fg:w="1"/><text x="99.3531%" y="319.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.22%)</title><rect x="99.1031%" y="293" width="0.2242%" height="15" fill="rgb(249,21,11)" fg:x="442" fg:w="1"/><text x="99.3531%" y="303.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.22%)</title><rect x="99.1031%" y="277" width="0.2242%" height="15" fill="rgb(222,201,40)" fg:x="442" fg:w="1"/><text x="99.3531%" y="287.50"></text></g><g><title>write (1 samples, 0.22%)</title><rect x="99.1031%" y="261" width="0.2242%" height="15" fill="rgb(235,61,29)" fg:x="442" fg:w="1"/><text x="99.3531%" y="271.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (1 samples, 0.22%)</title><rect x="99.3274%" y="229" width="0.2242%" height="15" fill="rgb(219,207,3)" fg:x="443" fg:w="1"/><text x="99.5774%" y="239.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (1 samples, 0.22%)</title><rect x="99.3274%" y="213" width="0.2242%" height="15" fill="rgb(222,56,46)" fg:x="443" fg:w="1"/><text x="99.5774%" y="223.50"></text></g><g><title>tokio::runtime::park::wake (1 samples, 0.22%)</title><rect x="99.3274%" y="197" width="0.2242%" height="15" fill="rgb(239,76,54)" fg:x="443" fg:w="1"/><text x="99.5774%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.22%)</title><rect x="99.3274%" y="181" width="0.2242%" height="15" fill="rgb(231,124,27)" fg:x="443" fg:w="1"/><text x="99.5774%" y="191.50"></text></g><g><title>syscall (1 samples, 0.22%)</title><rect x="99.3274%" y="165" width="0.2242%" height="15" fill="rgb(249,195,6)" fg:x="443" fg:w="1"/><text x="99.5774%" y="175.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (1 samples, 0.22%)</title><rect x="99.5516%" y="181" width="0.2242%" height="15" fill="rgb(237,174,47)" fg:x="444" fg:w="1"/><text x="99.8016%" y="191.50"></text></g><g><title>bytes::bytes_mut::BytesMut::advance_unchecked (1 samples, 0.22%)</title><rect x="99.5516%" y="165" width="0.2242%" height="15" fill="rgb(206,201,31)" fg:x="444" fg:w="1"/><text x="99.8016%" y="175.50"></text></g><g><title>all (446 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(231,57,52)" fg:x="0" fg:w="446"/><text x="0.2500%" y="543.50"></text></g><g><title>tokio-runtime-w (4 samples, 0.90%)</title><rect x="99.1031%" y="517" width="0.8969%" height="15" fill="rgb(248,177,22)" fg:x="442" fg:w="4"/><text x="99.3531%" y="527.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (4 samples, 0.90%)</title><rect x="99.1031%" y="501" width="0.8969%" height="15" fill="rgb(215,211,37)" fg:x="442" fg:w="4"/><text x="99.3531%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (4 samples, 0.90%)</title><rect x="99.1031%" y="485" width="0.8969%" height="15" fill="rgb(241,128,51)" fg:x="442" fg:w="4"/><text x="99.3531%" y="495.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (4 samples, 0.90%)</title><rect x="99.1031%" y="469" width="0.8969%" height="15" fill="rgb(227,165,31)" fg:x="442" fg:w="4"/><text x="99.3531%" y="479.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (4 samples, 0.90%)</title><rect x="99.1031%" y="453" width="0.8969%" height="15" fill="rgb(228,167,24)" fg:x="442" fg:w="4"/><text x="99.3531%" y="463.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.90%)</title><rect x="99.1031%" y="437" width="0.8969%" height="15" fill="rgb(228,143,12)" fg:x="442" fg:w="4"/><text x="99.3531%" y="447.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.90%)</title><rect x="99.1031%" y="421" width="0.8969%" height="15" fill="rgb(249,149,8)" fg:x="442" fg:w="4"/><text x="99.3531%" y="431.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.90%)</title><rect x="99.1031%" y="405" width="0.8969%" height="15" fill="rgb(243,35,44)" fg:x="442" fg:w="4"/><text x="99.3531%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (4 samples, 0.90%)</title><rect x="99.1031%" y="389" width="0.8969%" height="15" fill="rgb(246,89,9)" fg:x="442" fg:w="4"/><text x="99.3531%" y="399.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (4 samples, 0.90%)</title><rect x="99.1031%" y="373" width="0.8969%" height="15" fill="rgb(233,213,13)" fg:x="442" fg:w="4"/><text x="99.3531%" y="383.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (4 samples, 0.90%)</title><rect x="99.1031%" y="357" width="0.8969%" height="15" fill="rgb(233,141,41)" fg:x="442" fg:w="4"/><text x="99.3531%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (4 samples, 0.90%)</title><rect x="99.1031%" y="341" width="0.8969%" height="15" fill="rgb(239,167,4)" fg:x="442" fg:w="4"/><text x="99.3531%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.90%)</title><rect x="99.1031%" y="325" width="0.8969%" height="15" fill="rgb(209,217,16)" fg:x="442" fg:w="4"/><text x="99.3531%" y="335.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.67%)</title><rect x="99.3274%" y="309" width="0.6726%" height="15" fill="rgb(219,88,35)" fg:x="443" fg:w="3"/><text x="99.5774%" y="319.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 0.67%)</title><rect x="99.3274%" y="293" width="0.6726%" height="15" fill="rgb(220,193,23)" fg:x="443" fg:w="3"/><text x="99.5774%" y="303.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (3 samples, 0.67%)</title><rect x="99.3274%" y="277" width="0.6726%" height="15" fill="rgb(230,90,52)" fg:x="443" fg:w="3"/><text x="99.5774%" y="287.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (3 samples, 0.67%)</title><rect x="99.3274%" y="261" width="0.6726%" height="15" fill="rgb(252,106,19)" fg:x="443" fg:w="3"/><text x="99.5774%" y="271.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (3 samples, 0.67%)</title><rect x="99.3274%" y="245" width="0.6726%" height="15" fill="rgb(206,74,20)" fg:x="443" fg:w="3"/><text x="99.5774%" y="255.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (2 samples, 0.45%)</title><rect x="99.5516%" y="229" width="0.4484%" height="15" fill="rgb(230,138,44)" fg:x="444" fg:w="2"/><text x="99.8016%" y="239.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (2 samples, 0.45%)</title><rect x="99.5516%" y="213" width="0.4484%" height="15" fill="rgb(235,182,43)" fg:x="444" fg:w="2"/><text x="99.8016%" y="223.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (2 samples, 0.45%)</title><rect x="99.5516%" y="197" width="0.4484%" height="15" fill="rgb(242,16,51)" fg:x="444" fg:w="2"/><text x="99.8016%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (1 samples, 0.22%)</title><rect x="99.7758%" y="181" width="0.2242%" height="15" fill="rgb(248,9,4)" fg:x="445" fg:w="1"/><text x="100.0258%" y="191.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.22%)</title><rect x="99.7758%" y="165" width="0.2242%" height="15" fill="rgb(210,31,22)" fg:x="445" fg:w="1"/><text x="100.0258%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (1 samples, 0.22%)</title><rect x="99.7758%" y="149" width="0.2242%" height="15" fill="rgb(239,54,39)" fg:x="445" fg:w="1"/><text x="100.0258%" y="159.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (1 samples, 0.22%)</title><rect x="99.7758%" y="133" width="0.2242%" height="15" fill="rgb(230,99,41)" fg:x="445" fg:w="1"/><text x="100.0258%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (1 samples, 0.22%)</title><rect x="99.7758%" y="117" width="0.2242%" height="15" fill="rgb(253,106,12)" fg:x="445" fg:w="1"/><text x="100.0258%" y="127.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (1 samples, 0.22%)</title><rect x="99.7758%" y="101" width="0.2242%" height="15" fill="rgb(213,46,41)" fg:x="445" fg:w="1"/><text x="100.0258%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.22%)</title><rect x="99.7758%" y="85" width="0.2242%" height="15" fill="rgb(215,133,35)" fg:x="445" fg:w="1"/><text x="100.0258%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.22%)</title><rect x="99.7758%" y="69" width="0.2242%" height="15" fill="rgb(213,28,5)" fg:x="445" fg:w="1"/><text x="100.0258%" y="79.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (1 samples, 0.22%)</title><rect x="99.7758%" y="53" width="0.2242%" height="15" fill="rgb(215,77,49)" fg:x="445" fg:w="1"/><text x="100.0258%" y="63.50"></text></g><g><title>recv (1 samples, 0.22%)</title><rect x="99.7758%" y="37" width="0.2242%" height="15" fill="rgb(248,100,22)" fg:x="445" fg:w="1"/><text x="100.0258%" y="47.50"></text></g></svg></svg>