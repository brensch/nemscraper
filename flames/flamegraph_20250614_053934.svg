<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="833"><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (5 samples, 0.60%)</title><rect x="1.4406%" y="325" width="0.6002%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="5"/><text x="1.6906%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (5 samples, 0.60%)</title><rect x="1.4406%" y="309" width="0.6002%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="5"/><text x="1.6906%" y="319.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (5 samples, 0.60%)</title><rect x="1.4406%" y="293" width="0.6002%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="5"/><text x="1.6906%" y="303.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (5 samples, 0.60%)</title><rect x="1.4406%" y="277" width="0.6002%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="5"/><text x="1.6906%" y="287.50"></text></g><g><title>hyper::body::body::Body::poll_inner (4 samples, 0.48%)</title><rect x="1.5606%" y="261" width="0.4802%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="4"/><text x="1.8106%" y="271.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4 samples, 0.48%)</title><rect x="1.5606%" y="245" width="0.4802%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="4"/><text x="1.8106%" y="255.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (4 samples, 0.48%)</title><rect x="1.5606%" y="229" width="0.4802%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="4"/><text x="1.8106%" y="239.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.48%)</title><rect x="1.5606%" y="213" width="0.4802%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="4"/><text x="1.8106%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (4 samples, 0.48%)</title><rect x="1.5606%" y="197" width="0.4802%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="4"/><text x="1.8106%" y="207.50"></text></g><g><title>tokio::runtime::context::with_scheduler (4 samples, 0.48%)</title><rect x="1.5606%" y="181" width="0.4802%" height="15" fill="rgb(220,122,19)" fg:x="13" fg:w="4"/><text x="1.8106%" y="191.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (4 samples, 0.48%)</title><rect x="1.5606%" y="165" width="0.4802%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="4"/><text x="1.8106%" y="175.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.48%)</title><rect x="1.5606%" y="149" width="0.4802%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="4"/><text x="1.8106%" y="159.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (4 samples, 0.48%)</title><rect x="1.5606%" y="133" width="0.4802%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="4"/><text x="1.8106%" y="143.50"></text></g><g><title>write (4 samples, 0.48%)</title><rect x="1.5606%" y="117" width="0.4802%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="4"/><text x="1.8106%" y="127.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.24%)</title><rect x="2.5210%" y="277" width="0.2401%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="2"/><text x="2.7710%" y="287.50"></text></g><g><title>crc32fast::Hasher::update (13 samples, 1.56%)</title><rect x="2.0408%" y="309" width="1.5606%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="13"/><text x="2.2908%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (13 samples, 1.56%)</title><rect x="2.0408%" y="293" width="1.5606%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="13"/><text x="2.2908%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (7 samples, 0.84%)</title><rect x="2.7611%" y="277" width="0.8403%" height="15" fill="rgb(210,31,41)" fg:x="23" fg:w="7"/><text x="3.0111%" y="287.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.12%)</title><rect x="3.4814%" y="261" width="0.1200%" height="15" fill="rgb(221,200,47)" fg:x="29" fg:w="1"/><text x="3.7314%" y="271.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (57 samples, 6.84%)</title><rect x="7.3229%" y="229" width="6.8427%" height="15" fill="rgb(226,26,5)" fg:x="61" fg:w="57"/><text x="7.5729%" y="239.50">zlib_rs::..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (58 samples, 6.96%)</title><rect x="7.3229%" y="277" width="6.9628%" height="15" fill="rgb(249,33,26)" fg:x="61" fg:w="58"/><text x="7.5729%" y="287.50">&lt;flate2::..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (58 samples, 6.96%)</title><rect x="7.3229%" y="261" width="6.9628%" height="15" fill="rgb(235,183,28)" fg:x="61" fg:w="58"/><text x="7.5729%" y="271.50">&lt;flate2::..</text></g><g><title>zlib_rs::inflate::inflate (58 samples, 6.96%)</title><rect x="7.3229%" y="245" width="6.9628%" height="15" fill="rgb(221,5,38)" fg:x="61" fg:w="58"/><text x="7.5729%" y="255.50">zlib_rs::..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.12%)</title><rect x="14.1657%" y="229" width="0.1200%" height="15" fill="rgb(247,18,42)" fg:x="118" fg:w="1"/><text x="14.4157%" y="239.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (104 samples, 12.48%)</title><rect x="2.0408%" y="325" width="12.4850%" height="15" fill="rgb(241,131,45)" fg:x="17" fg:w="104"/><text x="2.2908%" y="335.50">&lt;std::io::buffered:..</text></g><g><title>std::io::default_read_to_end (91 samples, 10.92%)</title><rect x="3.6014%" y="309" width="10.9244%" height="15" fill="rgb(249,31,29)" fg:x="30" fg:w="91"/><text x="3.8514%" y="319.50">std::io::default..</text></g><g><title>flate2::zio::read (60 samples, 7.20%)</title><rect x="7.3229%" y="293" width="7.2029%" height="15" fill="rgb(225,111,53)" fg:x="61" fg:w="60"/><text x="7.5729%" y="303.50">flate2::zi..</text></g><g><title>std::io::default_read_buf (2 samples, 0.24%)</title><rect x="14.2857%" y="277" width="0.2401%" height="15" fill="rgb(238,160,17)" fg:x="119" fg:w="2"/><text x="14.5357%" y="287.50"></text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.24%)</title><rect x="14.2857%" y="261" width="0.2401%" height="15" fill="rgb(214,148,48)" fg:x="119" fg:w="2"/><text x="14.5357%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.60%)</title><rect x="15.1261%" y="309" width="0.6002%" height="15" fill="rgb(232,36,49)" fg:x="126" fg:w="5"/><text x="15.3761%" y="319.50"></text></g><g><title>tokio::io::util::read_line::finish_string_read (4 samples, 0.48%)</title><rect x="15.7263%" y="309" width="0.4802%" height="15" fill="rgb(209,103,24)" fg:x="131" fg:w="4"/><text x="15.9763%" y="319.50"></text></g><g><title>&lt;tokio::io::util::read_line::ReadLine&lt;R&gt; as core::future::future::Future&gt;::poll (40 samples, 4.80%)</title><rect x="14.5258%" y="325" width="4.8019%" height="15" fill="rgb(229,88,8)" fg:x="121" fg:w="40"/><text x="14.7758%" y="335.50">&lt;tokio..</text></g><g><title>tokio::io::util::read_until::read_until_internal (26 samples, 3.12%)</title><rect x="16.2065%" y="309" width="3.1212%" height="15" fill="rgb(213,181,19)" fg:x="135" fg:w="26"/><text x="16.4565%" y="319.50">tok..</text></g><g><title>tokio::util::memchr::memchr (3 samples, 0.36%)</title><rect x="18.9676%" y="293" width="0.3601%" height="15" fill="rgb(254,191,54)" fg:x="158" fg:w="3"/><text x="19.2176%" y="303.50"></text></g><g><title>cfree (1 samples, 0.12%)</title><rect x="19.3277%" y="325" width="0.1200%" height="15" fill="rgb(241,83,37)" fg:x="161" fg:w="1"/><text x="19.5777%" y="335.50"></text></g><g><title>__munmap (1 samples, 0.12%)</title><rect x="19.3277%" y="309" width="0.1200%" height="15" fill="rgb(233,36,39)" fg:x="161" fg:w="1"/><text x="19.5777%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.12%)</title><rect x="19.4478%" y="325" width="0.1200%" height="15" fill="rgb(226,3,54)" fg:x="162" fg:w="1"/><text x="19.6978%" y="335.50"></text></g><g><title>openssl::ssl::SslContextBuilder::load_verify_locations (1 samples, 0.12%)</title><rect x="19.5678%" y="229" width="0.1200%" height="15" fill="rgb(245,192,40)" fg:x="163" fg:w="1"/><text x="19.8178%" y="239.50"></text></g><g><title>SSL_CTX_load_verify_locations (1 samples, 0.12%)</title><rect x="19.5678%" y="213" width="0.1200%" height="15" fill="rgb(238,167,29)" fg:x="163" fg:w="1"/><text x="19.8178%" y="223.50"></text></g><g><title>X509_STORE_load_file_ex (1 samples, 0.12%)</title><rect x="19.5678%" y="197" width="0.1200%" height="15" fill="rgb(232,182,51)" fg:x="163" fg:w="1"/><text x="19.8178%" y="207.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.12%)</title><rect x="19.5678%" y="181" width="0.1200%" height="15" fill="rgb(231,60,39)" fg:x="163" fg:w="1"/><text x="19.8178%" y="191.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.12%)</title><rect x="19.5678%" y="165" width="0.1200%" height="15" fill="rgb(208,69,12)" fg:x="163" fg:w="1"/><text x="19.8178%" y="175.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.12%)</title><rect x="19.5678%" y="149" width="0.1200%" height="15" fill="rgb(235,93,37)" fg:x="163" fg:w="1"/><text x="19.8178%" y="159.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (1 samples, 0.12%)</title><rect x="19.5678%" y="133" width="0.1200%" height="15" fill="rgb(213,116,39)" fg:x="163" fg:w="1"/><text x="19.8178%" y="143.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.12%)</title><rect x="19.5678%" y="117" width="0.1200%" height="15" fill="rgb(222,207,29)" fg:x="163" fg:w="1"/><text x="19.8178%" y="127.50"></text></g><g><title>OSSL_DECODER_is_a (1 samples, 0.12%)</title><rect x="19.5678%" y="101" width="0.1200%" height="15" fill="rgb(206,96,30)" fg:x="163" fg:w="1"/><text x="19.8178%" y="111.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.12%)</title><rect x="19.5678%" y="85" width="0.1200%" height="15" fill="rgb(218,138,4)" fg:x="163" fg:w="1"/><text x="19.8178%" y="95.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.12%)</title><rect x="19.5678%" y="69" width="0.1200%" height="15" fill="rgb(250,191,14)" fg:x="163" fg:w="1"/><text x="19.8178%" y="79.50"></text></g><g><title>EVP_KEYMGMT_do_all_provided (1 samples, 0.12%)</title><rect x="19.6879%" y="133" width="0.1200%" height="15" fill="rgb(239,60,40)" fg:x="164" fg:w="1"/><text x="19.9379%" y="143.50"></text></g><g><title>google_cloud_auth::token::DefaultTokenSourceProvider::new::{{closure}} (3 samples, 0.36%)</title><rect x="19.5678%" y="325" width="0.3601%" height="15" fill="rgb(206,27,48)" fg:x="163" fg:w="3"/><text x="19.8178%" y="335.50"></text></g><g><title>google_cloud_auth::token_source::service_account_token_source::OAuth2ServiceAccountTokenSource::new (3 samples, 0.36%)</title><rect x="19.5678%" y="309" width="0.3601%" height="15" fill="rgb(225,35,8)" fg:x="163" fg:w="3"/><text x="19.8178%" y="319.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (3 samples, 0.36%)</title><rect x="19.5678%" y="293" width="0.3601%" height="15" fill="rgb(250,213,24)" fg:x="163" fg:w="3"/><text x="19.8178%" y="303.50"></text></g><g><title>reqwest::connect::ConnectorBuilder::new_default_tls (3 samples, 0.36%)</title><rect x="19.5678%" y="277" width="0.3601%" height="15" fill="rgb(247,123,22)" fg:x="163" fg:w="3"/><text x="19.8178%" y="287.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (3 samples, 0.36%)</title><rect x="19.5678%" y="261" width="0.3601%" height="15" fill="rgb(231,138,38)" fg:x="163" fg:w="3"/><text x="19.8178%" y="271.50"></text></g><g><title>native_tls::imp::TlsConnector::new (3 samples, 0.36%)</title><rect x="19.5678%" y="245" width="0.3601%" height="15" fill="rgb(231,145,46)" fg:x="163" fg:w="3"/><text x="19.8178%" y="255.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (2 samples, 0.24%)</title><rect x="19.6879%" y="229" width="0.2401%" height="15" fill="rgb(251,118,11)" fg:x="164" fg:w="2"/><text x="19.9379%" y="239.50"></text></g><g><title>X509_STORE_set_default_paths_ex (2 samples, 0.24%)</title><rect x="19.6879%" y="213" width="0.2401%" height="15" fill="rgb(217,147,25)" fg:x="164" fg:w="2"/><text x="19.9379%" y="223.50"></text></g><g><title>X509_load_cert_crl_file_ex (2 samples, 0.24%)</title><rect x="19.6879%" y="197" width="0.2401%" height="15" fill="rgb(247,81,37)" fg:x="164" fg:w="2"/><text x="19.9379%" y="207.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (2 samples, 0.24%)</title><rect x="19.6879%" y="181" width="0.2401%" height="15" fill="rgb(209,12,38)" fg:x="164" fg:w="2"/><text x="19.9379%" y="191.50"></text></g><g><title>ASN1_item_d2i_ex (2 samples, 0.24%)</title><rect x="19.6879%" y="165" width="0.2401%" height="15" fill="rgb(227,1,9)" fg:x="164" fg:w="2"/><text x="19.9379%" y="175.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (2 samples, 0.24%)</title><rect x="19.6879%" y="149" width="0.2401%" height="15" fill="rgb(248,47,43)" fg:x="164" fg:w="2"/><text x="19.9379%" y="159.50"></text></g><g><title>OSSL_DECODER_do_all_provided (1 samples, 0.12%)</title><rect x="19.8079%" y="133" width="0.1200%" height="15" fill="rgb(221,10,30)" fg:x="165" fg:w="1"/><text x="20.0579%" y="143.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.12%)</title><rect x="19.8079%" y="117" width="0.1200%" height="15" fill="rgb(210,229,1)" fg:x="165" fg:w="1"/><text x="20.0579%" y="127.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.12%)</title><rect x="19.8079%" y="101" width="0.1200%" height="15" fill="rgb(222,148,37)" fg:x="165" fg:w="1"/><text x="20.0579%" y="111.50"></text></g><g><title>openssl::ssl::SslContextBuilder::load_verify_locations (1 samples, 0.12%)</title><rect x="19.9280%" y="229" width="0.1200%" height="15" fill="rgb(234,67,33)" fg:x="166" fg:w="1"/><text x="20.1780%" y="239.50"></text></g><g><title>SSL_CTX_load_verify_locations (1 samples, 0.12%)</title><rect x="19.9280%" y="213" width="0.1200%" height="15" fill="rgb(247,98,35)" fg:x="166" fg:w="1"/><text x="20.1780%" y="223.50"></text></g><g><title>X509_STORE_load_file_ex (1 samples, 0.12%)</title><rect x="19.9280%" y="197" width="0.1200%" height="15" fill="rgb(247,138,52)" fg:x="166" fg:w="1"/><text x="20.1780%" y="207.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.12%)</title><rect x="19.9280%" y="181" width="0.1200%" height="15" fill="rgb(213,79,30)" fg:x="166" fg:w="1"/><text x="20.1780%" y="191.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.12%)</title><rect x="19.9280%" y="165" width="0.1200%" height="15" fill="rgb(246,177,23)" fg:x="166" fg:w="1"/><text x="20.1780%" y="175.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.12%)</title><rect x="19.9280%" y="149" width="0.1200%" height="15" fill="rgb(230,62,27)" fg:x="166" fg:w="1"/><text x="20.1780%" y="159.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (1 samples, 0.12%)</title><rect x="19.9280%" y="133" width="0.1200%" height="15" fill="rgb(216,154,8)" fg:x="166" fg:w="1"/><text x="20.1780%" y="143.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.12%)</title><rect x="19.9280%" y="117" width="0.1200%" height="15" fill="rgb(244,35,45)" fg:x="166" fg:w="1"/><text x="20.1780%" y="127.50"></text></g><g><title>OSSL_DECODER_is_a (1 samples, 0.12%)</title><rect x="19.9280%" y="101" width="0.1200%" height="15" fill="rgb(251,115,12)" fg:x="166" fg:w="1"/><text x="20.1780%" y="111.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.12%)</title><rect x="19.9280%" y="85" width="0.1200%" height="15" fill="rgb(240,54,50)" fg:x="166" fg:w="1"/><text x="20.1780%" y="95.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.12%)</title><rect x="19.9280%" y="69" width="0.1200%" height="15" fill="rgb(233,84,52)" fg:x="166" fg:w="1"/><text x="20.1780%" y="79.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.12%)</title><rect x="20.0480%" y="181" width="0.1200%" height="15" fill="rgb(207,117,47)" fg:x="167" fg:w="1"/><text x="20.2980%" y="191.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.12%)</title><rect x="20.0480%" y="165" width="0.1200%" height="15" fill="rgb(249,43,39)" fg:x="167" fg:w="1"/><text x="20.2980%" y="175.50"></text></g><g><title>OSSL_DECODER_from_data (1 samples, 0.12%)</title><rect x="20.0480%" y="149" width="0.1200%" height="15" fill="rgb(209,38,44)" fg:x="167" fg:w="1"/><text x="20.2980%" y="159.50"></text></g><g><title>OSSL_DECODER_from_bio (1 samples, 0.12%)</title><rect x="20.0480%" y="133" width="0.1200%" height="15" fill="rgb(236,212,23)" fg:x="167" fg:w="1"/><text x="20.2980%" y="143.50"></text></g><g><title>EVP_PKEY_set_type_by_keymgmt (1 samples, 0.12%)</title><rect x="20.0480%" y="117" width="0.1200%" height="15" fill="rgb(242,79,21)" fg:x="167" fg:w="1"/><text x="20.2980%" y="127.50"></text></g><g><title>google_cloud_storage::client::Client::new (3 samples, 0.36%)</title><rect x="19.9280%" y="325" width="0.3601%" height="15" fill="rgb(211,96,35)" fg:x="166" fg:w="3"/><text x="20.1780%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::client::Client as core::default::Default&gt;::default (3 samples, 0.36%)</title><rect x="19.9280%" y="309" width="0.3601%" height="15" fill="rgb(253,215,40)" fg:x="166" fg:w="3"/><text x="20.1780%" y="319.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (3 samples, 0.36%)</title><rect x="19.9280%" y="293" width="0.3601%" height="15" fill="rgb(211,81,21)" fg:x="166" fg:w="3"/><text x="20.1780%" y="303.50"></text></g><g><title>reqwest::connect::ConnectorBuilder::new_default_tls (3 samples, 0.36%)</title><rect x="19.9280%" y="277" width="0.3601%" height="15" fill="rgb(208,190,38)" fg:x="166" fg:w="3"/><text x="20.1780%" y="287.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (3 samples, 0.36%)</title><rect x="19.9280%" y="261" width="0.3601%" height="15" fill="rgb(235,213,38)" fg:x="166" fg:w="3"/><text x="20.1780%" y="271.50"></text></g><g><title>native_tls::imp::TlsConnector::new (3 samples, 0.36%)</title><rect x="19.9280%" y="245" width="0.3601%" height="15" fill="rgb(237,122,38)" fg:x="166" fg:w="3"/><text x="20.1780%" y="255.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (2 samples, 0.24%)</title><rect x="20.0480%" y="229" width="0.2401%" height="15" fill="rgb(244,218,35)" fg:x="167" fg:w="2"/><text x="20.2980%" y="239.50"></text></g><g><title>X509_STORE_set_default_paths_ex (2 samples, 0.24%)</title><rect x="20.0480%" y="213" width="0.2401%" height="15" fill="rgb(240,68,47)" fg:x="167" fg:w="2"/><text x="20.2980%" y="223.50"></text></g><g><title>X509_load_cert_crl_file_ex (2 samples, 0.24%)</title><rect x="20.0480%" y="197" width="0.2401%" height="15" fill="rgb(210,16,53)" fg:x="167" fg:w="2"/><text x="20.2980%" y="207.50"></text></g><g><title>X509_STORE_add_cert (1 samples, 0.12%)</title><rect x="20.1681%" y="181" width="0.1200%" height="15" fill="rgb(235,124,12)" fg:x="168" fg:w="1"/><text x="20.4181%" y="191.50"></text></g><g><title>X509_OBJECT_retrieve_match (1 samples, 0.12%)</title><rect x="20.1681%" y="165" width="0.1200%" height="15" fill="rgb(224,169,11)" fg:x="168" fg:w="1"/><text x="20.4181%" y="175.50"></text></g><g><title>qsort_r (1 samples, 0.12%)</title><rect x="20.1681%" y="149" width="0.1200%" height="15" fill="rgb(250,166,2)" fg:x="168" fg:w="1"/><text x="20.4181%" y="159.50"></text></g><g><title>cfree (1 samples, 0.12%)</title><rect x="20.2881%" y="309" width="0.1200%" height="15" fill="rgb(242,216,29)" fg:x="169" fg:w="1"/><text x="20.5381%" y="319.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.12%)</title><rect x="20.5282%" y="293" width="0.1200%" height="15" fill="rgb(230,116,27)" fg:x="171" fg:w="1"/><text x="20.7782%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (2 samples, 0.24%)</title><rect x="20.6483%" y="293" width="0.2401%" height="15" fill="rgb(228,99,48)" fg:x="172" fg:w="2"/><text x="20.8983%" y="303.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (1 samples, 0.12%)</title><rect x="20.7683%" y="277" width="0.1200%" height="15" fill="rgb(253,11,6)" fg:x="173" fg:w="1"/><text x="21.0183%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (1 samples, 0.12%)</title><rect x="20.7683%" y="261" width="0.1200%" height="15" fill="rgb(247,143,39)" fg:x="173" fg:w="1"/><text x="21.0183%" y="271.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (5 samples, 0.60%)</title><rect x="20.4082%" y="309" width="0.6002%" height="15" fill="rgb(236,97,10)" fg:x="170" fg:w="5"/><text x="20.6582%" y="319.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.12%)</title><rect x="20.8884%" y="293" width="0.1200%" height="15" fill="rgb(233,208,19)" fg:x="174" fg:w="1"/><text x="21.1384%" y="303.50"></text></g><g><title>malloc (1 samples, 0.12%)</title><rect x="20.8884%" y="277" width="0.1200%" height="15" fill="rgb(216,164,2)" fg:x="174" fg:w="1"/><text x="21.1384%" y="287.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::build_csv_content (1 samples, 0.12%)</title><rect x="21.0084%" y="309" width="0.1200%" height="15" fill="rgb(220,129,5)" fg:x="175" fg:w="1"/><text x="21.2584%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.24%)</title><rect x="21.3685%" y="245" width="0.2401%" height="15" fill="rgb(242,17,10)" fg:x="178" fg:w="2"/><text x="21.6185%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.24%)</title><rect x="21.3685%" y="229" width="0.2401%" height="15" fill="rgb(242,107,0)" fg:x="178" fg:w="2"/><text x="21.6185%" y="239.50"></text></g><g><title>__libc_realloc (2 samples, 0.24%)</title><rect x="21.3685%" y="213" width="0.2401%" height="15" fill="rgb(251,28,31)" fg:x="178" fg:w="2"/><text x="21.6185%" y="223.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (7 samples, 0.84%)</title><rect x="21.1285%" y="277" width="0.8403%" height="15" fill="rgb(233,223,10)" fg:x="176" fg:w="7"/><text x="21.3785%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (7 samples, 0.84%)</title><rect x="21.1285%" y="261" width="0.8403%" height="15" fill="rgb(215,21,27)" fg:x="176" fg:w="7"/><text x="21.3785%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (3 samples, 0.36%)</title><rect x="21.6086%" y="245" width="0.3601%" height="15" fill="rgb(232,23,21)" fg:x="180" fg:w="3"/><text x="21.8586%" y="255.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::csv_to_arrow_batch (11 samples, 1.32%)</title><rect x="21.1285%" y="309" width="1.3205%" height="15" fill="rgb(244,5,23)" fg:x="176" fg:w="11"/><text x="21.3785%" y="319.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (11 samples, 1.32%)</title><rect x="21.1285%" y="293" width="1.3205%" height="15" fill="rgb(226,81,46)" fg:x="176" fg:w="11"/><text x="21.3785%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (4 samples, 0.48%)</title><rect x="21.9688%" y="277" width="0.4802%" height="15" fill="rgb(247,70,30)" fg:x="183" fg:w="4"/><text x="22.2188%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.48%)</title><rect x="21.9688%" y="261" width="0.4802%" height="15" fill="rgb(212,68,19)" fg:x="183" fg:w="4"/><text x="22.2188%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.48%)</title><rect x="21.9688%" y="245" width="0.4802%" height="15" fill="rgb(240,187,13)" fg:x="183" fg:w="4"/><text x="22.2188%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.48%)</title><rect x="21.9688%" y="229" width="0.4802%" height="15" fill="rgb(223,113,26)" fg:x="183" fg:w="4"/><text x="22.2188%" y="239.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (4 samples, 0.48%)</title><rect x="21.9688%" y="213" width="0.4802%" height="15" fill="rgb(206,192,2)" fg:x="183" fg:w="4"/><text x="22.2188%" y="223.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (4 samples, 0.48%)</title><rect x="21.9688%" y="197" width="0.4802%" height="15" fill="rgb(241,108,4)" fg:x="183" fg:w="4"/><text x="22.2188%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (2 samples, 0.24%)</title><rect x="22.4490%" y="229" width="0.2401%" height="15" fill="rgb(247,173,49)" fg:x="187" fg:w="2"/><text x="22.6990%" y="239.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.12%)</title><rect x="22.5690%" y="213" width="0.1200%" height="15" fill="rgb(224,114,35)" fg:x="188" fg:w="1"/><text x="22.8190%" y="223.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}} (22 samples, 2.64%)</title><rect x="20.2881%" y="325" width="2.6411%" height="15" fill="rgb(245,159,27)" fg:x="169" fg:w="22"/><text x="20.5381%" y="335.50">ne..</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::write_parquet_to_memory (4 samples, 0.48%)</title><rect x="22.4490%" y="309" width="0.4802%" height="15" fill="rgb(245,172,44)" fg:x="187" fg:w="4"/><text x="22.6990%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (4 samples, 0.48%)</title><rect x="22.4490%" y="293" width="0.4802%" height="15" fill="rgb(236,23,11)" fg:x="187" fg:w="4"/><text x="22.6990%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (4 samples, 0.48%)</title><rect x="22.4490%" y="277" width="0.4802%" height="15" fill="rgb(205,117,38)" fg:x="187" fg:w="4"/><text x="22.6990%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (4 samples, 0.48%)</title><rect x="22.4490%" y="261" width="0.4802%" height="15" fill="rgb(237,72,25)" fg:x="187" fg:w="4"/><text x="22.6990%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (4 samples, 0.48%)</title><rect x="22.4490%" y="245" width="0.4802%" height="15" fill="rgb(244,70,9)" fg:x="187" fg:w="4"/><text x="22.6990%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (2 samples, 0.24%)</title><rect x="22.6891%" y="229" width="0.2401%" height="15" fill="rgb(217,125,39)" fg:x="189" fg:w="2"/><text x="22.9391%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.12%)</title><rect x="22.8091%" y="213" width="0.1200%" height="15" fill="rgb(235,36,10)" fg:x="190" fg:w="1"/><text x="23.0591%" y="223.50"></text></g><g><title>parquet::column::writer::compare_greater (1 samples, 0.12%)</title><rect x="22.8091%" y="197" width="0.1200%" height="15" fill="rgb(251,123,47)" fg:x="190" fg:w="1"/><text x="23.0591%" y="207.50"></text></g><g><title>malloc (23 samples, 2.76%)</title><rect x="23.4094%" y="309" width="2.7611%" height="15" fill="rgb(221,13,13)" fg:x="195" fg:w="23"/><text x="23.6594%" y="319.50">ma..</text></g><g><title>cfree (14 samples, 1.68%)</title><rect x="26.4106%" y="293" width="1.6807%" height="15" fill="rgb(238,131,9)" fg:x="220" fg:w="14"/><text x="26.6606%" y="303.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (8 samples, 0.96%)</title><rect x="31.0924%" y="277" width="0.9604%" height="15" fill="rgb(211,50,8)" fg:x="259" fg:w="8"/><text x="31.3424%" y="287.50"></text></g><g><title>__rustc::__rdl_realloc (8 samples, 0.96%)</title><rect x="31.0924%" y="261" width="0.9604%" height="15" fill="rgb(245,182,24)" fg:x="259" fg:w="8"/><text x="31.3424%" y="271.50"></text></g><g><title>cfree (16 samples, 1.92%)</title><rect x="32.0528%" y="277" width="1.9208%" height="15" fill="rgb(242,14,37)" fg:x="267" fg:w="16"/><text x="32.3028%" y="287.50">c..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (29 samples, 3.48%)</title><rect x="33.9736%" y="277" width="3.4814%" height="15" fill="rgb(246,228,12)" fg:x="283" fg:w="29"/><text x="34.2236%" y="287.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (15 samples, 1.80%)</title><rect x="35.6543%" y="261" width="1.8007%" height="15" fill="rgb(213,55,15)" fg:x="297" fg:w="15"/><text x="35.9043%" y="271.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (6 samples, 0.72%)</title><rect x="38.7755%" y="261" width="0.7203%" height="15" fill="rgb(209,9,3)" fg:x="323" fg:w="6"/><text x="39.0255%" y="271.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (9 samples, 1.08%)</title><rect x="39.4958%" y="261" width="1.0804%" height="15" fill="rgb(230,59,30)" fg:x="329" fg:w="9"/><text x="39.7458%" y="271.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (1 samples, 0.12%)</title><rect x="40.4562%" y="245" width="0.1200%" height="15" fill="rgb(209,121,21)" fg:x="337" fg:w="1"/><text x="40.7062%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (2 samples, 0.24%)</title><rect x="40.5762%" y="261" width="0.2401%" height="15" fill="rgb(220,109,13)" fg:x="338" fg:w="2"/><text x="40.8262%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (29 samples, 3.48%)</title><rect x="37.4550%" y="277" width="3.4814%" height="15" fill="rgb(232,18,1)" fg:x="312" fg:w="29"/><text x="37.7050%" y="287.50">nem..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.12%)</title><rect x="40.8163%" y="261" width="0.1200%" height="15" fill="rgb(215,41,42)" fg:x="340" fg:w="1"/><text x="41.0663%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.12%)</title><rect x="42.8571%" y="261" width="0.1200%" height="15" fill="rgb(224,123,36)" fg:x="357" fg:w="1"/><text x="43.1071%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.12%)</title><rect x="42.9772%" y="261" width="0.1200%" height="15" fill="rgb(240,125,3)" fg:x="358" fg:w="1"/><text x="43.2272%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.36%)</title><rect x="43.0972%" y="261" width="0.3601%" height="15" fill="rgb(205,98,50)" fg:x="359" fg:w="3"/><text x="43.3472%" y="271.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (138 samples, 16.57%)</title><rect x="28.0912%" y="293" width="16.5666%" height="15" fill="rgb(205,185,37)" fg:x="234" fg:w="138"/><text x="28.3412%" y="303.50">nemscraper::process::conve..</text></g><g><title>nemscraper::process::utils::clean_str (31 samples, 3.72%)</title><rect x="40.9364%" y="277" width="3.7215%" height="15" fill="rgb(238,207,15)" fg:x="341" fg:w="31"/><text x="41.1864%" y="287.50">nems..</text></g><g><title>malloc (10 samples, 1.20%)</title><rect x="43.4574%" y="261" width="1.2005%" height="15" fill="rgb(213,199,42)" fg:x="362" fg:w="10"/><text x="43.7074%" y="271.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::build_csv_content (21 samples, 2.52%)</title><rect x="44.6579%" y="293" width="2.5210%" height="15" fill="rgb(235,201,11)" fg:x="372" fg:w="21"/><text x="44.9079%" y="303.50">ne..</text></g><g><title>arrow_csv::reader::Decoder::decode (124 samples, 14.89%)</title><rect x="47.8992%" y="261" width="14.8860%" height="15" fill="rgb(207,46,11)" fg:x="399" fg:w="124"/><text x="48.1492%" y="271.50">arrow_csv::reader::Deco..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (124 samples, 14.89%)</title><rect x="47.8992%" y="245" width="14.8860%" height="15" fill="rgb(241,35,35)" fg:x="399" fg:w="124"/><text x="48.1492%" y="255.50">arrow_csv::reader::reco..</text></g><g><title>csv_core::reader::Reader::read_record (69 samples, 8.28%)</title><rect x="54.5018%" y="229" width="8.2833%" height="15" fill="rgb(243,32,47)" fg:x="454" fg:w="69"/><text x="54.7518%" y="239.50">csv_core::re..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (13 samples, 1.56%)</title><rect x="62.7851%" y="245" width="1.5606%" height="15" fill="rgb(247,202,23)" fg:x="523" fg:w="13"/><text x="63.0351%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.72%)</title><rect x="63.6255%" y="229" width="0.7203%" height="15" fill="rgb(219,102,11)" fg:x="530" fg:w="6"/><text x="63.8755%" y="239.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (97 samples, 11.64%)</title><rect x="68.1873%" y="181" width="11.6447%" height="15" fill="rgb(243,110,44)" fg:x="568" fg:w="97"/><text x="68.4373%" y="191.50">arrow_array::buil..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (13 samples, 1.56%)</title><rect x="78.2713%" y="165" width="1.5606%" height="15" fill="rgb(222,74,54)" fg:x="652" fg:w="13"/><text x="78.5213%" y="175.50"></text></g><g><title>__rustc::__rdl_realloc (13 samples, 1.56%)</title><rect x="78.2713%" y="149" width="1.5606%" height="15" fill="rgb(216,99,12)" fg:x="652" fg:w="13"/><text x="78.5213%" y="159.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (273 samples, 32.77%)</title><rect x="47.1789%" y="277" width="32.7731%" height="15" fill="rgb(226,22,26)" fg:x="393" fg:w="273"/><text x="47.4289%" y="287.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (143 samples, 17.17%)</title><rect x="62.7851%" y="261" width="17.1669%" height="15" fill="rgb(217,163,10)" fg:x="523" fg:w="143"/><text x="63.0351%" y="271.50">arrow_csv::reader::Decoder:..</text></g><g><title>core::iter::adapters::try_process (130 samples, 15.61%)</title><rect x="64.3457%" y="245" width="15.6062%" height="15" fill="rgb(213,25,53)" fg:x="536" fg:w="130"/><text x="64.5957%" y="255.50">core::iter::adapters::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (130 samples, 15.61%)</title><rect x="64.3457%" y="229" width="15.6062%" height="15" fill="rgb(252,105,26)" fg:x="536" fg:w="130"/><text x="64.5957%" y="239.50">&lt;alloc::vec::Vec&lt;T&gt; as a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (130 samples, 15.61%)</title><rect x="64.3457%" y="213" width="15.6062%" height="15" fill="rgb(220,39,43)" fg:x="536" fg:w="130"/><text x="64.5957%" y="223.50">&lt;core::iter::adapters::m..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (130 samples, 15.61%)</title><rect x="64.3457%" y="197" width="15.6062%" height="15" fill="rgb(229,68,48)" fg:x="536" fg:w="130"/><text x="64.5957%" y="207.50">&lt;arrow_array::array::byt..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::with_capacity (1 samples, 0.12%)</title><rect x="79.8319%" y="181" width="0.1200%" height="15" fill="rgb(252,8,32)" fg:x="665" fg:w="1"/><text x="80.0819%" y="191.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.12%)</title><rect x="79.8319%" y="165" width="0.1200%" height="15" fill="rgb(223,20,43)" fg:x="665" fg:w="1"/><text x="80.0819%" y="175.50"></text></g><g><title>posix_memalign (1 samples, 0.12%)</title><rect x="79.8319%" y="149" width="0.1200%" height="15" fill="rgb(229,81,49)" fg:x="665" fg:w="1"/><text x="80.0819%" y="159.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::csv_to_arrow_batch (275 samples, 33.01%)</title><rect x="47.1789%" y="293" width="33.0132%" height="15" fill="rgb(236,28,36)" fg:x="393" fg:w="275"/><text x="47.4289%" y="303.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProc..</text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (2 samples, 0.24%)</title><rect x="79.9520%" y="277" width="0.2401%" height="15" fill="rgb(249,185,26)" fg:x="666" fg:w="2"/><text x="80.2020%" y="287.50"></text></g><g><title>cfree (2 samples, 0.24%)</title><rect x="79.9520%" y="261" width="0.2401%" height="15" fill="rgb(249,174,33)" fg:x="666" fg:w="2"/><text x="80.2020%" y="271.50"></text></g><g><title>__munmap (2 samples, 0.24%)</title><rect x="79.9520%" y="245" width="0.2401%" height="15" fill="rgb(233,201,37)" fg:x="666" fg:w="2"/><text x="80.2020%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.24%)</title><rect x="80.1921%" y="277" width="0.2401%" height="15" fill="rgb(221,78,26)" fg:x="668" fg:w="2"/><text x="80.4421%" y="287.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (2 samples, 0.24%)</title><rect x="80.1921%" y="261" width="0.2401%" height="15" fill="rgb(250,127,30)" fg:x="668" fg:w="2"/><text x="80.4421%" y="271.50"></text></g><g><title>std::io::copy::stack_buffer_copy (2 samples, 0.24%)</title><rect x="80.1921%" y="245" width="0.2401%" height="15" fill="rgb(230,49,44)" fg:x="668" fg:w="2"/><text x="80.4421%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.24%)</title><rect x="80.1921%" y="229" width="0.2401%" height="15" fill="rgb(229,67,23)" fg:x="668" fg:w="2"/><text x="80.4421%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.24%)</title><rect x="80.1921%" y="213" width="0.2401%" height="15" fill="rgb(249,83,47)" fg:x="668" fg:w="2"/><text x="80.4421%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.24%)</title><rect x="80.1921%" y="197" width="0.2401%" height="15" fill="rgb(215,43,3)" fg:x="668" fg:w="2"/><text x="80.4421%" y="207.50"></text></g><g><title>__libc_realloc (2 samples, 0.24%)</title><rect x="80.1921%" y="181" width="0.2401%" height="15" fill="rgb(238,154,13)" fg:x="668" fg:w="2"/><text x="80.4421%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (13 samples, 1.56%)</title><rect x="80.4322%" y="229" width="1.5606%" height="15" fill="rgb(219,56,2)" fg:x="670" fg:w="13"/><text x="80.6822%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (13 samples, 1.56%)</title><rect x="80.4322%" y="213" width="1.5606%" height="15" fill="rgb(233,0,4)" fg:x="670" fg:w="13"/><text x="80.6822%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (9 samples, 1.08%)</title><rect x="80.9124%" y="197" width="1.0804%" height="15" fill="rgb(235,30,7)" fg:x="674" fg:w="9"/><text x="81.1624%" y="207.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (6 samples, 0.72%)</title><rect x="81.2725%" y="181" width="0.7203%" height="15" fill="rgb(250,79,13)" fg:x="677" fg:w="6"/><text x="81.5225%" y="191.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.48%)</title><rect x="81.5126%" y="165" width="0.4802%" height="15" fill="rgb(211,146,34)" fg:x="679" fg:w="4"/><text x="81.7626%" y="175.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (26 samples, 3.12%)</title><rect x="83.6735%" y="213" width="3.1212%" height="15" fill="rgb(228,22,38)" fg:x="697" fg:w="26"/><text x="83.9235%" y="223.50">&lt;pa..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (11 samples, 1.32%)</title><rect x="85.4742%" y="197" width="1.3205%" height="15" fill="rgb(235,168,5)" fg:x="712" fg:w="11"/><text x="85.7242%" y="207.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.12%)</title><rect x="86.6747%" y="181" width="0.1200%" height="15" fill="rgb(221,155,16)" fg:x="722" fg:w="1"/><text x="86.9247%" y="191.50"></text></g><g><title>&lt;parquet::encodings::encoding::PlainEncoder&lt;T&gt; as parquet::encodings::encoding::Encoder&lt;T&gt;&gt;::put (1 samples, 0.12%)</title><rect x="87.8752%" y="181" width="0.1200%" height="15" fill="rgb(215,215,53)" fg:x="732" fg:w="1"/><text x="88.1252%" y="191.50"></text></g><g><title>parquet::column::writer::compare_greater (10 samples, 1.20%)</title><rect x="87.9952%" y="181" width="1.2005%" height="15" fill="rgb(223,4,10)" fg:x="733" fg:w="10"/><text x="88.2452%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.12%)</title><rect x="90.3962%" y="165" width="0.1200%" height="15" fill="rgb(234,103,6)" fg:x="753" fg:w="1"/><text x="90.6462%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="90.3962%" y="149" width="0.1200%" height="15" fill="rgb(227,97,0)" fg:x="753" fg:w="1"/><text x="90.6462%" y="159.50"></text></g><g><title>__libc_realloc (1 samples, 0.12%)</title><rect x="90.3962%" y="133" width="0.1200%" height="15" fill="rgb(234,150,53)" fg:x="753" fg:w="1"/><text x="90.6462%" y="143.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (39 samples, 4.68%)</title><rect x="86.7947%" y="213" width="4.6819%" height="15" fill="rgb(228,201,54)" fg:x="723" fg:w="39"/><text x="87.0447%" y="223.50">&lt;parq..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (34 samples, 4.08%)</title><rect x="87.3950%" y="197" width="4.0816%" height="15" fill="rgb(222,22,37)" fg:x="728" fg:w="34"/><text x="87.6450%" y="207.50">parq..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (19 samples, 2.28%)</title><rect x="89.1957%" y="181" width="2.2809%" height="15" fill="rgb(237,53,32)" fg:x="743" fg:w="19"/><text x="89.4457%" y="191.50">p..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.96%)</title><rect x="90.5162%" y="165" width="0.9604%" height="15" fill="rgb(233,25,53)" fg:x="754" fg:w="8"/><text x="90.7662%" y="175.50"></text></g><g><title>cfree (1 samples, 0.12%)</title><rect x="91.3565%" y="149" width="0.1200%" height="15" fill="rgb(210,40,34)" fg:x="761" fg:w="1"/><text x="91.6065%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (3 samples, 0.36%)</title><rect x="91.4766%" y="197" width="0.3601%" height="15" fill="rgb(241,220,44)" fg:x="762" fg:w="3"/><text x="91.7266%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (2 samples, 0.24%)</title><rect x="91.5966%" y="181" width="0.2401%" height="15" fill="rgb(235,28,35)" fg:x="763" fg:w="2"/><text x="91.8466%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.24%)</title><rect x="91.5966%" y="165" width="0.2401%" height="15" fill="rgb(210,56,17)" fg:x="763" fg:w="2"/><text x="91.8466%" y="175.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (2 samples, 0.24%)</title><rect x="92.0768%" y="165" width="0.2401%" height="15" fill="rgb(224,130,29)" fg:x="767" fg:w="2"/><text x="92.3268%" y="175.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.24%)</title><rect x="92.0768%" y="149" width="0.2401%" height="15" fill="rgb(235,212,8)" fg:x="767" fg:w="2"/><text x="92.3268%" y="159.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (8 samples, 0.96%)</title><rect x="91.8367%" y="197" width="0.9604%" height="15" fill="rgb(223,33,50)" fg:x="765" fg:w="8"/><text x="92.0867%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (8 samples, 0.96%)</title><rect x="91.8367%" y="181" width="0.9604%" height="15" fill="rgb(219,149,13)" fg:x="765" fg:w="8"/><text x="92.0867%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.48%)</title><rect x="92.3169%" y="165" width="0.4802%" height="15" fill="rgb(250,156,29)" fg:x="769" fg:w="4"/><text x="92.5669%" y="175.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (8 samples, 0.96%)</title><rect x="92.7971%" y="197" width="0.9604%" height="15" fill="rgb(216,193,19)" fg:x="773" fg:w="8"/><text x="93.0471%" y="207.50"></text></g><g><title>snap::compress::Encoder::compress (7 samples, 0.84%)</title><rect x="92.9172%" y="181" width="0.8403%" height="15" fill="rgb(216,135,14)" fg:x="774" fg:w="7"/><text x="93.1672%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.12%)</title><rect x="93.7575%" y="197" width="0.1200%" height="15" fill="rgb(241,47,5)" fg:x="781" fg:w="1"/><text x="94.0075%" y="207.50"></text></g><g><title>cfree (1 samples, 0.12%)</title><rect x="93.7575%" y="181" width="0.1200%" height="15" fill="rgb(233,42,35)" fg:x="781" fg:w="1"/><text x="94.0075%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (22 samples, 2.64%)</title><rect x="91.4766%" y="213" width="2.6411%" height="15" fill="rgb(231,13,6)" fg:x="762" fg:w="22"/><text x="91.7266%" y="223.50">pa..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (2 samples, 0.24%)</title><rect x="93.8776%" y="197" width="0.2401%" height="15" fill="rgb(207,181,40)" fg:x="782" fg:w="2"/><text x="94.1276%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_dict_page (1 samples, 0.12%)</title><rect x="94.1176%" y="197" width="0.1200%" height="15" fill="rgb(254,173,49)" fg:x="784" fg:w="1"/><text x="94.3676%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_dict (1 samples, 0.12%)</title><rect x="94.1176%" y="181" width="0.1200%" height="15" fill="rgb(221,1,38)" fg:x="784" fg:w="1"/><text x="94.3676%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (117 samples, 14.05%)</title><rect x="80.4322%" y="245" width="14.0456%" height="15" fill="rgb(206,124,46)" fg:x="670" fg:w="117"/><text x="80.6822%" y="255.50">parquet::arrow::arrow..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (104 samples, 12.48%)</title><rect x="81.9928%" y="229" width="12.4850%" height="15" fill="rgb(249,21,11)" fg:x="683" fg:w="104"/><text x="82.2428%" y="239.50">parquet::column::wr..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (3 samples, 0.36%)</title><rect x="94.1176%" y="213" width="0.3601%" height="15" fill="rgb(222,201,40)" fg:x="784" fg:w="3"/><text x="94.3676%" y="223.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.24%)</title><rect x="94.2377%" y="197" width="0.2401%" height="15" fill="rgb(235,61,29)" fg:x="785" fg:w="2"/><text x="94.4877%" y="207.50"></text></g><g><title>snap::compress::Encoder::compress (2 samples, 0.24%)</title><rect x="94.2377%" y="181" width="0.2401%" height="15" fill="rgb(219,207,3)" fg:x="785" fg:w="2"/><text x="94.4877%" y="191.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::write_parquet_to_memory (123 samples, 14.77%)</title><rect x="80.1921%" y="293" width="14.7659%" height="15" fill="rgb(222,56,46)" fg:x="668" fg:w="123"/><text x="80.4421%" y="303.50">nemscraper::process::gc..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (121 samples, 14.53%)</title><rect x="80.4322%" y="277" width="14.5258%" height="15" fill="rgb(239,76,54)" fg:x="670" fg:w="121"/><text x="80.6822%" y="287.50">parquet::arrow::arrow_..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (121 samples, 14.53%)</title><rect x="80.4322%" y="261" width="14.5258%" height="15" fill="rgb(231,124,27)" fg:x="670" fg:w="121"/><text x="80.6822%" y="271.50">parquet::arrow::arrow_..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (4 samples, 0.48%)</title><rect x="94.4778%" y="245" width="0.4802%" height="15" fill="rgb(249,195,6)" fg:x="787" fg:w="4"/><text x="94.7278%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (4 samples, 0.48%)</title><rect x="94.4778%" y="229" width="0.4802%" height="15" fill="rgb(237,174,47)" fg:x="787" fg:w="4"/><text x="94.7278%" y="239.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.12%)</title><rect x="94.9580%" y="245" width="0.1200%" height="15" fill="rgb(206,201,31)" fg:x="791" fg:w="1"/><text x="95.2080%" y="255.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.12%)</title><rect x="94.9580%" y="229" width="0.1200%" height="15" fill="rgb(231,57,52)" fg:x="791" fg:w="1"/><text x="95.2080%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.12%)</title><rect x="94.9580%" y="213" width="0.1200%" height="15" fill="rgb(248,177,22)" fg:x="791" fg:w="1"/><text x="95.2080%" y="223.50"></text></g><g><title>write (1 samples, 0.12%)</title><rect x="94.9580%" y="197" width="0.1200%" height="15" fill="rgb(215,211,37)" fg:x="791" fg:w="1"/><text x="95.2080%" y="207.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (792 samples, 95.08%)</title><rect x="0.1200%" y="357" width="95.0780%" height="15" fill="rgb(241,128,51)" fg:x="1" fg:w="792"/><text x="0.3700%" y="367.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::stream_zip_to_parquet_gcs::{{closure}}::{{closure}} (792 samples, 95.08%)</title><rect x="0.1200%" y="341" width="95.0780%" height="15" fill="rgb(227,165,31)" fg:x="1" fg:w="792"/><text x="0.3700%" y="351.50">nemscraper::process::split::stream_zip_to_parquet_gcs::{{closure}}::{{closure}}</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::process_line::{{closure}} (602 samples, 72.27%)</title><rect x="22.9292%" y="325" width="72.2689%" height="15" fill="rgb(228,167,24)" fg:x="191" fg:w="602"/><text x="23.1792%" y="335.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::process_line::{{closure}}</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}} (575 samples, 69.03%)</title><rect x="26.1705%" y="309" width="69.0276%" height="15" fill="rgb(228,143,12)" fg:x="218" fg:w="575"/><text x="26.4205%" y="319.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}}</text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.24%)</title><rect x="94.9580%" y="293" width="0.2401%" height="15" fill="rgb(249,149,8)" fg:x="791" fg:w="2"/><text x="95.2080%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.24%)</title><rect x="94.9580%" y="277" width="0.2401%" height="15" fill="rgb(243,35,44)" fg:x="791" fg:w="2"/><text x="95.2080%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.24%)</title><rect x="94.9580%" y="261" width="0.2401%" height="15" fill="rgb(246,89,9)" fg:x="791" fg:w="2"/><text x="95.2080%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.12%)</title><rect x="95.0780%" y="245" width="0.1200%" height="15" fill="rgb(233,213,13)" fg:x="792" fg:w="1"/><text x="95.3280%" y="255.50"></text></g><g><title>&lt;tracing_subscriber::fmt::time::SystemTime as tracing_subscriber::fmt::time::FormatTime&gt;::format_time (1 samples, 0.12%)</title><rect x="95.0780%" y="229" width="0.1200%" height="15" fill="rgb(233,141,41)" fg:x="792" fg:w="1"/><text x="95.3280%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.12%)</title><rect x="95.0780%" y="213" width="0.1200%" height="15" fill="rgb(239,167,4)" fg:x="792" fg:w="1"/><text x="95.3280%" y="223.50"></text></g><g><title>&lt;tracing_subscriber::fmt::time::datetime::DateTime as core::fmt::Display&gt;::fmt (1 samples, 0.12%)</title><rect x="95.0780%" y="197" width="0.1200%" height="15" fill="rgb(209,217,16)" fg:x="792" fg:w="1"/><text x="95.3280%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.12%)</title><rect x="95.0780%" y="181" width="0.1200%" height="15" fill="rgb(219,88,35)" fg:x="792" fg:w="1"/><text x="95.3280%" y="191.50"></text></g><g><title>bench_zip_to_pa (794 samples, 95.32%)</title><rect x="0.0000%" y="533" width="95.3181%" height="15" fill="rgb(220,193,23)" fg:x="0" fg:w="794"/><text x="0.2500%" y="543.50">bench_zip_to_pa</text></g><g><title>_start (794 samples, 95.32%)</title><rect x="0.0000%" y="517" width="95.3181%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="794"/><text x="0.2500%" y="527.50">_start</text></g><g><title>__libc_start_main (794 samples, 95.32%)</title><rect x="0.0000%" y="501" width="95.3181%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="794"/><text x="0.2500%" y="511.50">__libc_start_main</text></g><g><title>main (794 samples, 95.32%)</title><rect x="0.0000%" y="485" width="95.3181%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="794"/><text x="0.2500%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (794 samples, 95.32%)</title><rect x="0.0000%" y="469" width="95.3181%" height="15" fill="rgb(230,138,44)" fg:x="0" fg:w="794"/><text x="0.2500%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (794 samples, 95.32%)</title><rect x="0.0000%" y="453" width="95.3181%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="794"/><text x="0.2500%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (794 samples, 95.32%)</title><rect x="0.0000%" y="437" width="95.3181%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="794"/><text x="0.2500%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (794 samples, 95.32%)</title><rect x="0.0000%" y="421" width="95.3181%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="794"/><text x="0.2500%" y="431.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (794 samples, 95.32%)</title><rect x="0.0000%" y="405" width="95.3181%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="794"/><text x="0.2500%" y="415.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (794 samples, 95.32%)</title><rect x="0.0000%" y="389" width="95.3181%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="794"/><text x="0.2500%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (794 samples, 95.32%)</title><rect x="0.0000%" y="373" width="95.3181%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="794"/><text x="0.2500%" y="383.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.12%)</title><rect x="95.1981%" y="357" width="0.1200%" height="15" fill="rgb(253,106,12)" fg:x="793" fg:w="1"/><text x="95.4481%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.12%)</title><rect x="95.1981%" y="341" width="0.1200%" height="15" fill="rgb(213,46,41)" fg:x="793" fg:w="1"/><text x="95.4481%" y="351.50"></text></g><g><title>syscall (1 samples, 0.12%)</title><rect x="95.1981%" y="325" width="0.1200%" height="15" fill="rgb(215,133,35)" fg:x="793" fg:w="1"/><text x="95.4481%" y="335.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.12%)</title><rect x="95.4382%" y="341" width="0.1200%" height="15" fill="rgb(213,28,5)" fg:x="795" fg:w="1"/><text x="95.6882%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.12%)</title><rect x="95.6783%" y="309" width="0.1200%" height="15" fill="rgb(215,77,49)" fg:x="797" fg:w="1"/><text x="95.9283%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (6 samples, 0.72%)</title><rect x="95.5582%" y="341" width="0.7203%" height="15" fill="rgb(248,100,22)" fg:x="796" fg:w="6"/><text x="95.8082%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (5 samples, 0.60%)</title><rect x="95.6783%" y="325" width="0.6002%" height="15" fill="rgb(208,67,9)" fg:x="797" fg:w="5"/><text x="95.9283%" y="335.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (4 samples, 0.48%)</title><rect x="95.7983%" y="309" width="0.4802%" height="15" fill="rgb(219,133,21)" fg:x="798" fg:w="4"/><text x="96.0483%" y="319.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (4 samples, 0.48%)</title><rect x="95.7983%" y="293" width="0.4802%" height="15" fill="rgb(246,46,29)" fg:x="798" fg:w="4"/><text x="96.0483%" y="303.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.48%)</title><rect x="95.7983%" y="277" width="0.4802%" height="15" fill="rgb(246,185,52)" fg:x="798" fg:w="4"/><text x="96.0483%" y="287.50"></text></g><g><title>epoll_wait (4 samples, 0.48%)</title><rect x="95.7983%" y="261" width="0.4802%" height="15" fill="rgb(252,136,11)" fg:x="798" fg:w="4"/><text x="96.0483%" y="271.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.24%)</title><rect x="96.2785%" y="325" width="0.2401%" height="15" fill="rgb(219,138,53)" fg:x="802" fg:w="2"/><text x="96.5285%" y="335.50"></text></g><g><title>syscall (2 samples, 0.24%)</title><rect x="96.2785%" y="309" width="0.2401%" height="15" fill="rgb(211,51,23)" fg:x="802" fg:w="2"/><text x="96.5285%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (4 samples, 0.48%)</title><rect x="96.5186%" y="325" width="0.4802%" height="15" fill="rgb(247,221,28)" fg:x="804" fg:w="4"/><text x="96.7686%" y="335.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.48%)</title><rect x="96.5186%" y="309" width="0.4802%" height="15" fill="rgb(251,222,45)" fg:x="804" fg:w="4"/><text x="96.7686%" y="319.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (4 samples, 0.48%)</title><rect x="96.5186%" y="293" width="0.4802%" height="15" fill="rgb(217,162,53)" fg:x="804" fg:w="4"/><text x="96.7686%" y="303.50"></text></g><g><title>write (4 samples, 0.48%)</title><rect x="96.5186%" y="277" width="0.4802%" height="15" fill="rgb(229,93,14)" fg:x="804" fg:w="4"/><text x="96.7686%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (1 samples, 0.12%)</title><rect x="96.9988%" y="325" width="0.1200%" height="15" fill="rgb(209,67,49)" fg:x="808" fg:w="1"/><text x="97.2488%" y="335.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (1 samples, 0.12%)</title><rect x="97.3589%" y="229" width="0.1200%" height="15" fill="rgb(213,87,29)" fg:x="811" fg:w="1"/><text x="97.6089%" y="239.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.12%)</title><rect x="97.3589%" y="213" width="0.1200%" height="15" fill="rgb(205,151,52)" fg:x="811" fg:w="1"/><text x="97.6089%" y="223.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (8 samples, 0.96%)</title><rect x="97.4790%" y="229" width="0.9604%" height="15" fill="rgb(253,215,39)" fg:x="812" fg:w="8"/><text x="97.7290%" y="239.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (8 samples, 0.96%)</title><rect x="97.4790%" y="213" width="0.9604%" height="15" fill="rgb(221,220,41)" fg:x="812" fg:w="8"/><text x="97.7290%" y="223.50"></text></g><g><title>tokio::runtime::park::wake (8 samples, 0.96%)</title><rect x="97.4790%" y="197" width="0.9604%" height="15" fill="rgb(218,133,21)" fg:x="812" fg:w="8"/><text x="97.7290%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.96%)</title><rect x="97.4790%" y="181" width="0.9604%" height="15" fill="rgb(221,193,43)" fg:x="812" fg:w="8"/><text x="97.7290%" y="191.50"></text></g><g><title>syscall (8 samples, 0.96%)</title><rect x="97.4790%" y="165" width="0.9604%" height="15" fill="rgb(240,128,52)" fg:x="812" fg:w="8"/><text x="97.7290%" y="175.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.12%)</title><rect x="98.5594%" y="117" width="0.1200%" height="15" fill="rgb(253,114,12)" fg:x="821" fg:w="1"/><text x="98.8094%" y="127.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (1 samples, 0.12%)</title><rect x="98.5594%" y="101" width="0.1200%" height="15" fill="rgb(215,223,47)" fg:x="821" fg:w="1"/><text x="98.8094%" y="111.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.12%)</title><rect x="98.5594%" y="85" width="0.1200%" height="15" fill="rgb(248,225,23)" fg:x="821" fg:w="1"/><text x="98.8094%" y="95.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.12%)</title><rect x="98.5594%" y="69" width="0.1200%" height="15" fill="rgb(250,108,0)" fg:x="821" fg:w="1"/><text x="98.8094%" y="79.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 0.36%)</title><rect x="98.6795%" y="69" width="0.3601%" height="15" fill="rgb(228,208,7)" fg:x="822" fg:w="3"/><text x="98.9295%" y="79.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (3 samples, 0.36%)</title><rect x="98.6795%" y="53" width="0.3601%" height="15" fill="rgb(244,45,10)" fg:x="822" fg:w="3"/><text x="98.9295%" y="63.50"></text></g><g><title>recv (3 samples, 0.36%)</title><rect x="98.6795%" y="37" width="0.3601%" height="15" fill="rgb(207,125,25)" fg:x="822" fg:w="3"/><text x="98.9295%" y="47.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (6 samples, 0.72%)</title><rect x="98.4394%" y="229" width="0.7203%" height="15" fill="rgb(210,195,18)" fg:x="820" fg:w="6"/><text x="98.6894%" y="239.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (6 samples, 0.72%)</title><rect x="98.4394%" y="213" width="0.7203%" height="15" fill="rgb(249,80,12)" fg:x="820" fg:w="6"/><text x="98.6894%" y="223.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (6 samples, 0.72%)</title><rect x="98.4394%" y="197" width="0.7203%" height="15" fill="rgb(221,65,9)" fg:x="820" fg:w="6"/><text x="98.6894%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (5 samples, 0.60%)</title><rect x="98.5594%" y="181" width="0.6002%" height="15" fill="rgb(235,49,36)" fg:x="821" fg:w="5"/><text x="98.8094%" y="191.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.60%)</title><rect x="98.5594%" y="165" width="0.6002%" height="15" fill="rgb(225,32,20)" fg:x="821" fg:w="5"/><text x="98.8094%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.60%)</title><rect x="98.5594%" y="149" width="0.6002%" height="15" fill="rgb(215,141,46)" fg:x="821" fg:w="5"/><text x="98.8094%" y="159.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (5 samples, 0.60%)</title><rect x="98.5594%" y="133" width="0.6002%" height="15" fill="rgb(250,160,47)" fg:x="821" fg:w="5"/><text x="98.8094%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (4 samples, 0.48%)</title><rect x="98.6795%" y="117" width="0.4802%" height="15" fill="rgb(216,222,40)" fg:x="822" fg:w="4"/><text x="98.9295%" y="127.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (4 samples, 0.48%)</title><rect x="98.6795%" y="101" width="0.4802%" height="15" fill="rgb(234,217,39)" fg:x="822" fg:w="4"/><text x="98.9295%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.48%)</title><rect x="98.6795%" y="85" width="0.4802%" height="15" fill="rgb(207,178,40)" fg:x="822" fg:w="4"/><text x="98.9295%" y="95.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (1 samples, 0.12%)</title><rect x="99.0396%" y="69" width="0.1200%" height="15" fill="rgb(221,136,13)" fg:x="825" fg:w="1"/><text x="99.2896%" y="79.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1 samples, 0.12%)</title><rect x="99.0396%" y="53" width="0.1200%" height="15" fill="rgb(249,199,10)" fg:x="825" fg:w="1"/><text x="99.2896%" y="63.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (18 samples, 2.16%)</title><rect x="97.1188%" y="325" width="2.1609%" height="15" fill="rgb(249,222,13)" fg:x="809" fg:w="18"/><text x="97.3688%" y="335.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (17 samples, 2.04%)</title><rect x="97.2389%" y="309" width="2.0408%" height="15" fill="rgb(244,185,38)" fg:x="810" fg:w="17"/><text x="97.4889%" y="319.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (16 samples, 1.92%)</title><rect x="97.3589%" y="293" width="1.9208%" height="15" fill="rgb(236,202,9)" fg:x="811" fg:w="16"/><text x="97.6089%" y="303.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (16 samples, 1.92%)</title><rect x="97.3589%" y="277" width="1.9208%" height="15" fill="rgb(250,229,37)" fg:x="811" fg:w="16"/><text x="97.6089%" y="287.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (16 samples, 1.92%)</title><rect x="97.3589%" y="261" width="1.9208%" height="15" fill="rgb(206,174,23)" fg:x="811" fg:w="16"/><text x="97.6089%" y="271.50">h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (16 samples, 1.92%)</title><rect x="97.3589%" y="245" width="1.9208%" height="15" fill="rgb(211,33,43)" fg:x="811" fg:w="16"/><text x="97.6089%" y="255.50">h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (1 samples, 0.12%)</title><rect x="99.1597%" y="229" width="0.1200%" height="15" fill="rgb(245,58,50)" fg:x="826" fg:w="1"/><text x="99.4097%" y="239.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1 samples, 0.12%)</title><rect x="99.1597%" y="213" width="0.1200%" height="15" fill="rgb(244,68,36)" fg:x="826" fg:w="1"/><text x="99.4097%" y="223.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_drain_or_close_read (1 samples, 0.12%)</title><rect x="99.1597%" y="197" width="0.1200%" height="15" fill="rgb(232,229,15)" fg:x="826" fg:w="1"/><text x="99.4097%" y="207.50"></text></g><g><title>BIO_write (2 samples, 0.24%)</title><rect x="99.5198%" y="149" width="0.2401%" height="15" fill="rgb(254,30,23)" fg:x="829" fg:w="2"/><text x="99.7698%" y="159.50"></text></g><g><title>openssl::ssl::bio::bwrite (2 samples, 0.24%)</title><rect x="99.5198%" y="133" width="0.2401%" height="15" fill="rgb(235,160,14)" fg:x="829" fg:w="2"/><text x="99.7698%" y="143.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (2 samples, 0.24%)</title><rect x="99.5198%" y="117" width="0.2401%" height="15" fill="rgb(212,155,44)" fg:x="829" fg:w="2"/><text x="99.7698%" y="127.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (2 samples, 0.24%)</title><rect x="99.5198%" y="101" width="0.2401%" height="15" fill="rgb(226,2,50)" fg:x="829" fg:w="2"/><text x="99.7698%" y="111.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.24%)</title><rect x="99.5198%" y="85" width="0.2401%" height="15" fill="rgb(234,177,6)" fg:x="829" fg:w="2"/><text x="99.7698%" y="95.50"></text></g><g><title>__send (2 samples, 0.24%)</title><rect x="99.5198%" y="69" width="0.2401%" height="15" fill="rgb(217,24,9)" fg:x="829" fg:w="2"/><text x="99.7698%" y="79.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (5 samples, 0.60%)</title><rect x="99.2797%" y="245" width="0.6002%" height="15" fill="rgb(220,13,46)" fg:x="827" fg:w="5"/><text x="99.5297%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (5 samples, 0.60%)</title><rect x="99.2797%" y="229" width="0.6002%" height="15" fill="rgb(239,221,27)" fg:x="827" fg:w="5"/><text x="99.5297%" y="239.50"></text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write (5 samples, 0.60%)</title><rect x="99.2797%" y="213" width="0.6002%" height="15" fill="rgb(222,198,25)" fg:x="827" fg:w="5"/><text x="99.5297%" y="223.50"></text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (5 samples, 0.60%)</title><rect x="99.2797%" y="197" width="0.6002%" height="15" fill="rgb(211,99,13)" fg:x="827" fg:w="5"/><text x="99.5297%" y="207.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Write&gt;::write (5 samples, 0.60%)</title><rect x="99.2797%" y="181" width="0.6002%" height="15" fill="rgb(232,111,31)" fg:x="827" fg:w="5"/><text x="99.5297%" y="191.50"></text></g><g><title>SSL_write_ex (5 samples, 0.60%)</title><rect x="99.2797%" y="165" width="0.6002%" height="15" fill="rgb(245,82,37)" fg:x="827" fg:w="5"/><text x="99.5297%" y="175.50"></text></g><g><title>EVP_EncryptUpdate (1 samples, 0.12%)</title><rect x="99.7599%" y="149" width="0.1200%" height="15" fill="rgb(227,149,46)" fg:x="831" fg:w="1"/><text x="100.0099%" y="159.50"></text></g><g><title>all (833 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="833"/><text x="0.2500%" y="559.50"></text></g><g><title>tokio-runtime-w (39 samples, 4.68%)</title><rect x="95.3181%" y="533" width="4.6819%" height="15" fill="rgb(226,80,48)" fg:x="794" fg:w="39"/><text x="95.5681%" y="543.50">tokio..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (39 samples, 4.68%)</title><rect x="95.3181%" y="517" width="4.6819%" height="15" fill="rgb(238,224,15)" fg:x="794" fg:w="39"/><text x="95.5681%" y="527.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (39 samples, 4.68%)</title><rect x="95.3181%" y="501" width="4.6819%" height="15" fill="rgb(241,136,10)" fg:x="794" fg:w="39"/><text x="95.5681%" y="511.50">core:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (39 samples, 4.68%)</title><rect x="95.3181%" y="485" width="4.6819%" height="15" fill="rgb(208,32,45)" fg:x="794" fg:w="39"/><text x="95.5681%" y="495.50">std::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (39 samples, 4.68%)</title><rect x="95.3181%" y="469" width="4.6819%" height="15" fill="rgb(207,135,9)" fg:x="794" fg:w="39"/><text x="95.5681%" y="479.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (39 samples, 4.68%)</title><rect x="95.3181%" y="453" width="4.6819%" height="15" fill="rgb(206,86,44)" fg:x="794" fg:w="39"/><text x="95.5681%" y="463.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (39 samples, 4.68%)</title><rect x="95.3181%" y="437" width="4.6819%" height="15" fill="rgb(245,177,15)" fg:x="794" fg:w="39"/><text x="95.5681%" y="447.50">tokio..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 4.68%)</title><rect x="95.3181%" y="421" width="4.6819%" height="15" fill="rgb(206,64,50)" fg:x="794" fg:w="39"/><text x="95.5681%" y="431.50">&lt;toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (39 samples, 4.68%)</title><rect x="95.3181%" y="405" width="4.6819%" height="15" fill="rgb(234,36,40)" fg:x="794" fg:w="39"/><text x="95.5681%" y="415.50">tokio..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (39 samples, 4.68%)</title><rect x="95.3181%" y="389" width="4.6819%" height="15" fill="rgb(213,64,8)" fg:x="794" fg:w="39"/><text x="95.5681%" y="399.50">tokio..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (39 samples, 4.68%)</title><rect x="95.3181%" y="373" width="4.6819%" height="15" fill="rgb(210,75,36)" fg:x="794" fg:w="39"/><text x="95.5681%" y="383.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (39 samples, 4.68%)</title><rect x="95.3181%" y="357" width="4.6819%" height="15" fill="rgb(229,88,21)" fg:x="794" fg:w="39"/><text x="95.5681%" y="367.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (31 samples, 3.72%)</title><rect x="96.2785%" y="341" width="3.7215%" height="15" fill="rgb(252,204,47)" fg:x="802" fg:w="31"/><text x="96.5285%" y="351.50">toki..</text></g><g><title>tokio::runtime::task::raw::poll (6 samples, 0.72%)</title><rect x="99.2797%" y="325" width="0.7203%" height="15" fill="rgb(208,77,27)" fg:x="827" fg:w="6"/><text x="99.5297%" y="335.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.72%)</title><rect x="99.2797%" y="309" width="0.7203%" height="15" fill="rgb(221,76,26)" fg:x="827" fg:w="6"/><text x="99.5297%" y="319.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (6 samples, 0.72%)</title><rect x="99.2797%" y="293" width="0.7203%" height="15" fill="rgb(225,139,18)" fg:x="827" fg:w="6"/><text x="99.5297%" y="303.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (6 samples, 0.72%)</title><rect x="99.2797%" y="277" width="0.7203%" height="15" fill="rgb(230,137,11)" fg:x="827" fg:w="6"/><text x="99.5297%" y="287.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (6 samples, 0.72%)</title><rect x="99.2797%" y="261" width="0.7203%" height="15" fill="rgb(212,28,1)" fg:x="827" fg:w="6"/><text x="99.5297%" y="271.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body_and_end (1 samples, 0.12%)</title><rect x="99.8800%" y="245" width="0.1200%" height="15" fill="rgb(248,164,17)" fg:x="832" fg:w="1"/><text x="100.1300%" y="255.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (1 samples, 0.12%)</title><rect x="99.8800%" y="229" width="0.1200%" height="15" fill="rgb(222,171,42)" fg:x="832" fg:w="1"/><text x="100.1300%" y="239.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (1 samples, 0.12%)</title><rect x="99.8800%" y="213" width="0.1200%" height="15" fill="rgb(243,84,45)" fg:x="832" fg:w="1"/><text x="100.1300%" y="223.50"></text></g></svg></svg>