<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1020"><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.69%)</title><rect x="0.4902%" y="181" width="0.6863%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="7"/><text x="0.7402%" y="191.50"></text></g><g><title>syscall (7 samples, 0.69%)</title><rect x="0.4902%" y="165" width="0.6863%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="7"/><text x="0.7402%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (10 samples, 0.98%)</title><rect x="0.4902%" y="341" width="0.9804%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="10"/><text x="0.7402%" y="351.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (10 samples, 0.98%)</title><rect x="0.4902%" y="325" width="0.9804%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="10"/><text x="0.7402%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (10 samples, 0.98%)</title><rect x="0.4902%" y="309" width="0.9804%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="10"/><text x="0.7402%" y="319.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (10 samples, 0.98%)</title><rect x="0.4902%" y="293" width="0.9804%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="10"/><text x="0.7402%" y="303.50"></text></g><g><title>hyper::body::body::Body::poll_inner (10 samples, 0.98%)</title><rect x="0.4902%" y="277" width="0.9804%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="10"/><text x="0.7402%" y="287.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (10 samples, 0.98%)</title><rect x="0.4902%" y="261" width="0.9804%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="10"/><text x="0.7402%" y="271.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (10 samples, 0.98%)</title><rect x="0.4902%" y="245" width="0.9804%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="10"/><text x="0.7402%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (10 samples, 0.98%)</title><rect x="0.4902%" y="229" width="0.9804%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="10"/><text x="0.7402%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 0.98%)</title><rect x="0.4902%" y="213" width="0.9804%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="10"/><text x="0.7402%" y="223.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 0.98%)</title><rect x="0.4902%" y="197" width="0.9804%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="10"/><text x="0.7402%" y="207.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (3 samples, 0.29%)</title><rect x="1.1765%" y="181" width="0.2941%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="3"/><text x="1.4265%" y="191.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (3 samples, 0.29%)</title><rect x="1.1765%" y="165" width="0.2941%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="3"/><text x="1.4265%" y="175.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (3 samples, 0.29%)</title><rect x="1.1765%" y="149" width="0.2941%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="3"/><text x="1.4265%" y="159.50"></text></g><g><title>write (3 samples, 0.29%)</title><rect x="1.1765%" y="133" width="0.2941%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="3"/><text x="1.4265%" y="143.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.29%)</title><rect x="2.3529%" y="277" width="0.2941%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="3"/><text x="2.6029%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.10%)</title><rect x="2.7451%" y="261" width="0.0980%" height="15" fill="rgb(210,31,41)" fg:x="28" fg:w="1"/><text x="2.9951%" y="271.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (14 samples, 1.37%)</title><rect x="2.6471%" y="277" width="1.3725%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="14"/><text x="2.8971%" y="287.50"></text></g><g><title>malloc (12 samples, 1.18%)</title><rect x="2.8431%" y="261" width="1.1765%" height="15" fill="rgb(226,26,5)" fg:x="29" fg:w="12"/><text x="3.0931%" y="271.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.10%)</title><rect x="4.0196%" y="245" width="0.0980%" height="15" fill="rgb(249,33,26)" fg:x="41" fg:w="1"/><text x="4.2696%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.10%)</title><rect x="4.0196%" y="229" width="0.0980%" height="15" fill="rgb(235,183,28)" fg:x="41" fg:w="1"/><text x="4.2696%" y="239.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.10%)</title><rect x="4.0196%" y="213" width="0.0980%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="1"/><text x="4.2696%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="4.0196%" y="197" width="0.0980%" height="15" fill="rgb(247,18,42)" fg:x="41" fg:w="1"/><text x="4.2696%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="4.0196%" y="181" width="0.0980%" height="15" fill="rgb(241,131,45)" fg:x="41" fg:w="1"/><text x="4.2696%" y="191.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="4.0196%" y="165" width="0.0980%" height="15" fill="rgb(249,31,29)" fg:x="41" fg:w="1"/><text x="4.2696%" y="175.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1 samples, 0.10%)</title><rect x="4.0196%" y="149" width="0.0980%" height="15" fill="rgb(225,111,53)" fg:x="41" fg:w="1"/><text x="4.2696%" y="159.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.10%)</title><rect x="4.1176%" y="229" width="0.0980%" height="15" fill="rgb(238,160,17)" fg:x="42" fg:w="1"/><text x="4.3676%" y="239.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (2 samples, 0.20%)</title><rect x="4.1176%" y="245" width="0.1961%" height="15" fill="rgb(214,148,48)" fg:x="42" fg:w="2"/><text x="4.3676%" y="255.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.10%)</title><rect x="4.2157%" y="229" width="0.0980%" height="15" fill="rgb(232,36,49)" fg:x="43" fg:w="1"/><text x="4.4657%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="4.2157%" y="213" width="0.0980%" height="15" fill="rgb(209,103,24)" fg:x="43" fg:w="1"/><text x="4.4657%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.10%)</title><rect x="4.3137%" y="165" width="0.0980%" height="15" fill="rgb(229,88,8)" fg:x="44" fg:w="1"/><text x="4.5637%" y="175.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.10%)</title><rect x="4.3137%" y="149" width="0.0980%" height="15" fill="rgb(213,181,19)" fg:x="44" fg:w="1"/><text x="4.5637%" y="159.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (5 samples, 0.49%)</title><rect x="4.0196%" y="261" width="0.4902%" height="15" fill="rgb(254,191,54)" fg:x="41" fg:w="5"/><text x="4.2696%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (2 samples, 0.20%)</title><rect x="4.3137%" y="245" width="0.1961%" height="15" fill="rgb(241,83,37)" fg:x="44" fg:w="2"/><text x="4.5637%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (2 samples, 0.20%)</title><rect x="4.3137%" y="229" width="0.1961%" height="15" fill="rgb(233,36,39)" fg:x="44" fg:w="2"/><text x="4.5637%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (2 samples, 0.20%)</title><rect x="4.3137%" y="213" width="0.1961%" height="15" fill="rgb(226,3,54)" fg:x="44" fg:w="2"/><text x="4.5637%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.20%)</title><rect x="4.3137%" y="197" width="0.1961%" height="15" fill="rgb(245,192,40)" fg:x="44" fg:w="2"/><text x="4.5637%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.20%)</title><rect x="4.3137%" y="181" width="0.1961%" height="15" fill="rgb(238,167,29)" fg:x="44" fg:w="2"/><text x="4.5637%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="4.4118%" y="165" width="0.0980%" height="15" fill="rgb(232,182,51)" fg:x="45" fg:w="1"/><text x="4.6618%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="4.4118%" y="149" width="0.0980%" height="15" fill="rgb(231,60,39)" fg:x="45" fg:w="1"/><text x="4.6618%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="4.4118%" y="133" width="0.0980%" height="15" fill="rgb(208,69,12)" fg:x="45" fg:w="1"/><text x="4.6618%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.10%)</title><rect x="4.4118%" y="117" width="0.0980%" height="15" fill="rgb(235,93,37)" fg:x="45" fg:w="1"/><text x="4.6618%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.10%)</title><rect x="4.4118%" y="101" width="0.0980%" height="15" fill="rgb(213,116,39)" fg:x="45" fg:w="1"/><text x="4.6618%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.10%)</title><rect x="4.4118%" y="85" width="0.0980%" height="15" fill="rgb(222,207,29)" fg:x="45" fg:w="1"/><text x="4.6618%" y="95.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.29%)</title><rect x="4.5098%" y="101" width="0.2941%" height="15" fill="rgb(206,96,30)" fg:x="46" fg:w="3"/><text x="4.7598%" y="111.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (3 samples, 0.29%)</title><rect x="4.5098%" y="85" width="0.2941%" height="15" fill="rgb(218,138,4)" fg:x="46" fg:w="3"/><text x="4.7598%" y="95.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.39%)</title><rect x="4.5098%" y="149" width="0.3922%" height="15" fill="rgb(250,191,14)" fg:x="46" fg:w="4"/><text x="4.7598%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.39%)</title><rect x="4.5098%" y="133" width="0.3922%" height="15" fill="rgb(239,60,40)" fg:x="46" fg:w="4"/><text x="4.7598%" y="143.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (4 samples, 0.39%)</title><rect x="4.5098%" y="117" width="0.3922%" height="15" fill="rgb(206,27,48)" fg:x="46" fg:w="4"/><text x="4.7598%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="4.8039%" y="101" width="0.0980%" height="15" fill="rgb(225,35,8)" fg:x="49" fg:w="1"/><text x="5.0539%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.10%)</title><rect x="4.8039%" y="85" width="0.0980%" height="15" fill="rgb(250,213,24)" fg:x="49" fg:w="1"/><text x="5.0539%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.10%)</title><rect x="4.8039%" y="69" width="0.0980%" height="15" fill="rgb(247,123,22)" fg:x="49" fg:w="1"/><text x="5.0539%" y="79.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="4.8039%" y="53" width="0.0980%" height="15" fill="rgb(231,138,38)" fg:x="49" fg:w="1"/><text x="5.0539%" y="63.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (9 samples, 0.88%)</title><rect x="4.9020%" y="117" width="0.8824%" height="15" fill="rgb(231,145,46)" fg:x="50" fg:w="9"/><text x="5.1520%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (9 samples, 0.88%)</title><rect x="4.9020%" y="101" width="0.8824%" height="15" fill="rgb(251,118,11)" fg:x="50" fg:w="9"/><text x="5.1520%" y="111.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="5.6863%" y="85" width="0.0980%" height="15" fill="rgb(217,147,25)" fg:x="58" fg:w="1"/><text x="5.9363%" y="95.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (14 samples, 1.37%)</title><rect x="4.5098%" y="245" width="1.3725%" height="15" fill="rgb(247,81,37)" fg:x="46" fg:w="14"/><text x="4.7598%" y="255.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.37%)</title><rect x="4.5098%" y="229" width="1.3725%" height="15" fill="rgb(209,12,38)" fg:x="46" fg:w="14"/><text x="4.7598%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (14 samples, 1.37%)</title><rect x="4.5098%" y="213" width="1.3725%" height="15" fill="rgb(227,1,9)" fg:x="46" fg:w="14"/><text x="4.7598%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.37%)</title><rect x="4.5098%" y="197" width="1.3725%" height="15" fill="rgb(248,47,43)" fg:x="46" fg:w="14"/><text x="4.7598%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (14 samples, 1.37%)</title><rect x="4.5098%" y="181" width="1.3725%" height="15" fill="rgb(221,10,30)" fg:x="46" fg:w="14"/><text x="4.7598%" y="191.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (14 samples, 1.37%)</title><rect x="4.5098%" y="165" width="1.3725%" height="15" fill="rgb(210,229,1)" fg:x="46" fg:w="14"/><text x="4.7598%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (10 samples, 0.98%)</title><rect x="4.9020%" y="149" width="0.9804%" height="15" fill="rgb(222,148,37)" fg:x="50" fg:w="10"/><text x="5.1520%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (10 samples, 0.98%)</title><rect x="4.9020%" y="133" width="0.9804%" height="15" fill="rgb(234,67,33)" fg:x="50" fg:w="10"/><text x="5.1520%" y="143.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="5.7843%" y="117" width="0.0980%" height="15" fill="rgb(247,98,35)" fg:x="59" fg:w="1"/><text x="6.0343%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="5.7843%" y="101" width="0.0980%" height="15" fill="rgb(247,138,52)" fg:x="59" fg:w="1"/><text x="6.0343%" y="111.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkData as parquet::file::reader::ChunkReader&gt;::get_read (1 samples, 0.10%)</title><rect x="5.8824%" y="229" width="0.0980%" height="15" fill="rgb(213,79,30)" fg:x="60" fg:w="1"/><text x="6.1324%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="5.8824%" y="213" width="0.0980%" height="15" fill="rgb(246,177,23)" fg:x="60" fg:w="1"/><text x="6.1324%" y="223.50"></text></g><g><title>bytes::bytes::shared_clone (1 samples, 0.10%)</title><rect x="5.8824%" y="197" width="0.0980%" height="15" fill="rgb(230,62,27)" fg:x="60" fg:w="1"/><text x="6.1324%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (22 samples, 2.16%)</title><rect x="4.0196%" y="277" width="2.1569%" height="15" fill="rgb(216,154,8)" fg:x="41" fg:w="22"/><text x="4.2696%" y="287.50">n..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (17 samples, 1.67%)</title><rect x="4.5098%" y="261" width="1.6667%" height="15" fill="rgb(244,35,45)" fg:x="46" fg:w="17"/><text x="4.7598%" y="271.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (3 samples, 0.29%)</title><rect x="5.8824%" y="245" width="0.2941%" height="15" fill="rgb(251,115,12)" fg:x="60" fg:w="3"/><text x="6.1324%" y="255.50"></text></g><g><title>std::io::copy::stack_buffer_copy (2 samples, 0.20%)</title><rect x="5.9804%" y="229" width="0.1961%" height="15" fill="rgb(240,54,50)" fg:x="61" fg:w="2"/><text x="6.2304%" y="239.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.20%)</title><rect x="5.9804%" y="213" width="0.1961%" height="15" fill="rgb(233,84,52)" fg:x="61" fg:w="2"/><text x="6.2304%" y="223.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (2 samples, 0.20%)</title><rect x="5.9804%" y="197" width="0.1961%" height="15" fill="rgb(207,117,47)" fg:x="61" fg:w="2"/><text x="6.2304%" y="207.50"></text></g><g><title>write (2 samples, 0.20%)</title><rect x="5.9804%" y="181" width="0.1961%" height="15" fill="rgb(249,43,39)" fg:x="61" fg:w="2"/><text x="6.2304%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.20%)</title><rect x="6.5686%" y="261" width="0.1961%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="2"/><text x="6.8186%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.20%)</title><rect x="6.5686%" y="245" width="0.1961%" height="15" fill="rgb(236,212,23)" fg:x="67" fg:w="2"/><text x="6.8186%" y="255.50"></text></g><g><title>__libc_realloc (2 samples, 0.20%)</title><rect x="6.5686%" y="229" width="0.1961%" height="15" fill="rgb(242,79,21)" fg:x="67" fg:w="2"/><text x="6.8186%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.39%)</title><rect x="7.5490%" y="213" width="0.3922%" height="15" fill="rgb(211,96,35)" fg:x="77" fg:w="4"/><text x="7.7990%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.39%)</title><rect x="7.5490%" y="197" width="0.3922%" height="15" fill="rgb(253,215,40)" fg:x="77" fg:w="4"/><text x="7.7990%" y="207.50"></text></g><g><title>__libc_realloc (4 samples, 0.39%)</title><rect x="7.5490%" y="181" width="0.3922%" height="15" fill="rgb(211,81,21)" fg:x="77" fg:w="4"/><text x="7.7990%" y="191.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (75 samples, 7.35%)</title><rect x="7.1569%" y="245" width="7.3529%" height="15" fill="rgb(208,190,38)" fg:x="73" fg:w="75"/><text x="7.4069%" y="255.50">arrow_csv:..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (75 samples, 7.35%)</title><rect x="7.1569%" y="229" width="7.3529%" height="15" fill="rgb(235,213,38)" fg:x="73" fg:w="75"/><text x="7.4069%" y="239.50">arrow_csv:..</text></g><g><title>csv_core::reader::Reader::read_record (67 samples, 6.57%)</title><rect x="7.9412%" y="213" width="6.5686%" height="15" fill="rgb(237,122,38)" fg:x="81" fg:w="67"/><text x="8.1912%" y="223.50">csv_core:..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (2 samples, 0.20%)</title><rect x="14.5098%" y="229" width="0.1961%" height="15" fill="rgb(244,218,35)" fg:x="148" fg:w="2"/><text x="14.7598%" y="239.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (29 samples, 2.84%)</title><rect x="16.1765%" y="165" width="2.8431%" height="15" fill="rgb(240,68,47)" fg:x="165" fg:w="29"/><text x="16.4265%" y="175.50">ar..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (4 samples, 0.39%)</title><rect x="18.6275%" y="149" width="0.3922%" height="15" fill="rgb(210,16,53)" fg:x="190" fg:w="4"/><text x="18.8775%" y="159.50"></text></g><g><title>__rustc::__rdl_realloc (4 samples, 0.39%)</title><rect x="18.6275%" y="133" width="0.3922%" height="15" fill="rgb(235,124,12)" fg:x="190" fg:w="4"/><text x="18.8775%" y="143.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="18.9216%" y="117" width="0.0980%" height="15" fill="rgb(224,169,11)" fg:x="193" fg:w="1"/><text x="19.1716%" y="127.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.10%)</title><rect x="19.0196%" y="149" width="0.0980%" height="15" fill="rgb(250,166,2)" fg:x="194" fg:w="1"/><text x="19.2696%" y="159.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.10%)</title><rect x="19.0196%" y="133" width="0.0980%" height="15" fill="rgb(242,216,29)" fg:x="194" fg:w="1"/><text x="19.2696%" y="143.50"></text></g><g><title>posix_memalign (1 samples, 0.10%)</title><rect x="19.0196%" y="117" width="0.0980%" height="15" fill="rgb(230,116,27)" fg:x="194" fg:w="1"/><text x="19.2696%" y="127.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (2 samples, 0.20%)</title><rect x="19.0196%" y="165" width="0.1961%" height="15" fill="rgb(228,99,48)" fg:x="194" fg:w="2"/><text x="19.2696%" y="175.50"></text></g><g><title>arrow_data::data::ArrayDataBuilder::build_unchecked (1 samples, 0.10%)</title><rect x="19.1176%" y="149" width="0.0980%" height="15" fill="rgb(253,11,6)" fg:x="195" fg:w="1"/><text x="19.3676%" y="159.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (128 samples, 12.55%)</title><rect x="6.7647%" y="261" width="12.5490%" height="15" fill="rgb(247,143,39)" fg:x="69" fg:w="128"/><text x="7.0147%" y="271.50">arrow_csv::reader::..</text></g><g><title>arrow_csv::reader::Decoder::flush (49 samples, 4.80%)</title><rect x="14.5098%" y="245" width="4.8039%" height="15" fill="rgb(236,97,10)" fg:x="148" fg:w="49"/><text x="14.7598%" y="255.50">arrow_..</text></g><g><title>core::iter::adapters::try_process (47 samples, 4.61%)</title><rect x="14.7059%" y="229" width="4.6078%" height="15" fill="rgb(233,208,19)" fg:x="150" fg:w="47"/><text x="14.9559%" y="239.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 4.61%)</title><rect x="14.7059%" y="213" width="4.6078%" height="15" fill="rgb(216,164,2)" fg:x="150" fg:w="47"/><text x="14.9559%" y="223.50">&lt;allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 4.61%)</title><rect x="14.7059%" y="197" width="4.6078%" height="15" fill="rgb(220,129,5)" fg:x="150" fg:w="47"/><text x="14.9559%" y="207.50">&lt;core..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (47 samples, 4.61%)</title><rect x="14.7059%" y="181" width="4.6078%" height="15" fill="rgb(242,17,10)" fg:x="150" fg:w="47"/><text x="14.9559%" y="191.50">&lt;arro..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::with_capacity (1 samples, 0.10%)</title><rect x="19.2157%" y="165" width="0.0980%" height="15" fill="rgb(242,107,0)" fg:x="196" fg:w="1"/><text x="19.4657%" y="175.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.10%)</title><rect x="19.2157%" y="149" width="0.0980%" height="15" fill="rgb(251,28,31)" fg:x="196" fg:w="1"/><text x="19.4657%" y="159.50"></text></g><g><title>posix_memalign (1 samples, 0.10%)</title><rect x="19.2157%" y="133" width="0.0980%" height="15" fill="rgb(233,223,10)" fg:x="196" fg:w="1"/><text x="19.4657%" y="143.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build (2 samples, 0.20%)</title><rect x="19.3137%" y="261" width="0.1961%" height="15" fill="rgb(215,21,27)" fg:x="197" fg:w="2"/><text x="19.5637%" y="271.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build_decoder (2 samples, 0.20%)</title><rect x="19.3137%" y="245" width="0.1961%" height="15" fill="rgb(232,23,21)" fg:x="197" fg:w="2"/><text x="19.5637%" y="255.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (2 samples, 0.20%)</title><rect x="19.3137%" y="229" width="0.1961%" height="15" fill="rgb(244,5,23)" fg:x="197" fg:w="2"/><text x="19.5637%" y="239.50"></text></g><g><title>cfree (7 samples, 0.69%)</title><rect x="19.5098%" y="261" width="0.6863%" height="15" fill="rgb(226,81,46)" fg:x="199" fg:w="7"/><text x="19.7598%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (8 samples, 0.78%)</title><rect x="20.1961%" y="261" width="0.7843%" height="15" fill="rgb(247,70,30)" fg:x="206" fg:w="8"/><text x="20.4461%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.78%)</title><rect x="20.1961%" y="245" width="0.7843%" height="15" fill="rgb(212,68,19)" fg:x="206" fg:w="8"/><text x="20.4461%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (8 samples, 0.78%)</title><rect x="20.1961%" y="229" width="0.7843%" height="15" fill="rgb(240,187,13)" fg:x="206" fg:w="8"/><text x="20.4461%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.78%)</title><rect x="20.1961%" y="213" width="0.7843%" height="15" fill="rgb(223,113,26)" fg:x="206" fg:w="8"/><text x="20.4461%" y="223.50"></text></g><g><title>cfree (8 samples, 0.78%)</title><rect x="20.1961%" y="197" width="0.7843%" height="15" fill="rgb(206,192,2)" fg:x="206" fg:w="8"/><text x="20.4461%" y="207.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.10%)</title><rect x="22.5490%" y="245" width="0.0980%" height="15" fill="rgb(241,108,4)" fg:x="230" fg:w="1"/><text x="22.7990%" y="255.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.10%)</title><rect x="22.5490%" y="229" width="0.0980%" height="15" fill="rgb(247,173,49)" fg:x="230" fg:w="1"/><text x="22.7990%" y="239.50"></text></g><g><title>posix_memalign (1 samples, 0.10%)</title><rect x="22.5490%" y="213" width="0.0980%" height="15" fill="rgb(224,114,35)" fg:x="230" fg:w="1"/><text x="22.7990%" y="223.50"></text></g><g><title>cfree (14 samples, 1.37%)</title><rect x="22.6471%" y="245" width="1.3725%" height="15" fill="rgb(245,159,27)" fg:x="231" fg:w="14"/><text x="22.8971%" y="255.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (33 samples, 3.24%)</title><rect x="24.0196%" y="245" width="3.2353%" height="15" fill="rgb(245,172,44)" fg:x="245" fg:w="33"/><text x="24.2696%" y="255.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (21 samples, 2.06%)</title><rect x="25.1961%" y="229" width="2.0588%" height="15" fill="rgb(236,23,11)" fg:x="257" fg:w="21"/><text x="25.4461%" y="239.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (4 samples, 0.39%)</title><rect x="28.5294%" y="229" width="0.3922%" height="15" fill="rgb(205,117,38)" fg:x="291" fg:w="4"/><text x="28.7794%" y="239.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.10%)</title><rect x="28.9216%" y="229" width="0.0980%" height="15" fill="rgb(237,72,25)" fg:x="295" fg:w="1"/><text x="29.1716%" y="239.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (5 samples, 0.49%)</title><rect x="29.0196%" y="229" width="0.4902%" height="15" fill="rgb(244,70,9)" fg:x="296" fg:w="5"/><text x="29.2696%" y="239.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (2 samples, 0.20%)</title><rect x="29.3137%" y="213" width="0.1961%" height="15" fill="rgb(217,125,39)" fg:x="299" fg:w="2"/><text x="29.5637%" y="223.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (26 samples, 2.55%)</title><rect x="27.2549%" y="245" width="2.5490%" height="15" fill="rgb(235,36,10)" fg:x="278" fg:w="26"/><text x="27.5049%" y="255.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.29%)</title><rect x="29.5098%" y="229" width="0.2941%" height="15" fill="rgb(251,123,47)" fg:x="301" fg:w="3"/><text x="29.7598%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (9 samples, 0.88%)</title><rect x="30.6863%" y="229" width="0.8824%" height="15" fill="rgb(221,13,13)" fg:x="313" fg:w="9"/><text x="30.9363%" y="239.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (126 samples, 12.35%)</title><rect x="20.9804%" y="261" width="12.3529%" height="15" fill="rgb(238,131,9)" fg:x="214" fg:w="126"/><text x="21.2304%" y="271.50">nemscraper::proces..</text></g><g><title>nemscraper::process::utils::clean_str (36 samples, 3.53%)</title><rect x="29.8039%" y="245" width="3.5294%" height="15" fill="rgb(211,50,8)" fg:x="304" fg:w="36"/><text x="30.0539%" y="255.50">nem..</text></g><g><title>malloc (18 samples, 1.76%)</title><rect x="31.5686%" y="229" width="1.7647%" height="15" fill="rgb(245,182,24)" fg:x="322" fg:w="18"/><text x="31.8186%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (9 samples, 0.88%)</title><rect x="33.7255%" y="181" width="0.8824%" height="15" fill="rgb(242,14,37)" fg:x="344" fg:w="9"/><text x="33.9755%" y="191.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (8 samples, 0.78%)</title><rect x="33.8235%" y="165" width="0.7843%" height="15" fill="rgb(246,228,12)" fg:x="345" fg:w="8"/><text x="34.0735%" y="175.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.39%)</title><rect x="34.2157%" y="149" width="0.3922%" height="15" fill="rgb(213,55,15)" fg:x="349" fg:w="4"/><text x="34.4657%" y="159.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.10%)</title><rect x="34.6078%" y="165" width="0.0980%" height="15" fill="rgb(209,9,3)" fg:x="353" fg:w="1"/><text x="34.8578%" y="175.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.10%)</title><rect x="34.6078%" y="149" width="0.0980%" height="15" fill="rgb(230,59,30)" fg:x="353" fg:w="1"/><text x="34.8578%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (15 samples, 1.47%)</title><rect x="33.3333%" y="213" width="1.4706%" height="15" fill="rgb(209,121,21)" fg:x="340" fg:w="15"/><text x="33.5833%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (15 samples, 1.47%)</title><rect x="33.3333%" y="197" width="1.4706%" height="15" fill="rgb(220,109,13)" fg:x="340" fg:w="15"/><text x="33.5833%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.20%)</title><rect x="34.6078%" y="181" width="0.1961%" height="15" fill="rgb(232,18,1)" fg:x="353" fg:w="2"/><text x="34.8578%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="34.7059%" y="165" width="0.0980%" height="15" fill="rgb(215,41,42)" fg:x="354" fg:w="1"/><text x="34.9559%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="34.7059%" y="149" width="0.0980%" height="15" fill="rgb(224,123,36)" fg:x="354" fg:w="1"/><text x="34.9559%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="34.7059%" y="133" width="0.0980%" height="15" fill="rgb(240,125,3)" fg:x="354" fg:w="1"/><text x="34.9559%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.10%)</title><rect x="34.7059%" y="117" width="0.0980%" height="15" fill="rgb(205,98,50)" fg:x="354" fg:w="1"/><text x="34.9559%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.10%)</title><rect x="34.7059%" y="101" width="0.0980%" height="15" fill="rgb(205,185,37)" fg:x="354" fg:w="1"/><text x="34.9559%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.10%)</title><rect x="34.7059%" y="85" width="0.0980%" height="15" fill="rgb(238,207,15)" fg:x="354" fg:w="1"/><text x="34.9559%" y="95.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (51 samples, 5.00%)</title><rect x="36.6667%" y="197" width="5.0000%" height="15" fill="rgb(213,199,42)" fg:x="374" fg:w="51"/><text x="36.9167%" y="207.50">&lt;parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (29 samples, 2.84%)</title><rect x="38.8235%" y="181" width="2.8431%" height="15" fill="rgb(235,201,11)" fg:x="396" fg:w="29"/><text x="39.0735%" y="191.50">pa..</text></g><g><title>ahash::random_state::RandomState::hash_one (5 samples, 0.49%)</title><rect x="41.1765%" y="165" width="0.4902%" height="15" fill="rgb(207,46,11)" fg:x="420" fg:w="5"/><text x="41.4265%" y="175.50"></text></g><g><title>&lt;parquet::encodings::encoding::PlainEncoder&lt;T&gt; as parquet::encodings::encoding::Encoder&lt;T&gt;&gt;::put (2 samples, 0.20%)</title><rect x="42.4510%" y="165" width="0.1961%" height="15" fill="rgb(241,35,35)" fg:x="433" fg:w="2"/><text x="42.7010%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.20%)</title><rect x="42.4510%" y="149" width="0.1961%" height="15" fill="rgb(243,32,47)" fg:x="433" fg:w="2"/><text x="42.7010%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.20%)</title><rect x="42.4510%" y="133" width="0.1961%" height="15" fill="rgb(247,202,23)" fg:x="433" fg:w="2"/><text x="42.7010%" y="143.50"></text></g><g><title>__libc_realloc (2 samples, 0.20%)</title><rect x="42.4510%" y="117" width="0.1961%" height="15" fill="rgb(219,102,11)" fg:x="433" fg:w="2"/><text x="42.7010%" y="127.50"></text></g><g><title>parquet::column::writer::compare_greater (13 samples, 1.27%)</title><rect x="42.6471%" y="165" width="1.2745%" height="15" fill="rgb(243,110,44)" fg:x="435" fg:w="13"/><text x="42.8971%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (51 samples, 5.00%)</title><rect x="41.6667%" y="197" width="5.0000%" height="15" fill="rgb(222,74,54)" fg:x="425" fg:w="51"/><text x="41.9167%" y="207.50">&lt;parqu..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (48 samples, 4.71%)</title><rect x="41.9608%" y="181" width="4.7059%" height="15" fill="rgb(216,99,12)" fg:x="428" fg:w="48"/><text x="42.2108%" y="191.50">parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (28 samples, 2.75%)</title><rect x="43.9216%" y="165" width="2.7451%" height="15" fill="rgb(226,22,26)" fg:x="448" fg:w="28"/><text x="44.1716%" y="175.50">pa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.39%)</title><rect x="46.2745%" y="149" width="0.3922%" height="15" fill="rgb(217,163,10)" fg:x="472" fg:w="4"/><text x="46.5245%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (7 samples, 0.69%)</title><rect x="46.6667%" y="181" width="0.6863%" height="15" fill="rgb(213,25,53)" fg:x="476" fg:w="7"/><text x="46.9167%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.39%)</title><rect x="46.9608%" y="165" width="0.3922%" height="15" fill="rgb(252,105,26)" fg:x="479" fg:w="4"/><text x="47.2108%" y="175.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (4 samples, 0.39%)</title><rect x="46.9608%" y="149" width="0.3922%" height="15" fill="rgb(220,39,43)" fg:x="479" fg:w="4"/><text x="47.2108%" y="159.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.29%)</title><rect x="47.3529%" y="149" width="0.2941%" height="15" fill="rgb(229,68,48)" fg:x="483" fg:w="3"/><text x="47.6029%" y="159.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.29%)</title><rect x="47.3529%" y="133" width="0.2941%" height="15" fill="rgb(252,8,32)" fg:x="483" fg:w="3"/><text x="47.6029%" y="143.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (5 samples, 0.49%)</title><rect x="47.3529%" y="181" width="0.4902%" height="15" fill="rgb(223,20,43)" fg:x="483" fg:w="5"/><text x="47.6029%" y="191.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (5 samples, 0.49%)</title><rect x="47.3529%" y="165" width="0.4902%" height="15" fill="rgb(229,81,49)" fg:x="483" fg:w="5"/><text x="47.6029%" y="175.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (2 samples, 0.20%)</title><rect x="47.6471%" y="149" width="0.1961%" height="15" fill="rgb(236,28,36)" fg:x="486" fg:w="2"/><text x="47.8971%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (5 samples, 0.49%)</title><rect x="53.0392%" y="133" width="0.4902%" height="15" fill="rgb(249,185,26)" fg:x="541" fg:w="5"/><text x="53.2892%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (46 samples, 4.51%)</title><rect x="49.2157%" y="149" width="4.5098%" height="15" fill="rgb(249,174,33)" fg:x="502" fg:w="46"/><text x="49.4657%" y="159.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.20%)</title><rect x="53.5294%" y="133" width="0.1961%" height="15" fill="rgb(233,201,37)" fg:x="546" fg:w="2"/><text x="53.7794%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (60 samples, 5.88%)</title><rect x="48.0392%" y="165" width="5.8824%" height="15" fill="rgb(221,78,26)" fg:x="490" fg:w="60"/><text x="48.2892%" y="175.50">brotli:..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.20%)</title><rect x="53.7255%" y="149" width="0.1961%" height="15" fill="rgb(250,127,30)" fg:x="548" fg:w="2"/><text x="53.9755%" y="159.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (11 samples, 1.08%)</title><rect x="53.9216%" y="165" width="1.0784%" height="15" fill="rgb(230,49,44)" fg:x="550" fg:w="11"/><text x="54.1716%" y="175.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (11 samples, 1.08%)</title><rect x="53.9216%" y="149" width="1.0784%" height="15" fill="rgb(229,67,23)" fg:x="550" fg:w="11"/><text x="54.1716%" y="159.50"></text></g><g><title>calloc (1 samples, 0.10%)</title><rect x="54.9020%" y="133" width="0.0980%" height="15" fill="rgb(249,83,47)" fg:x="560" fg:w="1"/><text x="55.1520%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.10%)</title><rect x="60.4902%" y="117" width="0.0980%" height="15" fill="rgb(215,43,3)" fg:x="617" fg:w="1"/><text x="60.7402%" y="127.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (3 samples, 0.29%)</title><rect x="60.5882%" y="117" width="0.2941%" height="15" fill="rgb(238,154,13)" fg:x="618" fg:w="3"/><text x="60.8382%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (54 samples, 5.29%)</title><rect x="56.1765%" y="133" width="5.2941%" height="15" fill="rgb(219,56,2)" fg:x="573" fg:w="54"/><text x="56.4265%" y="143.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (6 samples, 0.59%)</title><rect x="60.8824%" y="117" width="0.5882%" height="15" fill="rgb(233,0,4)" fg:x="621" fg:w="6"/><text x="61.1324%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (68 samples, 6.67%)</title><rect x="55.0000%" y="149" width="6.6667%" height="15" fill="rgb(235,30,7)" fg:x="561" fg:w="68"/><text x="55.2500%" y="159.50">brotli::e..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.20%)</title><rect x="61.4706%" y="133" width="0.1961%" height="15" fill="rgb(250,79,13)" fg:x="627" fg:w="2"/><text x="61.7206%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="61.9608%" y="85" width="0.0980%" height="15" fill="rgb(211,146,34)" fg:x="632" fg:w="1"/><text x="62.2108%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.10%)</title><rect x="61.9608%" y="69" width="0.0980%" height="15" fill="rgb(228,22,38)" fg:x="632" fg:w="1"/><text x="62.2108%" y="79.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.20%)</title><rect x="61.9608%" y="101" width="0.1961%" height="15" fill="rgb(235,168,5)" fg:x="632" fg:w="2"/><text x="62.2108%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.10%)</title><rect x="62.0588%" y="85" width="0.0980%" height="15" fill="rgb(221,155,16)" fg:x="633" fg:w="1"/><text x="62.3088%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (2 samples, 0.20%)</title><rect x="62.1569%" y="101" width="0.1961%" height="15" fill="rgb(215,215,53)" fg:x="634" fg:w="2"/><text x="62.4069%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (9 samples, 0.88%)</title><rect x="61.9608%" y="133" width="0.8824%" height="15" fill="rgb(223,4,10)" fg:x="632" fg:w="9"/><text x="62.2108%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (9 samples, 0.88%)</title><rect x="61.9608%" y="117" width="0.8824%" height="15" fill="rgb(234,103,6)" fg:x="632" fg:w="9"/><text x="62.2108%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (5 samples, 0.49%)</title><rect x="62.3529%" y="101" width="0.4902%" height="15" fill="rgb(227,97,0)" fg:x="636" fg:w="5"/><text x="62.6029%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.10%)</title><rect x="62.7451%" y="85" width="0.0980%" height="15" fill="rgb(234,150,53)" fg:x="640" fg:w="1"/><text x="62.9951%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (2 samples, 0.20%)</title><rect x="62.8431%" y="133" width="0.1961%" height="15" fill="rgb(228,201,54)" fg:x="641" fg:w="2"/><text x="63.0931%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (8 samples, 0.78%)</title><rect x="63.0392%" y="133" width="0.7843%" height="15" fill="rgb(222,22,37)" fg:x="643" fg:w="8"/><text x="63.2892%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (5 samples, 0.49%)</title><rect x="63.8235%" y="133" width="0.4902%" height="15" fill="rgb(237,53,32)" fg:x="651" fg:w="5"/><text x="64.0735%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (28 samples, 2.75%)</title><rect x="61.6667%" y="149" width="2.7451%" height="15" fill="rgb(233,25,53)" fg:x="629" fg:w="28"/><text x="61.9167%" y="159.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.10%)</title><rect x="64.3137%" y="133" width="0.0980%" height="15" fill="rgb(210,40,34)" fg:x="656" fg:w="1"/><text x="64.5637%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (12 samples, 1.18%)</title><rect x="64.4118%" y="149" width="1.1765%" height="15" fill="rgb(241,220,44)" fg:x="657" fg:w="12"/><text x="64.6618%" y="159.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.10%)</title><rect x="66.0784%" y="133" width="0.0980%" height="15" fill="rgb(235,28,35)" fg:x="674" fg:w="1"/><text x="66.3284%" y="143.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.10%)</title><rect x="66.0784%" y="117" width="0.0980%" height="15" fill="rgb(210,56,17)" fg:x="674" fg:w="1"/><text x="66.3284%" y="127.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (7 samples, 0.69%)</title><rect x="65.5882%" y="149" width="0.6863%" height="15" fill="rgb(224,130,29)" fg:x="669" fg:w="7"/><text x="65.8382%" y="159.50"></text></g><g><title>calloc (1 samples, 0.10%)</title><rect x="66.1765%" y="133" width="0.0980%" height="15" fill="rgb(235,212,8)" fg:x="675" fg:w="1"/><text x="66.4265%" y="143.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (193 samples, 18.92%)</title><rect x="47.8431%" y="181" width="18.9216%" height="15" fill="rgb(223,33,50)" fg:x="488" fg:w="193"/><text x="48.0931%" y="191.50">&lt;parquet::compression::brotli_..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (120 samples, 11.76%)</title><rect x="55.0000%" y="165" width="11.7647%" height="15" fill="rgb(219,149,13)" fg:x="561" fg:w="120"/><text x="55.2500%" y="175.50">brotli::enc::writ..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (5 samples, 0.49%)</title><rect x="66.2745%" y="149" width="0.4902%" height="15" fill="rgb(250,156,29)" fg:x="676" fg:w="5"/><text x="66.5245%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (5 samples, 0.49%)</title><rect x="66.2745%" y="133" width="0.4902%" height="15" fill="rgb(216,193,19)" fg:x="676" fg:w="5"/><text x="66.5245%" y="143.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="66.7647%" y="181" width="0.0980%" height="15" fill="rgb(216,135,14)" fg:x="681" fg:w="1"/><text x="67.0147%" y="191.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="66.8627%" y="181" width="0.0980%" height="15" fill="rgb(241,47,5)" fg:x="682" fg:w="1"/><text x="67.1127%" y="191.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (4 samples, 0.39%)</title><rect x="66.9608%" y="181" width="0.3922%" height="15" fill="rgb(233,42,35)" fg:x="683" fg:w="4"/><text x="67.2108%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (212 samples, 20.78%)</title><rect x="46.6667%" y="197" width="20.7843%" height="15" fill="rgb(231,13,6)" fg:x="476" fg:w="212"/><text x="46.9167%" y="207.50">parquet::column::writer::GenericC..</text></g><g><title>parquet::file::metadata::ColumnIndexBuilder::append (1 samples, 0.10%)</title><rect x="67.3529%" y="181" width="0.0980%" height="15" fill="rgb(207,181,40)" fg:x="687" fg:w="1"/><text x="67.6029%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_dict_page (1 samples, 0.10%)</title><rect x="67.4510%" y="181" width="0.0980%" height="15" fill="rgb(254,173,49)" fg:x="688" fg:w="1"/><text x="67.7010%" y="191.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="67.4510%" y="165" width="0.0980%" height="15" fill="rgb(221,1,38)" fg:x="688" fg:w="1"/><text x="67.7010%" y="175.50"></text></g><g><title>__default_morecore (1 samples, 0.10%)</title><rect x="67.4510%" y="149" width="0.0980%" height="15" fill="rgb(206,124,46)" fg:x="688" fg:w="1"/><text x="67.7010%" y="159.50"></text></g><g><title>__sbrk (1 samples, 0.10%)</title><rect x="67.4510%" y="133" width="0.0980%" height="15" fill="rgb(249,21,11)" fg:x="688" fg:w="1"/><text x="67.7010%" y="143.50"></text></g><g><title>brk (1 samples, 0.10%)</title><rect x="67.4510%" y="117" width="0.0980%" height="15" fill="rgb(222,201,40)" fg:x="688" fg:w="1"/><text x="67.7010%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (47 samples, 4.61%)</title><rect x="68.0392%" y="149" width="4.6078%" height="15" fill="rgb(235,61,29)" fg:x="694" fg:w="47"/><text x="68.2892%" y="159.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="72.5490%" y="133" width="0.0980%" height="15" fill="rgb(219,207,3)" fg:x="740" fg:w="1"/><text x="72.7990%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (54 samples, 5.29%)</title><rect x="67.6471%" y="165" width="5.2941%" height="15" fill="rgb(222,56,46)" fg:x="690" fg:w="54"/><text x="67.8971%" y="175.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.29%)</title><rect x="72.6471%" y="149" width="0.2941%" height="15" fill="rgb(239,76,54)" fg:x="741" fg:w="3"/><text x="72.8971%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.10%)</title><rect x="73.1373%" y="101" width="0.0980%" height="15" fill="rgb(231,124,27)" fg:x="746" fg:w="1"/><text x="73.3873%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.10%)</title><rect x="73.1373%" y="85" width="0.0980%" height="15" fill="rgb(249,195,6)" fg:x="746" fg:w="1"/><text x="73.3873%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.20%)</title><rect x="73.1373%" y="133" width="0.1961%" height="15" fill="rgb(237,174,47)" fg:x="746" fg:w="2"/><text x="73.3873%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.20%)</title><rect x="73.1373%" y="117" width="0.1961%" height="15" fill="rgb(206,201,31)" fg:x="746" fg:w="2"/><text x="73.3873%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="73.2353%" y="101" width="0.0980%" height="15" fill="rgb(231,57,52)" fg:x="747" fg:w="1"/><text x="73.4853%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.69%)</title><rect x="73.3333%" y="133" width="0.6863%" height="15" fill="rgb(248,177,22)" fg:x="748" fg:w="7"/><text x="73.5833%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (12 samples, 1.18%)</title><rect x="72.9412%" y="149" width="1.1765%" height="15" fill="rgb(215,211,37)" fg:x="744" fg:w="12"/><text x="73.1912%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.10%)</title><rect x="74.0196%" y="133" width="0.0980%" height="15" fill="rgb(241,128,51)" fg:x="755" fg:w="1"/><text x="74.2696%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (420 samples, 41.18%)</title><rect x="33.3333%" y="229" width="41.1765%" height="15" fill="rgb(227,165,31)" fg:x="340" fg:w="420"/><text x="33.5833%" y="239.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (405 samples, 39.71%)</title><rect x="34.8039%" y="213" width="39.7059%" height="15" fill="rgb(228,167,24)" fg:x="355" fg:w="405"/><text x="35.0539%" y="223.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_inte..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (72 samples, 7.06%)</title><rect x="67.4510%" y="197" width="7.0588%" height="15" fill="rgb(228,143,12)" fg:x="688" fg:w="72"/><text x="67.7010%" y="207.50">parquet::..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (71 samples, 6.96%)</title><rect x="67.5490%" y="181" width="6.9608%" height="15" fill="rgb(249,149,8)" fg:x="689" fg:w="71"/><text x="67.7990%" y="191.50">&lt;parquet:..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (16 samples, 1.57%)</title><rect x="72.9412%" y="165" width="1.5686%" height="15" fill="rgb(243,35,44)" fg:x="744" fg:w="16"/><text x="73.1912%" y="175.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (4 samples, 0.39%)</title><rect x="74.1176%" y="149" width="0.3922%" height="15" fill="rgb(246,89,9)" fg:x="756" fg:w="4"/><text x="74.3676%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (421 samples, 41.27%)</title><rect x="33.3333%" y="261" width="41.2745%" height="15" fill="rgb(233,213,13)" fg:x="340" fg:w="421"/><text x="33.5833%" y="271.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (421 samples, 41.27%)</title><rect x="33.3333%" y="245" width="41.2745%" height="15" fill="rgb(233,141,41)" fg:x="340" fg:w="421"/><text x="33.5833%" y="255.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (1 samples, 0.10%)</title><rect x="74.5098%" y="229" width="0.0980%" height="15" fill="rgb(239,167,4)" fg:x="760" fg:w="1"/><text x="74.7598%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (1 samples, 0.10%)</title><rect x="74.5098%" y="213" width="0.0980%" height="15" fill="rgb(209,217,16)" fg:x="760" fg:w="1"/><text x="74.7598%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="74.5098%" y="197" width="0.0980%" height="15" fill="rgb(219,88,35)" fg:x="760" fg:w="1"/><text x="74.7598%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="74.5098%" y="181" width="0.0980%" height="15" fill="rgb(220,193,23)" fg:x="760" fg:w="1"/><text x="74.7598%" y="191.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="74.5098%" y="165" width="0.0980%" height="15" fill="rgb(230,90,52)" fg:x="760" fg:w="1"/><text x="74.7598%" y="175.50"></text></g><g><title>parquet::file::properties::WriterProperties::builder (1 samples, 0.10%)</title><rect x="74.6078%" y="261" width="0.0980%" height="15" fill="rgb(252,106,19)" fg:x="761" fg:w="1"/><text x="74.8578%" y="271.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (3 samples, 0.29%)</title><rect x="74.7059%" y="213" width="0.2941%" height="15" fill="rgb(206,74,20)" fg:x="762" fg:w="3"/><text x="74.9559%" y="223.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (3 samples, 0.29%)</title><rect x="74.7059%" y="197" width="0.2941%" height="15" fill="rgb(230,138,44)" fg:x="762" fg:w="3"/><text x="74.9559%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.29%)</title><rect x="74.7059%" y="181" width="0.2941%" height="15" fill="rgb(235,182,43)" fg:x="762" fg:w="3"/><text x="74.9559%" y="191.50"></text></g><g><title>write (3 samples, 0.29%)</title><rect x="74.7059%" y="165" width="0.2941%" height="15" fill="rgb(242,16,51)" fg:x="762" fg:w="3"/><text x="74.9559%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (703 samples, 68.92%)</title><rect x="6.1765%" y="277" width="68.9216%" height="15" fill="rgb(248,9,4)" fg:x="63" fg:w="703"/><text x="6.4265%" y="287.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (4 samples, 0.39%)</title><rect x="74.7059%" y="261" width="0.3922%" height="15" fill="rgb(210,31,22)" fg:x="762" fg:w="4"/><text x="74.9559%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (4 samples, 0.39%)</title><rect x="74.7059%" y="245" width="0.3922%" height="15" fill="rgb(239,54,39)" fg:x="762" fg:w="4"/><text x="74.9559%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.39%)</title><rect x="74.7059%" y="229" width="0.3922%" height="15" fill="rgb(230,99,41)" fg:x="762" fg:w="4"/><text x="74.9559%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.10%)</title><rect x="75.0000%" y="213" width="0.0980%" height="15" fill="rgb(253,106,12)" fg:x="765" fg:w="1"/><text x="75.2500%" y="223.50"></text></g><g><title>tracing_subscriber::layer::context::Context&lt;S&gt;::event_scope (1 samples, 0.10%)</title><rect x="75.0000%" y="197" width="0.0980%" height="15" fill="rgb(213,46,41)" fg:x="765" fg:w="1"/><text x="75.2500%" y="207.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::current_span (1 samples, 0.10%)</title><rect x="75.0000%" y="181" width="0.0980%" height="15" fill="rgb(215,133,35)" fg:x="765" fg:w="1"/><text x="75.2500%" y="191.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (1 samples, 0.10%)</title><rect x="75.0000%" y="165" width="0.0980%" height="15" fill="rgb(213,28,5)" fg:x="765" fg:w="1"/><text x="75.2500%" y="175.50"></text></g><g><title>core::slice::memchr::memchr_aligned (12 samples, 1.18%)</title><rect x="76.5686%" y="261" width="1.1765%" height="15" fill="rgb(215,77,49)" fg:x="781" fg:w="12"/><text x="76.8186%" y="271.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (784 samples, 76.86%)</title><rect x="1.6667%" y="325" width="76.8627%" height="15" fill="rgb(248,100,22)" fg:x="17" fg:w="784"/><text x="1.9167%" y="335.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (777 samples, 76.18%)</title><rect x="2.3529%" y="309" width="76.1765%" height="15" fill="rgb(208,67,9)" fg:x="24" fg:w="777"/><text x="2.6029%" y="319.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (777 samples, 76.18%)</title><rect x="2.3529%" y="293" width="76.1765%" height="15" fill="rgb(219,133,21)" fg:x="24" fg:w="777"/><text x="2.6029%" y="303.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (35 samples, 3.43%)</title><rect x="75.0980%" y="277" width="3.4314%" height="15" fill="rgb(246,46,29)" fg:x="766" fg:w="35"/><text x="75.3480%" y="287.50">std..</text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.78%)</title><rect x="77.7451%" y="261" width="0.7843%" height="15" fill="rgb(246,185,52)" fg:x="793" fg:w="8"/><text x="77.9951%" y="271.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (3 samples, 0.29%)</title><rect x="78.5294%" y="293" width="0.2941%" height="15" fill="rgb(252,136,11)" fg:x="801" fg:w="3"/><text x="78.7794%" y="303.50"></text></g><g><title>malloc (3 samples, 0.29%)</title><rect x="78.5294%" y="277" width="0.2941%" height="15" fill="rgb(219,138,53)" fg:x="801" fg:w="3"/><text x="78.7794%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.10%)</title><rect x="78.8235%" y="165" width="0.0980%" height="15" fill="rgb(211,51,23)" fg:x="804" fg:w="1"/><text x="79.0735%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="78.8235%" y="149" width="0.0980%" height="15" fill="rgb(247,221,28)" fg:x="804" fg:w="1"/><text x="79.0735%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="78.8235%" y="133" width="0.0980%" height="15" fill="rgb(251,222,45)" fg:x="804" fg:w="1"/><text x="79.0735%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="78.8235%" y="117" width="0.0980%" height="15" fill="rgb(217,162,53)" fg:x="804" fg:w="1"/><text x="79.0735%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="78.8235%" y="101" width="0.0980%" height="15" fill="rgb(229,93,14)" fg:x="804" fg:w="1"/><text x="79.0735%" y="111.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.20%)</title><rect x="78.8235%" y="277" width="0.1961%" height="15" fill="rgb(209,67,49)" fg:x="804" fg:w="2"/><text x="79.0735%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.20%)</title><rect x="78.8235%" y="261" width="0.1961%" height="15" fill="rgb(213,87,29)" fg:x="804" fg:w="2"/><text x="79.0735%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.20%)</title><rect x="78.8235%" y="245" width="0.1961%" height="15" fill="rgb(205,151,52)" fg:x="804" fg:w="2"/><text x="79.0735%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.20%)</title><rect x="78.8235%" y="229" width="0.1961%" height="15" fill="rgb(253,215,39)" fg:x="804" fg:w="2"/><text x="79.0735%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.20%)</title><rect x="78.8235%" y="213" width="0.1961%" height="15" fill="rgb(221,220,41)" fg:x="804" fg:w="2"/><text x="79.0735%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.20%)</title><rect x="78.8235%" y="197" width="0.1961%" height="15" fill="rgb(218,133,21)" fg:x="804" fg:w="2"/><text x="79.0735%" y="207.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.20%)</title><rect x="78.8235%" y="181" width="0.1961%" height="15" fill="rgb(221,193,43)" fg:x="804" fg:w="2"/><text x="79.0735%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.10%)</title><rect x="78.9216%" y="165" width="0.0980%" height="15" fill="rgb(240,128,52)" fg:x="805" fg:w="1"/><text x="79.1716%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="78.9216%" y="149" width="0.0980%" height="15" fill="rgb(253,114,12)" fg:x="805" fg:w="1"/><text x="79.1716%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="78.9216%" y="133" width="0.0980%" height="15" fill="rgb(215,223,47)" fg:x="805" fg:w="1"/><text x="79.1716%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="78.9216%" y="117" width="0.0980%" height="15" fill="rgb(248,225,23)" fg:x="805" fg:w="1"/><text x="79.1716%" y="127.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (3 samples, 0.29%)</title><rect x="78.8235%" y="293" width="0.2941%" height="15" fill="rgb(250,108,0)" fg:x="804" fg:w="3"/><text x="79.0735%" y="303.50"></text></g><g><title>std::sys::fs::unix::rename (1 samples, 0.10%)</title><rect x="79.0196%" y="277" width="0.0980%" height="15" fill="rgb(228,208,7)" fg:x="806" fg:w="1"/><text x="79.2696%" y="287.50"></text></g><g><title>rename (1 samples, 0.10%)</title><rect x="79.0196%" y="261" width="0.0980%" height="15" fill="rgb(244,45,10)" fg:x="806" fg:w="1"/><text x="79.2696%" y="271.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (4 samples, 0.39%)</title><rect x="79.2157%" y="261" width="0.3922%" height="15" fill="rgb(207,125,25)" fg:x="808" fg:w="4"/><text x="79.4657%" y="271.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (4 samples, 0.39%)</title><rect x="79.2157%" y="245" width="0.3922%" height="15" fill="rgb(210,195,18)" fg:x="808" fg:w="4"/><text x="79.4657%" y="255.50"></text></g><g><title>csv_core::reader::Reader::read_record (4 samples, 0.39%)</title><rect x="79.2157%" y="229" width="0.3922%" height="15" fill="rgb(249,80,12)" fg:x="808" fg:w="4"/><text x="79.4657%" y="239.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.10%)</title><rect x="79.6078%" y="245" width="0.0980%" height="15" fill="rgb(221,65,9)" fg:x="812" fg:w="1"/><text x="79.8578%" y="255.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (11 samples, 1.08%)</title><rect x="79.2157%" y="277" width="1.0784%" height="15" fill="rgb(235,49,36)" fg:x="808" fg:w="11"/><text x="79.4657%" y="287.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (7 samples, 0.69%)</title><rect x="79.6078%" y="261" width="0.6863%" height="15" fill="rgb(225,32,20)" fg:x="812" fg:w="7"/><text x="79.8578%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.59%)</title><rect x="79.7059%" y="245" width="0.5882%" height="15" fill="rgb(215,141,46)" fg:x="813" fg:w="6"/><text x="79.9559%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.59%)</title><rect x="79.7059%" y="229" width="0.5882%" height="15" fill="rgb(250,160,47)" fg:x="813" fg:w="6"/><text x="79.9559%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.59%)</title><rect x="79.7059%" y="213" width="0.5882%" height="15" fill="rgb(216,222,40)" fg:x="813" fg:w="6"/><text x="79.9559%" y="223.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (6 samples, 0.59%)</title><rect x="79.7059%" y="197" width="0.5882%" height="15" fill="rgb(234,217,39)" fg:x="813" fg:w="6"/><text x="79.9559%" y="207.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (4 samples, 0.39%)</title><rect x="79.9020%" y="181" width="0.3922%" height="15" fill="rgb(207,178,40)" fg:x="815" fg:w="4"/><text x="80.1520%" y="191.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (5 samples, 0.49%)</title><rect x="80.4902%" y="261" width="0.4902%" height="15" fill="rgb(221,136,13)" fg:x="821" fg:w="5"/><text x="80.7402%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (3 samples, 0.29%)</title><rect x="80.6863%" y="245" width="0.2941%" height="15" fill="rgb(249,199,10)" fg:x="823" fg:w="3"/><text x="80.9363%" y="255.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.10%)</title><rect x="80.9804%" y="261" width="0.0980%" height="15" fill="rgb(249,222,13)" fg:x="826" fg:w="1"/><text x="81.2304%" y="271.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (10 samples, 0.98%)</title><rect x="80.2941%" y="277" width="0.9804%" height="15" fill="rgb(244,185,38)" fg:x="819" fg:w="10"/><text x="80.5441%" y="287.50"></text></g><g><title>nemscraper::process::utils::clean_str (2 samples, 0.20%)</title><rect x="81.0784%" y="261" width="0.1961%" height="15" fill="rgb(236,202,9)" fg:x="827" fg:w="2"/><text x="81.3284%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (2 samples, 0.20%)</title><rect x="81.2745%" y="229" width="0.1961%" height="15" fill="rgb(250,229,37)" fg:x="829" fg:w="2"/><text x="81.5245%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.20%)</title><rect x="81.2745%" y="213" width="0.1961%" height="15" fill="rgb(206,174,23)" fg:x="829" fg:w="2"/><text x="81.5245%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.10%)</title><rect x="81.3725%" y="197" width="0.0980%" height="15" fill="rgb(211,33,43)" fg:x="830" fg:w="1"/><text x="81.6225%" y="207.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.10%)</title><rect x="81.3725%" y="181" width="0.0980%" height="15" fill="rgb(245,58,50)" fg:x="830" fg:w="1"/><text x="81.6225%" y="191.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.10%)</title><rect x="81.3725%" y="165" width="0.0980%" height="15" fill="rgb(244,68,36)" fg:x="830" fg:w="1"/><text x="81.6225%" y="175.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.39%)</title><rect x="81.6667%" y="213" width="0.3922%" height="15" fill="rgb(232,229,15)" fg:x="833" fg:w="4"/><text x="81.9167%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.10%)</title><rect x="81.9608%" y="197" width="0.0980%" height="15" fill="rgb(254,30,23)" fg:x="836" fg:w="1"/><text x="82.2108%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (2 samples, 0.20%)</title><rect x="82.0588%" y="213" width="0.1961%" height="15" fill="rgb(235,160,14)" fg:x="837" fg:w="2"/><text x="82.3088%" y="223.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (2 samples, 0.20%)</title><rect x="82.0588%" y="197" width="0.1961%" height="15" fill="rgb(212,155,44)" fg:x="837" fg:w="2"/><text x="82.3088%" y="207.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.20%)</title><rect x="82.0588%" y="181" width="0.1961%" height="15" fill="rgb(226,2,50)" fg:x="837" fg:w="2"/><text x="82.3088%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="82.2549%" y="181" width="0.0980%" height="15" fill="rgb(234,177,6)" fg:x="839" fg:w="1"/><text x="82.5049%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="82.2549%" y="165" width="0.0980%" height="15" fill="rgb(217,24,9)" fg:x="839" fg:w="1"/><text x="82.5049%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.10%)</title><rect x="82.2549%" y="149" width="0.0980%" height="15" fill="rgb(220,13,46)" fg:x="839" fg:w="1"/><text x="82.5049%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 0.49%)</title><rect x="82.3529%" y="165" width="0.4902%" height="15" fill="rgb(239,221,27)" fg:x="840" fg:w="5"/><text x="82.6029%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.39%)</title><rect x="82.4510%" y="149" width="0.3922%" height="15" fill="rgb(222,198,25)" fg:x="841" fg:w="4"/><text x="82.7010%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.20%)</title><rect x="82.8431%" y="165" width="0.1961%" height="15" fill="rgb(211,99,13)" fg:x="845" fg:w="2"/><text x="83.0931%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.20%)</title><rect x="83.0392%" y="165" width="0.1961%" height="15" fill="rgb(232,111,31)" fg:x="847" fg:w="2"/><text x="83.2892%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (11 samples, 1.08%)</title><rect x="82.2549%" y="213" width="1.0784%" height="15" fill="rgb(245,82,37)" fg:x="839" fg:w="11"/><text x="82.5049%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (11 samples, 1.08%)</title><rect x="82.2549%" y="197" width="1.0784%" height="15" fill="rgb(227,149,46)" fg:x="839" fg:w="11"/><text x="82.5049%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (10 samples, 0.98%)</title><rect x="82.3529%" y="181" width="0.9804%" height="15" fill="rgb(218,36,50)" fg:x="840" fg:w="10"/><text x="82.6029%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.10%)</title><rect x="83.2353%" y="165" width="0.0980%" height="15" fill="rgb(226,80,48)" fg:x="849" fg:w="1"/><text x="83.4853%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.10%)</title><rect x="83.2353%" y="149" width="0.0980%" height="15" fill="rgb(238,224,15)" fg:x="849" fg:w="1"/><text x="83.4853%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.20%)</title><rect x="83.6275%" y="165" width="0.1961%" height="15" fill="rgb(241,136,10)" fg:x="853" fg:w="2"/><text x="83.8775%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (49 samples, 4.80%)</title><rect x="79.1176%" y="293" width="4.8039%" height="15" fill="rgb(208,32,45)" fg:x="807" fg:w="49"/><text x="79.3676%" y="303.50">nemscr..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (27 samples, 2.65%)</title><rect x="81.2745%" y="277" width="2.6471%" height="15" fill="rgb(207,135,9)" fg:x="829" fg:w="27"/><text x="81.5245%" y="287.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (27 samples, 2.65%)</title><rect x="81.2745%" y="261" width="2.6471%" height="15" fill="rgb(206,86,44)" fg:x="829" fg:w="27"/><text x="81.5245%" y="271.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (27 samples, 2.65%)</title><rect x="81.2745%" y="245" width="2.6471%" height="15" fill="rgb(245,177,15)" fg:x="829" fg:w="27"/><text x="81.5245%" y="255.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (25 samples, 2.45%)</title><rect x="81.4706%" y="229" width="2.4510%" height="15" fill="rgb(206,64,50)" fg:x="831" fg:w="25"/><text x="81.7206%" y="239.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (6 samples, 0.59%)</title><rect x="83.3333%" y="213" width="0.5882%" height="15" fill="rgb(234,36,40)" fg:x="850" fg:w="6"/><text x="83.5833%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.59%)</title><rect x="83.3333%" y="197" width="0.5882%" height="15" fill="rgb(213,64,8)" fg:x="850" fg:w="6"/><text x="83.5833%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 0.49%)</title><rect x="83.4314%" y="181" width="0.4902%" height="15" fill="rgb(210,75,36)" fg:x="851" fg:w="5"/><text x="83.6814%" y="191.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.10%)</title><rect x="83.8235%" y="165" width="0.0980%" height="15" fill="rgb(229,88,21)" fg:x="855" fg:w="1"/><text x="84.0735%" y="175.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (58 samples, 5.69%)</title><rect x="78.5294%" y="325" width="5.6863%" height="15" fill="rgb(252,204,47)" fg:x="801" fg:w="58"/><text x="78.7794%" y="335.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (58 samples, 5.69%)</title><rect x="78.5294%" y="309" width="5.6863%" height="15" fill="rgb(208,77,27)" fg:x="801" fg:w="58"/><text x="78.7794%" y="319.50">nemscra..</text></g><g><title>std::io::append_to_string (3 samples, 0.29%)</title><rect x="83.9216%" y="293" width="0.2941%" height="15" fill="rgb(221,76,26)" fg:x="856" fg:w="3"/><text x="84.1716%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (3 samples, 0.29%)</title><rect x="84.9020%" y="261" width="0.2941%" height="15" fill="rgb(225,139,18)" fg:x="866" fg:w="3"/><text x="85.1520%" y="271.50"></text></g><g><title>crc32fast::Hasher::update (10 samples, 0.98%)</title><rect x="84.8039%" y="293" width="0.9804%" height="15" fill="rgb(230,137,11)" fg:x="865" fg:w="10"/><text x="85.0539%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (10 samples, 0.98%)</title><rect x="84.8039%" y="277" width="0.9804%" height="15" fill="rgb(212,28,1)" fg:x="865" fg:w="10"/><text x="85.0539%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (6 samples, 0.59%)</title><rect x="85.1961%" y="261" width="0.5882%" height="15" fill="rgb(248,164,17)" fg:x="869" fg:w="6"/><text x="85.4461%" y="271.50"></text></g><g><title>zlib_rs::adler32::avx2::adler32_avx2_help (1 samples, 0.10%)</title><rect x="86.0784%" y="229" width="0.0980%" height="15" fill="rgb(222,171,42)" fg:x="878" fg:w="1"/><text x="86.3284%" y="239.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help (1 samples, 0.10%)</title><rect x="86.1765%" y="229" width="0.0980%" height="15" fill="rgb(243,84,45)" fg:x="879" fg:w="1"/><text x="86.4265%" y="239.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (68 samples, 6.67%)</title><rect x="86.2745%" y="229" width="6.6667%" height="15" fill="rgb(252,49,23)" fg:x="880" fg:w="68"/><text x="86.5245%" y="239.50">zlib_rs::..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (74 samples, 7.25%)</title><rect x="85.7843%" y="277" width="7.2549%" height="15" fill="rgb(215,19,7)" fg:x="875" fg:w="74"/><text x="86.0343%" y="287.50">&lt;flate2::m..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (74 samples, 7.25%)</title><rect x="85.7843%" y="261" width="7.2549%" height="15" fill="rgb(238,81,41)" fg:x="875" fg:w="74"/><text x="86.0343%" y="271.50">&lt;flate2::f..</text></g><g><title>zlib_rs::inflate::inflate (74 samples, 7.25%)</title><rect x="85.7843%" y="245" width="7.2549%" height="15" fill="rgb(210,199,37)" fg:x="875" fg:w="74"/><text x="86.0343%" y="255.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.10%)</title><rect x="92.9412%" y="229" width="0.0980%" height="15" fill="rgb(244,192,49)" fg:x="948" fg:w="1"/><text x="93.1912%" y="239.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (85 samples, 8.33%)</title><rect x="84.8039%" y="309" width="8.3333%" height="15" fill="rgb(226,211,11)" fg:x="865" fg:w="85"/><text x="85.0539%" y="319.50">&lt;zip::read::..</text></g><g><title>flate2::zio::read (75 samples, 7.35%)</title><rect x="85.7843%" y="293" width="7.3529%" height="15" fill="rgb(236,162,54)" fg:x="875" fg:w="75"/><text x="86.0343%" y="303.50">flate2::zi..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.10%)</title><rect x="93.0392%" y="277" width="0.0980%" height="15" fill="rgb(220,229,9)" fg:x="949" fg:w="1"/><text x="93.2892%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (14 samples, 1.37%)</title><rect x="93.1373%" y="309" width="1.3725%" height="15" fill="rgb(250,87,22)" fg:x="950" fg:w="14"/><text x="93.3873%" y="319.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (974 samples, 95.49%)</title><rect x="0.0000%" y="357" width="95.4902%" height="15" fill="rgb(239,43,17)" fg:x="0" fg:w="974"/><text x="0.2500%" y="367.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (959 samples, 94.02%)</title><rect x="1.4706%" y="341" width="94.0196%" height="15" fill="rgb(231,177,25)" fg:x="15" fg:w="959"/><text x="1.7206%" y="351.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (115 samples, 11.27%)</title><rect x="84.2157%" y="325" width="11.2745%" height="15" fill="rgb(219,179,1)" fg:x="859" fg:w="115"/><text x="84.4657%" y="335.50">std::io::append_t..</text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.98%)</title><rect x="94.5098%" y="309" width="0.9804%" height="15" fill="rgb(238,219,53)" fg:x="964" fg:w="10"/><text x="94.7598%" y="319.50"></text></g><g><title>bench_zip_to_pa (977 samples, 95.78%)</title><rect x="0.0000%" y="517" width="95.7843%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="977"/><text x="0.2500%" y="527.50">bench_zip_to_pa</text></g><g><title>_start (977 samples, 95.78%)</title><rect x="0.0000%" y="501" width="95.7843%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="977"/><text x="0.2500%" y="511.50">_start</text></g><g><title>__libc_start_main (977 samples, 95.78%)</title><rect x="0.0000%" y="485" width="95.7843%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="977"/><text x="0.2500%" y="495.50">__libc_start_main</text></g><g><title>main (977 samples, 95.78%)</title><rect x="0.0000%" y="469" width="95.7843%" height="15" fill="rgb(224,145,5)" fg:x="0" fg:w="977"/><text x="0.2500%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (977 samples, 95.78%)</title><rect x="0.0000%" y="453" width="95.7843%" height="15" fill="rgb(234,130,49)" fg:x="0" fg:w="977"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (977 samples, 95.78%)</title><rect x="0.0000%" y="437" width="95.7843%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="977"/><text x="0.2500%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (977 samples, 95.78%)</title><rect x="0.0000%" y="421" width="95.7843%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="977"/><text x="0.2500%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (977 samples, 95.78%)</title><rect x="0.0000%" y="405" width="95.7843%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="977"/><text x="0.2500%" y="415.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (977 samples, 95.78%)</title><rect x="0.0000%" y="389" width="95.7843%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="977"/><text x="0.2500%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (977 samples, 95.78%)</title><rect x="0.0000%" y="373" width="95.7843%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="977"/><text x="0.2500%" y="383.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.29%)</title><rect x="95.4902%" y="357" width="0.2941%" height="15" fill="rgb(240,136,2)" fg:x="974" fg:w="3"/><text x="95.7402%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.29%)</title><rect x="95.4902%" y="341" width="0.2941%" height="15" fill="rgb(239,18,37)" fg:x="974" fg:w="3"/><text x="95.7402%" y="351.50"></text></g><g><title>powf64 (1 samples, 0.10%)</title><rect x="95.7843%" y="325" width="0.0980%" height="15" fill="rgb(218,185,22)" fg:x="977" fg:w="1"/><text x="96.0343%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.10%)</title><rect x="95.8824%" y="325" width="0.0980%" height="15" fill="rgb(225,218,4)" fg:x="978" fg:w="1"/><text x="96.1324%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.29%)</title><rect x="95.9804%" y="293" width="0.2941%" height="15" fill="rgb(230,182,32)" fg:x="979" fg:w="3"/><text x="96.2304%" y="303.50"></text></g><g><title>syscall (3 samples, 0.29%)</title><rect x="95.9804%" y="277" width="0.2941%" height="15" fill="rgb(242,56,43)" fg:x="979" fg:w="3"/><text x="96.2304%" y="287.50"></text></g><g><title>mio::poll::Poll::poll (6 samples, 0.59%)</title><rect x="96.2745%" y="261" width="0.5882%" height="15" fill="rgb(233,99,24)" fg:x="982" fg:w="6"/><text x="96.5245%" y="271.50"></text></g><g><title>epoll_wait (5 samples, 0.49%)</title><rect x="96.3725%" y="245" width="0.4902%" height="15" fill="rgb(234,209,42)" fg:x="983" fg:w="5"/><text x="96.6225%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10 samples, 0.98%)</title><rect x="95.9804%" y="325" width="0.9804%" height="15" fill="rgb(227,7,12)" fg:x="979" fg:w="10"/><text x="96.2304%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (10 samples, 0.98%)</title><rect x="95.9804%" y="309" width="0.9804%" height="15" fill="rgb(245,203,43)" fg:x="979" fg:w="10"/><text x="96.2304%" y="319.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (7 samples, 0.69%)</title><rect x="96.2745%" y="293" width="0.6863%" height="15" fill="rgb(238,205,33)" fg:x="982" fg:w="7"/><text x="96.5245%" y="303.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (7 samples, 0.69%)</title><rect x="96.2745%" y="277" width="0.6863%" height="15" fill="rgb(231,56,7)" fg:x="982" fg:w="7"/><text x="96.5245%" y="287.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.10%)</title><rect x="96.8627%" y="261" width="0.0980%" height="15" fill="rgb(244,186,29)" fg:x="988" fg:w="1"/><text x="97.1127%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="96.8627%" y="245" width="0.0980%" height="15" fill="rgb(234,111,31)" fg:x="988" fg:w="1"/><text x="97.1127%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.20%)</title><rect x="96.9608%" y="309" width="0.1961%" height="15" fill="rgb(241,149,10)" fg:x="989" fg:w="2"/><text x="97.2108%" y="319.50"></text></g><g><title>syscall (2 samples, 0.20%)</title><rect x="96.9608%" y="293" width="0.1961%" height="15" fill="rgb(249,206,44)" fg:x="989" fg:w="2"/><text x="97.2108%" y="303.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (6 samples, 0.59%)</title><rect x="97.1569%" y="309" width="0.5882%" height="15" fill="rgb(251,153,30)" fg:x="991" fg:w="6"/><text x="97.4069%" y="319.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (6 samples, 0.59%)</title><rect x="97.1569%" y="293" width="0.5882%" height="15" fill="rgb(239,152,38)" fg:x="991" fg:w="6"/><text x="97.4069%" y="303.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (6 samples, 0.59%)</title><rect x="97.1569%" y="277" width="0.5882%" height="15" fill="rgb(249,139,47)" fg:x="991" fg:w="6"/><text x="97.4069%" y="287.50"></text></g><g><title>write (6 samples, 0.59%)</title><rect x="97.1569%" y="261" width="0.5882%" height="15" fill="rgb(244,64,35)" fg:x="991" fg:w="6"/><text x="97.4069%" y="271.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (10 samples, 0.98%)</title><rect x="98.0392%" y="229" width="0.9804%" height="15" fill="rgb(216,46,15)" fg:x="1000" fg:w="10"/><text x="98.2892%" y="239.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (10 samples, 0.98%)</title><rect x="98.0392%" y="213" width="0.9804%" height="15" fill="rgb(250,74,19)" fg:x="1000" fg:w="10"/><text x="98.2892%" y="223.50"></text></g><g><title>tokio::runtime::park::wake (10 samples, 0.98%)</title><rect x="98.0392%" y="197" width="0.9804%" height="15" fill="rgb(249,42,33)" fg:x="1000" fg:w="10"/><text x="98.2892%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.88%)</title><rect x="98.1373%" y="181" width="0.8824%" height="15" fill="rgb(242,149,17)" fg:x="1001" fg:w="9"/><text x="98.3873%" y="191.50"></text></g><g><title>syscall (9 samples, 0.88%)</title><rect x="98.1373%" y="165" width="0.8824%" height="15" fill="rgb(244,29,21)" fg:x="1001" fg:w="9"/><text x="98.3873%" y="175.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.10%)</title><rect x="99.4118%" y="133" width="0.0980%" height="15" fill="rgb(220,130,37)" fg:x="1014" fg:w="1"/><text x="99.6618%" y="143.50"></text></g><g><title>rustls::vecbuf::ChunkVecBuffer::consume (1 samples, 0.10%)</title><rect x="99.4118%" y="117" width="0.0980%" height="15" fill="rgb(211,67,2)" fg:x="1014" fg:w="1"/><text x="99.6618%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.10%)</title><rect x="99.5098%" y="117" width="0.0980%" height="15" fill="rgb(235,68,52)" fg:x="1015" fg:w="1"/><text x="99.7598%" y="127.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (1 samples, 0.10%)</title><rect x="99.5098%" y="101" width="0.0980%" height="15" fill="rgb(246,142,3)" fg:x="1015" fg:w="1"/><text x="99.7598%" y="111.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.10%)</title><rect x="99.5098%" y="85" width="0.0980%" height="15" fill="rgb(241,25,7)" fg:x="1015" fg:w="1"/><text x="99.7598%" y="95.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.10%)</title><rect x="99.5098%" y="69" width="0.0980%" height="15" fill="rgb(242,119,39)" fg:x="1015" fg:w="1"/><text x="99.7598%" y="79.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="99.5098%" y="53" width="0.0980%" height="15" fill="rgb(241,98,45)" fg:x="1015" fg:w="1"/><text x="99.7598%" y="63.50"></text></g><g><title>all (1,020 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="1020"/><text x="0.2500%" y="543.50"></text></g><g><title>tokio-runtime-w (43 samples, 4.22%)</title><rect x="95.7843%" y="517" width="4.2157%" height="15" fill="rgb(241,142,54)" fg:x="977" fg:w="43"/><text x="96.0343%" y="527.50">tokio..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (43 samples, 4.22%)</title><rect x="95.7843%" y="501" width="4.2157%" height="15" fill="rgb(222,85,15)" fg:x="977" fg:w="43"/><text x="96.0343%" y="511.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (43 samples, 4.22%)</title><rect x="95.7843%" y="485" width="4.2157%" height="15" fill="rgb(210,85,47)" fg:x="977" fg:w="43"/><text x="96.0343%" y="495.50">core:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (43 samples, 4.22%)</title><rect x="95.7843%" y="469" width="4.2157%" height="15" fill="rgb(224,206,25)" fg:x="977" fg:w="43"/><text x="96.0343%" y="479.50">std::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43 samples, 4.22%)</title><rect x="95.7843%" y="453" width="4.2157%" height="15" fill="rgb(243,201,19)" fg:x="977" fg:w="43"/><text x="96.0343%" y="463.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (43 samples, 4.22%)</title><rect x="95.7843%" y="437" width="4.2157%" height="15" fill="rgb(236,59,4)" fg:x="977" fg:w="43"/><text x="96.0343%" y="447.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (43 samples, 4.22%)</title><rect x="95.7843%" y="421" width="4.2157%" height="15" fill="rgb(254,179,45)" fg:x="977" fg:w="43"/><text x="96.0343%" y="431.50">tokio..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 4.22%)</title><rect x="95.7843%" y="405" width="4.2157%" height="15" fill="rgb(226,14,10)" fg:x="977" fg:w="43"/><text x="96.0343%" y="415.50">&lt;toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (43 samples, 4.22%)</title><rect x="95.7843%" y="389" width="4.2157%" height="15" fill="rgb(244,27,41)" fg:x="977" fg:w="43"/><text x="96.0343%" y="399.50">tokio..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (43 samples, 4.22%)</title><rect x="95.7843%" y="373" width="4.2157%" height="15" fill="rgb(235,35,32)" fg:x="977" fg:w="43"/><text x="96.0343%" y="383.50">tokio..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (43 samples, 4.22%)</title><rect x="95.7843%" y="357" width="4.2157%" height="15" fill="rgb(218,68,31)" fg:x="977" fg:w="43"/><text x="96.0343%" y="367.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (43 samples, 4.22%)</title><rect x="95.7843%" y="341" width="4.2157%" height="15" fill="rgb(207,120,37)" fg:x="977" fg:w="43"/><text x="96.0343%" y="351.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (31 samples, 3.04%)</title><rect x="96.9608%" y="325" width="3.0392%" height="15" fill="rgb(227,98,0)" fg:x="989" fg:w="31"/><text x="97.2108%" y="335.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (23 samples, 2.25%)</title><rect x="97.7451%" y="309" width="2.2549%" height="15" fill="rgb(207,7,3)" fg:x="997" fg:w="23"/><text x="97.9951%" y="319.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (23 samples, 2.25%)</title><rect x="97.7451%" y="293" width="2.2549%" height="15" fill="rgb(206,98,19)" fg:x="997" fg:w="23"/><text x="97.9951%" y="303.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (22 samples, 2.16%)</title><rect x="97.8431%" y="277" width="2.1569%" height="15" fill="rgb(217,5,26)" fg:x="998" fg:w="22"/><text x="98.0931%" y="287.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (21 samples, 2.06%)</title><rect x="97.9412%" y="261" width="2.0588%" height="15" fill="rgb(235,190,38)" fg:x="999" fg:w="21"/><text x="98.1912%" y="271.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (20 samples, 1.96%)</title><rect x="98.0392%" y="245" width="1.9608%" height="15" fill="rgb(247,86,24)" fg:x="1000" fg:w="20"/><text x="98.2892%" y="255.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (10 samples, 0.98%)</title><rect x="99.0196%" y="229" width="0.9804%" height="15" fill="rgb(205,101,16)" fg:x="1010" fg:w="10"/><text x="99.2696%" y="239.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (10 samples, 0.98%)</title><rect x="99.0196%" y="213" width="0.9804%" height="15" fill="rgb(246,168,33)" fg:x="1010" fg:w="10"/><text x="99.2696%" y="223.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (10 samples, 0.98%)</title><rect x="99.0196%" y="197" width="0.9804%" height="15" fill="rgb(231,114,1)" fg:x="1010" fg:w="10"/><text x="99.2696%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (8 samples, 0.78%)</title><rect x="99.2157%" y="181" width="0.7843%" height="15" fill="rgb(207,184,53)" fg:x="1012" fg:w="8"/><text x="99.4657%" y="191.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.69%)</title><rect x="99.3137%" y="165" width="0.6863%" height="15" fill="rgb(224,95,51)" fg:x="1013" fg:w="7"/><text x="99.5637%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.69%)</title><rect x="99.3137%" y="149" width="0.6863%" height="15" fill="rgb(212,188,45)" fg:x="1013" fg:w="7"/><text x="99.5637%" y="159.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (5 samples, 0.49%)</title><rect x="99.5098%" y="133" width="0.4902%" height="15" fill="rgb(223,154,38)" fg:x="1015" fg:w="5"/><text x="99.7598%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (4 samples, 0.39%)</title><rect x="99.6078%" y="117" width="0.3922%" height="15" fill="rgb(251,22,52)" fg:x="1016" fg:w="4"/><text x="99.8578%" y="127.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (4 samples, 0.39%)</title><rect x="99.6078%" y="101" width="0.3922%" height="15" fill="rgb(229,209,22)" fg:x="1016" fg:w="4"/><text x="99.8578%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.39%)</title><rect x="99.6078%" y="85" width="0.3922%" height="15" fill="rgb(234,138,34)" fg:x="1016" fg:w="4"/><text x="99.8578%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.39%)</title><rect x="99.6078%" y="69" width="0.3922%" height="15" fill="rgb(212,95,11)" fg:x="1016" fg:w="4"/><text x="99.8578%" y="79.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (4 samples, 0.39%)</title><rect x="99.6078%" y="53" width="0.3922%" height="15" fill="rgb(240,179,47)" fg:x="1016" fg:w="4"/><text x="99.8578%" y="63.50"></text></g><g><title>recv (4 samples, 0.39%)</title><rect x="99.6078%" y="37" width="0.3922%" height="15" fill="rgb(240,163,11)" fg:x="1016" fg:w="4"/><text x="99.8578%" y="47.50"></text></g></svg></svg>