<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1117"><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.45%)</title><rect x="0.7162%" y="181" width="0.4476%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="5"/><text x="0.9662%" y="191.50"></text></g><g><title>syscall (5 samples, 0.45%)</title><rect x="0.7162%" y="165" width="0.4476%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="5"/><text x="0.9662%" y="175.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (7 samples, 0.63%)</title><rect x="0.7162%" y="213" width="0.6267%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="7"/><text x="0.9662%" y="223.50"></text></g><g><title>tokio::runtime::context::with_scheduler (7 samples, 0.63%)</title><rect x="0.7162%" y="197" width="0.6267%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="7"/><text x="0.9662%" y="207.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.18%)</title><rect x="1.1638%" y="181" width="0.1791%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="2"/><text x="1.4138%" y="191.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.18%)</title><rect x="1.1638%" y="165" width="0.1791%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="2"/><text x="1.4138%" y="175.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (2 samples, 0.18%)</title><rect x="1.1638%" y="149" width="0.1791%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="2"/><text x="1.4138%" y="159.50"></text></g><g><title>write (2 samples, 0.18%)</title><rect x="1.1638%" y="133" width="0.1791%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="2"/><text x="1.4138%" y="143.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.81%)</title><rect x="0.6267%" y="341" width="0.8057%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="9"/><text x="0.8767%" y="351.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (9 samples, 0.81%)</title><rect x="0.6267%" y="325" width="0.8057%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="9"/><text x="0.8767%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (9 samples, 0.81%)</title><rect x="0.6267%" y="309" width="0.8057%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="9"/><text x="0.8767%" y="319.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (9 samples, 0.81%)</title><rect x="0.6267%" y="293" width="0.8057%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="9"/><text x="0.8767%" y="303.50"></text></g><g><title>hyper::body::body::Body::poll_inner (9 samples, 0.81%)</title><rect x="0.6267%" y="277" width="0.8057%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="9"/><text x="0.8767%" y="287.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.81%)</title><rect x="0.6267%" y="261" width="0.8057%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="9"/><text x="0.8767%" y="271.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (9 samples, 0.81%)</title><rect x="0.6267%" y="245" width="0.8057%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="9"/><text x="0.8767%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.72%)</title><rect x="0.7162%" y="229" width="0.7162%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="8"/><text x="0.9662%" y="239.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.09%)</title><rect x="1.3429%" y="213" width="0.0895%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="1"/><text x="1.5929%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (26 samples, 2.33%)</title><rect x="2.5067%" y="277" width="2.3277%" height="15" fill="rgb(210,31,41)" fg:x="28" fg:w="26"/><text x="2.7567%" y="287.50">n..</text></g><g><title>malloc (23 samples, 2.06%)</title><rect x="2.7753%" y="261" width="2.0591%" height="15" fill="rgb(221,200,47)" fg:x="31" fg:w="23"/><text x="3.0253%" y="271.50">m..</text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.09%)</title><rect x="4.8344%" y="245" width="0.0895%" height="15" fill="rgb(226,26,5)" fg:x="54" fg:w="1"/><text x="5.0844%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.09%)</title><rect x="4.8344%" y="229" width="0.0895%" height="15" fill="rgb(249,33,26)" fg:x="54" fg:w="1"/><text x="5.0844%" y="239.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.09%)</title><rect x="4.8344%" y="213" width="0.0895%" height="15" fill="rgb(235,183,28)" fg:x="54" fg:w="1"/><text x="5.0844%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (3 samples, 0.27%)</title><rect x="4.8344%" y="261" width="0.2686%" height="15" fill="rgb(221,5,38)" fg:x="54" fg:w="3"/><text x="5.0844%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (2 samples, 0.18%)</title><rect x="4.9239%" y="245" width="0.1791%" height="15" fill="rgb(247,18,42)" fg:x="55" fg:w="2"/><text x="5.1739%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (2 samples, 0.18%)</title><rect x="4.9239%" y="229" width="0.1791%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="2"/><text x="5.1739%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (2 samples, 0.18%)</title><rect x="4.9239%" y="213" width="0.1791%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="2"/><text x="5.1739%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.18%)</title><rect x="4.9239%" y="197" width="0.1791%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="2"/><text x="5.1739%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="5.0134%" y="181" width="0.0895%" height="15" fill="rgb(238,160,17)" fg:x="56" fg:w="1"/><text x="5.2634%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="5.0134%" y="165" width="0.0895%" height="15" fill="rgb(214,148,48)" fg:x="56" fg:w="1"/><text x="5.2634%" y="175.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="5.0134%" y="149" width="0.0895%" height="15" fill="rgb(232,36,49)" fg:x="56" fg:w="1"/><text x="5.2634%" y="159.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.09%)</title><rect x="5.0134%" y="133" width="0.0895%" height="15" fill="rgb(209,103,24)" fg:x="56" fg:w="1"/><text x="5.2634%" y="143.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.09%)</title><rect x="5.0134%" y="117" width="0.0895%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="1"/><text x="5.2634%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.1030%" y="101" width="0.0895%" height="15" fill="rgb(213,181,19)" fg:x="57" fg:w="1"/><text x="5.3530%" y="111.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.1030%" y="85" width="0.0895%" height="15" fill="rgb(254,191,54)" fg:x="57" fg:w="1"/><text x="5.3530%" y="95.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="5.1030%" y="69" width="0.0895%" height="15" fill="rgb(241,83,37)" fg:x="57" fg:w="1"/><text x="5.3530%" y="79.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.27%)</title><rect x="5.1030%" y="149" width="0.2686%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="3"/><text x="5.3530%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.27%)</title><rect x="5.1030%" y="133" width="0.2686%" height="15" fill="rgb(226,3,54)" fg:x="57" fg:w="3"/><text x="5.3530%" y="143.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.27%)</title><rect x="5.1030%" y="117" width="0.2686%" height="15" fill="rgb(245,192,40)" fg:x="57" fg:w="3"/><text x="5.3530%" y="127.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (2 samples, 0.18%)</title><rect x="5.1925%" y="101" width="0.1791%" height="15" fill="rgb(238,167,29)" fg:x="58" fg:w="2"/><text x="5.4425%" y="111.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="5.3715%" y="149" width="0.0895%" height="15" fill="rgb(232,182,51)" fg:x="60" fg:w="1"/><text x="5.6215%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="5.3715%" y="133" width="0.0895%" height="15" fill="rgb(231,60,39)" fg:x="60" fg:w="1"/><text x="5.6215%" y="143.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="5.3715%" y="117" width="0.0895%" height="15" fill="rgb(208,69,12)" fg:x="60" fg:w="1"/><text x="5.6215%" y="127.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="5.3715%" y="101" width="0.0895%" height="15" fill="rgb(235,93,37)" fg:x="60" fg:w="1"/><text x="5.6215%" y="111.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (10 samples, 0.90%)</title><rect x="5.4611%" y="117" width="0.8953%" height="15" fill="rgb(213,116,39)" fg:x="61" fg:w="10"/><text x="5.7111%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (10 samples, 0.90%)</title><rect x="5.4611%" y="101" width="0.8953%" height="15" fill="rgb(222,207,29)" fg:x="61" fg:w="10"/><text x="5.7111%" y="111.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="6.2668%" y="85" width="0.0895%" height="15" fill="rgb(206,96,30)" fg:x="70" fg:w="1"/><text x="6.5168%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="6.3563%" y="101" width="0.0895%" height="15" fill="rgb(218,138,4)" fg:x="71" fg:w="1"/><text x="6.6063%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="6.3563%" y="85" width="0.0895%" height="15" fill="rgb(250,191,14)" fg:x="71" fg:w="1"/><text x="6.6063%" y="95.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (16 samples, 1.43%)</title><rect x="5.1030%" y="245" width="1.4324%" height="15" fill="rgb(239,60,40)" fg:x="57" fg:w="16"/><text x="5.3530%" y="255.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.43%)</title><rect x="5.1030%" y="229" width="1.4324%" height="15" fill="rgb(206,27,48)" fg:x="57" fg:w="16"/><text x="5.3530%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (16 samples, 1.43%)</title><rect x="5.1030%" y="213" width="1.4324%" height="15" fill="rgb(225,35,8)" fg:x="57" fg:w="16"/><text x="5.3530%" y="223.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 1.43%)</title><rect x="5.1030%" y="197" width="1.4324%" height="15" fill="rgb(250,213,24)" fg:x="57" fg:w="16"/><text x="5.3530%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (16 samples, 1.43%)</title><rect x="5.1030%" y="181" width="1.4324%" height="15" fill="rgb(247,123,22)" fg:x="57" fg:w="16"/><text x="5.3530%" y="191.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (16 samples, 1.43%)</title><rect x="5.1030%" y="165" width="1.4324%" height="15" fill="rgb(231,138,38)" fg:x="57" fg:w="16"/><text x="5.3530%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (12 samples, 1.07%)</title><rect x="5.4611%" y="149" width="1.0743%" height="15" fill="rgb(231,145,46)" fg:x="61" fg:w="12"/><text x="5.7111%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (12 samples, 1.07%)</title><rect x="5.4611%" y="133" width="1.0743%" height="15" fill="rgb(251,118,11)" fg:x="61" fg:w="12"/><text x="5.7111%" y="143.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.18%)</title><rect x="6.3563%" y="117" width="0.1791%" height="15" fill="rgb(217,147,25)" fg:x="71" fg:w="2"/><text x="6.6063%" y="127.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="6.4458%" y="101" width="0.0895%" height="15" fill="rgb(247,81,37)" fg:x="72" fg:w="1"/><text x="6.6958%" y="111.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="6.5354%" y="197" width="0.0895%" height="15" fill="rgb(209,12,38)" fg:x="73" fg:w="1"/><text x="6.7854%" y="207.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="6.5354%" y="181" width="0.0895%" height="15" fill="rgb(227,1,9)" fg:x="73" fg:w="1"/><text x="6.7854%" y="191.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (22 samples, 1.97%)</title><rect x="4.8344%" y="277" width="1.9696%" height="15" fill="rgb(248,47,43)" fg:x="54" fg:w="22"/><text x="5.0844%" y="287.50">n..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (19 samples, 1.70%)</title><rect x="5.1030%" y="261" width="1.7010%" height="15" fill="rgb(221,10,30)" fg:x="57" fg:w="19"/><text x="5.3530%" y="271.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (3 samples, 0.27%)</title><rect x="6.5354%" y="245" width="0.2686%" height="15" fill="rgb(210,229,1)" fg:x="73" fg:w="3"/><text x="6.7854%" y="255.50"></text></g><g><title>std::io::copy::stack_buffer_copy (3 samples, 0.27%)</title><rect x="6.5354%" y="229" width="0.2686%" height="15" fill="rgb(222,148,37)" fg:x="73" fg:w="3"/><text x="6.7854%" y="239.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (3 samples, 0.27%)</title><rect x="6.5354%" y="213" width="0.2686%" height="15" fill="rgb(234,67,33)" fg:x="73" fg:w="3"/><text x="6.7854%" y="223.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.18%)</title><rect x="6.6249%" y="197" width="0.1791%" height="15" fill="rgb(247,98,35)" fg:x="74" fg:w="2"/><text x="6.8749%" y="207.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (2 samples, 0.18%)</title><rect x="6.6249%" y="181" width="0.1791%" height="15" fill="rgb(247,138,52)" fg:x="74" fg:w="2"/><text x="6.8749%" y="191.50"></text></g><g><title>write (2 samples, 0.18%)</title><rect x="6.6249%" y="165" width="0.1791%" height="15" fill="rgb(213,79,30)" fg:x="74" fg:w="2"/><text x="6.8749%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6 samples, 0.54%)</title><rect x="7.4306%" y="261" width="0.5372%" height="15" fill="rgb(246,177,23)" fg:x="83" fg:w="6"/><text x="7.6806%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.54%)</title><rect x="7.4306%" y="245" width="0.5372%" height="15" fill="rgb(230,62,27)" fg:x="83" fg:w="6"/><text x="7.6806%" y="255.50"></text></g><g><title>__libc_realloc (6 samples, 0.54%)</title><rect x="7.4306%" y="229" width="0.5372%" height="15" fill="rgb(216,154,8)" fg:x="83" fg:w="6"/><text x="7.6806%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.36%)</title><rect x="9.3107%" y="213" width="0.3581%" height="15" fill="rgb(244,35,45)" fg:x="104" fg:w="4"/><text x="9.5607%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.36%)</title><rect x="9.3107%" y="197" width="0.3581%" height="15" fill="rgb(251,115,12)" fg:x="104" fg:w="4"/><text x="9.5607%" y="207.50"></text></g><g><title>__libc_realloc (4 samples, 0.36%)</title><rect x="9.3107%" y="181" width="0.3581%" height="15" fill="rgb(240,54,50)" fg:x="104" fg:w="4"/><text x="9.5607%" y="191.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (69 samples, 6.18%)</title><rect x="8.3259%" y="245" width="6.1773%" height="15" fill="rgb(233,84,52)" fg:x="93" fg:w="69"/><text x="8.5759%" y="255.50">arrow_cs..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (69 samples, 6.18%)</title><rect x="8.3259%" y="229" width="6.1773%" height="15" fill="rgb(207,117,47)" fg:x="93" fg:w="69"/><text x="8.5759%" y="239.50">arrow_cs..</text></g><g><title>csv_core::reader::Reader::read_record (54 samples, 4.83%)</title><rect x="9.6688%" y="213" width="4.8344%" height="15" fill="rgb(249,43,39)" fg:x="108" fg:w="54"/><text x="9.9188%" y="223.50">csv_co..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (3 samples, 0.27%)</title><rect x="14.5031%" y="229" width="0.2686%" height="15" fill="rgb(209,38,44)" fg:x="162" fg:w="3"/><text x="14.7531%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="14.6822%" y="213" width="0.0895%" height="15" fill="rgb(236,212,23)" fg:x="164" fg:w="1"/><text x="14.9322%" y="223.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="18.9794%" y="117" width="0.0895%" height="15" fill="rgb(242,79,21)" fg:x="212" fg:w="1"/><text x="19.2294%" y="127.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (126 samples, 11.28%)</title><rect x="7.9678%" y="261" width="11.2802%" height="15" fill="rgb(211,96,35)" fg:x="89" fg:w="126"/><text x="8.2178%" y="271.50">arrow_csv::reader..</text></g><g><title>arrow_csv::reader::Decoder::flush (53 samples, 4.74%)</title><rect x="14.5031%" y="245" width="4.7449%" height="15" fill="rgb(253,215,40)" fg:x="162" fg:w="53"/><text x="14.7531%" y="255.50">arrow_..</text></g><g><title>core::iter::adapters::try_process (50 samples, 4.48%)</title><rect x="14.7717%" y="229" width="4.4763%" height="15" fill="rgb(211,81,21)" fg:x="165" fg:w="50"/><text x="15.0217%" y="239.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 4.48%)</title><rect x="14.7717%" y="213" width="4.4763%" height="15" fill="rgb(208,190,38)" fg:x="165" fg:w="50"/><text x="15.0217%" y="223.50">&lt;allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 4.48%)</title><rect x="14.7717%" y="197" width="4.4763%" height="15" fill="rgb(235,213,38)" fg:x="165" fg:w="50"/><text x="15.0217%" y="207.50">&lt;core..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (50 samples, 4.48%)</title><rect x="14.7717%" y="181" width="4.4763%" height="15" fill="rgb(237,122,38)" fg:x="165" fg:w="50"/><text x="15.0217%" y="191.50">&lt;arro..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (39 samples, 3.49%)</title><rect x="15.7565%" y="165" width="3.4915%" height="15" fill="rgb(244,218,35)" fg:x="176" fg:w="39"/><text x="16.0065%" y="175.50">arr..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (6 samples, 0.54%)</title><rect x="18.7108%" y="149" width="0.5372%" height="15" fill="rgb(240,68,47)" fg:x="209" fg:w="6"/><text x="18.9608%" y="159.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.45%)</title><rect x="18.8004%" y="133" width="0.4476%" height="15" fill="rgb(210,16,53)" fg:x="210" fg:w="5"/><text x="19.0504%" y="143.50"></text></g><g><title>posix_memalign (2 samples, 0.18%)</title><rect x="19.0689%" y="117" width="0.1791%" height="15" fill="rgb(235,124,12)" fg:x="213" fg:w="2"/><text x="19.3189%" y="127.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build (2 samples, 0.18%)</title><rect x="19.2480%" y="261" width="0.1791%" height="15" fill="rgb(224,169,11)" fg:x="215" fg:w="2"/><text x="19.4980%" y="271.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build_decoder (2 samples, 0.18%)</title><rect x="19.2480%" y="245" width="0.1791%" height="15" fill="rgb(250,166,2)" fg:x="215" fg:w="2"/><text x="19.4980%" y="255.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (1 samples, 0.09%)</title><rect x="19.3375%" y="229" width="0.0895%" height="15" fill="rgb(242,216,29)" fg:x="216" fg:w="1"/><text x="19.5875%" y="239.50"></text></g><g><title>cfree (12 samples, 1.07%)</title><rect x="19.4270%" y="261" width="1.0743%" height="15" fill="rgb(230,116,27)" fg:x="217" fg:w="12"/><text x="19.6770%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (11 samples, 0.98%)</title><rect x="20.5013%" y="261" width="0.9848%" height="15" fill="rgb(228,99,48)" fg:x="229" fg:w="11"/><text x="20.7513%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.90%)</title><rect x="20.5909%" y="245" width="0.8953%" height="15" fill="rgb(253,11,6)" fg:x="230" fg:w="10"/><text x="20.8409%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (10 samples, 0.90%)</title><rect x="20.5909%" y="229" width="0.8953%" height="15" fill="rgb(247,143,39)" fg:x="230" fg:w="10"/><text x="20.8409%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 0.90%)</title><rect x="20.5909%" y="213" width="0.8953%" height="15" fill="rgb(236,97,10)" fg:x="230" fg:w="10"/><text x="20.8409%" y="223.50"></text></g><g><title>cfree (10 samples, 0.90%)</title><rect x="20.5909%" y="197" width="0.8953%" height="15" fill="rgb(233,208,19)" fg:x="230" fg:w="10"/><text x="20.8409%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (3 samples, 0.27%)</title><rect x="21.4861%" y="261" width="0.2686%" height="15" fill="rgb(216,164,2)" fg:x="240" fg:w="3"/><text x="21.7361%" y="271.50"></text></g><g><title>cfree (3 samples, 0.27%)</title><rect x="21.4861%" y="245" width="0.2686%" height="15" fill="rgb(220,129,5)" fg:x="240" fg:w="3"/><text x="21.7361%" y="255.50"></text></g><g><title>__default_morecore (2 samples, 0.18%)</title><rect x="21.5756%" y="229" width="0.1791%" height="15" fill="rgb(242,17,10)" fg:x="241" fg:w="2"/><text x="21.8256%" y="239.50"></text></g><g><title>__sbrk (2 samples, 0.18%)</title><rect x="21.5756%" y="213" width="0.1791%" height="15" fill="rgb(242,107,0)" fg:x="241" fg:w="2"/><text x="21.8256%" y="223.50"></text></g><g><title>brk (2 samples, 0.18%)</title><rect x="21.5756%" y="197" width="0.1791%" height="15" fill="rgb(251,28,31)" fg:x="241" fg:w="2"/><text x="21.8256%" y="207.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="23.0976%" y="245" width="0.0895%" height="15" fill="rgb(233,223,10)" fg:x="258" fg:w="1"/><text x="23.3476%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.18%)</title><rect x="23.1871%" y="245" width="0.1791%" height="15" fill="rgb(215,21,27)" fg:x="259" fg:w="2"/><text x="23.4371%" y="255.50"></text></g><g><title>arrow_array::builder::primitive_builder::PrimitiveBuilder&lt;T&gt;::finish (1 samples, 0.09%)</title><rect x="23.3662%" y="245" width="0.0895%" height="15" fill="rgb(232,23,21)" fg:x="261" fg:w="1"/><text x="23.6162%" y="255.50"></text></g><g><title>arrow_data::data::ArrayDataBuilder::add_buffer (1 samples, 0.09%)</title><rect x="23.3662%" y="229" width="0.0895%" height="15" fill="rgb(244,5,23)" fg:x="261" fg:w="1"/><text x="23.6162%" y="239.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (3 samples, 0.27%)</title><rect x="23.4557%" y="245" width="0.2686%" height="15" fill="rgb(226,81,46)" fg:x="262" fg:w="3"/><text x="23.7057%" y="255.50"></text></g><g><title>__rustc::__rdl_realloc (3 samples, 0.27%)</title><rect x="23.4557%" y="229" width="0.2686%" height="15" fill="rgb(247,70,30)" fg:x="262" fg:w="3"/><text x="23.7057%" y="239.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="23.6347%" y="213" width="0.0895%" height="15" fill="rgb(212,68,19)" fg:x="264" fg:w="1"/><text x="23.8847%" y="223.50"></text></g><g><title>cfree (13 samples, 1.16%)</title><rect x="23.7243%" y="245" width="1.1638%" height="15" fill="rgb(240,187,13)" fg:x="265" fg:w="13"/><text x="23.9743%" y="255.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (44 samples, 3.94%)</title><rect x="24.8881%" y="245" width="3.9391%" height="15" fill="rgb(223,113,26)" fg:x="278" fg:w="44"/><text x="25.1381%" y="255.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (22 samples, 1.97%)</title><rect x="26.8577%" y="229" width="1.9696%" height="15" fill="rgb(206,192,2)" fg:x="300" fg:w="22"/><text x="27.1077%" y="239.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (9 samples, 0.81%)</title><rect x="30.6177%" y="229" width="0.8057%" height="15" fill="rgb(241,108,4)" fg:x="342" fg:w="9"/><text x="30.8677%" y="239.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (2 samples, 0.18%)</title><rect x="32.2292%" y="213" width="0.1791%" height="15" fill="rgb(247,173,49)" fg:x="360" fg:w="2"/><text x="32.4792%" y="223.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (14 samples, 1.25%)</title><rect x="31.4235%" y="229" width="1.2534%" height="15" fill="rgb(224,114,35)" fg:x="351" fg:w="14"/><text x="31.6735%" y="239.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (3 samples, 0.27%)</title><rect x="32.4082%" y="213" width="0.2686%" height="15" fill="rgb(245,159,27)" fg:x="362" fg:w="3"/><text x="32.6582%" y="223.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (44 samples, 3.94%)</title><rect x="28.8272%" y="245" width="3.9391%" height="15" fill="rgb(245,172,44)" fg:x="322" fg:w="44"/><text x="29.0772%" y="255.50">nems..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="32.6768%" y="229" width="0.0895%" height="15" fill="rgb(236,23,11)" fg:x="365" fg:w="1"/><text x="32.9268%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="34.2883%" y="229" width="0.0895%" height="15" fill="rgb(205,117,38)" fg:x="383" fg:w="1"/><text x="34.5383%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (10 samples, 0.90%)</title><rect x="34.3778%" y="229" width="0.8953%" height="15" fill="rgb(237,72,25)" fg:x="384" fg:w="10"/><text x="34.6278%" y="239.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (165 samples, 14.77%)</title><rect x="21.7547%" y="261" width="14.7717%" height="15" fill="rgb(244,70,9)" fg:x="243" fg:w="165"/><text x="22.0047%" y="271.50">nemscraper::process::co..</text></g><g><title>nemscraper::process::utils::clean_str (42 samples, 3.76%)</title><rect x="32.7663%" y="245" width="3.7601%" height="15" fill="rgb(217,125,39)" fg:x="366" fg:w="42"/><text x="33.0163%" y="255.50">nems..</text></g><g><title>malloc (14 samples, 1.25%)</title><rect x="35.2731%" y="229" width="1.2534%" height="15" fill="rgb(235,36,10)" fg:x="394" fg:w="14"/><text x="35.5231%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="36.6159%" y="213" width="0.0895%" height="15" fill="rgb(251,123,47)" fg:x="409" fg:w="1"/><text x="36.8659%" y="223.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="37.2426%" y="165" width="0.0895%" height="15" fill="rgb(221,13,13)" fg:x="416" fg:w="1"/><text x="37.4926%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="37.5112%" y="149" width="0.0895%" height="15" fill="rgb(238,131,9)" fg:x="419" fg:w="1"/><text x="37.7612%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="37.5112%" y="133" width="0.0895%" height="15" fill="rgb(211,50,8)" fg:x="419" fg:w="1"/><text x="37.7612%" y="143.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="37.5112%" y="117" width="0.0895%" height="15" fill="rgb(245,182,24)" fg:x="419" fg:w="1"/><text x="37.7612%" y="127.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (9 samples, 0.81%)</title><rect x="37.0636%" y="181" width="0.8057%" height="15" fill="rgb(242,14,37)" fg:x="414" fg:w="9"/><text x="37.3136%" y="191.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (6 samples, 0.54%)</title><rect x="37.3321%" y="165" width="0.5372%" height="15" fill="rgb(246,228,12)" fg:x="417" fg:w="6"/><text x="37.5821%" y="175.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (3 samples, 0.27%)</title><rect x="37.6007%" y="149" width="0.2686%" height="15" fill="rgb(213,55,15)" fg:x="420" fg:w="3"/><text x="37.8507%" y="159.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="37.8693%" y="165" width="0.0895%" height="15" fill="rgb(209,9,3)" fg:x="423" fg:w="1"/><text x="38.1193%" y="175.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="37.8693%" y="149" width="0.0895%" height="15" fill="rgb(230,59,30)" fg:x="423" fg:w="1"/><text x="38.1193%" y="159.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="37.8693%" y="133" width="0.0895%" height="15" fill="rgb(209,121,21)" fg:x="423" fg:w="1"/><text x="38.1193%" y="143.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="37.9588%" y="165" width="0.0895%" height="15" fill="rgb(220,109,13)" fg:x="424" fg:w="1"/><text x="38.2088%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="37.9588%" y="149" width="0.0895%" height="15" fill="rgb(232,18,1)" fg:x="424" fg:w="1"/><text x="38.2088%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="37.9588%" y="133" width="0.0895%" height="15" fill="rgb(215,41,42)" fg:x="424" fg:w="1"/><text x="38.2088%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="37.9588%" y="117" width="0.0895%" height="15" fill="rgb(224,123,36)" fg:x="424" fg:w="1"/><text x="38.2088%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (16 samples, 1.43%)</title><rect x="36.7055%" y="213" width="1.4324%" height="15" fill="rgb(240,125,3)" fg:x="410" fg:w="16"/><text x="36.9555%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (16 samples, 1.43%)</title><rect x="36.7055%" y="197" width="1.4324%" height="15" fill="rgb(205,98,50)" fg:x="410" fg:w="16"/><text x="36.9555%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.27%)</title><rect x="37.8693%" y="181" width="0.2686%" height="15" fill="rgb(205,185,37)" fg:x="423" fg:w="3"/><text x="38.1193%" y="191.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="38.0483%" y="165" width="0.0895%" height="15" fill="rgb(238,207,15)" fg:x="425" fg:w="1"/><text x="38.2983%" y="175.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (7 samples, 0.63%)</title><rect x="44.2256%" y="165" width="0.6267%" height="15" fill="rgb(213,199,42)" fg:x="494" fg:w="7"/><text x="44.4756%" y="175.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (56 samples, 5.01%)</title><rect x="40.1970%" y="197" width="5.0134%" height="15" fill="rgb(235,201,11)" fg:x="449" fg:w="56"/><text x="40.4470%" y="207.50">&lt;parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (28 samples, 2.51%)</title><rect x="42.7037%" y="181" width="2.5067%" height="15" fill="rgb(207,46,11)" fg:x="477" fg:w="28"/><text x="42.9537%" y="191.50">pa..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (4 samples, 0.36%)</title><rect x="44.8523%" y="165" width="0.3581%" height="15" fill="rgb(241,35,35)" fg:x="501" fg:w="4"/><text x="45.1023%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="46.3742%" y="165" width="0.0895%" height="15" fill="rgb(243,32,47)" fg:x="518" fg:w="1"/><text x="46.6242%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="46.3742%" y="149" width="0.0895%" height="15" fill="rgb(247,202,23)" fg:x="518" fg:w="1"/><text x="46.6242%" y="159.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="46.3742%" y="133" width="0.0895%" height="15" fill="rgb(219,102,11)" fg:x="518" fg:w="1"/><text x="46.6242%" y="143.50"></text></g><g><title>parquet::column::writer::compare_greater (6 samples, 0.54%)</title><rect x="46.4637%" y="165" width="0.5372%" height="15" fill="rgb(243,110,44)" fg:x="519" fg:w="6"/><text x="46.7137%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (59 samples, 5.28%)</title><rect x="45.2104%" y="197" width="5.2820%" height="15" fill="rgb(222,74,54)" fg:x="505" fg:w="59"/><text x="45.4604%" y="207.50">&lt;parqu..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (55 samples, 4.92%)</title><rect x="45.5685%" y="181" width="4.9239%" height="15" fill="rgb(216,99,12)" fg:x="509" fg:w="55"/><text x="45.8185%" y="191.50">parque..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (39 samples, 3.49%)</title><rect x="47.0009%" y="165" width="3.4915%" height="15" fill="rgb(226,22,26)" fg:x="525" fg:w="39"/><text x="47.2509%" y="175.50">par..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.54%)</title><rect x="49.9552%" y="149" width="0.5372%" height="15" fill="rgb(217,163,10)" fg:x="558" fg:w="6"/><text x="50.2052%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (3 samples, 0.27%)</title><rect x="50.5819%" y="181" width="0.2686%" height="15" fill="rgb(213,25,53)" fg:x="565" fg:w="3"/><text x="50.8319%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.09%)</title><rect x="50.7610%" y="165" width="0.0895%" height="15" fill="rgb(252,105,26)" fg:x="567" fg:w="1"/><text x="51.0110%" y="175.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.09%)</title><rect x="50.7610%" y="149" width="0.0895%" height="15" fill="rgb(220,39,43)" fg:x="567" fg:w="1"/><text x="51.0110%" y="159.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.27%)</title><rect x="51.1191%" y="149" width="0.2686%" height="15" fill="rgb(229,68,48)" fg:x="571" fg:w="3"/><text x="51.3691%" y="159.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.27%)</title><rect x="51.1191%" y="133" width="0.2686%" height="15" fill="rgb(252,8,32)" fg:x="571" fg:w="3"/><text x="51.3691%" y="143.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (7 samples, 0.63%)</title><rect x="50.8505%" y="181" width="0.6267%" height="15" fill="rgb(223,20,43)" fg:x="568" fg:w="7"/><text x="51.1005%" y="191.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (7 samples, 0.63%)</title><rect x="50.8505%" y="165" width="0.6267%" height="15" fill="rgb(229,81,49)" fg:x="568" fg:w="7"/><text x="51.1005%" y="175.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="51.3876%" y="149" width="0.0895%" height="15" fill="rgb(236,28,36)" fg:x="574" fg:w="1"/><text x="51.6376%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (7 samples, 0.63%)</title><rect x="55.9534%" y="133" width="0.6267%" height="15" fill="rgb(249,185,26)" fg:x="625" fg:w="7"/><text x="56.2034%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (48 samples, 4.30%)</title><rect x="52.6410%" y="149" width="4.2972%" height="15" fill="rgb(249,174,33)" fg:x="588" fg:w="48"/><text x="52.8910%" y="159.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (4 samples, 0.36%)</title><rect x="56.5801%" y="133" width="0.3581%" height="15" fill="rgb(233,201,37)" fg:x="632" fg:w="4"/><text x="56.8301%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (59 samples, 5.28%)</title><rect x="51.9248%" y="165" width="5.2820%" height="15" fill="rgb(221,78,26)" fg:x="580" fg:w="59"/><text x="52.1748%" y="175.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.27%)</title><rect x="56.9382%" y="149" width="0.2686%" height="15" fill="rgb(250,127,30)" fg:x="636" fg:w="3"/><text x="57.1882%" y="159.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (18 samples, 1.61%)</title><rect x="57.2068%" y="165" width="1.6115%" height="15" fill="rgb(230,49,44)" fg:x="639" fg:w="18"/><text x="57.4568%" y="175.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (17 samples, 1.52%)</title><rect x="57.2963%" y="149" width="1.5219%" height="15" fill="rgb(229,67,23)" fg:x="640" fg:w="17"/><text x="57.5463%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (9 samples, 0.81%)</title><rect x="64.6374%" y="117" width="0.8057%" height="15" fill="rgb(249,83,47)" fg:x="722" fg:w="9"/><text x="64.8874%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (73 samples, 6.54%)</title><rect x="59.1764%" y="149" width="6.5354%" height="15" fill="rgb(215,43,3)" fg:x="661" fg:w="73"/><text x="59.4264%" y="159.50">brotli::e..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (60 samples, 5.37%)</title><rect x="60.3402%" y="133" width="5.3715%" height="15" fill="rgb(238,154,13)" fg:x="674" fg:w="60"/><text x="60.5902%" y="143.50">&lt;brotli..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (3 samples, 0.27%)</title><rect x="65.4432%" y="117" width="0.2686%" height="15" fill="rgb(219,56,2)" fg:x="731" fg:w="3"/><text x="65.6932%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="66.4279%" y="85" width="0.0895%" height="15" fill="rgb(233,0,4)" fg:x="742" fg:w="1"/><text x="66.6779%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (3 samples, 0.27%)</title><rect x="66.4279%" y="101" width="0.2686%" height="15" fill="rgb(235,30,7)" fg:x="742" fg:w="3"/><text x="66.6779%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (2 samples, 0.18%)</title><rect x="66.5175%" y="85" width="0.1791%" height="15" fill="rgb(250,79,13)" fg:x="743" fg:w="2"/><text x="66.7675%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (5 samples, 0.45%)</title><rect x="66.6965%" y="101" width="0.4476%" height="15" fill="rgb(211,146,34)" fg:x="745" fg:w="5"/><text x="66.9465%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (18 samples, 1.61%)</title><rect x="66.4279%" y="133" width="1.6115%" height="15" fill="rgb(228,22,38)" fg:x="742" fg:w="18"/><text x="66.6779%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (18 samples, 1.61%)</title><rect x="66.4279%" y="117" width="1.6115%" height="15" fill="rgb(235,168,5)" fg:x="742" fg:w="18"/><text x="66.6779%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (10 samples, 0.90%)</title><rect x="67.1441%" y="101" width="0.8953%" height="15" fill="rgb(221,155,16)" fg:x="750" fg:w="10"/><text x="67.3941%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (2 samples, 0.18%)</title><rect x="67.8603%" y="85" width="0.1791%" height="15" fill="rgb(215,215,53)" fg:x="758" fg:w="2"/><text x="68.1103%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (5 samples, 0.45%)</title><rect x="68.0394%" y="133" width="0.4476%" height="15" fill="rgb(223,4,10)" fg:x="760" fg:w="5"/><text x="68.2894%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (4 samples, 0.36%)</title><rect x="68.4870%" y="133" width="0.3581%" height="15" fill="rgb(234,103,6)" fg:x="765" fg:w="4"/><text x="68.7370%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (37 samples, 3.31%)</title><rect x="65.7117%" y="149" width="3.3124%" height="15" fill="rgb(227,97,0)" fg:x="734" fg:w="37"/><text x="65.9617%" y="159.50">bro..</text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (2 samples, 0.18%)</title><rect x="68.8451%" y="133" width="0.1791%" height="15" fill="rgb(234,150,53)" fg:x="769" fg:w="2"/><text x="69.0951%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (4 samples, 0.36%)</title><rect x="69.0242%" y="149" width="0.3581%" height="15" fill="rgb(228,201,54)" fg:x="771" fg:w="4"/><text x="69.2742%" y="159.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (10 samples, 0.90%)</title><rect x="69.3823%" y="149" width="0.8953%" height="15" fill="rgb(222,22,37)" fg:x="775" fg:w="10"/><text x="69.6323%" y="159.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.18%)</title><rect x="70.0985%" y="133" width="0.1791%" height="15" fill="rgb(237,53,32)" fg:x="783" fg:w="2"/><text x="70.3485%" y="143.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="70.1880%" y="117" width="0.0895%" height="15" fill="rgb(233,25,53)" fg:x="784" fg:w="1"/><text x="70.4380%" y="127.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (134 samples, 12.00%)</title><rect x="58.8183%" y="165" width="11.9964%" height="15" fill="rgb(210,40,34)" fg:x="657" fg:w="134"/><text x="59.0683%" y="175.50">brotli::enc::write..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (6 samples, 0.54%)</title><rect x="70.2775%" y="149" width="0.5372%" height="15" fill="rgb(241,220,44)" fg:x="785" fg:w="6"/><text x="70.5275%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (6 samples, 0.54%)</title><rect x="70.2775%" y="133" width="0.5372%" height="15" fill="rgb(235,28,35)" fg:x="785" fg:w="6"/><text x="70.5275%" y="143.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (217 samples, 19.43%)</title><rect x="51.4772%" y="181" width="19.4270%" height="15" fill="rgb(210,56,17)" fg:x="575" fg:w="217"/><text x="51.7272%" y="191.50">&lt;parquet::compression::brotli_..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="70.8147%" y="165" width="0.0895%" height="15" fill="rgb(224,130,29)" fg:x="791" fg:w="1"/><text x="71.0647%" y="175.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="70.8147%" y="149" width="0.0895%" height="15" fill="rgb(235,212,8)" fg:x="791" fg:w="1"/><text x="71.0647%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.09%)</title><rect x="70.9042%" y="181" width="0.0895%" height="15" fill="rgb(223,33,50)" fg:x="792" fg:w="1"/><text x="71.1542%" y="191.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="70.9042%" y="165" width="0.0895%" height="15" fill="rgb(219,149,13)" fg:x="792" fg:w="1"/><text x="71.1542%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (2 samples, 0.18%)</title><rect x="70.9937%" y="181" width="0.1791%" height="15" fill="rgb(250,156,29)" fg:x="793" fg:w="2"/><text x="71.2437%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (2 samples, 0.18%)</title><rect x="70.9937%" y="165" width="0.1791%" height="15" fill="rgb(216,193,19)" fg:x="793" fg:w="2"/><text x="71.2437%" y="175.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (2 samples, 0.18%)</title><rect x="70.9937%" y="149" width="0.1791%" height="15" fill="rgb(216,135,14)" fg:x="793" fg:w="2"/><text x="71.2437%" y="159.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="71.0833%" y="133" width="0.0895%" height="15" fill="rgb(241,47,5)" fg:x="794" fg:w="1"/><text x="71.3333%" y="143.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (234 samples, 20.95%)</title><rect x="50.4924%" y="197" width="20.9490%" height="15" fill="rgb(233,42,35)" fg:x="564" fg:w="234"/><text x="50.7424%" y="207.50">parquet::column::writer::GenericC..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (3 samples, 0.27%)</title><rect x="71.1728%" y="181" width="0.2686%" height="15" fill="rgb(231,13,6)" fg:x="795" fg:w="3"/><text x="71.4228%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (3 samples, 0.27%)</title><rect x="76.0967%" y="133" width="0.2686%" height="15" fill="rgb(207,181,40)" fg:x="850" fg:w="3"/><text x="76.3467%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (45 samples, 4.03%)</title><rect x="72.6947%" y="149" width="4.0286%" height="15" fill="rgb(254,173,49)" fg:x="812" fg:w="45"/><text x="72.9447%" y="159.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (4 samples, 0.36%)</title><rect x="76.3653%" y="133" width="0.3581%" height="15" fill="rgb(221,1,38)" fg:x="853" fg:w="4"/><text x="76.6153%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (56 samples, 5.01%)</title><rect x="71.8890%" y="165" width="5.0134%" height="15" fill="rgb(206,124,46)" fg:x="803" fg:w="56"/><text x="72.1390%" y="175.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.18%)</title><rect x="76.7234%" y="149" width="0.1791%" height="15" fill="rgb(249,21,11)" fg:x="857" fg:w="2"/><text x="76.9734%" y="159.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="76.9024%" y="165" width="0.0895%" height="15" fill="rgb(222,201,40)" fg:x="859" fg:w="1"/><text x="77.1524%" y="175.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="76.9024%" y="149" width="0.0895%" height="15" fill="rgb(235,61,29)" fg:x="859" fg:w="1"/><text x="77.1524%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (7 samples, 0.63%)</title><rect x="76.9919%" y="149" width="0.6267%" height="15" fill="rgb(219,207,3)" fg:x="860" fg:w="7"/><text x="77.2419%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="77.5291%" y="133" width="0.0895%" height="15" fill="rgb(222,56,46)" fg:x="866" fg:w="1"/><text x="77.7791%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (462 samples, 41.36%)</title><rect x="36.5264%" y="229" width="41.3608%" height="15" fill="rgb(239,76,54)" fg:x="408" fg:w="462"/><text x="36.7764%" y="239.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (444 samples, 39.75%)</title><rect x="38.1379%" y="213" width="39.7493%" height="15" fill="rgb(231,124,27)" fg:x="426" fg:w="444"/><text x="38.3879%" y="223.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_inte..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (72 samples, 6.45%)</title><rect x="71.4414%" y="197" width="6.4458%" height="15" fill="rgb(249,195,6)" fg:x="798" fg:w="72"/><text x="71.6914%" y="207.50">parquet:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (72 samples, 6.45%)</title><rect x="71.4414%" y="181" width="6.4458%" height="15" fill="rgb(237,174,47)" fg:x="798" fg:w="72"/><text x="71.6914%" y="191.50">&lt;parquet..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (10 samples, 0.90%)</title><rect x="76.9919%" y="165" width="0.8953%" height="15" fill="rgb(206,201,31)" fg:x="860" fg:w="10"/><text x="77.2419%" y="175.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (3 samples, 0.27%)</title><rect x="77.6186%" y="149" width="0.2686%" height="15" fill="rgb(231,57,52)" fg:x="867" fg:w="3"/><text x="77.8686%" y="159.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.09%)</title><rect x="77.7977%" y="133" width="0.0895%" height="15" fill="rgb(248,177,22)" fg:x="869" fg:w="1"/><text x="78.0477%" y="143.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="77.7977%" y="117" width="0.0895%" height="15" fill="rgb(215,211,37)" fg:x="869" fg:w="1"/><text x="78.0477%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::try_new (1 samples, 0.09%)</title><rect x="77.8872%" y="213" width="0.0895%" height="15" fill="rgb(241,128,51)" fg:x="870" fg:w="1"/><text x="78.1372%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (464 samples, 41.54%)</title><rect x="36.5264%" y="261" width="41.5398%" height="15" fill="rgb(227,165,31)" fg:x="408" fg:w="464"/><text x="36.7764%" y="271.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (464 samples, 41.54%)</title><rect x="36.5264%" y="245" width="41.5398%" height="15" fill="rgb(228,167,24)" fg:x="408" fg:w="464"/><text x="36.7764%" y="255.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (2 samples, 0.18%)</title><rect x="77.8872%" y="229" width="0.1791%" height="15" fill="rgb(228,143,12)" fg:x="870" fg:w="2"/><text x="78.1372%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (1 samples, 0.09%)</title><rect x="77.9767%" y="213" width="0.0895%" height="15" fill="rgb(249,149,8)" fg:x="871" fg:w="1"/><text x="78.2267%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.63%)</title><rect x="78.0662%" y="213" width="0.6267%" height="15" fill="rgb(243,35,44)" fg:x="872" fg:w="7"/><text x="78.3162%" y="223.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.63%)</title><rect x="78.0662%" y="197" width="0.6267%" height="15" fill="rgb(246,89,9)" fg:x="872" fg:w="7"/><text x="78.3162%" y="207.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.63%)</title><rect x="78.0662%" y="181" width="0.6267%" height="15" fill="rgb(233,213,13)" fg:x="872" fg:w="7"/><text x="78.3162%" y="191.50"></text></g><g><title>write (7 samples, 0.63%)</title><rect x="78.0662%" y="165" width="0.6267%" height="15" fill="rgb(233,141,41)" fg:x="872" fg:w="7"/><text x="78.3162%" y="175.50"></text></g><g><title>&lt;nu_ansi_term::display::AnsiGenericString&lt;str&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="78.6929%" y="181" width="0.0895%" height="15" fill="rgb(239,167,4)" fg:x="879" fg:w="1"/><text x="78.9429%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="78.6929%" y="165" width="0.0895%" height="15" fill="rgb(209,217,16)" fg:x="879" fg:w="1"/><text x="78.9429%" y="175.50"></text></g><g><title>nu_ansi_term::ansi::&lt;impl nu_ansi_term::style::Style&gt;::write_prefix (1 samples, 0.09%)</title><rect x="78.6929%" y="149" width="0.0895%" height="15" fill="rgb(219,88,35)" fg:x="879" fg:w="1"/><text x="78.9429%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="78.6929%" y="133" width="0.0895%" height="15" fill="rgb(220,193,23)" fg:x="879" fg:w="1"/><text x="78.9429%" y="143.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (805 samples, 72.07%)</title><rect x="6.8039%" y="277" width="72.0680%" height="15" fill="rgb(230,90,52)" fg:x="76" fg:w="805"/><text x="7.0539%" y="287.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (9 samples, 0.81%)</title><rect x="78.0662%" y="261" width="0.8057%" height="15" fill="rgb(252,106,19)" fg:x="872" fg:w="9"/><text x="78.3162%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (9 samples, 0.81%)</title><rect x="78.0662%" y="245" width="0.8057%" height="15" fill="rgb(206,74,20)" fg:x="872" fg:w="9"/><text x="78.3162%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.81%)</title><rect x="78.0662%" y="229" width="0.8057%" height="15" fill="rgb(230,138,44)" fg:x="872" fg:w="9"/><text x="78.3162%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.18%)</title><rect x="78.6929%" y="213" width="0.1791%" height="15" fill="rgb(235,182,43)" fg:x="879" fg:w="2"/><text x="78.9429%" y="223.50"></text></g><g><title>core::fmt::write (2 samples, 0.18%)</title><rect x="78.6929%" y="197" width="0.1791%" height="15" fill="rgb(242,16,51)" fg:x="879" fg:w="2"/><text x="78.9429%" y="207.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::FmtLevel as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="78.7825%" y="181" width="0.0895%" height="15" fill="rgb(248,9,4)" fg:x="880" fg:w="1"/><text x="79.0325%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="78.7825%" y="165" width="0.0895%" height="15" fill="rgb(210,31,22)" fg:x="880" fg:w="1"/><text x="79.0325%" y="175.50"></text></g><g><title>&lt;nu_ansi_term::display::AnsiGenericString&lt;str&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="78.7825%" y="149" width="0.0895%" height="15" fill="rgb(239,54,39)" fg:x="880" fg:w="1"/><text x="79.0325%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="78.7825%" y="133" width="0.0895%" height="15" fill="rgb(230,99,41)" fg:x="880" fg:w="1"/><text x="79.0325%" y="143.50"></text></g><g><title>nu_ansi_term::ansi::&lt;impl nu_ansi_term::style::Style&gt;::write_prefix (1 samples, 0.09%)</title><rect x="78.7825%" y="117" width="0.0895%" height="15" fill="rgb(253,106,12)" fg:x="880" fg:w="1"/><text x="79.0325%" y="127.50"></text></g><g><title>nu_ansi_term::ansi::&lt;impl nu_ansi_term::style::Color&gt;::write_foreground_code (1 samples, 0.09%)</title><rect x="78.7825%" y="101" width="0.0895%" height="15" fill="rgb(213,46,41)" fg:x="880" fg:w="1"/><text x="79.0325%" y="111.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="78.7825%" y="85" width="0.0895%" height="15" fill="rgb(215,133,35)" fg:x="880" fg:w="1"/><text x="79.0325%" y="95.50"></text></g><g><title>core::slice::memchr::memchr_aligned (6 samples, 0.54%)</title><rect x="79.9463%" y="261" width="0.5372%" height="15" fill="rgb(213,28,5)" fg:x="893" fg:w="6"/><text x="80.1963%" y="271.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (889 samples, 79.59%)</title><rect x="1.6115%" y="325" width="79.5882%" height="15" fill="rgb(215,77,49)" fg:x="18" fg:w="889"/><text x="1.8615%" y="335.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (880 samples, 78.78%)</title><rect x="2.4172%" y="309" width="78.7825%" height="15" fill="rgb(248,100,22)" fg:x="27" fg:w="880"/><text x="2.6672%" y="319.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (880 samples, 78.78%)</title><rect x="2.4172%" y="293" width="78.7825%" height="15" fill="rgb(208,67,9)" fg:x="27" fg:w="880"/><text x="2.6672%" y="303.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (26 samples, 2.33%)</title><rect x="78.8720%" y="277" width="2.3277%" height="15" fill="rgb(219,133,21)" fg:x="881" fg:w="26"/><text x="79.1220%" y="287.50">s..</text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.72%)</title><rect x="80.4834%" y="261" width="0.7162%" height="15" fill="rgb(246,46,29)" fg:x="899" fg:w="8"/><text x="80.7334%" y="271.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (1 samples, 0.09%)</title><rect x="81.1996%" y="293" width="0.0895%" height="15" fill="rgb(246,185,52)" fg:x="907" fg:w="1"/><text x="81.4496%" y="303.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="81.1996%" y="277" width="0.0895%" height="15" fill="rgb(252,136,11)" fg:x="907" fg:w="1"/><text x="81.4496%" y="287.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="81.2892%" y="133" width="0.0895%" height="15" fill="rgb(219,138,53)" fg:x="908" fg:w="1"/><text x="81.5392%" y="143.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (2 samples, 0.18%)</title><rect x="81.2892%" y="293" width="0.1791%" height="15" fill="rgb(211,51,23)" fg:x="908" fg:w="2"/><text x="81.5392%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.18%)</title><rect x="81.2892%" y="277" width="0.1791%" height="15" fill="rgb(247,221,28)" fg:x="908" fg:w="2"/><text x="81.5392%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.18%)</title><rect x="81.2892%" y="261" width="0.1791%" height="15" fill="rgb(251,222,45)" fg:x="908" fg:w="2"/><text x="81.5392%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.18%)</title><rect x="81.2892%" y="245" width="0.1791%" height="15" fill="rgb(217,162,53)" fg:x="908" fg:w="2"/><text x="81.5392%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.18%)</title><rect x="81.2892%" y="229" width="0.1791%" height="15" fill="rgb(229,93,14)" fg:x="908" fg:w="2"/><text x="81.5392%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.18%)</title><rect x="81.2892%" y="213" width="0.1791%" height="15" fill="rgb(209,67,49)" fg:x="908" fg:w="2"/><text x="81.5392%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.18%)</title><rect x="81.2892%" y="197" width="0.1791%" height="15" fill="rgb(213,87,29)" fg:x="908" fg:w="2"/><text x="81.5392%" y="207.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.18%)</title><rect x="81.2892%" y="181" width="0.1791%" height="15" fill="rgb(205,151,52)" fg:x="908" fg:w="2"/><text x="81.5392%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.18%)</title><rect x="81.2892%" y="165" width="0.1791%" height="15" fill="rgb(253,215,39)" fg:x="908" fg:w="2"/><text x="81.5392%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.18%)</title><rect x="81.2892%" y="149" width="0.1791%" height="15" fill="rgb(221,220,41)" fg:x="908" fg:w="2"/><text x="81.5392%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="81.3787%" y="133" width="0.0895%" height="15" fill="rgb(218,133,21)" fg:x="909" fg:w="1"/><text x="81.6287%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="81.3787%" y="117" width="0.0895%" height="15" fill="rgb(221,193,43)" fg:x="909" fg:w="1"/><text x="81.6287%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="81.3787%" y="101" width="0.0895%" height="15" fill="rgb(240,128,52)" fg:x="909" fg:w="1"/><text x="81.6287%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="81.3787%" y="85" width="0.0895%" height="15" fill="rgb(253,114,12)" fg:x="909" fg:w="1"/><text x="81.6287%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="81.3787%" y="69" width="0.0895%" height="15" fill="rgb(215,223,47)" fg:x="909" fg:w="1"/><text x="81.6287%" y="79.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (4 samples, 0.36%)</title><rect x="81.6473%" y="261" width="0.3581%" height="15" fill="rgb(248,225,23)" fg:x="912" fg:w="4"/><text x="81.8973%" y="271.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (4 samples, 0.36%)</title><rect x="81.6473%" y="245" width="0.3581%" height="15" fill="rgb(250,108,0)" fg:x="912" fg:w="4"/><text x="81.8973%" y="255.50"></text></g><g><title>csv_core::reader::Reader::read_record (4 samples, 0.36%)</title><rect x="81.6473%" y="229" width="0.3581%" height="15" fill="rgb(228,208,7)" fg:x="912" fg:w="4"/><text x="81.8973%" y="239.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (8 samples, 0.72%)</title><rect x="81.6473%" y="277" width="0.7162%" height="15" fill="rgb(244,45,10)" fg:x="912" fg:w="8"/><text x="81.8973%" y="287.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (4 samples, 0.36%)</title><rect x="82.0054%" y="261" width="0.3581%" height="15" fill="rgb(207,125,25)" fg:x="916" fg:w="4"/><text x="82.2554%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.36%)</title><rect x="82.0054%" y="245" width="0.3581%" height="15" fill="rgb(210,195,18)" fg:x="916" fg:w="4"/><text x="82.2554%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.36%)</title><rect x="82.0054%" y="229" width="0.3581%" height="15" fill="rgb(249,80,12)" fg:x="916" fg:w="4"/><text x="82.2554%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.36%)</title><rect x="82.0054%" y="213" width="0.3581%" height="15" fill="rgb(221,65,9)" fg:x="916" fg:w="4"/><text x="82.2554%" y="223.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (4 samples, 0.36%)</title><rect x="82.0054%" y="197" width="0.3581%" height="15" fill="rgb(235,49,36)" fg:x="916" fg:w="4"/><text x="82.2554%" y="207.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (3 samples, 0.27%)</title><rect x="82.0949%" y="181" width="0.2686%" height="15" fill="rgb(225,32,20)" fg:x="917" fg:w="3"/><text x="82.3449%" y="191.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="82.3635%" y="277" width="0.0895%" height="15" fill="rgb(215,141,46)" fg:x="920" fg:w="1"/><text x="82.6135%" y="287.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 0.27%)</title><rect x="82.7216%" y="261" width="0.2686%" height="15" fill="rgb(250,160,47)" fg:x="924" fg:w="3"/><text x="82.9716%" y="271.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (2 samples, 0.18%)</title><rect x="82.8111%" y="245" width="0.1791%" height="15" fill="rgb(216,222,40)" fg:x="925" fg:w="2"/><text x="83.0611%" y="255.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (3 samples, 0.27%)</title><rect x="82.9902%" y="261" width="0.2686%" height="15" fill="rgb(234,217,39)" fg:x="927" fg:w="3"/><text x="83.2402%" y="271.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (3 samples, 0.27%)</title><rect x="82.9902%" y="245" width="0.2686%" height="15" fill="rgb(207,178,40)" fg:x="927" fg:w="3"/><text x="83.2402%" y="255.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (10 samples, 0.90%)</title><rect x="82.4530%" y="277" width="0.8953%" height="15" fill="rgb(221,136,13)" fg:x="921" fg:w="10"/><text x="82.7030%" y="287.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.09%)</title><rect x="83.2587%" y="261" width="0.0895%" height="15" fill="rgb(249,199,10)" fg:x="930" fg:w="1"/><text x="83.5087%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="83.2587%" y="245" width="0.0895%" height="15" fill="rgb(249,222,13)" fg:x="930" fg:w="1"/><text x="83.5087%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (2 samples, 0.18%)</title><rect x="83.3483%" y="197" width="0.1791%" height="15" fill="rgb(244,185,38)" fg:x="931" fg:w="2"/><text x="83.5983%" y="207.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (2 samples, 0.18%)</title><rect x="83.3483%" y="181" width="0.1791%" height="15" fill="rgb(236,202,9)" fg:x="931" fg:w="2"/><text x="83.5983%" y="191.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="83.4378%" y="165" width="0.0895%" height="15" fill="rgb(250,229,37)" fg:x="932" fg:w="1"/><text x="83.6878%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (3 samples, 0.27%)</title><rect x="83.3483%" y="229" width="0.2686%" height="15" fill="rgb(206,174,23)" fg:x="931" fg:w="3"/><text x="83.5983%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (3 samples, 0.27%)</title><rect x="83.3483%" y="213" width="0.2686%" height="15" fill="rgb(211,33,43)" fg:x="931" fg:w="3"/><text x="83.5983%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="83.5273%" y="197" width="0.0895%" height="15" fill="rgb(245,58,50)" fg:x="933" fg:w="1"/><text x="83.7773%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="83.5273%" y="181" width="0.0895%" height="15" fill="rgb(244,68,36)" fg:x="933" fg:w="1"/><text x="83.7773%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="83.5273%" y="165" width="0.0895%" height="15" fill="rgb(232,229,15)" fg:x="933" fg:w="1"/><text x="83.7773%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="83.5273%" y="149" width="0.0895%" height="15" fill="rgb(254,30,23)" fg:x="933" fg:w="1"/><text x="83.7773%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (3 samples, 0.27%)</title><rect x="83.7064%" y="213" width="0.2686%" height="15" fill="rgb(235,160,14)" fg:x="935" fg:w="3"/><text x="83.9564%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="83.8854%" y="197" width="0.0895%" height="15" fill="rgb(212,155,44)" fg:x="937" fg:w="1"/><text x="84.1354%" y="207.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="84.0645%" y="197" width="0.0895%" height="15" fill="rgb(226,2,50)" fg:x="939" fg:w="1"/><text x="84.3145%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (8 samples, 0.72%)</title><rect x="83.9749%" y="213" width="0.7162%" height="15" fill="rgb(234,177,6)" fg:x="938" fg:w="8"/><text x="84.2249%" y="223.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (6 samples, 0.54%)</title><rect x="84.1540%" y="197" width="0.5372%" height="15" fill="rgb(217,24,9)" fg:x="940" fg:w="6"/><text x="84.4040%" y="207.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (5 samples, 0.45%)</title><rect x="84.2435%" y="181" width="0.4476%" height="15" fill="rgb(220,13,46)" fg:x="941" fg:w="5"/><text x="84.4935%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="84.6911%" y="197" width="0.0895%" height="15" fill="rgb(239,221,27)" fg:x="946" fg:w="1"/><text x="84.9411%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="84.7807%" y="181" width="0.0895%" height="15" fill="rgb(222,198,25)" fg:x="947" fg:w="1"/><text x="85.0307%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="84.7807%" y="165" width="0.0895%" height="15" fill="rgb(211,99,13)" fg:x="947" fg:w="1"/><text x="85.0307%" y="175.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="84.8702%" y="181" width="0.0895%" height="15" fill="rgb(232,111,31)" fg:x="948" fg:w="1"/><text x="85.1202%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="84.8702%" y="165" width="0.0895%" height="15" fill="rgb(245,82,37)" fg:x="948" fg:w="1"/><text x="85.1202%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (6 samples, 0.54%)</title><rect x="85.0492%" y="149" width="0.5372%" height="15" fill="rgb(227,149,46)" fg:x="950" fg:w="6"/><text x="85.2992%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="85.4969%" y="133" width="0.0895%" height="15" fill="rgb(218,36,50)" fg:x="955" fg:w="1"/><text x="85.7469%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (8 samples, 0.72%)</title><rect x="84.9597%" y="165" width="0.7162%" height="15" fill="rgb(226,80,48)" fg:x="949" fg:w="8"/><text x="85.2097%" y="175.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="85.5864%" y="149" width="0.0895%" height="15" fill="rgb(238,224,15)" fg:x="956" fg:w="1"/><text x="85.8364%" y="159.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="85.6759%" y="165" width="0.0895%" height="15" fill="rgb(241,136,10)" fg:x="957" fg:w="1"/><text x="85.9259%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (13 samples, 1.16%)</title><rect x="84.6911%" y="213" width="1.1638%" height="15" fill="rgb(208,32,45)" fg:x="946" fg:w="13"/><text x="84.9411%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (12 samples, 1.07%)</title><rect x="84.7807%" y="197" width="1.0743%" height="15" fill="rgb(207,135,9)" fg:x="947" fg:w="12"/><text x="85.0307%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (10 samples, 0.90%)</title><rect x="84.9597%" y="181" width="0.8953%" height="15" fill="rgb(206,86,44)" fg:x="949" fg:w="10"/><text x="85.2097%" y="191.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="85.7654%" y="165" width="0.0895%" height="15" fill="rgb(245,177,15)" fg:x="958" fg:w="1"/><text x="86.0154%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (6 samples, 0.54%)</title><rect x="85.8550%" y="181" width="0.5372%" height="15" fill="rgb(206,64,50)" fg:x="959" fg:w="6"/><text x="86.1050%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (6 samples, 0.54%)</title><rect x="85.8550%" y="165" width="0.5372%" height="15" fill="rgb(234,36,40)" fg:x="959" fg:w="6"/><text x="86.1050%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="86.3026%" y="149" width="0.0895%" height="15" fill="rgb(213,64,8)" fg:x="964" fg:w="1"/><text x="86.5526%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (35 samples, 3.13%)</title><rect x="83.3483%" y="277" width="3.1334%" height="15" fill="rgb(210,75,36)" fg:x="931" fg:w="35"/><text x="83.5983%" y="287.50">par..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (35 samples, 3.13%)</title><rect x="83.3483%" y="261" width="3.1334%" height="15" fill="rgb(229,88,21)" fg:x="931" fg:w="35"/><text x="83.5983%" y="271.50">par..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (35 samples, 3.13%)</title><rect x="83.3483%" y="245" width="3.1334%" height="15" fill="rgb(252,204,47)" fg:x="931" fg:w="35"/><text x="83.5983%" y="255.50">par..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (32 samples, 2.86%)</title><rect x="83.6168%" y="229" width="2.8648%" height="15" fill="rgb(208,77,27)" fg:x="934" fg:w="32"/><text x="83.8668%" y="239.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (7 samples, 0.63%)</title><rect x="85.8550%" y="213" width="0.6267%" height="15" fill="rgb(221,76,26)" fg:x="959" fg:w="7"/><text x="86.1050%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.63%)</title><rect x="85.8550%" y="197" width="0.6267%" height="15" fill="rgb(225,139,18)" fg:x="959" fg:w="7"/><text x="86.1050%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="86.3921%" y="181" width="0.0895%" height="15" fill="rgb(230,137,11)" fg:x="965" fg:w="1"/><text x="86.6421%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="86.3921%" y="165" width="0.0895%" height="15" fill="rgb(212,28,1)" fg:x="965" fg:w="1"/><text x="86.6421%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (57 samples, 5.10%)</title><rect x="81.4682%" y="293" width="5.1030%" height="15" fill="rgb(248,164,17)" fg:x="910" fg:w="57"/><text x="81.7182%" y="303.50">nemscr..</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="86.4816%" y="277" width="0.0895%" height="15" fill="rgb(222,171,42)" fg:x="966" fg:w="1"/><text x="86.7316%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="86.4816%" y="261" width="0.0895%" height="15" fill="rgb(243,84,45)" fg:x="966" fg:w="1"/><text x="86.7316%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="86.4816%" y="245" width="0.0895%" height="15" fill="rgb(252,49,23)" fg:x="966" fg:w="1"/><text x="86.7316%" y="255.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="86.4816%" y="229" width="0.0895%" height="15" fill="rgb(215,19,7)" fg:x="966" fg:w="1"/><text x="86.7316%" y="239.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="86.4816%" y="213" width="0.0895%" height="15" fill="rgb(238,81,41)" fg:x="966" fg:w="1"/><text x="86.7316%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="86.4816%" y="197" width="0.0895%" height="15" fill="rgb(210,199,37)" fg:x="966" fg:w="1"/><text x="86.7316%" y="207.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="86.4816%" y="181" width="0.0895%" height="15" fill="rgb(244,192,49)" fg:x="966" fg:w="1"/><text x="86.7316%" y="191.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (62 samples, 5.55%)</title><rect x="81.1996%" y="325" width="5.5506%" height="15" fill="rgb(226,211,11)" fg:x="907" fg:w="62"/><text x="81.4496%" y="335.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (62 samples, 5.55%)</title><rect x="81.1996%" y="309" width="5.5506%" height="15" fill="rgb(236,162,54)" fg:x="907" fg:w="62"/><text x="81.4496%" y="319.50">nemscra..</text></g><g><title>std::io::append_to_string (2 samples, 0.18%)</title><rect x="86.5712%" y="293" width="0.1791%" height="15" fill="rgb(220,229,9)" fg:x="967" fg:w="2"/><text x="86.8212%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.18%)</title><rect x="86.5712%" y="277" width="0.1791%" height="15" fill="rgb(250,87,22)" fg:x="967" fg:w="2"/><text x="86.8212%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (3 samples, 0.27%)</title><rect x="87.1979%" y="261" width="0.2686%" height="15" fill="rgb(239,43,17)" fg:x="974" fg:w="3"/><text x="87.4479%" y="271.50"></text></g><g><title>crc32fast::Hasher::update (11 samples, 0.98%)</title><rect x="87.1083%" y="293" width="0.9848%" height="15" fill="rgb(231,177,25)" fg:x="973" fg:w="11"/><text x="87.3583%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (11 samples, 0.98%)</title><rect x="87.1083%" y="277" width="0.9848%" height="15" fill="rgb(219,179,1)" fg:x="973" fg:w="11"/><text x="87.3583%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (7 samples, 0.63%)</title><rect x="87.4664%" y="261" width="0.6267%" height="15" fill="rgb(238,219,53)" fg:x="977" fg:w="7"/><text x="87.7164%" y="271.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (73 samples, 6.54%)</title><rect x="88.7198%" y="229" width="6.5354%" height="15" fill="rgb(232,167,36)" fg:x="991" fg:w="73"/><text x="88.9698%" y="239.50">zlib_rs::..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (2 samples, 0.18%)</title><rect x="95.2551%" y="229" width="0.1791%" height="15" fill="rgb(244,19,51)" fg:x="1064" fg:w="2"/><text x="95.5051%" y="239.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (83 samples, 7.43%)</title><rect x="88.0931%" y="277" width="7.4306%" height="15" fill="rgb(224,6,22)" fg:x="984" fg:w="83"/><text x="88.3431%" y="287.50">&lt;flate2::m..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (83 samples, 7.43%)</title><rect x="88.0931%" y="261" width="7.4306%" height="15" fill="rgb(224,145,5)" fg:x="984" fg:w="83"/><text x="88.3431%" y="271.50">&lt;flate2::f..</text></g><g><title>zlib_rs::inflate::inflate (83 samples, 7.43%)</title><rect x="88.0931%" y="245" width="7.4306%" height="15" fill="rgb(234,130,49)" fg:x="984" fg:w="83"/><text x="88.3431%" y="255.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.09%)</title><rect x="95.4342%" y="229" width="0.0895%" height="15" fill="rgb(254,6,2)" fg:x="1066" fg:w="1"/><text x="95.6842%" y="239.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (95 samples, 8.50%)</title><rect x="87.1083%" y="309" width="8.5049%" height="15" fill="rgb(208,96,46)" fg:x="973" fg:w="95"/><text x="87.3583%" y="319.50">&lt;zip::read::..</text></g><g><title>flate2::zio::read (84 samples, 7.52%)</title><rect x="88.0931%" y="293" width="7.5201%" height="15" fill="rgb(239,3,39)" fg:x="984" fg:w="84"/><text x="88.3431%" y="303.50">flate2::zi..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="95.5237%" y="277" width="0.0895%" height="15" fill="rgb(233,210,1)" fg:x="1067" fg:w="1"/><text x="95.7737%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (10 samples, 0.90%)</title><rect x="95.6132%" y="309" width="0.8953%" height="15" fill="rgb(244,137,37)" fg:x="1068" fg:w="10"/><text x="95.8632%" y="319.50"></text></g><g><title>bench_zip_to_pa (1,082 samples, 96.87%)</title><rect x="0.0000%" y="517" width="96.8666%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="527.50">bench_zip_to_pa</text></g><g><title>_start (1,082 samples, 96.87%)</title><rect x="0.0000%" y="501" width="96.8666%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="511.50">_start</text></g><g><title>__libc_start_main (1,082 samples, 96.87%)</title><rect x="0.0000%" y="485" width="96.8666%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="495.50">__libc_start_main</text></g><g><title>main (1,082 samples, 96.87%)</title><rect x="0.0000%" y="469" width="96.8666%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (1,082 samples, 96.87%)</title><rect x="0.0000%" y="453" width="96.8666%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,082 samples, 96.87%)</title><rect x="0.0000%" y="437" width="96.8666%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,082 samples, 96.87%)</title><rect x="0.0000%" y="421" width="96.8666%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,082 samples, 96.87%)</title><rect x="0.0000%" y="405" width="96.8666%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="415.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,082 samples, 96.87%)</title><rect x="0.0000%" y="389" width="96.8666%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,082 samples, 96.87%)</title><rect x="0.0000%" y="373" width="96.8666%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="1082"/><text x="0.2500%" y="383.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,081 samples, 96.78%)</title><rect x="0.0895%" y="357" width="96.7771%" height="15" fill="rgb(238,205,33)" fg:x="1" fg:w="1081"/><text x="0.3395%" y="367.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (1,066 samples, 95.43%)</title><rect x="1.4324%" y="341" width="95.4342%" height="15" fill="rgb(231,56,7)" fg:x="16" fg:w="1066"/><text x="1.6824%" y="351.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (113 samples, 10.12%)</title><rect x="86.7502%" y="325" width="10.1164%" height="15" fill="rgb(244,186,29)" fg:x="969" fg:w="113"/><text x="87.0002%" y="335.50">std::io::append..</text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.36%)</title><rect x="96.5085%" y="309" width="0.3581%" height="15" fill="rgb(234,111,31)" fg:x="1078" fg:w="4"/><text x="96.7585%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.27%)</title><rect x="96.9561%" y="293" width="0.2686%" height="15" fill="rgb(241,149,10)" fg:x="1083" fg:w="3"/><text x="97.2061%" y="303.50"></text></g><g><title>syscall (3 samples, 0.27%)</title><rect x="96.9561%" y="277" width="0.2686%" height="15" fill="rgb(249,206,44)" fg:x="1083" fg:w="3"/><text x="97.2061%" y="287.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.09%)</title><rect x="97.2247%" y="293" width="0.0895%" height="15" fill="rgb(251,153,30)" fg:x="1086" fg:w="1"/><text x="97.4747%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (8 samples, 0.72%)</title><rect x="96.9561%" y="325" width="0.7162%" height="15" fill="rgb(239,152,38)" fg:x="1083" fg:w="8"/><text x="97.2061%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (8 samples, 0.72%)</title><rect x="96.9561%" y="309" width="0.7162%" height="15" fill="rgb(249,139,47)" fg:x="1083" fg:w="8"/><text x="97.2061%" y="319.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (4 samples, 0.36%)</title><rect x="97.3142%" y="293" width="0.3581%" height="15" fill="rgb(244,64,35)" fg:x="1087" fg:w="4"/><text x="97.5642%" y="303.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (4 samples, 0.36%)</title><rect x="97.3142%" y="277" width="0.3581%" height="15" fill="rgb(216,46,15)" fg:x="1087" fg:w="4"/><text x="97.5642%" y="287.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.36%)</title><rect x="97.3142%" y="261" width="0.3581%" height="15" fill="rgb(250,74,19)" fg:x="1087" fg:w="4"/><text x="97.5642%" y="271.50"></text></g><g><title>epoll_wait (4 samples, 0.36%)</title><rect x="97.3142%" y="245" width="0.3581%" height="15" fill="rgb(249,42,33)" fg:x="1087" fg:w="4"/><text x="97.5642%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (10 samples, 0.90%)</title><rect x="97.6723%" y="309" width="0.8953%" height="15" fill="rgb(242,149,17)" fg:x="1091" fg:w="10"/><text x="97.9223%" y="319.50"></text></g><g><title>syscall (10 samples, 0.90%)</title><rect x="97.6723%" y="293" width="0.8953%" height="15" fill="rgb(244,29,21)" fg:x="1091" fg:w="10"/><text x="97.9223%" y="303.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.36%)</title><rect x="98.5676%" y="309" width="0.3581%" height="15" fill="rgb(220,130,37)" fg:x="1101" fg:w="4"/><text x="98.8176%" y="319.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.36%)</title><rect x="98.5676%" y="293" width="0.3581%" height="15" fill="rgb(211,67,2)" fg:x="1101" fg:w="4"/><text x="98.8176%" y="303.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (4 samples, 0.36%)</title><rect x="98.5676%" y="277" width="0.3581%" height="15" fill="rgb(235,68,52)" fg:x="1101" fg:w="4"/><text x="98.8176%" y="287.50"></text></g><g><title>write (4 samples, 0.36%)</title><rect x="98.5676%" y="261" width="0.3581%" height="15" fill="rgb(246,142,3)" fg:x="1101" fg:w="4"/><text x="98.8176%" y="271.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (7 samples, 0.63%)</title><rect x="98.9257%" y="229" width="0.6267%" height="15" fill="rgb(241,25,7)" fg:x="1105" fg:w="7"/><text x="99.1757%" y="239.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (7 samples, 0.63%)</title><rect x="98.9257%" y="213" width="0.6267%" height="15" fill="rgb(242,119,39)" fg:x="1105" fg:w="7"/><text x="99.1757%" y="223.50"></text></g><g><title>tokio::runtime::park::wake (6 samples, 0.54%)</title><rect x="99.0152%" y="197" width="0.5372%" height="15" fill="rgb(241,98,45)" fg:x="1106" fg:w="6"/><text x="99.2652%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.54%)</title><rect x="99.0152%" y="181" width="0.5372%" height="15" fill="rgb(254,28,30)" fg:x="1106" fg:w="6"/><text x="99.2652%" y="191.50"></text></g><g><title>syscall (6 samples, 0.54%)</title><rect x="99.0152%" y="165" width="0.5372%" height="15" fill="rgb(241,142,54)" fg:x="1106" fg:w="6"/><text x="99.2652%" y="175.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="99.7314%" y="133" width="0.0895%" height="15" fill="rgb(222,85,15)" fg:x="1114" fg:w="1"/><text x="99.9814%" y="143.50"></text></g><g><title>all (1,117 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="1117"/><text x="0.2500%" y="543.50"></text></g><g><title>tokio-runtime-w (35 samples, 3.13%)</title><rect x="96.8666%" y="517" width="3.1334%" height="15" fill="rgb(224,206,25)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="527.50">tok..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (35 samples, 3.13%)</title><rect x="96.8666%" y="501" width="3.1334%" height="15" fill="rgb(243,201,19)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="511.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (35 samples, 3.13%)</title><rect x="96.8666%" y="485" width="3.1334%" height="15" fill="rgb(236,59,4)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="495.50">cor..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (35 samples, 3.13%)</title><rect x="96.8666%" y="469" width="3.1334%" height="15" fill="rgb(254,179,45)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="479.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (35 samples, 3.13%)</title><rect x="96.8666%" y="453" width="3.1334%" height="15" fill="rgb(226,14,10)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="463.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (35 samples, 3.13%)</title><rect x="96.8666%" y="437" width="3.1334%" height="15" fill="rgb(244,27,41)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="447.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (35 samples, 3.13%)</title><rect x="96.8666%" y="421" width="3.1334%" height="15" fill="rgb(235,35,32)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="431.50">tok..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 3.13%)</title><rect x="96.8666%" y="405" width="3.1334%" height="15" fill="rgb(218,68,31)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="415.50">&lt;to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (35 samples, 3.13%)</title><rect x="96.8666%" y="389" width="3.1334%" height="15" fill="rgb(207,120,37)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="399.50">tok..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (35 samples, 3.13%)</title><rect x="96.8666%" y="373" width="3.1334%" height="15" fill="rgb(227,98,0)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="383.50">tok..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (35 samples, 3.13%)</title><rect x="96.8666%" y="357" width="3.1334%" height="15" fill="rgb(207,7,3)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="367.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (35 samples, 3.13%)</title><rect x="96.8666%" y="341" width="3.1334%" height="15" fill="rgb(206,98,19)" fg:x="1082" fg:w="35"/><text x="97.1166%" y="351.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (26 samples, 2.33%)</title><rect x="97.6723%" y="325" width="2.3277%" height="15" fill="rgb(217,5,26)" fg:x="1091" fg:w="26"/><text x="97.9223%" y="335.50">t..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12 samples, 1.07%)</title><rect x="98.9257%" y="309" width="1.0743%" height="15" fill="rgb(235,190,38)" fg:x="1105" fg:w="12"/><text x="99.1757%" y="319.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 1.07%)</title><rect x="98.9257%" y="293" width="1.0743%" height="15" fill="rgb(247,86,24)" fg:x="1105" fg:w="12"/><text x="99.1757%" y="303.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (12 samples, 1.07%)</title><rect x="98.9257%" y="277" width="1.0743%" height="15" fill="rgb(205,101,16)" fg:x="1105" fg:w="12"/><text x="99.1757%" y="287.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (12 samples, 1.07%)</title><rect x="98.9257%" y="261" width="1.0743%" height="15" fill="rgb(246,168,33)" fg:x="1105" fg:w="12"/><text x="99.1757%" y="271.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (12 samples, 1.07%)</title><rect x="98.9257%" y="245" width="1.0743%" height="15" fill="rgb(231,114,1)" fg:x="1105" fg:w="12"/><text x="99.1757%" y="255.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (5 samples, 0.45%)</title><rect x="99.5524%" y="229" width="0.4476%" height="15" fill="rgb(207,184,53)" fg:x="1112" fg:w="5"/><text x="99.8024%" y="239.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (5 samples, 0.45%)</title><rect x="99.5524%" y="213" width="0.4476%" height="15" fill="rgb(224,95,51)" fg:x="1112" fg:w="5"/><text x="99.8024%" y="223.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (5 samples, 0.45%)</title><rect x="99.5524%" y="197" width="0.4476%" height="15" fill="rgb(212,188,45)" fg:x="1112" fg:w="5"/><text x="99.8024%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (5 samples, 0.45%)</title><rect x="99.5524%" y="181" width="0.4476%" height="15" fill="rgb(223,154,38)" fg:x="1112" fg:w="5"/><text x="99.8024%" y="191.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.45%)</title><rect x="99.5524%" y="165" width="0.4476%" height="15" fill="rgb(251,22,52)" fg:x="1112" fg:w="5"/><text x="99.8024%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.45%)</title><rect x="99.5524%" y="149" width="0.4476%" height="15" fill="rgb(229,209,22)" fg:x="1112" fg:w="5"/><text x="99.8024%" y="159.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (2 samples, 0.18%)</title><rect x="99.8209%" y="133" width="0.1791%" height="15" fill="rgb(234,138,34)" fg:x="1115" fg:w="2"/><text x="100.0709%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (2 samples, 0.18%)</title><rect x="99.8209%" y="117" width="0.1791%" height="15" fill="rgb(212,95,11)" fg:x="1115" fg:w="2"/><text x="100.0709%" y="127.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="99.9105%" y="101" width="0.0895%" height="15" fill="rgb(240,179,47)" fg:x="1116" fg:w="1"/><text x="100.1605%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1 samples, 0.09%)</title><rect x="99.9105%" y="85" width="0.0895%" height="15" fill="rgb(240,163,11)" fg:x="1116" fg:w="1"/><text x="100.1605%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="99.9105%" y="69" width="0.0895%" height="15" fill="rgb(236,37,12)" fg:x="1116" fg:w="1"/><text x="100.1605%" y="79.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="99.9105%" y="53" width="0.0895%" height="15" fill="rgb(232,164,16)" fg:x="1116" fg:w="1"/><text x="100.1605%" y="63.50"></text></g><g><title>recv (1 samples, 0.09%)</title><rect x="99.9105%" y="37" width="0.0895%" height="15" fill="rgb(244,205,15)" fg:x="1116" fg:w="1"/><text x="100.1605%" y="47.50"></text></g></svg></svg>