<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="840"><g><title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.95%)</title><rect x="1.3095%" y="229" width="0.9524%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="8"/><text x="1.5595%" y="239.50"></text></g><g><title>syscall (8 samples, 0.95%)</title><rect x="1.3095%" y="213" width="0.9524%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="8"/><text x="1.5595%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.79%)</title><rect x="1.1905%" y="389" width="1.7857%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="15"/><text x="1.4405%" y="399.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (15 samples, 1.79%)</title><rect x="1.1905%" y="373" width="1.7857%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="15"/><text x="1.4405%" y="383.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (15 samples, 1.79%)</title><rect x="1.1905%" y="357" width="1.7857%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="15"/><text x="1.4405%" y="367.50">&lt;..</text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (15 samples, 1.79%)</title><rect x="1.1905%" y="341" width="1.7857%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="15"/><text x="1.4405%" y="351.50">&lt;..</text></g><g><title>hyper::body::body::Body::poll_inner (15 samples, 1.79%)</title><rect x="1.1905%" y="325" width="1.7857%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="15"/><text x="1.4405%" y="335.50">h..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.79%)</title><rect x="1.1905%" y="309" width="1.7857%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="15"/><text x="1.4405%" y="319.50">&lt;..</text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (15 samples, 1.79%)</title><rect x="1.1905%" y="293" width="1.7857%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="15"/><text x="1.4405%" y="303.50">f..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (15 samples, 1.79%)</title><rect x="1.1905%" y="277" width="1.7857%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="15"/><text x="1.4405%" y="287.50">t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (15 samples, 1.79%)</title><rect x="1.1905%" y="261" width="1.7857%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="15"/><text x="1.4405%" y="271.50">t..</text></g><g><title>tokio::runtime::context::with_scheduler (14 samples, 1.67%)</title><rect x="1.3095%" y="245" width="1.6667%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="14"/><text x="1.5595%" y="255.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (6 samples, 0.71%)</title><rect x="2.2619%" y="229" width="0.7143%" height="15" fill="rgb(216,20,37)" fg:x="19" fg:w="6"/><text x="2.5119%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (6 samples, 0.71%)</title><rect x="2.2619%" y="213" width="0.7143%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="6"/><text x="2.5119%" y="223.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (6 samples, 0.71%)</title><rect x="2.2619%" y="197" width="0.7143%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="6"/><text x="2.5119%" y="207.50"></text></g><g><title>write (6 samples, 0.71%)</title><rect x="2.2619%" y="181" width="0.7143%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="6"/><text x="2.5119%" y="191.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.12%)</title><rect x="2.9762%" y="389" width="0.1190%" height="15" fill="rgb(225,20,46)" fg:x="25" fg:w="1"/><text x="3.2262%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.12%)</title><rect x="2.9762%" y="373" width="0.1190%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="1"/><text x="3.2262%" y="383.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (1 samples, 0.12%)</title><rect x="2.9762%" y="357" width="0.1190%" height="15" fill="rgb(221,200,47)" fg:x="25" fg:w="1"/><text x="3.2262%" y="367.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (1 samples, 0.12%)</title><rect x="2.9762%" y="341" width="0.1190%" height="15" fill="rgb(226,26,5)" fg:x="25" fg:w="1"/><text x="3.2262%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.12%)</title><rect x="3.0952%" y="389" width="0.1190%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="1"/><text x="3.3452%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.12%)</title><rect x="4.2857%" y="325" width="0.1190%" height="15" fill="rgb(235,183,28)" fg:x="36" fg:w="1"/><text x="4.5357%" y="335.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (17 samples, 2.02%)</title><rect x="4.4048%" y="325" width="2.0238%" height="15" fill="rgb(221,5,38)" fg:x="37" fg:w="17"/><text x="4.6548%" y="335.50">n..</text></g><g><title>malloc (12 samples, 1.43%)</title><rect x="5.0000%" y="309" width="1.4286%" height="15" fill="rgb(247,18,42)" fg:x="42" fg:w="12"/><text x="5.2500%" y="319.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.12%)</title><rect x="6.5476%" y="277" width="0.1190%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="1"/><text x="6.7976%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.12%)</title><rect x="6.5476%" y="261" width="0.1190%" height="15" fill="rgb(249,31,29)" fg:x="55" fg:w="1"/><text x="6.7976%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.12%)</title><rect x="6.5476%" y="245" width="0.1190%" height="15" fill="rgb(225,111,53)" fg:x="55" fg:w="1"/><text x="6.7976%" y="255.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (3 samples, 0.36%)</title><rect x="6.5476%" y="293" width="0.3571%" height="15" fill="rgb(238,160,17)" fg:x="55" fg:w="3"/><text x="6.7976%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (2 samples, 0.24%)</title><rect x="6.6667%" y="277" width="0.2381%" height="15" fill="rgb(214,148,48)" fg:x="56" fg:w="2"/><text x="6.9167%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.24%)</title><rect x="6.6667%" y="261" width="0.2381%" height="15" fill="rgb(232,36,49)" fg:x="56" fg:w="2"/><text x="6.9167%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.24%)</title><rect x="6.6667%" y="245" width="0.2381%" height="15" fill="rgb(209,103,24)" fg:x="56" fg:w="2"/><text x="6.9167%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.24%)</title><rect x="6.6667%" y="229" width="0.2381%" height="15" fill="rgb(229,88,8)" fg:x="56" fg:w="2"/><text x="6.9167%" y="239.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (2 samples, 0.24%)</title><rect x="6.6667%" y="213" width="0.2381%" height="15" fill="rgb(213,181,19)" fg:x="56" fg:w="2"/><text x="6.9167%" y="223.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::with_capacity (1 samples, 0.12%)</title><rect x="6.7857%" y="197" width="0.1190%" height="15" fill="rgb(254,191,54)" fg:x="57" fg:w="1"/><text x="7.0357%" y="207.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.12%)</title><rect x="6.7857%" y="181" width="0.1190%" height="15" fill="rgb(241,83,37)" fg:x="57" fg:w="1"/><text x="7.0357%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.12%)</title><rect x="6.7857%" y="165" width="0.1190%" height="15" fill="rgb(233,36,39)" fg:x="57" fg:w="1"/><text x="7.0357%" y="175.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.12%)</title><rect x="6.9048%" y="229" width="0.1190%" height="15" fill="rgb(226,3,54)" fg:x="58" fg:w="1"/><text x="7.1548%" y="239.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (6 samples, 0.71%)</title><rect x="6.4286%" y="309" width="0.7143%" height="15" fill="rgb(245,192,40)" fg:x="54" fg:w="6"/><text x="6.6786%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (2 samples, 0.24%)</title><rect x="6.9048%" y="293" width="0.2381%" height="15" fill="rgb(238,167,29)" fg:x="58" fg:w="2"/><text x="7.1548%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (2 samples, 0.24%)</title><rect x="6.9048%" y="277" width="0.2381%" height="15" fill="rgb(232,182,51)" fg:x="58" fg:w="2"/><text x="7.1548%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (2 samples, 0.24%)</title><rect x="6.9048%" y="261" width="0.2381%" height="15" fill="rgb(231,60,39)" fg:x="58" fg:w="2"/><text x="7.1548%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.24%)</title><rect x="6.9048%" y="245" width="0.2381%" height="15" fill="rgb(208,69,12)" fg:x="58" fg:w="2"/><text x="7.1548%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.12%)</title><rect x="7.0238%" y="229" width="0.1190%" height="15" fill="rgb(235,93,37)" fg:x="59" fg:w="1"/><text x="7.2738%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.12%)</title><rect x="7.0238%" y="213" width="0.1190%" height="15" fill="rgb(213,116,39)" fg:x="59" fg:w="1"/><text x="7.2738%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.12%)</title><rect x="7.1429%" y="293" width="0.1190%" height="15" fill="rgb(222,207,29)" fg:x="60" fg:w="1"/><text x="7.3929%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.12%)</title><rect x="7.1429%" y="277" width="0.1190%" height="15" fill="rgb(206,96,30)" fg:x="60" fg:w="1"/><text x="7.3929%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.12%)</title><rect x="7.1429%" y="261" width="0.1190%" height="15" fill="rgb(218,138,4)" fg:x="60" fg:w="1"/><text x="7.3929%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.12%)</title><rect x="7.1429%" y="245" width="0.1190%" height="15" fill="rgb(250,191,14)" fg:x="60" fg:w="1"/><text x="7.3929%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.12%)</title><rect x="7.1429%" y="229" width="0.1190%" height="15" fill="rgb(239,60,40)" fg:x="60" fg:w="1"/><text x="7.3929%" y="239.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.12%)</title><rect x="7.1429%" y="213" width="0.1190%" height="15" fill="rgb(206,27,48)" fg:x="60" fg:w="1"/><text x="7.3929%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.12%)</title><rect x="7.1429%" y="197" width="0.1190%" height="15" fill="rgb(225,35,8)" fg:x="60" fg:w="1"/><text x="7.3929%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_dict_page (1 samples, 0.12%)</title><rect x="7.1429%" y="181" width="0.1190%" height="15" fill="rgb(250,213,24)" fg:x="60" fg:w="1"/><text x="7.3929%" y="191.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_dict (1 samples, 0.12%)</title><rect x="7.1429%" y="165" width="0.1190%" height="15" fill="rgb(247,123,22)" fg:x="60" fg:w="1"/><text x="7.3929%" y="175.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (3 samples, 0.36%)</title><rect x="7.2619%" y="261" width="0.3571%" height="15" fill="rgb(231,138,38)" fg:x="61" fg:w="3"/><text x="7.5119%" y="271.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (3 samples, 0.36%)</title><rect x="7.2619%" y="245" width="0.3571%" height="15" fill="rgb(231,145,46)" fg:x="61" fg:w="3"/><text x="7.5119%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (6 samples, 0.71%)</title><rect x="7.1429%" y="309" width="0.7143%" height="15" fill="rgb(251,118,11)" fg:x="60" fg:w="6"/><text x="7.3929%" y="319.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (5 samples, 0.60%)</title><rect x="7.2619%" y="293" width="0.5952%" height="15" fill="rgb(217,147,25)" fg:x="61" fg:w="5"/><text x="7.5119%" y="303.50"></text></g><g><title>std::io::copy::stack_buffer_copy (5 samples, 0.60%)</title><rect x="7.2619%" y="277" width="0.5952%" height="15" fill="rgb(247,81,37)" fg:x="61" fg:w="5"/><text x="7.5119%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.24%)</title><rect x="7.6190%" y="261" width="0.2381%" height="15" fill="rgb(209,12,38)" fg:x="64" fg:w="2"/><text x="7.8690%" y="271.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.24%)</title><rect x="7.6190%" y="245" width="0.2381%" height="15" fill="rgb(227,1,9)" fg:x="64" fg:w="2"/><text x="7.8690%" y="255.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (2 samples, 0.24%)</title><rect x="7.6190%" y="229" width="0.2381%" height="15" fill="rgb(248,47,43)" fg:x="64" fg:w="2"/><text x="7.8690%" y="239.50"></text></g><g><title>write (2 samples, 0.24%)</title><rect x="7.6190%" y="213" width="0.2381%" height="15" fill="rgb(221,10,30)" fg:x="64" fg:w="2"/><text x="7.8690%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (13 samples, 1.55%)</title><rect x="6.4286%" y="325" width="1.5476%" height="15" fill="rgb(210,229,1)" fg:x="54" fg:w="13"/><text x="6.6786%" y="335.50"></text></g><g><title>std::sys::fs::unix::rename (1 samples, 0.12%)</title><rect x="7.8571%" y="309" width="0.1190%" height="15" fill="rgb(222,148,37)" fg:x="66" fg:w="1"/><text x="8.1071%" y="319.50"></text></g><g><title>rename (1 samples, 0.12%)</title><rect x="7.8571%" y="293" width="0.1190%" height="15" fill="rgb(234,67,33)" fg:x="66" fg:w="1"/><text x="8.1071%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.48%)</title><rect x="8.5714%" y="309" width="0.4762%" height="15" fill="rgb(247,98,35)" fg:x="72" fg:w="4"/><text x="8.8214%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.48%)</title><rect x="8.5714%" y="293" width="0.4762%" height="15" fill="rgb(247,138,52)" fg:x="72" fg:w="4"/><text x="8.8214%" y="303.50"></text></g><g><title>__libc_realloc (4 samples, 0.48%)</title><rect x="8.5714%" y="277" width="0.4762%" height="15" fill="rgb(213,79,30)" fg:x="72" fg:w="4"/><text x="8.8214%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (16 samples, 1.90%)</title><rect x="11.4286%" y="261" width="1.9048%" height="15" fill="rgb(246,177,23)" fg:x="96" fg:w="16"/><text x="11.6786%" y="271.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 1.90%)</title><rect x="11.4286%" y="245" width="1.9048%" height="15" fill="rgb(230,62,27)" fg:x="96" fg:w="16"/><text x="11.6786%" y="255.50">a..</text></g><g><title>__libc_realloc (16 samples, 1.90%)</title><rect x="11.4286%" y="229" width="1.9048%" height="15" fill="rgb(216,154,8)" fg:x="96" fg:w="16"/><text x="11.6786%" y="239.50">_..</text></g><g><title>arrow_csv::reader::Decoder::decode (92 samples, 10.95%)</title><rect x="10.1190%" y="293" width="10.9524%" height="15" fill="rgb(244,35,45)" fg:x="85" fg:w="92"/><text x="10.3690%" y="303.50">arrow_csv::reade..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (92 samples, 10.95%)</title><rect x="10.1190%" y="277" width="10.9524%" height="15" fill="rgb(251,115,12)" fg:x="85" fg:w="92"/><text x="10.3690%" y="287.50">arrow_csv::reade..</text></g><g><title>csv_core::reader::Reader::read_record (65 samples, 7.74%)</title><rect x="13.3333%" y="261" width="7.7381%" height="15" fill="rgb(240,54,50)" fg:x="112" fg:w="65"/><text x="13.5833%" y="271.50">csv_core::r..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (8 samples, 0.95%)</title><rect x="21.0714%" y="277" width="0.9524%" height="15" fill="rgb(233,84,52)" fg:x="177" fg:w="8"/><text x="21.3214%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.71%)</title><rect x="21.3095%" y="261" width="0.7143%" height="15" fill="rgb(207,117,47)" fg:x="179" fg:w="6"/><text x="21.5595%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (43 samples, 5.12%)</title><rect x="23.5714%" y="213" width="5.1190%" height="15" fill="rgb(249,43,39)" fg:x="198" fg:w="43"/><text x="23.8214%" y="223.50">arrow_..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (7 samples, 0.83%)</title><rect x="27.8571%" y="197" width="0.8333%" height="15" fill="rgb(209,38,44)" fg:x="234" fg:w="7"/><text x="28.1071%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (7 samples, 0.83%)</title><rect x="27.8571%" y="181" width="0.8333%" height="15" fill="rgb(236,212,23)" fg:x="234" fg:w="7"/><text x="28.1071%" y="191.50"></text></g><g><title>cfree (1 samples, 0.12%)</title><rect x="28.5714%" y="165" width="0.1190%" height="15" fill="rgb(242,79,21)" fg:x="240" fg:w="1"/><text x="28.8214%" y="175.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (166 samples, 19.76%)</title><rect x="9.0476%" y="309" width="19.7619%" height="15" fill="rgb(211,96,35)" fg:x="76" fg:w="166"/><text x="9.2976%" y="319.50">arrow_csv::reader::BufReader&lt;R&gt;..</text></g><g><title>arrow_csv::reader::Decoder::flush (65 samples, 7.74%)</title><rect x="21.0714%" y="293" width="7.7381%" height="15" fill="rgb(253,215,40)" fg:x="177" fg:w="65"/><text x="21.3214%" y="303.50">arrow_csv::..</text></g><g><title>core::iter::adapters::try_process (57 samples, 6.79%)</title><rect x="22.0238%" y="277" width="6.7857%" height="15" fill="rgb(211,81,21)" fg:x="185" fg:w="57"/><text x="22.2738%" y="287.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57 samples, 6.79%)</title><rect x="22.0238%" y="261" width="6.7857%" height="15" fill="rgb(208,190,38)" fg:x="185" fg:w="57"/><text x="22.2738%" y="271.50">&lt;alloc::v..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (57 samples, 6.79%)</title><rect x="22.0238%" y="245" width="6.7857%" height="15" fill="rgb(235,213,38)" fg:x="185" fg:w="57"/><text x="22.2738%" y="255.50">&lt;core::it..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (57 samples, 6.79%)</title><rect x="22.0238%" y="229" width="6.7857%" height="15" fill="rgb(237,122,38)" fg:x="185" fg:w="57"/><text x="22.2738%" y="239.50">&lt;arrow_ar..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (1 samples, 0.12%)</title><rect x="28.6905%" y="213" width="0.1190%" height="15" fill="rgb(244,218,35)" fg:x="241" fg:w="1"/><text x="28.9405%" y="223.50"></text></g><g><title>arrow_data::data::ArrayDataBuilder::add_buffer (1 samples, 0.12%)</title><rect x="28.6905%" y="197" width="0.1190%" height="15" fill="rgb(240,68,47)" fg:x="241" fg:w="1"/><text x="28.9405%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.12%)</title><rect x="28.6905%" y="181" width="0.1190%" height="15" fill="rgb(210,16,53)" fg:x="241" fg:w="1"/><text x="28.9405%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="28.6905%" y="165" width="0.1190%" height="15" fill="rgb(235,124,12)" fg:x="241" fg:w="1"/><text x="28.9405%" y="175.50"></text></g><g><title>cfree (13 samples, 1.55%)</title><rect x="28.8095%" y="309" width="1.5476%" height="15" fill="rgb(224,169,11)" fg:x="242" fg:w="13"/><text x="29.0595%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (9 samples, 1.07%)</title><rect x="30.3571%" y="277" width="1.0714%" height="15" fill="rgb(250,166,2)" fg:x="255" fg:w="9"/><text x="30.6071%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 1.07%)</title><rect x="30.3571%" y="261" width="1.0714%" height="15" fill="rgb(242,216,29)" fg:x="255" fg:w="9"/><text x="30.6071%" y="271.50"></text></g><g><title>cfree (9 samples, 1.07%)</title><rect x="30.3571%" y="245" width="1.0714%" height="15" fill="rgb(230,116,27)" fg:x="255" fg:w="9"/><text x="30.6071%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (10 samples, 1.19%)</title><rect x="30.3571%" y="309" width="1.1905%" height="15" fill="rgb(228,99,48)" fg:x="255" fg:w="10"/><text x="30.6071%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (10 samples, 1.19%)</title><rect x="30.3571%" y="293" width="1.1905%" height="15" fill="rgb(253,11,6)" fg:x="255" fg:w="10"/><text x="30.6071%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;arrow_array::types::UInt32Type&gt;&gt; (1 samples, 0.12%)</title><rect x="31.4286%" y="277" width="0.1190%" height="15" fill="rgb(247,143,39)" fg:x="264" fg:w="1"/><text x="31.6786%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.12%)</title><rect x="31.4286%" y="261" width="0.1190%" height="15" fill="rgb(236,97,10)" fg:x="264" fg:w="1"/><text x="31.6786%" y="271.50"></text></g><g><title>cfree (1 samples, 0.12%)</title><rect x="31.4286%" y="245" width="0.1190%" height="15" fill="rgb(233,208,19)" fg:x="264" fg:w="1"/><text x="31.6786%" y="255.50"></text></g><g><title>__default_morecore (1 samples, 0.12%)</title><rect x="31.4286%" y="229" width="0.1190%" height="15" fill="rgb(216,164,2)" fg:x="264" fg:w="1"/><text x="31.6786%" y="239.50"></text></g><g><title>__sbrk (1 samples, 0.12%)</title><rect x="31.4286%" y="213" width="0.1190%" height="15" fill="rgb(220,129,5)" fg:x="264" fg:w="1"/><text x="31.6786%" y="223.50"></text></g><g><title>brk (1 samples, 0.12%)</title><rect x="31.4286%" y="197" width="0.1190%" height="15" fill="rgb(242,17,10)" fg:x="264" fg:w="1"/><text x="31.6786%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (2 samples, 0.24%)</title><rect x="31.5476%" y="309" width="0.2381%" height="15" fill="rgb(242,107,0)" fg:x="265" fg:w="2"/><text x="31.7976%" y="319.50"></text></g><g><title>cfree (2 samples, 0.24%)</title><rect x="31.5476%" y="293" width="0.2381%" height="15" fill="rgb(251,28,31)" fg:x="265" fg:w="2"/><text x="31.7976%" y="303.50"></text></g><g><title>__default_morecore (2 samples, 0.24%)</title><rect x="31.5476%" y="277" width="0.2381%" height="15" fill="rgb(233,223,10)" fg:x="265" fg:w="2"/><text x="31.7976%" y="287.50"></text></g><g><title>__sbrk (2 samples, 0.24%)</title><rect x="31.5476%" y="261" width="0.2381%" height="15" fill="rgb(215,21,27)" fg:x="265" fg:w="2"/><text x="31.7976%" y="271.50"></text></g><g><title>brk (2 samples, 0.24%)</title><rect x="31.5476%" y="245" width="0.2381%" height="15" fill="rgb(232,23,21)" fg:x="265" fg:w="2"/><text x="31.7976%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (4 samples, 0.48%)</title><rect x="34.5238%" y="293" width="0.4762%" height="15" fill="rgb(244,5,23)" fg:x="290" fg:w="4"/><text x="34.7738%" y="303.50"></text></g><g><title>__rustc::__rdl_realloc (4 samples, 0.48%)</title><rect x="34.5238%" y="277" width="0.4762%" height="15" fill="rgb(226,81,46)" fg:x="290" fg:w="4"/><text x="34.7738%" y="287.50"></text></g><g><title>cfree (18 samples, 2.14%)</title><rect x="35.0000%" y="293" width="2.1429%" height="15" fill="rgb(247,70,30)" fg:x="294" fg:w="18"/><text x="35.2500%" y="303.50">c..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (35 samples, 4.17%)</title><rect x="37.1429%" y="293" width="4.1667%" height="15" fill="rgb(212,68,19)" fg:x="312" fg:w="35"/><text x="37.3929%" y="303.50">core:..</text></g><g><title>core::num::dec2flt::parse::parse_number (18 samples, 2.14%)</title><rect x="39.1667%" y="277" width="2.1429%" height="15" fill="rgb(240,187,13)" fg:x="329" fg:w="18"/><text x="39.4167%" y="287.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (2 samples, 0.24%)</title><rect x="42.6190%" y="277" width="0.2381%" height="15" fill="rgb(223,113,26)" fg:x="358" fg:w="2"/><text x="42.8690%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.12%)</title><rect x="42.8571%" y="277" width="0.1190%" height="15" fill="rgb(206,192,2)" fg:x="360" fg:w="1"/><text x="43.1071%" y="287.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (6 samples, 0.71%)</title><rect x="42.9762%" y="277" width="0.7143%" height="15" fill="rgb(241,108,4)" fg:x="361" fg:w="6"/><text x="43.2262%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.12%)</title><rect x="43.5714%" y="261" width="0.1190%" height="15" fill="rgb(247,173,49)" fg:x="366" fg:w="1"/><text x="43.8214%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (22 samples, 2.62%)</title><rect x="41.3095%" y="293" width="2.6190%" height="15" fill="rgb(224,114,35)" fg:x="347" fg:w="22"/><text x="41.5595%" y="303.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.24%)</title><rect x="43.6905%" y="277" width="0.2381%" height="15" fill="rgb(245,159,27)" fg:x="367" fg:w="2"/><text x="43.9405%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (5 samples, 0.60%)</title><rect x="45.0000%" y="277" width="0.5952%" height="15" fill="rgb(245,172,44)" fg:x="378" fg:w="5"/><text x="45.2500%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (10 samples, 1.19%)</title><rect x="45.5952%" y="277" width="1.1905%" height="15" fill="rgb(236,23,11)" fg:x="383" fg:w="10"/><text x="45.8452%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (140 samples, 16.67%)</title><rect x="31.7857%" y="309" width="16.6667%" height="15" fill="rgb(205,117,38)" fg:x="267" fg:w="140"/><text x="32.0357%" y="319.50">nemscraper::process::conve..</text></g><g><title>nemscraper::process::utils::clean_str (38 samples, 4.52%)</title><rect x="43.9286%" y="293" width="4.5238%" height="15" fill="rgb(237,72,25)" fg:x="369" fg:w="38"/><text x="44.1786%" y="303.50">nemsc..</text></g><g><title>malloc (14 samples, 1.67%)</title><rect x="46.7857%" y="277" width="1.6667%" height="15" fill="rgb(244,70,9)" fg:x="393" fg:w="14"/><text x="47.0357%" y="287.50"></text></g><g><title>arrow_cast::cast::cast (2 samples, 0.24%)</title><rect x="48.4524%" y="261" width="0.2381%" height="15" fill="rgb(217,125,39)" fg:x="407" fg:w="2"/><text x="48.7024%" y="271.50"></text></g><g><title>arrow_cast::cast::cast_with_options (2 samples, 0.24%)</title><rect x="48.4524%" y="245" width="0.2381%" height="15" fill="rgb(235,36,10)" fg:x="407" fg:w="2"/><text x="48.7024%" y="255.50"></text></g><g><title>arrow_cast::cast::cast_reinterpret_arrays (1 samples, 0.12%)</title><rect x="48.5714%" y="229" width="0.1190%" height="15" fill="rgb(251,123,47)" fg:x="408" fg:w="1"/><text x="48.8214%" y="239.50"></text></g><g><title>arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::reinterpret_cast (1 samples, 0.12%)</title><rect x="48.5714%" y="213" width="0.1190%" height="15" fill="rgb(221,13,13)" fg:x="408" fg:w="1"/><text x="48.8214%" y="223.50"></text></g><g><title>arrow_array::array::primitive_array::&lt;impl core::convert::From&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;&gt; for arrow_data::data::ArrayData&gt;::from (1 samples, 0.12%)</title><rect x="48.5714%" y="197" width="0.1190%" height="15" fill="rgb(238,131,9)" fg:x="408" fg:w="1"/><text x="48.8214%" y="207.50"></text></g><g><title>arrow_data::data::ArrayDataBuilder::nulls (1 samples, 0.12%)</title><rect x="48.5714%" y="181" width="0.1190%" height="15" fill="rgb(211,50,8)" fg:x="408" fg:w="1"/><text x="48.8214%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (13 samples, 1.55%)</title><rect x="49.0476%" y="229" width="1.5476%" height="15" fill="rgb(245,182,24)" fg:x="412" fg:w="13"/><text x="49.2976%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (10 samples, 1.19%)</title><rect x="49.4048%" y="213" width="1.1905%" height="15" fill="rgb(242,14,37)" fg:x="415" fg:w="10"/><text x="49.6548%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.48%)</title><rect x="50.1190%" y="197" width="0.4762%" height="15" fill="rgb(246,228,12)" fg:x="421" fg:w="4"/><text x="50.3690%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (17 samples, 2.02%)</title><rect x="48.6905%" y="261" width="2.0238%" height="15" fill="rgb(213,55,15)" fg:x="409" fg:w="17"/><text x="48.9405%" y="271.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (17 samples, 2.02%)</title><rect x="48.6905%" y="245" width="2.0238%" height="15" fill="rgb(209,9,3)" fg:x="409" fg:w="17"/><text x="48.9405%" y="255.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.12%)</title><rect x="50.5952%" y="229" width="0.1190%" height="15" fill="rgb(230,59,30)" fg:x="425" fg:w="1"/><text x="50.8452%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.12%)</title><rect x="50.5952%" y="213" width="0.1190%" height="15" fill="rgb(209,121,21)" fg:x="425" fg:w="1"/><text x="50.8452%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.12%)</title><rect x="50.5952%" y="197" width="0.1190%" height="15" fill="rgb(220,109,13)" fg:x="425" fg:w="1"/><text x="50.8452%" y="207.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (5 samples, 0.60%)</title><rect x="58.2143%" y="213" width="0.5952%" height="15" fill="rgb(232,18,1)" fg:x="489" fg:w="5"/><text x="58.4643%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (54 samples, 6.43%)</title><rect x="52.5000%" y="245" width="6.4286%" height="15" fill="rgb(215,41,42)" fg:x="441" fg:w="54"/><text x="52.7500%" y="255.50">&lt;parquet..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (26 samples, 3.10%)</title><rect x="55.8333%" y="229" width="3.0952%" height="15" fill="rgb(224,123,36)" fg:x="469" fg:w="26"/><text x="56.0833%" y="239.50">par..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.12%)</title><rect x="58.8095%" y="213" width="0.1190%" height="15" fill="rgb(240,125,3)" fg:x="494" fg:w="1"/><text x="59.0595%" y="223.50"></text></g><g><title>&lt;parquet::encodings::encoding::PlainEncoder&lt;T&gt; as parquet::encodings::encoding::Encoder&lt;T&gt;&gt;::put (2 samples, 0.24%)</title><rect x="59.7619%" y="213" width="0.2381%" height="15" fill="rgb(205,98,50)" fg:x="502" fg:w="2"/><text x="60.0119%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="59.8810%" y="197" width="0.1190%" height="15" fill="rgb(205,185,37)" fg:x="503" fg:w="1"/><text x="60.1310%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="59.8810%" y="181" width="0.1190%" height="15" fill="rgb(238,207,15)" fg:x="503" fg:w="1"/><text x="60.1310%" y="191.50"></text></g><g><title>__libc_realloc (1 samples, 0.12%)</title><rect x="59.8810%" y="165" width="0.1190%" height="15" fill="rgb(213,199,42)" fg:x="503" fg:w="1"/><text x="60.1310%" y="175.50"></text></g><g><title>parquet::column::writer::compare_greater (12 samples, 1.43%)</title><rect x="60.0000%" y="213" width="1.4286%" height="15" fill="rgb(235,201,11)" fg:x="504" fg:w="12"/><text x="60.2500%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (64 samples, 7.62%)</title><rect x="58.9286%" y="245" width="7.6190%" height="15" fill="rgb(207,46,11)" fg:x="495" fg:w="64"/><text x="59.1786%" y="255.50">&lt;parquet::..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (62 samples, 7.38%)</title><rect x="59.1667%" y="229" width="7.3810%" height="15" fill="rgb(241,35,35)" fg:x="497" fg:w="62"/><text x="59.4167%" y="239.50">parquet::c..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (43 samples, 5.12%)</title><rect x="61.4286%" y="213" width="5.1190%" height="15" fill="rgb(243,32,47)" fg:x="516" fg:w="43"/><text x="61.6786%" y="223.50">parque..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.71%)</title><rect x="65.8333%" y="197" width="0.7143%" height="15" fill="rgb(247,202,23)" fg:x="553" fg:w="6"/><text x="66.0833%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.12%)</title><rect x="66.7857%" y="213" width="0.1190%" height="15" fill="rgb(219,102,11)" fg:x="561" fg:w="1"/><text x="67.0357%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.12%)</title><rect x="66.7857%" y="197" width="0.1190%" height="15" fill="rgb(243,110,44)" fg:x="561" fg:w="1"/><text x="67.0357%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (4 samples, 0.48%)</title><rect x="66.5476%" y="229" width="0.4762%" height="15" fill="rgb(222,74,54)" fg:x="559" fg:w="4"/><text x="66.7976%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.12%)</title><rect x="66.9048%" y="213" width="0.1190%" height="15" fill="rgb(216,99,12)" fg:x="562" fg:w="1"/><text x="67.1548%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (6 samples, 0.71%)</title><rect x="67.0238%" y="229" width="0.7143%" height="15" fill="rgb(226,22,26)" fg:x="563" fg:w="6"/><text x="67.2738%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (6 samples, 0.71%)</title><rect x="67.0238%" y="213" width="0.7143%" height="15" fill="rgb(217,163,10)" fg:x="563" fg:w="6"/><text x="67.2738%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.48%)</title><rect x="67.2619%" y="197" width="0.4762%" height="15" fill="rgb(213,25,53)" fg:x="565" fg:w="4"/><text x="67.5119%" y="207.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (14 samples, 1.67%)</title><rect x="67.7381%" y="229" width="1.6667%" height="15" fill="rgb(252,105,26)" fg:x="569" fg:w="14"/><text x="67.9881%" y="239.50"></text></g><g><title>snap::compress::Encoder::compress (14 samples, 1.67%)</title><rect x="67.7381%" y="213" width="1.6667%" height="15" fill="rgb(220,39,43)" fg:x="569" fg:w="14"/><text x="67.9881%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (29 samples, 3.45%)</title><rect x="66.5476%" y="245" width="3.4524%" height="15" fill="rgb(229,68,48)" fg:x="559" fg:w="29"/><text x="66.7976%" y="255.50">par..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (5 samples, 0.60%)</title><rect x="69.4048%" y="229" width="0.5952%" height="15" fill="rgb(252,8,32)" fg:x="583" fg:w="5"/><text x="69.6548%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_dict_page (1 samples, 0.12%)</title><rect x="70.0000%" y="229" width="0.1190%" height="15" fill="rgb(223,20,43)" fg:x="588" fg:w="1"/><text x="70.2500%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_dict (1 samples, 0.12%)</title><rect x="70.0000%" y="213" width="0.1190%" height="15" fill="rgb(229,81,49)" fg:x="588" fg:w="1"/><text x="70.2500%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (183 samples, 21.79%)</title><rect x="48.4524%" y="277" width="21.7857%" height="15" fill="rgb(236,28,36)" fg:x="407" fg:w="183"/><text x="48.7024%" y="287.50">parquet::arrow::arrow_writer::Arro..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (164 samples, 19.52%)</title><rect x="50.7143%" y="261" width="19.5238%" height="15" fill="rgb(249,185,26)" fg:x="426" fg:w="164"/><text x="50.9643%" y="271.50">parquet::column::writer::Generi..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.24%)</title><rect x="70.0000%" y="245" width="0.2381%" height="15" fill="rgb(249,174,33)" fg:x="588" fg:w="2"/><text x="70.2500%" y="255.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.12%)</title><rect x="70.1190%" y="229" width="0.1190%" height="15" fill="rgb(233,201,37)" fg:x="589" fg:w="1"/><text x="70.3690%" y="239.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.12%)</title><rect x="70.1190%" y="213" width="0.1190%" height="15" fill="rgb(221,78,26)" fg:x="589" fg:w="1"/><text x="70.3690%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (185 samples, 22.02%)</title><rect x="48.4524%" y="309" width="22.0238%" height="15" fill="rgb(250,127,30)" fg:x="407" fg:w="185"/><text x="48.7024%" y="319.50">parquet::arrow::arrow_writer::Arrow..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (185 samples, 22.02%)</title><rect x="48.4524%" y="293" width="22.0238%" height="15" fill="rgb(230,49,44)" fg:x="407" fg:w="185"/><text x="48.7024%" y="303.50">parquet::arrow::arrow_writer::Arrow..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (2 samples, 0.24%)</title><rect x="70.2381%" y="277" width="0.2381%" height="15" fill="rgb(229,67,23)" fg:x="590" fg:w="2"/><text x="70.4881%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (2 samples, 0.24%)</title><rect x="70.2381%" y="261" width="0.2381%" height="15" fill="rgb(249,83,47)" fg:x="590" fg:w="2"/><text x="70.4881%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.12%)</title><rect x="70.4762%" y="309" width="0.1190%" height="15" fill="rgb(215,43,3)" fg:x="592" fg:w="1"/><text x="70.7262%" y="319.50"></text></g><g><title>clock_gettime (1 samples, 0.12%)</title><rect x="70.4762%" y="293" width="0.1190%" height="15" fill="rgb(238,154,13)" fg:x="592" fg:w="1"/><text x="70.7262%" y="303.50"></text></g><g><title>tracing::__macro_support::__is_enabled (1 samples, 0.12%)</title><rect x="70.5952%" y="309" width="0.1190%" height="15" fill="rgb(219,56,2)" fg:x="593" fg:w="1"/><text x="70.8452%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (529 samples, 62.98%)</title><rect x="7.9762%" y="325" width="62.9762%" height="15" fill="rgb(233,0,4)" fg:x="67" fg:w="529"/><text x="8.2262%" y="335.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.24%)</title><rect x="70.7143%" y="309" width="0.2381%" height="15" fill="rgb(235,30,7)" fg:x="594" fg:w="2"/><text x="70.9643%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.24%)</title><rect x="70.7143%" y="293" width="0.2381%" height="15" fill="rgb(250,79,13)" fg:x="594" fg:w="2"/><text x="70.9643%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.24%)</title><rect x="70.7143%" y="277" width="0.2381%" height="15" fill="rgb(211,146,34)" fg:x="594" fg:w="2"/><text x="70.9643%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.24%)</title><rect x="70.7143%" y="261" width="0.2381%" height="15" fill="rgb(228,22,38)" fg:x="594" fg:w="2"/><text x="70.9643%" y="271.50"></text></g><g><title>tracing_core::field::ValueSet::record (2 samples, 0.24%)</title><rect x="70.7143%" y="245" width="0.2381%" height="15" fill="rgb(235,168,5)" fg:x="594" fg:w="2"/><text x="70.9643%" y="255.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_core::field::Visit&gt;::record_debug (2 samples, 0.24%)</title><rect x="70.7143%" y="229" width="0.2381%" height="15" fill="rgb(221,155,16)" fg:x="594" fg:w="2"/><text x="70.9643%" y="239.50"></text></g><g><title>core::fmt::write (2 samples, 0.24%)</title><rect x="70.7143%" y="213" width="0.2381%" height="15" fill="rgb(215,215,53)" fg:x="594" fg:w="2"/><text x="70.9643%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.12%)</title><rect x="70.8333%" y="197" width="0.1190%" height="15" fill="rgb(223,4,10)" fg:x="595" fg:w="1"/><text x="71.0833%" y="207.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.12%)</title><rect x="70.8333%" y="181" width="0.1190%" height="15" fill="rgb(234,103,6)" fg:x="595" fg:w="1"/><text x="71.0833%" y="191.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.12%)</title><rect x="70.8333%" y="165" width="0.1190%" height="15" fill="rgb(227,97,0)" fg:x="595" fg:w="1"/><text x="71.0833%" y="175.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.12%)</title><rect x="70.8333%" y="149" width="0.1190%" height="15" fill="rgb(234,150,53)" fg:x="595" fg:w="1"/><text x="71.0833%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.12%)</title><rect x="70.8333%" y="133" width="0.1190%" height="15" fill="rgb(228,201,54)" fg:x="595" fg:w="1"/><text x="71.0833%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.12%)</title><rect x="70.8333%" y="117" width="0.1190%" height="15" fill="rgb(222,22,37)" fg:x="595" fg:w="1"/><text x="71.0833%" y="127.50"></text></g><g><title>core::slice::memchr::memchr_aligned (14 samples, 1.67%)</title><rect x="72.1429%" y="309" width="1.6667%" height="15" fill="rgb(237,53,32)" fg:x="606" fg:w="14"/><text x="72.3929%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (603 samples, 71.79%)</title><rect x="3.3333%" y="373" width="71.7857%" height="15" fill="rgb(233,25,53)" fg:x="28" fg:w="603"/><text x="3.5833%" y="383.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (598 samples, 71.19%)</title><rect x="3.9286%" y="357" width="71.1905%" height="15" fill="rgb(210,40,34)" fg:x="33" fg:w="598"/><text x="4.1786%" y="367.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (598 samples, 71.19%)</title><rect x="3.9286%" y="341" width="71.1905%" height="15" fill="rgb(241,220,44)" fg:x="33" fg:w="598"/><text x="4.1786%" y="351.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (35 samples, 4.17%)</title><rect x="70.9524%" y="325" width="4.1667%" height="15" fill="rgb(235,28,35)" fg:x="596" fg:w="35"/><text x="71.2024%" y="335.50">std::..</text></g><g><title>core::str::converts::from_utf8 (11 samples, 1.31%)</title><rect x="73.8095%" y="309" width="1.3095%" height="15" fill="rgb(210,56,17)" fg:x="620" fg:w="11"/><text x="74.0595%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (1 samples, 0.12%)</title><rect x="75.1190%" y="341" width="0.1190%" height="15" fill="rgb(224,130,29)" fg:x="631" fg:w="1"/><text x="75.3690%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.12%)</title><rect x="75.1190%" y="325" width="0.1190%" height="15" fill="rgb(235,212,8)" fg:x="631" fg:w="1"/><text x="75.3690%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.12%)</title><rect x="75.1190%" y="309" width="0.1190%" height="15" fill="rgb(223,33,50)" fg:x="631" fg:w="1"/><text x="75.3690%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.12%)</title><rect x="75.1190%" y="293" width="0.1190%" height="15" fill="rgb(219,149,13)" fg:x="631" fg:w="1"/><text x="75.3690%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.12%)</title><rect x="75.1190%" y="277" width="0.1190%" height="15" fill="rgb(250,156,29)" fg:x="631" fg:w="1"/><text x="75.3690%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.12%)</title><rect x="75.1190%" y="261" width="0.1190%" height="15" fill="rgb(216,193,19)" fg:x="631" fg:w="1"/><text x="75.3690%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.12%)</title><rect x="75.1190%" y="245" width="0.1190%" height="15" fill="rgb(216,135,14)" fg:x="631" fg:w="1"/><text x="75.3690%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.12%)</title><rect x="75.1190%" y="229" width="0.1190%" height="15" fill="rgb(241,47,5)" fg:x="631" fg:w="1"/><text x="75.3690%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.12%)</title><rect x="75.1190%" y="213" width="0.1190%" height="15" fill="rgb(233,42,35)" fg:x="631" fg:w="1"/><text x="75.3690%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.12%)</title><rect x="75.1190%" y="197" width="0.1190%" height="15" fill="rgb(231,13,6)" fg:x="631" fg:w="1"/><text x="75.3690%" y="207.50"></text></g><g><title>cfree (1 samples, 0.12%)</title><rect x="75.1190%" y="181" width="0.1190%" height="15" fill="rgb(207,181,40)" fg:x="631" fg:w="1"/><text x="75.3690%" y="191.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (6 samples, 0.71%)</title><rect x="75.4762%" y="309" width="0.7143%" height="15" fill="rgb(254,173,49)" fg:x="634" fg:w="6"/><text x="75.7262%" y="319.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (6 samples, 0.71%)</title><rect x="75.4762%" y="293" width="0.7143%" height="15" fill="rgb(221,1,38)" fg:x="634" fg:w="6"/><text x="75.7262%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record (5 samples, 0.60%)</title><rect x="75.5952%" y="277" width="0.5952%" height="15" fill="rgb(206,124,46)" fg:x="635" fg:w="5"/><text x="75.8452%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.12%)</title><rect x="76.1905%" y="293" width="0.1190%" height="15" fill="rgb(249,21,11)" fg:x="640" fg:w="1"/><text x="76.4405%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.12%)</title><rect x="76.1905%" y="277" width="0.1190%" height="15" fill="rgb(222,201,40)" fg:x="640" fg:w="1"/><text x="76.4405%" y="287.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (13 samples, 1.55%)</title><rect x="75.3571%" y="325" width="1.5476%" height="15" fill="rgb(235,61,29)" fg:x="633" fg:w="13"/><text x="75.6071%" y="335.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (6 samples, 0.71%)</title><rect x="76.1905%" y="309" width="0.7143%" height="15" fill="rgb(219,207,3)" fg:x="640" fg:w="6"/><text x="76.4405%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.60%)</title><rect x="76.3095%" y="293" width="0.5952%" height="15" fill="rgb(222,56,46)" fg:x="641" fg:w="5"/><text x="76.5595%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.60%)</title><rect x="76.3095%" y="277" width="0.5952%" height="15" fill="rgb(239,76,54)" fg:x="641" fg:w="5"/><text x="76.5595%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.60%)</title><rect x="76.3095%" y="261" width="0.5952%" height="15" fill="rgb(231,124,27)" fg:x="641" fg:w="5"/><text x="76.5595%" y="271.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (5 samples, 0.60%)</title><rect x="76.3095%" y="245" width="0.5952%" height="15" fill="rgb(249,195,6)" fg:x="641" fg:w="5"/><text x="76.5595%" y="255.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (4 samples, 0.48%)</title><rect x="76.4286%" y="229" width="0.4762%" height="15" fill="rgb(237,174,47)" fg:x="642" fg:w="4"/><text x="76.6786%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (2 samples, 0.24%)</title><rect x="76.9048%" y="325" width="0.2381%" height="15" fill="rgb(206,201,31)" fg:x="646" fg:w="2"/><text x="77.1548%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.24%)</title><rect x="76.9048%" y="309" width="0.2381%" height="15" fill="rgb(231,57,52)" fg:x="646" fg:w="2"/><text x="77.1548%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (2 samples, 0.24%)</title><rect x="76.9048%" y="293" width="0.2381%" height="15" fill="rgb(248,177,22)" fg:x="646" fg:w="2"/><text x="77.1548%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.24%)</title><rect x="76.9048%" y="277" width="0.2381%" height="15" fill="rgb(215,211,37)" fg:x="646" fg:w="2"/><text x="77.1548%" y="287.50"></text></g><g><title>cfree (2 samples, 0.24%)</title><rect x="76.9048%" y="261" width="0.2381%" height="15" fill="rgb(241,128,51)" fg:x="646" fg:w="2"/><text x="77.1548%" y="271.50"></text></g><g><title>cfree (2 samples, 0.24%)</title><rect x="77.6190%" y="309" width="0.2381%" height="15" fill="rgb(227,165,31)" fg:x="652" fg:w="2"/><text x="77.8690%" y="319.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.24%)</title><rect x="77.8571%" y="309" width="0.2381%" height="15" fill="rgb(228,167,24)" fg:x="654" fg:w="2"/><text x="78.1071%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.12%)</title><rect x="77.9762%" y="293" width="0.1190%" height="15" fill="rgb(228,143,12)" fg:x="655" fg:w="1"/><text x="78.2262%" y="303.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.12%)</title><rect x="78.0952%" y="293" width="0.1190%" height="15" fill="rgb(249,149,8)" fg:x="656" fg:w="1"/><text x="78.3452%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (2 samples, 0.24%)</title><rect x="78.0952%" y="309" width="0.2381%" height="15" fill="rgb(243,35,44)" fg:x="656" fg:w="2"/><text x="78.3452%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.12%)</title><rect x="78.2143%" y="293" width="0.1190%" height="15" fill="rgb(246,89,9)" fg:x="657" fg:w="1"/><text x="78.4643%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (12 samples, 1.43%)</title><rect x="77.1429%" y="325" width="1.4286%" height="15" fill="rgb(233,213,13)" fg:x="648" fg:w="12"/><text x="77.3929%" y="335.50"></text></g><g><title>nemscraper::process::utils::clean_str (2 samples, 0.24%)</title><rect x="78.3333%" y="309" width="0.2381%" height="15" fill="rgb(233,141,41)" fg:x="658" fg:w="2"/><text x="78.5833%" y="319.50"></text></g><g><title>malloc (2 samples, 0.24%)</title><rect x="78.3333%" y="293" width="0.2381%" height="15" fill="rgb(239,167,4)" fg:x="658" fg:w="2"/><text x="78.5833%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.12%)</title><rect x="78.5714%" y="277" width="0.1190%" height="15" fill="rgb(209,217,16)" fg:x="660" fg:w="1"/><text x="78.8214%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.12%)</title><rect x="78.5714%" y="261" width="0.1190%" height="15" fill="rgb(219,88,35)" fg:x="660" fg:w="1"/><text x="78.8214%" y="271.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.48%)</title><rect x="78.9286%" y="261" width="0.4762%" height="15" fill="rgb(220,193,23)" fg:x="663" fg:w="4"/><text x="79.1786%" y="271.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.24%)</title><rect x="79.1667%" y="245" width="0.2381%" height="15" fill="rgb(230,90,52)" fg:x="665" fg:w="2"/><text x="79.4167%" y="255.50"></text></g><g><title>parquet::column::writer::compare_greater (1 samples, 0.12%)</title><rect x="79.5238%" y="229" width="0.1190%" height="15" fill="rgb(252,106,19)" fg:x="668" fg:w="1"/><text x="79.7738%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.48%)</title><rect x="79.4048%" y="261" width="0.4762%" height="15" fill="rgb(206,74,20)" fg:x="667" fg:w="4"/><text x="79.6548%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (4 samples, 0.48%)</title><rect x="79.4048%" y="245" width="0.4762%" height="15" fill="rgb(230,138,44)" fg:x="667" fg:w="4"/><text x="79.6548%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.24%)</title><rect x="79.6429%" y="229" width="0.2381%" height="15" fill="rgb(235,182,43)" fg:x="669" fg:w="2"/><text x="79.8929%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.12%)</title><rect x="79.8810%" y="245" width="0.1190%" height="15" fill="rgb(242,16,51)" fg:x="671" fg:w="1"/><text x="80.1310%" y="255.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (42 samples, 5.00%)</title><rect x="75.2381%" y="341" width="5.0000%" height="15" fill="rgb(248,9,4)" fg:x="632" fg:w="42"/><text x="75.4881%" y="351.50">nemscr..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (14 samples, 1.67%)</title><rect x="78.5714%" y="325" width="1.6667%" height="15" fill="rgb(210,31,22)" fg:x="660" fg:w="14"/><text x="78.8214%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (14 samples, 1.67%)</title><rect x="78.5714%" y="309" width="1.6667%" height="15" fill="rgb(239,54,39)" fg:x="660" fg:w="14"/><text x="78.8214%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (14 samples, 1.67%)</title><rect x="78.5714%" y="293" width="1.6667%" height="15" fill="rgb(230,99,41)" fg:x="660" fg:w="14"/><text x="78.8214%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (13 samples, 1.55%)</title><rect x="78.6905%" y="277" width="1.5476%" height="15" fill="rgb(253,106,12)" fg:x="661" fg:w="13"/><text x="78.9405%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.36%)</title><rect x="79.8810%" y="261" width="0.3571%" height="15" fill="rgb(213,46,41)" fg:x="671" fg:w="3"/><text x="80.1310%" y="271.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.24%)</title><rect x="80.0000%" y="245" width="0.2381%" height="15" fill="rgb(215,133,35)" fg:x="672" fg:w="2"/><text x="80.2500%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.24%)</title><rect x="80.0000%" y="229" width="0.2381%" height="15" fill="rgb(213,28,5)" fg:x="672" fg:w="2"/><text x="80.2500%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.12%)</title><rect x="80.1190%" y="213" width="0.1190%" height="15" fill="rgb(215,77,49)" fg:x="673" fg:w="1"/><text x="80.3690%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.12%)</title><rect x="80.1190%" y="197" width="0.1190%" height="15" fill="rgb(248,100,22)" fg:x="673" fg:w="1"/><text x="80.3690%" y="207.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (45 samples, 5.36%)</title><rect x="75.1190%" y="373" width="5.3571%" height="15" fill="rgb(208,67,9)" fg:x="631" fg:w="45"/><text x="75.3690%" y="383.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (45 samples, 5.36%)</title><rect x="75.1190%" y="357" width="5.3571%" height="15" fill="rgb(219,133,21)" fg:x="631" fg:w="45"/><text x="75.3690%" y="367.50">nemscra..</text></g><g><title>std::io::append_to_string (2 samples, 0.24%)</title><rect x="80.2381%" y="341" width="0.2381%" height="15" fill="rgb(246,46,29)" fg:x="674" fg:w="2"/><text x="80.4881%" y="351.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.12%)</title><rect x="80.3571%" y="325" width="0.1190%" height="15" fill="rgb(246,185,52)" fg:x="675" fg:w="1"/><text x="80.6071%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.12%)</title><rect x="81.4286%" y="309" width="0.1190%" height="15" fill="rgb(252,136,11)" fg:x="684" fg:w="1"/><text x="81.6786%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (6 samples, 0.71%)</title><rect x="81.1905%" y="341" width="0.7143%" height="15" fill="rgb(219,138,53)" fg:x="682" fg:w="6"/><text x="81.4405%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (6 samples, 0.71%)</title><rect x="81.1905%" y="325" width="0.7143%" height="15" fill="rgb(211,51,23)" fg:x="682" fg:w="6"/><text x="81.4405%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (3 samples, 0.36%)</title><rect x="81.5476%" y="309" width="0.3571%" height="15" fill="rgb(247,221,28)" fg:x="685" fg:w="3"/><text x="81.7976%" y="319.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (85 samples, 10.12%)</title><rect x="82.1429%" y="277" width="10.1190%" height="15" fill="rgb(251,222,45)" fg:x="690" fg:w="85"/><text x="82.3929%" y="287.50">zlib_rs::inflat..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (2 samples, 0.24%)</title><rect x="92.2619%" y="277" width="0.2381%" height="15" fill="rgb(217,162,53)" fg:x="775" fg:w="2"/><text x="92.5119%" y="287.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (96 samples, 11.43%)</title><rect x="81.1905%" y="357" width="11.4286%" height="15" fill="rgb(229,93,14)" fg:x="682" fg:w="96"/><text x="81.4405%" y="367.50">&lt;zip::read::ZipFi..</text></g><g><title>flate2::zio::read (90 samples, 10.71%)</title><rect x="81.9048%" y="341" width="10.7143%" height="15" fill="rgb(209,67,49)" fg:x="688" fg:w="90"/><text x="82.1548%" y="351.50">flate2::zio::read</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (90 samples, 10.71%)</title><rect x="81.9048%" y="325" width="10.7143%" height="15" fill="rgb(213,87,29)" fg:x="688" fg:w="90"/><text x="82.1548%" y="335.50">&lt;flate2::mem::De..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (90 samples, 10.71%)</title><rect x="81.9048%" y="309" width="10.7143%" height="15" fill="rgb(205,151,52)" fg:x="688" fg:w="90"/><text x="82.1548%" y="319.50">&lt;flate2::ffi::c:..</text></g><g><title>zlib_rs::inflate::inflate (90 samples, 10.71%)</title><rect x="81.9048%" y="293" width="10.7143%" height="15" fill="rgb(253,215,39)" fg:x="688" fg:w="90"/><text x="82.1548%" y="303.50">zlib_rs::inflate..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.12%)</title><rect x="92.5000%" y="277" width="0.1190%" height="15" fill="rgb(221,220,41)" fg:x="777" fg:w="1"/><text x="92.7500%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (10 samples, 1.19%)</title><rect x="92.6190%" y="357" width="1.1905%" height="15" fill="rgb(218,133,21)" fg:x="778" fg:w="10"/><text x="92.8690%" y="367.50"></text></g><g><title>nemscraper::process::split::process_csv_entry (766 samples, 91.19%)</title><rect x="3.2143%" y="389" width="91.1905%" height="15" fill="rgb(221,193,43)" fg:x="27" fg:w="766"/><text x="3.4643%" y="399.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (117 samples, 13.93%)</title><rect x="80.4762%" y="373" width="13.9286%" height="15" fill="rgb(240,128,52)" fg:x="676" fg:w="117"/><text x="80.7262%" y="383.50">std::io::append_to_st..</text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.60%)</title><rect x="93.8095%" y="357" width="0.5952%" height="15" fill="rgb(253,114,12)" fg:x="788" fg:w="5"/><text x="94.0595%" y="367.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (794 samples, 94.52%)</title><rect x="0.0000%" y="405" width="94.5238%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="794"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tracing_subscriber::filter::env::EnvFilter::on_exit (1 samples, 0.12%)</title><rect x="94.4048%" y="389" width="0.1190%" height="15" fill="rgb(248,225,23)" fg:x="793" fg:w="1"/><text x="94.6548%" y="399.50"></text></g><g><title>bench_zip_to_pa (797 samples, 94.88%)</title><rect x="0.0000%" y="565" width="94.8810%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="797"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (797 samples, 94.88%)</title><rect x="0.0000%" y="549" width="94.8810%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="797"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (797 samples, 94.88%)</title><rect x="0.0000%" y="533" width="94.8810%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="797"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (797 samples, 94.88%)</title><rect x="0.0000%" y="517" width="94.8810%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="797"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (797 samples, 94.88%)</title><rect x="0.0000%" y="501" width="94.8810%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="797"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (797 samples, 94.88%)</title><rect x="0.0000%" y="485" width="94.8810%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="797"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (797 samples, 94.88%)</title><rect x="0.0000%" y="469" width="94.8810%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="797"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (797 samples, 94.88%)</title><rect x="0.0000%" y="453" width="94.8810%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="797"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (797 samples, 94.88%)</title><rect x="0.0000%" y="437" width="94.8810%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="797"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (797 samples, 94.88%)</title><rect x="0.0000%" y="421" width="94.8810%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="797"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.36%)</title><rect x="94.5238%" y="405" width="0.3571%" height="15" fill="rgb(250,160,47)" fg:x="794" fg:w="3"/><text x="94.7738%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.36%)</title><rect x="94.5238%" y="389" width="0.3571%" height="15" fill="rgb(216,222,40)" fg:x="794" fg:w="3"/><text x="94.7738%" y="399.50"></text></g><g><title>syscall (3 samples, 0.36%)</title><rect x="94.5238%" y="373" width="0.3571%" height="15" fill="rgb(234,217,39)" fg:x="794" fg:w="3"/><text x="94.7738%" y="383.50"></text></g><g><title>powf64 (1 samples, 0.12%)</title><rect x="95.0000%" y="373" width="0.1190%" height="15" fill="rgb(207,178,40)" fg:x="798" fg:w="1"/><text x="95.2500%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.12%)</title><rect x="95.1190%" y="373" width="0.1190%" height="15" fill="rgb(221,136,13)" fg:x="799" fg:w="1"/><text x="95.3690%" y="383.50"></text></g><g><title>clock_gettime (1 samples, 0.12%)</title><rect x="95.1190%" y="357" width="0.1190%" height="15" fill="rgb(249,199,10)" fg:x="799" fg:w="1"/><text x="95.3690%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.48%)</title><rect x="95.2381%" y="341" width="0.4762%" height="15" fill="rgb(249,222,13)" fg:x="800" fg:w="4"/><text x="95.4881%" y="351.50"></text></g><g><title>syscall (4 samples, 0.48%)</title><rect x="95.2381%" y="325" width="0.4762%" height="15" fill="rgb(244,185,38)" fg:x="800" fg:w="4"/><text x="95.4881%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.12%)</title><rect x="95.7143%" y="341" width="0.1190%" height="15" fill="rgb(236,202,9)" fg:x="804" fg:w="1"/><text x="95.9643%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (8 samples, 0.95%)</title><rect x="95.2381%" y="373" width="0.9524%" height="15" fill="rgb(250,229,37)" fg:x="800" fg:w="8"/><text x="95.4881%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (8 samples, 0.95%)</title><rect x="95.2381%" y="357" width="0.9524%" height="15" fill="rgb(206,174,23)" fg:x="800" fg:w="8"/><text x="95.4881%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 0.36%)</title><rect x="95.8333%" y="341" width="0.3571%" height="15" fill="rgb(211,33,43)" fg:x="805" fg:w="3"/><text x="96.0833%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (2 samples, 0.24%)</title><rect x="95.9524%" y="325" width="0.2381%" height="15" fill="rgb(245,58,50)" fg:x="806" fg:w="2"/><text x="96.2024%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 0.24%)</title><rect x="95.9524%" y="309" width="0.2381%" height="15" fill="rgb(244,68,36)" fg:x="806" fg:w="2"/><text x="96.2024%" y="319.50"></text></g><g><title>epoll_wait (2 samples, 0.24%)</title><rect x="95.9524%" y="293" width="0.2381%" height="15" fill="rgb(232,229,15)" fg:x="806" fg:w="2"/><text x="96.2024%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.36%)</title><rect x="96.3095%" y="357" width="0.3571%" height="15" fill="rgb(254,30,23)" fg:x="809" fg:w="3"/><text x="96.5595%" y="367.50"></text></g><g><title>syscall (3 samples, 0.36%)</title><rect x="96.3095%" y="341" width="0.3571%" height="15" fill="rgb(235,160,14)" fg:x="809" fg:w="3"/><text x="96.5595%" y="351.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (5 samples, 0.60%)</title><rect x="96.6667%" y="357" width="0.5952%" height="15" fill="rgb(212,155,44)" fg:x="812" fg:w="5"/><text x="96.9167%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (5 samples, 0.60%)</title><rect x="96.6667%" y="341" width="0.5952%" height="15" fill="rgb(226,2,50)" fg:x="812" fg:w="5"/><text x="96.9167%" y="351.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (5 samples, 0.60%)</title><rect x="96.6667%" y="325" width="0.5952%" height="15" fill="rgb(234,177,6)" fg:x="812" fg:w="5"/><text x="96.9167%" y="335.50"></text></g><g><title>write (5 samples, 0.60%)</title><rect x="96.6667%" y="309" width="0.5952%" height="15" fill="rgb(217,24,9)" fg:x="812" fg:w="5"/><text x="96.9167%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.12%)</title><rect x="97.2619%" y="357" width="0.1190%" height="15" fill="rgb(220,13,46)" fg:x="817" fg:w="1"/><text x="97.5119%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::is_end_stream (1 samples, 0.12%)</title><rect x="97.3810%" y="277" width="0.1190%" height="15" fill="rgb(239,221,27)" fg:x="818" fg:w="1"/><text x="97.6310%" y="287.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.12%)</title><rect x="97.5000%" y="213" width="0.1190%" height="15" fill="rgb(222,198,25)" fg:x="819" fg:w="1"/><text x="97.7500%" y="223.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (13 samples, 1.55%)</title><rect x="97.5000%" y="277" width="1.5476%" height="15" fill="rgb(211,99,13)" fg:x="819" fg:w="13"/><text x="97.7500%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (13 samples, 1.55%)</title><rect x="97.5000%" y="261" width="1.5476%" height="15" fill="rgb(232,111,31)" fg:x="819" fg:w="13"/><text x="97.7500%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (13 samples, 1.55%)</title><rect x="97.5000%" y="245" width="1.5476%" height="15" fill="rgb(245,82,37)" fg:x="819" fg:w="13"/><text x="97.7500%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (13 samples, 1.55%)</title><rect x="97.5000%" y="229" width="1.5476%" height="15" fill="rgb(227,149,46)" fg:x="819" fg:w="13"/><text x="97.7500%" y="239.50"></text></g><g><title>syscall (12 samples, 1.43%)</title><rect x="97.6190%" y="213" width="1.4286%" height="15" fill="rgb(218,36,50)" fg:x="820" fg:w="12"/><text x="97.8690%" y="223.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (1 samples, 0.12%)</title><rect x="99.1667%" y="165" width="0.1190%" height="15" fill="rgb(226,80,48)" fg:x="833" fg:w="1"/><text x="99.4167%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (1 samples, 0.12%)</title><rect x="99.1667%" y="149" width="0.1190%" height="15" fill="rgb(238,224,15)" fg:x="833" fg:w="1"/><text x="99.4167%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.12%)</title><rect x="99.1667%" y="133" width="0.1190%" height="15" fill="rgb(241,136,10)" fg:x="833" fg:w="1"/><text x="99.4167%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.12%)</title><rect x="99.1667%" y="117" width="0.1190%" height="15" fill="rgb(208,32,45)" fg:x="833" fg:w="1"/><text x="99.4167%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.12%)</title><rect x="99.1667%" y="101" width="0.1190%" height="15" fill="rgb(207,135,9)" fg:x="833" fg:w="1"/><text x="99.4167%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.12%)</title><rect x="99.1667%" y="85" width="0.1190%" height="15" fill="rgb(206,86,44)" fg:x="833" fg:w="1"/><text x="99.4167%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.12%)</title><rect x="99.1667%" y="69" width="0.1190%" height="15" fill="rgb(245,177,15)" fg:x="833" fg:w="1"/><text x="99.4167%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.12%)</title><rect x="99.1667%" y="53" width="0.1190%" height="15" fill="rgb(206,64,50)" fg:x="833" fg:w="1"/><text x="99.4167%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.12%)</title><rect x="99.1667%" y="37" width="0.1190%" height="15" fill="rgb(234,36,40)" fg:x="833" fg:w="1"/><text x="99.4167%" y="47.50"></text></g><g><title>all (840 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(213,64,8)" fg:x="0" fg:w="840"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (43 samples, 5.12%)</title><rect x="94.8810%" y="565" width="5.1190%" height="15" fill="rgb(210,75,36)" fg:x="797" fg:w="43"/><text x="95.1310%" y="575.50">tokio-..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (43 samples, 5.12%)</title><rect x="94.8810%" y="549" width="5.1190%" height="15" fill="rgb(229,88,21)" fg:x="797" fg:w="43"/><text x="95.1310%" y="559.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (43 samples, 5.12%)</title><rect x="94.8810%" y="533" width="5.1190%" height="15" fill="rgb(252,204,47)" fg:x="797" fg:w="43"/><text x="95.1310%" y="543.50">core::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (43 samples, 5.12%)</title><rect x="94.8810%" y="517" width="5.1190%" height="15" fill="rgb(208,77,27)" fg:x="797" fg:w="43"/><text x="95.1310%" y="527.50">std::s..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43 samples, 5.12%)</title><rect x="94.8810%" y="501" width="5.1190%" height="15" fill="rgb(221,76,26)" fg:x="797" fg:w="43"/><text x="95.1310%" y="511.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (43 samples, 5.12%)</title><rect x="94.8810%" y="485" width="5.1190%" height="15" fill="rgb(225,139,18)" fg:x="797" fg:w="43"/><text x="95.1310%" y="495.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (43 samples, 5.12%)</title><rect x="94.8810%" y="469" width="5.1190%" height="15" fill="rgb(230,137,11)" fg:x="797" fg:w="43"/><text x="95.1310%" y="479.50">tokio:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 5.12%)</title><rect x="94.8810%" y="453" width="5.1190%" height="15" fill="rgb(212,28,1)" fg:x="797" fg:w="43"/><text x="95.1310%" y="463.50">&lt;tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (43 samples, 5.12%)</title><rect x="94.8810%" y="437" width="5.1190%" height="15" fill="rgb(248,164,17)" fg:x="797" fg:w="43"/><text x="95.1310%" y="447.50">tokio:..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (43 samples, 5.12%)</title><rect x="94.8810%" y="421" width="5.1190%" height="15" fill="rgb(222,171,42)" fg:x="797" fg:w="43"/><text x="95.1310%" y="431.50">tokio:..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (43 samples, 5.12%)</title><rect x="94.8810%" y="405" width="5.1190%" height="15" fill="rgb(243,84,45)" fg:x="797" fg:w="43"/><text x="95.1310%" y="415.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (43 samples, 5.12%)</title><rect x="94.8810%" y="389" width="5.1190%" height="15" fill="rgb(252,49,23)" fg:x="797" fg:w="43"/><text x="95.1310%" y="399.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (32 samples, 3.81%)</title><rect x="96.1905%" y="373" width="3.8095%" height="15" fill="rgb(215,19,7)" fg:x="808" fg:w="32"/><text x="96.4405%" y="383.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (22 samples, 2.62%)</title><rect x="97.3810%" y="357" width="2.6190%" height="15" fill="rgb(238,81,41)" fg:x="818" fg:w="22"/><text x="97.6310%" y="367.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (22 samples, 2.62%)</title><rect x="97.3810%" y="341" width="2.6190%" height="15" fill="rgb(210,199,37)" fg:x="818" fg:w="22"/><text x="97.6310%" y="351.50">to..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (22 samples, 2.62%)</title><rect x="97.3810%" y="325" width="2.6190%" height="15" fill="rgb(244,192,49)" fg:x="818" fg:w="22"/><text x="97.6310%" y="335.50">&lt;f..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (22 samples, 2.62%)</title><rect x="97.3810%" y="309" width="2.6190%" height="15" fill="rgb(226,211,11)" fg:x="818" fg:w="22"/><text x="97.6310%" y="319.50">&lt;h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (22 samples, 2.62%)</title><rect x="97.3810%" y="293" width="2.6190%" height="15" fill="rgb(236,162,54)" fg:x="818" fg:w="22"/><text x="97.6310%" y="303.50">hy..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (8 samples, 0.95%)</title><rect x="99.0476%" y="277" width="0.9524%" height="15" fill="rgb(220,229,9)" fg:x="832" fg:w="8"/><text x="99.2976%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (8 samples, 0.95%)</title><rect x="99.0476%" y="261" width="0.9524%" height="15" fill="rgb(250,87,22)" fg:x="832" fg:w="8"/><text x="99.2976%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (8 samples, 0.95%)</title><rect x="99.0476%" y="245" width="0.9524%" height="15" fill="rgb(239,43,17)" fg:x="832" fg:w="8"/><text x="99.2976%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (8 samples, 0.95%)</title><rect x="99.0476%" y="229" width="0.9524%" height="15" fill="rgb(231,177,25)" fg:x="832" fg:w="8"/><text x="99.2976%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.83%)</title><rect x="99.1667%" y="213" width="0.8333%" height="15" fill="rgb(219,179,1)" fg:x="833" fg:w="7"/><text x="99.4167%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.83%)</title><rect x="99.1667%" y="197" width="0.8333%" height="15" fill="rgb(238,219,53)" fg:x="833" fg:w="7"/><text x="99.4167%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (7 samples, 0.83%)</title><rect x="99.1667%" y="181" width="0.8333%" height="15" fill="rgb(232,167,36)" fg:x="833" fg:w="7"/><text x="99.4167%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (6 samples, 0.71%)</title><rect x="99.2857%" y="165" width="0.7143%" height="15" fill="rgb(244,19,51)" fg:x="834" fg:w="6"/><text x="99.5357%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (6 samples, 0.71%)</title><rect x="99.2857%" y="149" width="0.7143%" height="15" fill="rgb(224,6,22)" fg:x="834" fg:w="6"/><text x="99.5357%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (6 samples, 0.71%)</title><rect x="99.2857%" y="133" width="0.7143%" height="15" fill="rgb(224,145,5)" fg:x="834" fg:w="6"/><text x="99.5357%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (6 samples, 0.71%)</title><rect x="99.2857%" y="117" width="0.7143%" height="15" fill="rgb(234,130,49)" fg:x="834" fg:w="6"/><text x="99.5357%" y="127.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (6 samples, 0.71%)</title><rect x="99.2857%" y="101" width="0.7143%" height="15" fill="rgb(254,6,2)" fg:x="834" fg:w="6"/><text x="99.5357%" y="111.50"></text></g><g><title>recv (6 samples, 0.71%)</title><rect x="99.2857%" y="85" width="0.7143%" height="15" fill="rgb(208,96,46)" fg:x="834" fg:w="6"/><text x="99.5357%" y="95.50"></text></g></svg></svg>