<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1042"><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.58%)</title><rect x="0.9597%" y="229" width="0.5758%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="6"/><text x="1.2097%" y="239.50"></text></g><g><title>syscall (5 samples, 0.48%)</title><rect x="1.0557%" y="213" width="0.4798%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="5"/><text x="1.3057%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.44%)</title><rect x="0.6718%" y="389" width="1.4395%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="15"/><text x="0.9218%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (14 samples, 1.34%)</title><rect x="0.7678%" y="373" width="1.3436%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="14"/><text x="1.0178%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (14 samples, 1.34%)</title><rect x="0.7678%" y="357" width="1.3436%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="14"/><text x="1.0178%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (14 samples, 1.34%)</title><rect x="0.7678%" y="341" width="1.3436%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="14"/><text x="1.0178%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (14 samples, 1.34%)</title><rect x="0.7678%" y="325" width="1.3436%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="14"/><text x="1.0178%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 1.34%)</title><rect x="0.7678%" y="309" width="1.3436%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="14"/><text x="1.0178%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (14 samples, 1.34%)</title><rect x="0.7678%" y="293" width="1.3436%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="14"/><text x="1.0178%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 1.15%)</title><rect x="0.9597%" y="277" width="1.1516%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="12"/><text x="1.2097%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (12 samples, 1.15%)</title><rect x="0.9597%" y="261" width="1.1516%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="12"/><text x="1.2097%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (12 samples, 1.15%)</title><rect x="0.9597%" y="245" width="1.1516%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="12"/><text x="1.2097%" y="255.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (6 samples, 0.58%)</title><rect x="1.5355%" y="229" width="0.5758%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="6"/><text x="1.7855%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (6 samples, 0.58%)</title><rect x="1.5355%" y="213" width="0.5758%" height="15" fill="rgb(206,188,39)" fg:x="16" fg:w="6"/><text x="1.7855%" y="223.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (6 samples, 0.58%)</title><rect x="1.5355%" y="197" width="0.5758%" height="15" fill="rgb(217,207,13)" fg:x="16" fg:w="6"/><text x="1.7855%" y="207.50"></text></g><g><title>write (6 samples, 0.58%)</title><rect x="1.5355%" y="181" width="0.5758%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="6"/><text x="1.7855%" y="191.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.10%)</title><rect x="2.1113%" y="389" width="0.0960%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="1"/><text x="2.3613%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.10%)</title><rect x="2.1113%" y="373" width="0.0960%" height="15" fill="rgb(210,31,41)" fg:x="22" fg:w="1"/><text x="2.3613%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="2.2073%" y="389" width="0.0960%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="1"/><text x="2.4573%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="2.2073%" y="373" width="0.0960%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="1"/><text x="2.4573%" y="383.50"></text></g><g><title>__libc_realloc (1 samples, 0.10%)</title><rect x="2.2073%" y="357" width="0.0960%" height="15" fill="rgb(249,33,26)" fg:x="23" fg:w="1"/><text x="2.4573%" y="367.50"></text></g><g><title>mremap (1 samples, 0.10%)</title><rect x="2.2073%" y="341" width="0.0960%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="1"/><text x="2.4573%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.10%)</title><rect x="2.3992%" y="373" width="0.0960%" height="15" fill="rgb(221,5,38)" fg:x="25" fg:w="1"/><text x="2.6492%" y="383.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.10%)</title><rect x="2.4952%" y="341" width="0.0960%" height="15" fill="rgb(247,18,42)" fg:x="26" fg:w="1"/><text x="2.7452%" y="351.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.10%)</title><rect x="2.4952%" y="325" width="0.0960%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="1"/><text x="2.7452%" y="335.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.10%)</title><rect x="2.4952%" y="309" width="0.0960%" height="15" fill="rgb(249,31,29)" fg:x="26" fg:w="1"/><text x="2.7452%" y="319.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.10%)</title><rect x="2.4952%" y="293" width="0.0960%" height="15" fill="rgb(225,111,53)" fg:x="26" fg:w="1"/><text x="2.7452%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.10%)</title><rect x="2.5912%" y="341" width="0.0960%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="1"/><text x="2.8412%" y="351.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.10%)</title><rect x="2.5912%" y="325" width="0.0960%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="1"/><text x="2.8412%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.10%)</title><rect x="2.5912%" y="309" width="0.0960%" height="15" fill="rgb(232,36,49)" fg:x="27" fg:w="1"/><text x="2.8412%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (1 samples, 0.10%)</title><rect x="2.6871%" y="341" width="0.0960%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="1"/><text x="2.9371%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.10%)</title><rect x="2.6871%" y="325" width="0.0960%" height="15" fill="rgb(229,88,8)" fg:x="28" fg:w="1"/><text x="2.9371%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.10%)</title><rect x="2.6871%" y="309" width="0.0960%" height="15" fill="rgb(213,181,19)" fg:x="28" fg:w="1"/><text x="2.9371%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.10%)</title><rect x="2.6871%" y="293" width="0.0960%" height="15" fill="rgb(254,191,54)" fg:x="28" fg:w="1"/><text x="2.9371%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.10%)</title><rect x="2.6871%" y="277" width="0.0960%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="1"/><text x="2.9371%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="2.6871%" y="261" width="0.0960%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="1"/><text x="2.9371%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.10%)</title><rect x="2.6871%" y="245" width="0.0960%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="1"/><text x="2.9371%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.10%)</title><rect x="2.6871%" y="229" width="0.0960%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="1"/><text x="2.9371%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.10%)</title><rect x="2.6871%" y="213" width="0.0960%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="1"/><text x="2.9371%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="2.6871%" y="197" width="0.0960%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="2.9371%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="2.6871%" y="181" width="0.0960%" height="15" fill="rgb(231,60,39)" fg:x="28" fg:w="1"/><text x="2.9371%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="2.6871%" y="165" width="0.0960%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="1"/><text x="2.9371%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="2.6871%" y="149" width="0.0960%" height="15" fill="rgb(235,93,37)" fg:x="28" fg:w="1"/><text x="2.9371%" y="159.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (4 samples, 0.38%)</title><rect x="2.4952%" y="373" width="0.3839%" height="15" fill="rgb(213,116,39)" fg:x="26" fg:w="4"/><text x="2.7452%" y="383.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (4 samples, 0.38%)</title><rect x="2.4952%" y="357" width="0.3839%" height="15" fill="rgb(222,207,29)" fg:x="26" fg:w="4"/><text x="2.7452%" y="367.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.10%)</title><rect x="2.7831%" y="341" width="0.0960%" height="15" fill="rgb(206,96,30)" fg:x="29" fg:w="1"/><text x="3.0331%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.10%)</title><rect x="2.7831%" y="325" width="0.0960%" height="15" fill="rgb(218,138,4)" fg:x="29" fg:w="1"/><text x="3.0331%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.10%)</title><rect x="2.7831%" y="309" width="0.0960%" height="15" fill="rgb(250,191,14)" fg:x="29" fg:w="1"/><text x="3.0331%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.10%)</title><rect x="2.7831%" y="293" width="0.0960%" height="15" fill="rgb(239,60,40)" fg:x="29" fg:w="1"/><text x="3.0331%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.10%)</title><rect x="2.7831%" y="277" width="0.0960%" height="15" fill="rgb(206,27,48)" fg:x="29" fg:w="1"/><text x="3.0331%" y="287.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="2.7831%" y="261" width="0.0960%" height="15" fill="rgb(225,35,8)" fg:x="29" fg:w="1"/><text x="3.0331%" y="271.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="2.7831%" y="245" width="0.0960%" height="15" fill="rgb(250,213,24)" fg:x="29" fg:w="1"/><text x="3.0331%" y="255.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="2.7831%" y="229" width="0.0960%" height="15" fill="rgb(247,123,22)" fg:x="29" fg:w="1"/><text x="3.0331%" y="239.50"></text></g><g><title>malloc (12 samples, 1.15%)</title><rect x="3.7428%" y="357" width="1.1516%" height="15" fill="rgb(231,138,38)" fg:x="39" fg:w="12"/><text x="3.9928%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (20 samples, 1.92%)</title><rect x="9.2131%" y="293" width="1.9194%" height="15" fill="rgb(231,145,46)" fg:x="96" fg:w="20"/><text x="9.4631%" y="303.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 1.92%)</title><rect x="9.2131%" y="277" width="1.9194%" height="15" fill="rgb(251,118,11)" fg:x="96" fg:w="20"/><text x="9.4631%" y="287.50">a..</text></g><g><title>__libc_realloc (20 samples, 1.92%)</title><rect x="9.2131%" y="261" width="1.9194%" height="15" fill="rgb(217,147,25)" fg:x="96" fg:w="20"/><text x="9.4631%" y="271.50">_..</text></g><g><title>arrow_csv::reader::Decoder::decode (103 samples, 9.88%)</title><rect x="7.4856%" y="325" width="9.8848%" height="15" fill="rgb(247,81,37)" fg:x="78" fg:w="103"/><text x="7.7356%" y="335.50">arrow_csv::rea..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (103 samples, 9.88%)</title><rect x="7.4856%" y="309" width="9.8848%" height="15" fill="rgb(209,12,38)" fg:x="78" fg:w="103"/><text x="7.7356%" y="319.50">arrow_csv::rea..</text></g><g><title>csv_core::reader::Reader::read_record (65 samples, 6.24%)</title><rect x="11.1324%" y="293" width="6.2380%" height="15" fill="rgb(227,1,9)" fg:x="116" fg:w="65"/><text x="11.3824%" y="303.50">csv_core..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (10 samples, 0.96%)</title><rect x="17.3704%" y="309" width="0.9597%" height="15" fill="rgb(248,47,43)" fg:x="181" fg:w="10"/><text x="17.6204%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.67%)</title><rect x="17.6583%" y="293" width="0.6718%" height="15" fill="rgb(221,10,30)" fg:x="184" fg:w="7"/><text x="17.9083%" y="303.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (46 samples, 4.41%)</title><rect x="20.4415%" y="245" width="4.4146%" height="15" fill="rgb(210,229,1)" fg:x="213" fg:w="46"/><text x="20.6915%" y="255.50">arrow..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (7 samples, 0.67%)</title><rect x="24.1843%" y="229" width="0.6718%" height="15" fill="rgb(222,148,37)" fg:x="252" fg:w="7"/><text x="24.4343%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (7 samples, 0.67%)</title><rect x="24.1843%" y="213" width="0.6718%" height="15" fill="rgb(234,67,33)" fg:x="252" fg:w="7"/><text x="24.4343%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.10%)</title><rect x="24.7601%" y="197" width="0.0960%" height="15" fill="rgb(247,98,35)" fg:x="258" fg:w="1"/><text x="25.0101%" y="207.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (70 samples, 6.72%)</title><rect x="18.3301%" y="261" width="6.7179%" height="15" fill="rgb(247,138,52)" fg:x="191" fg:w="70"/><text x="18.5801%" y="271.50">&lt;arrow_ar..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (2 samples, 0.19%)</title><rect x="24.8560%" y="245" width="0.1919%" height="15" fill="rgb(213,79,30)" fg:x="259" fg:w="2"/><text x="25.1060%" y="255.50"></text></g><g><title>malloc (2 samples, 0.19%)</title><rect x="24.8560%" y="229" width="0.1919%" height="15" fill="rgb(246,177,23)" fg:x="259" fg:w="2"/><text x="25.1060%" y="239.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (196 samples, 18.81%)</title><rect x="6.3340%" y="341" width="18.8100%" height="15" fill="rgb(230,62,27)" fg:x="66" fg:w="196"/><text x="6.5840%" y="351.50">arrow_csv::reader::BufReader&lt;..</text></g><g><title>arrow_csv::reader::Decoder::flush (81 samples, 7.77%)</title><rect x="17.3704%" y="325" width="7.7735%" height="15" fill="rgb(216,154,8)" fg:x="181" fg:w="81"/><text x="17.6204%" y="335.50">arrow_csv::..</text></g><g><title>core::iter::adapters::try_process (71 samples, 6.81%)</title><rect x="18.3301%" y="309" width="6.8138%" height="15" fill="rgb(244,35,45)" fg:x="191" fg:w="71"/><text x="18.5801%" y="319.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (71 samples, 6.81%)</title><rect x="18.3301%" y="293" width="6.8138%" height="15" fill="rgb(251,115,12)" fg:x="191" fg:w="71"/><text x="18.5801%" y="303.50">&lt;alloc::v..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (71 samples, 6.81%)</title><rect x="18.3301%" y="277" width="6.8138%" height="15" fill="rgb(240,54,50)" fg:x="191" fg:w="71"/><text x="18.5801%" y="287.50">&lt;core::it..</text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="25.0480%" y="261" width="0.0960%" height="15" fill="rgb(233,84,52)" fg:x="261" fg:w="1"/><text x="25.2980%" y="271.50"></text></g><g><title>cfree (23 samples, 2.21%)</title><rect x="25.1440%" y="341" width="2.2073%" height="15" fill="rgb(207,117,47)" fg:x="262" fg:w="23"/><text x="25.3940%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (1 samples, 0.10%)</title><rect x="27.3512%" y="341" width="0.0960%" height="15" fill="rgb(249,43,39)" fg:x="285" fg:w="1"/><text x="27.6012%" y="351.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="27.3512%" y="325" width="0.0960%" height="15" fill="rgb(209,38,44)" fg:x="285" fg:w="1"/><text x="27.6012%" y="335.50"></text></g><g><title>__default_morecore (1 samples, 0.10%)</title><rect x="27.3512%" y="309" width="0.0960%" height="15" fill="rgb(236,212,23)" fg:x="285" fg:w="1"/><text x="27.6012%" y="319.50"></text></g><g><title>__sbrk (1 samples, 0.10%)</title><rect x="27.3512%" y="293" width="0.0960%" height="15" fill="rgb(242,79,21)" fg:x="285" fg:w="1"/><text x="27.6012%" y="303.50"></text></g><g><title>brk (1 samples, 0.10%)</title><rect x="27.3512%" y="277" width="0.0960%" height="15" fill="rgb(211,96,35)" fg:x="285" fg:w="1"/><text x="27.6012%" y="287.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.19%)</title><rect x="29.1747%" y="325" width="0.1919%" height="15" fill="rgb(253,215,40)" fg:x="304" fg:w="2"/><text x="29.4247%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.19%)</title><rect x="29.1747%" y="309" width="0.1919%" height="15" fill="rgb(211,81,21)" fg:x="304" fg:w="2"/><text x="29.4247%" y="319.50"></text></g><g><title>posix_memalign (1 samples, 0.10%)</title><rect x="29.2706%" y="293" width="0.0960%" height="15" fill="rgb(208,190,38)" fg:x="305" fg:w="1"/><text x="29.5206%" y="303.50"></text></g><g><title>cfree (18 samples, 1.73%)</title><rect x="29.3666%" y="325" width="1.7274%" height="15" fill="rgb(235,213,38)" fg:x="306" fg:w="18"/><text x="29.6166%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (40 samples, 3.84%)</title><rect x="31.0940%" y="325" width="3.8388%" height="15" fill="rgb(237,122,38)" fg:x="324" fg:w="40"/><text x="31.3440%" y="335.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 1.82%)</title><rect x="33.1094%" y="309" width="1.8234%" height="15" fill="rgb(244,218,35)" fg:x="345" fg:w="19"/><text x="33.3594%" y="319.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (7 samples, 0.67%)</title><rect x="36.4683%" y="309" width="0.6718%" height="15" fill="rgb(240,68,47)" fg:x="380" fg:w="7"/><text x="36.7183%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (1 samples, 0.10%)</title><rect x="37.7159%" y="293" width="0.0960%" height="15" fill="rgb(210,16,53)" fg:x="393" fg:w="1"/><text x="37.9659%" y="303.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (10 samples, 0.96%)</title><rect x="37.1401%" y="309" width="0.9597%" height="15" fill="rgb(235,124,12)" fg:x="387" fg:w="10"/><text x="37.3901%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (3 samples, 0.29%)</title><rect x="37.8119%" y="293" width="0.2879%" height="15" fill="rgb(224,169,11)" fg:x="394" fg:w="3"/><text x="38.0619%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (34 samples, 3.26%)</title><rect x="34.9328%" y="325" width="3.2630%" height="15" fill="rgb(250,166,2)" fg:x="364" fg:w="34"/><text x="35.1828%" y="335.50">nem..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="38.0998%" y="309" width="0.0960%" height="15" fill="rgb(242,216,29)" fg:x="397" fg:w="1"/><text x="38.3498%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.10%)</title><rect x="39.4434%" y="309" width="0.0960%" height="15" fill="rgb(230,116,27)" fg:x="411" fg:w="1"/><text x="39.6934%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (8 samples, 0.77%)</title><rect x="39.5393%" y="309" width="0.7678%" height="15" fill="rgb(228,99,48)" fg:x="412" fg:w="8"/><text x="39.7893%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (139 samples, 13.34%)</title><rect x="27.4472%" y="341" width="13.3397%" height="15" fill="rgb(253,11,6)" fg:x="286" fg:w="139"/><text x="27.6972%" y="351.50">nemscraper::process:..</text></g><g><title>nemscraper::process::utils::clean_str (27 samples, 2.59%)</title><rect x="38.1958%" y="325" width="2.5912%" height="15" fill="rgb(247,143,39)" fg:x="398" fg:w="27"/><text x="38.4458%" y="335.50">ne..</text></g><g><title>malloc (5 samples, 0.48%)</title><rect x="40.3071%" y="309" width="0.4798%" height="15" fill="rgb(236,97,10)" fg:x="420" fg:w="5"/><text x="40.5571%" y="319.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.10%)</title><rect x="40.7869%" y="197" width="0.0960%" height="15" fill="rgb(233,208,19)" fg:x="425" fg:w="1"/><text x="41.0369%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.10%)</title><rect x="40.7869%" y="181" width="0.0960%" height="15" fill="rgb(216,164,2)" fg:x="425" fg:w="1"/><text x="41.0369%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.19%)</title><rect x="40.8829%" y="165" width="0.1919%" height="15" fill="rgb(220,129,5)" fg:x="426" fg:w="2"/><text x="41.1329%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.19%)</title><rect x="40.8829%" y="149" width="0.1919%" height="15" fill="rgb(242,17,10)" fg:x="426" fg:w="2"/><text x="41.1329%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="40.9789%" y="133" width="0.0960%" height="15" fill="rgb(242,107,0)" fg:x="427" fg:w="1"/><text x="41.2289%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.10%)</title><rect x="41.0749%" y="101" width="0.0960%" height="15" fill="rgb(251,28,31)" fg:x="428" fg:w="1"/><text x="41.3249%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.19%)</title><rect x="41.0749%" y="117" width="0.1919%" height="15" fill="rgb(233,223,10)" fg:x="428" fg:w="2"/><text x="41.3249%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.10%)</title><rect x="41.1708%" y="101" width="0.0960%" height="15" fill="rgb(215,21,27)" fg:x="429" fg:w="1"/><text x="41.4208%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (3 samples, 0.29%)</title><rect x="41.0749%" y="165" width="0.2879%" height="15" fill="rgb(232,23,21)" fg:x="428" fg:w="3"/><text x="41.3249%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (3 samples, 0.29%)</title><rect x="41.0749%" y="149" width="0.2879%" height="15" fill="rgb(244,5,23)" fg:x="428" fg:w="3"/><text x="41.3249%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (3 samples, 0.29%)</title><rect x="41.0749%" y="133" width="0.2879%" height="15" fill="rgb(226,81,46)" fg:x="428" fg:w="3"/><text x="41.3249%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="41.2668%" y="117" width="0.0960%" height="15" fill="rgb(247,70,30)" fg:x="430" fg:w="1"/><text x="41.5168%" y="127.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (8 samples, 0.77%)</title><rect x="40.7869%" y="213" width="0.7678%" height="15" fill="rgb(212,68,19)" fg:x="425" fg:w="8"/><text x="41.0369%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.67%)</title><rect x="40.8829%" y="197" width="0.6718%" height="15" fill="rgb(240,187,13)" fg:x="426" fg:w="7"/><text x="41.1329%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 0.67%)</title><rect x="40.8829%" y="181" width="0.6718%" height="15" fill="rgb(223,113,26)" fg:x="426" fg:w="7"/><text x="41.1329%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.19%)</title><rect x="41.3628%" y="165" width="0.1919%" height="15" fill="rgb(206,192,2)" fg:x="431" fg:w="2"/><text x="41.6128%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.10%)</title><rect x="41.5547%" y="213" width="0.0960%" height="15" fill="rgb(241,108,4)" fg:x="433" fg:w="1"/><text x="41.8047%" y="223.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder&lt;A&gt;::push (1 samples, 0.10%)</title><rect x="41.5547%" y="197" width="0.0960%" height="15" fill="rgb(247,173,49)" fg:x="433" fg:w="1"/><text x="41.8047%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.10%)</title><rect x="41.6507%" y="197" width="0.0960%" height="15" fill="rgb(224,114,35)" fg:x="434" fg:w="1"/><text x="41.9007%" y="207.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.10%)</title><rect x="41.6507%" y="181" width="0.0960%" height="15" fill="rgb(245,159,27)" fg:x="434" fg:w="1"/><text x="41.9007%" y="191.50"></text></g><g><title>&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_i32 (1 samples, 0.10%)</title><rect x="41.6507%" y="165" width="0.0960%" height="15" fill="rgb(245,172,44)" fg:x="434" fg:w="1"/><text x="41.9007%" y="175.50"></text></g><g><title>&lt;i32 as integer_encoding::varint::VarInt&gt;::encode_var (1 samples, 0.10%)</title><rect x="41.6507%" y="149" width="0.0960%" height="15" fill="rgb(236,23,11)" fg:x="434" fg:w="1"/><text x="41.9007%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.10%)</title><rect x="48.8484%" y="149" width="0.0960%" height="15" fill="rgb(205,117,38)" fg:x="509" fg:w="1"/><text x="49.0984%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.10%)</title><rect x="48.9443%" y="149" width="0.0960%" height="15" fill="rgb(237,72,25)" fg:x="510" fg:w="1"/><text x="49.1943%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (65 samples, 6.24%)</title><rect x="42.9942%" y="165" width="6.2380%" height="15" fill="rgb(244,70,9)" fg:x="448" fg:w="65"/><text x="43.2442%" y="175.50">&lt;brotli:..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.19%)</title><rect x="49.0403%" y="149" width="0.1919%" height="15" fill="rgb(217,125,39)" fg:x="511" fg:w="2"/><text x="49.2903%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (80 samples, 7.68%)</title><rect x="41.8426%" y="181" width="7.6775%" height="15" fill="rgb(235,36,10)" fg:x="436" fg:w="80"/><text x="42.0926%" y="191.50">brotli::enc..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.29%)</title><rect x="49.2322%" y="165" width="0.2879%" height="15" fill="rgb(251,123,47)" fg:x="513" fg:w="3"/><text x="49.4822%" y="175.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (17 samples, 1.63%)</title><rect x="49.5202%" y="181" width="1.6315%" height="15" fill="rgb(221,13,13)" fg:x="516" fg:w="17"/><text x="49.7702%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (17 samples, 1.63%)</title><rect x="49.5202%" y="165" width="1.6315%" height="15" fill="rgb(238,131,9)" fg:x="516" fg:w="17"/><text x="49.7702%" y="175.50"></text></g><g><title>calloc (1 samples, 0.10%)</title><rect x="51.0557%" y="149" width="0.0960%" height="15" fill="rgb(211,50,8)" fg:x="532" fg:w="1"/><text x="51.3057%" y="159.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="51.1516%" y="181" width="0.0960%" height="15" fill="rgb(245,182,24)" fg:x="533" fg:w="1"/><text x="51.4016%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.10%)</title><rect x="54.1267%" y="133" width="0.0960%" height="15" fill="rgb(242,14,37)" fg:x="564" fg:w="1"/><text x="54.3767%" y="143.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.10%)</title><rect x="54.2226%" y="133" width="0.0960%" height="15" fill="rgb(246,228,12)" fg:x="565" fg:w="1"/><text x="54.4726%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (33 samples, 3.17%)</title><rect x="51.2476%" y="165" width="3.1670%" height="15" fill="rgb(213,55,15)" fg:x="534" fg:w="33"/><text x="51.4976%" y="175.50">bro..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (30 samples, 2.88%)</title><rect x="51.5355%" y="149" width="2.8791%" height="15" fill="rgb(209,9,3)" fg:x="537" fg:w="30"/><text x="51.7855%" y="159.50">&lt;b..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="54.3186%" y="133" width="0.0960%" height="15" fill="rgb(230,59,30)" fg:x="566" fg:w="1"/><text x="54.5686%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (3 samples, 0.29%)</title><rect x="55.1823%" y="149" width="0.2879%" height="15" fill="rgb(209,121,21)" fg:x="575" fg:w="3"/><text x="55.4323%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (3 samples, 0.29%)</title><rect x="55.1823%" y="133" width="0.2879%" height="15" fill="rgb(220,109,13)" fg:x="575" fg:w="3"/><text x="55.4323%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (3 samples, 0.29%)</title><rect x="55.1823%" y="117" width="0.2879%" height="15" fill="rgb(232,18,1)" fg:x="575" fg:w="3"/><text x="55.4323%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.10%)</title><rect x="55.3743%" y="101" width="0.0960%" height="15" fill="rgb(215,41,42)" fg:x="577" fg:w="1"/><text x="55.6243%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (27 samples, 2.59%)</title><rect x="54.4146%" y="165" width="2.5912%" height="15" fill="rgb(224,123,36)" fg:x="567" fg:w="27"/><text x="54.6646%" y="175.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (16 samples, 1.54%)</title><rect x="55.4702%" y="149" width="1.5355%" height="15" fill="rgb(240,125,3)" fg:x="578" fg:w="16"/><text x="55.7202%" y="159.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="57.0058%" y="165" width="0.0960%" height="15" fill="rgb(205,98,50)" fg:x="594" fg:w="1"/><text x="57.2558%" y="175.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (179 samples, 17.18%)</title><rect x="40.7869%" y="229" width="17.1785%" height="15" fill="rgb(205,185,37)" fg:x="425" fg:w="179"/><text x="41.0369%" y="239.50">parquet::column::writer::Co..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (170 samples, 16.31%)</title><rect x="41.6507%" y="213" width="16.3148%" height="15" fill="rgb(238,207,15)" fg:x="434" fg:w="170"/><text x="41.9007%" y="223.50">parquet::column::writer::..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (169 samples, 16.22%)</title><rect x="41.7466%" y="197" width="16.2188%" height="15" fill="rgb(213,199,42)" fg:x="435" fg:w="169"/><text x="41.9966%" y="207.50">&lt;parquet::compression::br..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (70 samples, 6.72%)</title><rect x="51.2476%" y="181" width="6.7179%" height="15" fill="rgb(235,201,11)" fg:x="534" fg:w="70"/><text x="51.4976%" y="191.50">brotli::e..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (9 samples, 0.86%)</title><rect x="57.1017%" y="165" width="0.8637%" height="15" fill="rgb(207,46,11)" fg:x="595" fg:w="9"/><text x="57.3517%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.19%)</title><rect x="58.0614%" y="197" width="0.1919%" height="15" fill="rgb(241,35,35)" fg:x="605" fg:w="2"/><text x="58.3114%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.19%)</title><rect x="58.0614%" y="181" width="0.1919%" height="15" fill="rgb(243,32,47)" fg:x="605" fg:w="2"/><text x="58.3114%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (2 samples, 0.19%)</title><rect x="58.0614%" y="165" width="0.1919%" height="15" fill="rgb(247,202,23)" fg:x="605" fg:w="2"/><text x="58.3114%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (2 samples, 0.19%)</title><rect x="58.0614%" y="149" width="0.1919%" height="15" fill="rgb(219,102,11)" fg:x="605" fg:w="2"/><text x="58.3114%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.38%)</title><rect x="57.9655%" y="213" width="0.3839%" height="15" fill="rgb(243,110,44)" fg:x="604" fg:w="4"/><text x="58.2155%" y="223.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.10%)</title><rect x="58.2534%" y="197" width="0.0960%" height="15" fill="rgb(222,74,54)" fg:x="607" fg:w="1"/><text x="58.5034%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.19%)</title><rect x="58.3493%" y="165" width="0.1919%" height="15" fill="rgb(216,99,12)" fg:x="608" fg:w="2"/><text x="58.5993%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="58.4453%" y="149" width="0.0960%" height="15" fill="rgb(226,22,26)" fg:x="609" fg:w="1"/><text x="58.6953%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (186 samples, 17.85%)</title><rect x="40.7869%" y="309" width="17.8503%" height="15" fill="rgb(217,163,10)" fg:x="425" fg:w="186"/><text x="41.0369%" y="319.50">parquet::arrow::arrow_writer..</text></g><g><title>core::iter::adapters::try_process (186 samples, 17.85%)</title><rect x="40.7869%" y="293" width="17.8503%" height="15" fill="rgb(213,25,53)" fg:x="425" fg:w="186"/><text x="41.0369%" y="303.50">core::iter::adapters::try_pr..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (186 samples, 17.85%)</title><rect x="40.7869%" y="277" width="17.8503%" height="15" fill="rgb(252,105,26)" fg:x="425" fg:w="186"/><text x="41.0369%" y="287.50">alloc::vec::in_place_collect..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (186 samples, 17.85%)</title><rect x="40.7869%" y="261" width="17.8503%" height="15" fill="rgb(220,39,43)" fg:x="425" fg:w="186"/><text x="41.0369%" y="271.50">&lt;alloc::vec::into_iter::Into..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (186 samples, 17.85%)</title><rect x="40.7869%" y="245" width="17.8503%" height="15" fill="rgb(229,68,48)" fg:x="425" fg:w="186"/><text x="41.0369%" y="255.50">parquet::arrow::arrow_writer..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (7 samples, 0.67%)</title><rect x="57.9655%" y="229" width="0.6718%" height="15" fill="rgb(252,8,32)" fg:x="604" fg:w="7"/><text x="58.2155%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (3 samples, 0.29%)</title><rect x="58.3493%" y="213" width="0.2879%" height="15" fill="rgb(223,20,43)" fg:x="608" fg:w="3"/><text x="58.5993%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.29%)</title><rect x="58.3493%" y="197" width="0.2879%" height="15" fill="rgb(229,81,49)" fg:x="608" fg:w="3"/><text x="58.5993%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.29%)</title><rect x="58.3493%" y="181" width="0.2879%" height="15" fill="rgb(236,28,36)" fg:x="608" fg:w="3"/><text x="58.5993%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="58.5413%" y="165" width="0.0960%" height="15" fill="rgb(249,185,26)" fg:x="610" fg:w="1"/><text x="58.7913%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (187 samples, 17.95%)</title><rect x="40.7869%" y="341" width="17.9463%" height="15" fill="rgb(249,174,33)" fg:x="425" fg:w="187"/><text x="41.0369%" y="351.50">parquet::arrow::arrow_writer..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (187 samples, 17.95%)</title><rect x="40.7869%" y="325" width="17.9463%" height="15" fill="rgb(233,201,37)" fg:x="425" fg:w="187"/><text x="41.0369%" y="335.50">parquet::arrow::arrow_writer..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.10%)</title><rect x="58.6372%" y="309" width="0.0960%" height="15" fill="rgb(221,78,26)" fg:x="611" fg:w="1"/><text x="58.8872%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.10%)</title><rect x="58.6372%" y="293" width="0.0960%" height="15" fill="rgb(250,127,30)" fg:x="611" fg:w="1"/><text x="58.8872%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.10%)</title><rect x="58.6372%" y="277" width="0.0960%" height="15" fill="rgb(230,49,44)" fg:x="611" fg:w="1"/><text x="58.8872%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.10%)</title><rect x="58.6372%" y="261" width="0.0960%" height="15" fill="rgb(229,67,23)" fg:x="611" fg:w="1"/><text x="58.8872%" y="271.50"></text></g><g><title>write (1 samples, 0.10%)</title><rect x="58.6372%" y="245" width="0.0960%" height="15" fill="rgb(249,83,47)" fg:x="611" fg:w="1"/><text x="58.8872%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="59.4050%" y="229" width="0.0960%" height="15" fill="rgb(215,43,3)" fg:x="619" fg:w="1"/><text x="59.6550%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="59.4050%" y="213" width="0.0960%" height="15" fill="rgb(238,154,13)" fg:x="619" fg:w="1"/><text x="59.6550%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.10%)</title><rect x="59.4050%" y="197" width="0.0960%" height="15" fill="rgb(219,56,2)" fg:x="619" fg:w="1"/><text x="59.6550%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (13 samples, 1.25%)</title><rect x="58.9251%" y="261" width="1.2476%" height="15" fill="rgb(233,0,4)" fg:x="614" fg:w="13"/><text x="59.1751%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (13 samples, 1.25%)</title><rect x="58.9251%" y="245" width="1.2476%" height="15" fill="rgb(235,30,7)" fg:x="614" fg:w="13"/><text x="59.1751%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (7 samples, 0.67%)</title><rect x="59.5010%" y="229" width="0.6718%" height="15" fill="rgb(250,79,13)" fg:x="620" fg:w="7"/><text x="59.7510%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="60.1727%" y="261" width="0.0960%" height="15" fill="rgb(211,146,34)" fg:x="627" fg:w="1"/><text x="60.4227%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="60.1727%" y="245" width="0.0960%" height="15" fill="rgb(228,22,38)" fg:x="627" fg:w="1"/><text x="60.4227%" y="255.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="60.1727%" y="229" width="0.0960%" height="15" fill="rgb(235,168,5)" fg:x="627" fg:w="1"/><text x="60.4227%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.10%)</title><rect x="60.2687%" y="245" width="0.0960%" height="15" fill="rgb(221,155,16)" fg:x="628" fg:w="1"/><text x="60.5187%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.10%)</title><rect x="60.2687%" y="229" width="0.0960%" height="15" fill="rgb(215,215,53)" fg:x="628" fg:w="1"/><text x="60.5187%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.10%)</title><rect x="60.2687%" y="213" width="0.0960%" height="15" fill="rgb(223,4,10)" fg:x="628" fg:w="1"/><text x="60.5187%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="60.3647%" y="213" width="0.0960%" height="15" fill="rgb(234,103,6)" fg:x="629" fg:w="1"/><text x="60.6147%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::backward_references::UnionHasher&lt;alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.10%)</title><rect x="60.3647%" y="197" width="0.0960%" height="15" fill="rgb(227,97,0)" fg:x="629" fg:w="1"/><text x="60.6147%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.19%)</title><rect x="60.3647%" y="229" width="0.1919%" height="15" fill="rgb(234,150,53)" fg:x="629" fg:w="2"/><text x="60.6147%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.10%)</title><rect x="60.4607%" y="213" width="0.0960%" height="15" fill="rgb(228,201,54)" fg:x="630" fg:w="1"/><text x="60.7107%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (20 samples, 1.92%)</title><rect x="58.7332%" y="293" width="1.9194%" height="15" fill="rgb(222,22,37)" fg:x="612" fg:w="20"/><text x="58.9832%" y="303.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (20 samples, 1.92%)</title><rect x="58.7332%" y="277" width="1.9194%" height="15" fill="rgb(237,53,32)" fg:x="612" fg:w="20"/><text x="58.9832%" y="287.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.38%)</title><rect x="60.2687%" y="261" width="0.3839%" height="15" fill="rgb(233,25,53)" fg:x="628" fg:w="4"/><text x="60.5187%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.29%)</title><rect x="60.3647%" y="245" width="0.2879%" height="15" fill="rgb(210,40,34)" fg:x="629" fg:w="3"/><text x="60.6147%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.10%)</title><rect x="60.5566%" y="229" width="0.0960%" height="15" fill="rgb(241,220,44)" fg:x="631" fg:w="1"/><text x="60.8066%" y="239.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="60.5566%" y="213" width="0.0960%" height="15" fill="rgb(235,28,35)" fg:x="631" fg:w="1"/><text x="60.8066%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.19%)</title><rect x="63.4357%" y="261" width="0.1919%" height="15" fill="rgb(210,56,17)" fg:x="661" fg:w="2"/><text x="63.6857%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.19%)</title><rect x="63.4357%" y="245" width="0.1919%" height="15" fill="rgb(224,130,29)" fg:x="661" fg:w="2"/><text x="63.6857%" y="255.50"></text></g><g><title>__libc_realloc (2 samples, 0.19%)</title><rect x="63.4357%" y="229" width="0.1919%" height="15" fill="rgb(235,212,8)" fg:x="661" fg:w="2"/><text x="63.6857%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (38 samples, 3.65%)</title><rect x="61.5163%" y="277" width="3.6468%" height="15" fill="rgb(223,33,50)" fg:x="641" fg:w="38"/><text x="61.7663%" y="287.50">&lt;par..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (16 samples, 1.54%)</title><rect x="63.6276%" y="261" width="1.5355%" height="15" fill="rgb(219,149,13)" fg:x="663" fg:w="16"/><text x="63.8776%" y="271.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (2 samples, 0.19%)</title><rect x="64.9712%" y="245" width="0.1919%" height="15" fill="rgb(250,156,29)" fg:x="677" fg:w="2"/><text x="65.2212%" y="255.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="65.4511%" y="261" width="0.0960%" height="15" fill="rgb(216,193,19)" fg:x="682" fg:w="1"/><text x="65.7011%" y="271.50"></text></g><g><title>parquet::column::writer::compare_greater (5 samples, 0.48%)</title><rect x="66.5067%" y="245" width="0.4798%" height="15" fill="rgb(216,135,14)" fg:x="693" fg:w="5"/><text x="66.7567%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (42 samples, 4.03%)</title><rect x="65.1631%" y="277" width="4.0307%" height="15" fill="rgb(241,47,5)" fg:x="679" fg:w="42"/><text x="65.4131%" y="287.50">&lt;par..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (38 samples, 3.65%)</title><rect x="65.5470%" y="261" width="3.6468%" height="15" fill="rgb(233,42,35)" fg:x="683" fg:w="38"/><text x="65.7970%" y="271.50">parq..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (23 samples, 2.21%)</title><rect x="66.9866%" y="245" width="2.2073%" height="15" fill="rgb(231,13,6)" fg:x="698" fg:w="23"/><text x="67.2366%" y="255.50">p..</text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (5 samples, 0.48%)</title><rect x="69.1939%" y="261" width="0.4798%" height="15" fill="rgb(207,181,40)" fg:x="721" fg:w="5"/><text x="69.4439%" y="271.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.38%)</title><rect x="69.2898%" y="245" width="0.3839%" height="15" fill="rgb(254,173,49)" fg:x="722" fg:w="4"/><text x="69.5398%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.29%)</title><rect x="69.3858%" y="229" width="0.2879%" height="15" fill="rgb(221,1,38)" fg:x="723" fg:w="3"/><text x="69.6358%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.29%)</title><rect x="69.7697%" y="229" width="0.2879%" height="15" fill="rgb(206,124,46)" fg:x="727" fg:w="3"/><text x="70.0197%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.29%)</title><rect x="69.7697%" y="213" width="0.2879%" height="15" fill="rgb(249,21,11)" fg:x="727" fg:w="3"/><text x="70.0197%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (11 samples, 1.06%)</title><rect x="69.6737%" y="261" width="1.0557%" height="15" fill="rgb(222,201,40)" fg:x="726" fg:w="11"/><text x="69.9237%" y="271.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (11 samples, 1.06%)</title><rect x="69.6737%" y="245" width="1.0557%" height="15" fill="rgb(235,61,29)" fg:x="726" fg:w="11"/><text x="69.9237%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (7 samples, 0.67%)</title><rect x="70.0576%" y="229" width="0.6718%" height="15" fill="rgb(219,207,3)" fg:x="730" fg:w="7"/><text x="70.3076%" y="239.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.10%)</title><rect x="70.7294%" y="245" width="0.0960%" height="15" fill="rgb(222,56,46)" fg:x="737" fg:w="1"/><text x="70.9794%" y="255.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.10%)</title><rect x="70.7294%" y="229" width="0.0960%" height="15" fill="rgb(239,76,54)" fg:x="737" fg:w="1"/><text x="70.9794%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (60 samples, 5.76%)</title><rect x="71.7850%" y="213" width="5.7582%" height="15" fill="rgb(231,124,27)" fg:x="748" fg:w="60"/><text x="72.0350%" y="223.50">&lt;brotli..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (8 samples, 0.77%)</title><rect x="76.7754%" y="197" width="0.7678%" height="15" fill="rgb(249,195,6)" fg:x="800" fg:w="8"/><text x="77.0254%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (71 samples, 6.81%)</title><rect x="70.9213%" y="229" width="6.8138%" height="15" fill="rgb(237,174,47)" fg:x="739" fg:w="71"/><text x="71.1713%" y="239.50">brotli::e..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.19%)</title><rect x="77.5432%" y="213" width="0.1919%" height="15" fill="rgb(206,201,31)" fg:x="808" fg:w="2"/><text x="77.7932%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.19%)</title><rect x="77.8311%" y="181" width="0.1919%" height="15" fill="rgb(231,57,52)" fg:x="811" fg:w="2"/><text x="78.0811%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (2 samples, 0.19%)</title><rect x="77.8311%" y="165" width="0.1919%" height="15" fill="rgb(248,177,22)" fg:x="811" fg:w="2"/><text x="78.0811%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.10%)</title><rect x="78.0230%" y="181" width="0.0960%" height="15" fill="rgb(215,211,37)" fg:x="813" fg:w="1"/><text x="78.2730%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (22 samples, 2.11%)</title><rect x="77.8311%" y="213" width="2.1113%" height="15" fill="rgb(241,128,51)" fg:x="811" fg:w="22"/><text x="78.0811%" y="223.50">b..</text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (22 samples, 2.11%)</title><rect x="77.8311%" y="197" width="2.1113%" height="15" fill="rgb(227,165,31)" fg:x="811" fg:w="22"/><text x="78.0811%" y="207.50">b..</text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (19 samples, 1.82%)</title><rect x="78.1190%" y="181" width="1.8234%" height="15" fill="rgb(228,167,24)" fg:x="814" fg:w="19"/><text x="78.3690%" y="191.50">b..</text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (2 samples, 0.19%)</title><rect x="79.7505%" y="165" width="0.1919%" height="15" fill="rgb(228,143,12)" fg:x="831" fg:w="2"/><text x="80.0005%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (6 samples, 0.58%)</title><rect x="79.9424%" y="213" width="0.5758%" height="15" fill="rgb(249,149,8)" fg:x="833" fg:w="6"/><text x="80.1924%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (32 samples, 3.07%)</title><rect x="77.7351%" y="229" width="3.0710%" height="15" fill="rgb(243,35,44)" fg:x="810" fg:w="32"/><text x="77.9851%" y="239.50">bro..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (3 samples, 0.29%)</title><rect x="80.5182%" y="213" width="0.2879%" height="15" fill="rgb(246,89,9)" fg:x="839" fg:w="3"/><text x="80.7682%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (8 samples, 0.77%)</title><rect x="80.8061%" y="229" width="0.7678%" height="15" fill="rgb(233,213,13)" fg:x="842" fg:w="8"/><text x="81.0561%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (7 samples, 0.67%)</title><rect x="81.5739%" y="229" width="0.6718%" height="15" fill="rgb(233,141,41)" fg:x="850" fg:w="7"/><text x="81.8239%" y="239.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.10%)</title><rect x="82.1497%" y="213" width="0.0960%" height="15" fill="rgb(239,167,4)" fg:x="856" fg:w="1"/><text x="82.3997%" y="223.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.10%)</title><rect x="82.1497%" y="197" width="0.0960%" height="15" fill="rgb(209,217,16)" fg:x="856" fg:w="1"/><text x="82.3997%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (123 samples, 11.80%)</title><rect x="70.7294%" y="261" width="11.8042%" height="15" fill="rgb(219,88,35)" fg:x="737" fg:w="123"/><text x="70.9794%" y="271.50">&lt;parquet::compress..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (122 samples, 11.71%)</title><rect x="70.8253%" y="245" width="11.7083%" height="15" fill="rgb(220,193,23)" fg:x="738" fg:w="122"/><text x="71.0753%" y="255.50">brotli::enc::writ..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (3 samples, 0.29%)</title><rect x="82.2457%" y="229" width="0.2879%" height="15" fill="rgb(230,90,52)" fg:x="857" fg:w="3"/><text x="82.4957%" y="239.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (3 samples, 0.29%)</title><rect x="82.2457%" y="213" width="0.2879%" height="15" fill="rgb(252,106,19)" fg:x="857" fg:w="3"/><text x="82.4957%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (249 samples, 23.90%)</title><rect x="58.7332%" y="309" width="23.8964%" height="15" fill="rgb(206,74,20)" fg:x="612" fg:w="249"/><text x="58.9832%" y="319.50">parquet::arrow::arrow_writer::ArrowCol..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (229 samples, 21.98%)</title><rect x="60.6526%" y="293" width="21.9770%" height="15" fill="rgb(230,138,44)" fg:x="632" fg:w="229"/><text x="60.9026%" y="303.50">parquet::column::writer::GenericCol..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (140 samples, 13.44%)</title><rect x="69.1939%" y="277" width="13.4357%" height="15" fill="rgb(235,182,43)" fg:x="721" fg:w="140"/><text x="69.4439%" y="287.50">parquet::column::wri..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.10%)</title><rect x="82.5336%" y="261" width="0.0960%" height="15" fill="rgb(242,16,51)" fg:x="860" fg:w="1"/><text x="82.7836%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (253 samples, 24.28%)</title><rect x="58.7332%" y="325" width="24.2802%" height="15" fill="rgb(248,9,4)" fg:x="612" fg:w="253"/><text x="58.9832%" y="335.50">parquet::arrow::arrow_writer::ArrowRowG..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (4 samples, 0.38%)</title><rect x="82.6296%" y="309" width="0.3839%" height="15" fill="rgb(210,31,22)" fg:x="861" fg:w="4"/><text x="82.8796%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (4 samples, 0.38%)</title><rect x="82.6296%" y="293" width="0.3839%" height="15" fill="rgb(239,54,39)" fg:x="861" fg:w="4"/><text x="82.8796%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (254 samples, 24.38%)</title><rect x="58.7332%" y="341" width="24.3762%" height="15" fill="rgb(230,99,41)" fg:x="612" fg:w="254"/><text x="58.9832%" y="351.50">parquet::arrow::arrow_writer::ArrowWrit..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriterFactory::create_row_group_writer (1 samples, 0.10%)</title><rect x="83.0134%" y="325" width="0.0960%" height="15" fill="rgb(253,106,12)" fg:x="865" fg:w="1"/><text x="83.2634%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::get_column_writers (1 samples, 0.10%)</title><rect x="83.0134%" y="309" width="0.0960%" height="15" fill="rgb(213,46,41)" fg:x="865" fg:w="1"/><text x="83.2634%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriterFactory::get_arrow_column_writer (1 samples, 0.10%)</title><rect x="83.0134%" y="293" width="0.0960%" height="15" fill="rgb(215,133,35)" fg:x="865" fg:w="1"/><text x="83.2634%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriterFactory::get_arrow_column_writer::{{closure}} (1 samples, 0.10%)</title><rect x="83.0134%" y="277" width="0.0960%" height="15" fill="rgb(213,28,5)" fg:x="865" fg:w="1"/><text x="83.2634%" y="287.50"></text></g><g><title>parquet::column::writer::get_column_writer (1 samples, 0.10%)</title><rect x="83.0134%" y="261" width="0.0960%" height="15" fill="rgb(215,77,49)" fg:x="865" fg:w="1"/><text x="83.2634%" y="271.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::try_new (1 samples, 0.10%)</title><rect x="83.0134%" y="245" width="0.0960%" height="15" fill="rgb(248,100,22)" fg:x="865" fg:w="1"/><text x="83.2634%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="83.0134%" y="229" width="0.0960%" height="15" fill="rgb(208,67,9)" fg:x="865" fg:w="1"/><text x="83.2634%" y="239.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::new (1 samples, 0.10%)</title><rect x="83.0134%" y="213" width="0.0960%" height="15" fill="rgb(219,133,21)" fg:x="865" fg:w="1"/><text x="83.2634%" y="223.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="83.0134%" y="197" width="0.0960%" height="15" fill="rgb(246,46,29)" fg:x="865" fg:w="1"/><text x="83.2634%" y="207.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="83.1094%" y="341" width="0.0960%" height="15" fill="rgb(246,185,52)" fg:x="866" fg:w="1"/><text x="83.3594%" y="351.50"></text></g><g><title>open64 (1 samples, 0.10%)</title><rect x="83.1094%" y="325" width="0.0960%" height="15" fill="rgb(252,136,11)" fg:x="866" fg:w="1"/><text x="83.3594%" y="335.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (838 samples, 80.42%)</title><rect x="2.8791%" y="373" width="80.4223%" height="15" fill="rgb(219,138,53)" fg:x="30" fg:w="838"/><text x="3.1291%" y="383.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (817 samples, 78.41%)</title><rect x="4.8944%" y="357" width="78.4069%" height="15" fill="rgb(211,51,23)" fg:x="51" fg:w="817"/><text x="5.1444%" y="367.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.10%)</title><rect x="83.2054%" y="341" width="0.0960%" height="15" fill="rgb(247,221,28)" fg:x="867" fg:w="1"/><text x="83.4554%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.10%)</title><rect x="83.2054%" y="325" width="0.0960%" height="15" fill="rgb(251,222,45)" fg:x="867" fg:w="1"/><text x="83.4554%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.10%)</title><rect x="83.2054%" y="309" width="0.0960%" height="15" fill="rgb(217,162,53)" fg:x="867" fg:w="1"/><text x="83.4554%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="83.2054%" y="293" width="0.0960%" height="15" fill="rgb(229,93,14)" fg:x="867" fg:w="1"/><text x="83.4554%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="83.2054%" y="277" width="0.0960%" height="15" fill="rgb(209,67,49)" fg:x="867" fg:w="1"/><text x="83.4554%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="83.2054%" y="261" width="0.0960%" height="15" fill="rgb(213,87,29)" fg:x="867" fg:w="1"/><text x="83.4554%" y="271.50"></text></g><g><title>write (1 samples, 0.10%)</title><rect x="83.2054%" y="245" width="0.0960%" height="15" fill="rgb(205,151,52)" fg:x="867" fg:w="1"/><text x="83.4554%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (8 samples, 0.77%)</title><rect x="83.7812%" y="357" width="0.7678%" height="15" fill="rgb(253,215,39)" fg:x="873" fg:w="8"/><text x="84.0312%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (9 samples, 0.86%)</title><rect x="84.5489%" y="357" width="0.8637%" height="15" fill="rgb(221,220,41)" fg:x="881" fg:w="9"/><text x="84.7989%" y="367.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.10%)</title><rect x="85.5086%" y="293" width="0.0960%" height="15" fill="rgb(218,133,21)" fg:x="891" fg:w="1"/><text x="85.7586%" y="303.50"></text></g><g><title>crc32fast::Hasher::update (7 samples, 0.67%)</title><rect x="85.4127%" y="325" width="0.6718%" height="15" fill="rgb(221,193,43)" fg:x="890" fg:w="7"/><text x="85.6627%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (7 samples, 0.67%)</title><rect x="85.4127%" y="309" width="0.6718%" height="15" fill="rgb(240,128,52)" fg:x="890" fg:w="7"/><text x="85.6627%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (5 samples, 0.48%)</title><rect x="85.6046%" y="293" width="0.4798%" height="15" fill="rgb(253,114,12)" fg:x="892" fg:w="5"/><text x="85.8546%" y="303.50"></text></g><g><title>zlib_rs::adler32::avx2::adler32_avx2_help (1 samples, 0.10%)</title><rect x="86.2764%" y="261" width="0.0960%" height="15" fill="rgb(215,223,47)" fg:x="899" fg:w="1"/><text x="86.5264%" y="271.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (79 samples, 7.58%)</title><rect x="86.3724%" y="261" width="7.5816%" height="15" fill="rgb(248,225,23)" fg:x="900" fg:w="79"/><text x="86.6224%" y="271.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.10%)</title><rect x="93.9539%" y="261" width="0.0960%" height="15" fill="rgb(250,108,0)" fg:x="979" fg:w="1"/><text x="94.2039%" y="271.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (86 samples, 8.25%)</title><rect x="86.0845%" y="309" width="8.2534%" height="15" fill="rgb(228,208,7)" fg:x="897" fg:w="86"/><text x="86.3345%" y="319.50">&lt;flate2::me..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (86 samples, 8.25%)</title><rect x="86.0845%" y="293" width="8.2534%" height="15" fill="rgb(244,45,10)" fg:x="897" fg:w="86"/><text x="86.3345%" y="303.50">&lt;flate2::ff..</text></g><g><title>zlib_rs::inflate::inflate (86 samples, 8.25%)</title><rect x="86.0845%" y="277" width="8.2534%" height="15" fill="rgb(207,125,25)" fg:x="897" fg:w="86"/><text x="86.3345%" y="287.50">zlib_rs::in..</text></g><g><title>zlib_rs::inflate::window::Window::extend (3 samples, 0.29%)</title><rect x="94.0499%" y="261" width="0.2879%" height="15" fill="rgb(210,195,18)" fg:x="980" fg:w="3"/><text x="94.2999%" y="271.50"></text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (960 samples, 92.13%)</title><rect x="2.3033%" y="389" width="92.1305%" height="15" fill="rgb(249,80,12)" fg:x="24" fg:w="960"/><text x="2.5533%" y="399.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (116 samples, 11.13%)</title><rect x="83.3013%" y="373" width="11.1324%" height="15" fill="rgb(221,65,9)" fg:x="868" fg:w="116"/><text x="83.5513%" y="383.50">std::io::append_..</text></g><g><title>std::io::default_read_buf (94 samples, 9.02%)</title><rect x="85.4127%" y="357" width="9.0211%" height="15" fill="rgb(235,49,36)" fg:x="890" fg:w="94"/><text x="85.6627%" y="367.50">std::io::defa..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (94 samples, 9.02%)</title><rect x="85.4127%" y="341" width="9.0211%" height="15" fill="rgb(225,32,20)" fg:x="890" fg:w="94"/><text x="85.6627%" y="351.50">&lt;zip::crc32::..</text></g><g><title>flate2::zio::read (87 samples, 8.35%)</title><rect x="86.0845%" y="325" width="8.3493%" height="15" fill="rgb(215,141,46)" fg:x="897" fg:w="87"/><text x="86.3345%" y="335.50">flate2::zio:..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.10%)</title><rect x="94.3378%" y="309" width="0.0960%" height="15" fill="rgb(250,160,47)" fg:x="983" fg:w="1"/><text x="94.5878%" y="319.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (984 samples, 94.43%)</title><rect x="0.0960%" y="405" width="94.4338%" height="15" fill="rgb(216,222,40)" fg:x="1" fg:w="984"/><text x="0.3460%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.10%)</title><rect x="94.4338%" y="389" width="0.0960%" height="15" fill="rgb(234,217,39)" fg:x="984" fg:w="1"/><text x="94.6838%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.10%)</title><rect x="94.4338%" y="373" width="0.0960%" height="15" fill="rgb(207,178,40)" fg:x="984" fg:w="1"/><text x="94.6838%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.10%)</title><rect x="94.4338%" y="357" width="0.0960%" height="15" fill="rgb(221,136,13)" fg:x="984" fg:w="1"/><text x="94.6838%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="94.4338%" y="341" width="0.0960%" height="15" fill="rgb(249,199,10)" fg:x="984" fg:w="1"/><text x="94.6838%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="94.4338%" y="325" width="0.0960%" height="15" fill="rgb(249,222,13)" fg:x="984" fg:w="1"/><text x="94.6838%" y="335.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="94.4338%" y="309" width="0.0960%" height="15" fill="rgb(244,185,38)" fg:x="984" fg:w="1"/><text x="94.6838%" y="319.50"></text></g><g><title>write (1 samples, 0.10%)</title><rect x="94.4338%" y="293" width="0.0960%" height="15" fill="rgb(236,202,9)" fg:x="984" fg:w="1"/><text x="94.6838%" y="303.50"></text></g><g><title>bench_zip_to_pa (987 samples, 94.72%)</title><rect x="0.0000%" y="565" width="94.7217%" height="15" fill="rgb(250,229,37)" fg:x="0" fg:w="987"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (987 samples, 94.72%)</title><rect x="0.0000%" y="549" width="94.7217%" height="15" fill="rgb(206,174,23)" fg:x="0" fg:w="987"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (987 samples, 94.72%)</title><rect x="0.0000%" y="533" width="94.7217%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="987"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (987 samples, 94.72%)</title><rect x="0.0000%" y="517" width="94.7217%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="987"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (987 samples, 94.72%)</title><rect x="0.0000%" y="501" width="94.7217%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="987"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (987 samples, 94.72%)</title><rect x="0.0000%" y="485" width="94.7217%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="987"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (987 samples, 94.72%)</title><rect x="0.0000%" y="469" width="94.7217%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="987"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (987 samples, 94.72%)</title><rect x="0.0000%" y="453" width="94.7217%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="987"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (987 samples, 94.72%)</title><rect x="0.0000%" y="437" width="94.7217%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="987"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (987 samples, 94.72%)</title><rect x="0.0000%" y="421" width="94.7217%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="987"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.19%)</title><rect x="94.5298%" y="405" width="0.1919%" height="15" fill="rgb(234,177,6)" fg:x="985" fg:w="2"/><text x="94.7798%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.19%)</title><rect x="94.5298%" y="389" width="0.1919%" height="15" fill="rgb(217,24,9)" fg:x="985" fg:w="2"/><text x="94.7798%" y="399.50"></text></g><g><title>syscall (1 samples, 0.10%)</title><rect x="94.6257%" y="373" width="0.0960%" height="15" fill="rgb(220,13,46)" fg:x="986" fg:w="1"/><text x="94.8757%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.19%)</title><rect x="94.9136%" y="373" width="0.1919%" height="15" fill="rgb(239,221,27)" fg:x="989" fg:w="2"/><text x="95.1636%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.10%)</title><rect x="95.2015%" y="341" width="0.0960%" height="15" fill="rgb(222,198,25)" fg:x="992" fg:w="1"/><text x="95.4515%" y="351.50"></text></g><g><title>syscall (1 samples, 0.10%)</title><rect x="95.2015%" y="325" width="0.0960%" height="15" fill="rgb(211,99,13)" fg:x="992" fg:w="1"/><text x="95.4515%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (5 samples, 0.48%)</title><rect x="95.3935%" y="309" width="0.4798%" height="15" fill="rgb(232,111,31)" fg:x="994" fg:w="5"/><text x="95.6435%" y="319.50"></text></g><g><title>epoll_wait (5 samples, 0.48%)</title><rect x="95.3935%" y="293" width="0.4798%" height="15" fill="rgb(245,82,37)" fg:x="994" fg:w="5"/><text x="95.6435%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (9 samples, 0.86%)</title><rect x="95.1056%" y="373" width="0.8637%" height="15" fill="rgb(227,149,46)" fg:x="991" fg:w="9"/><text x="95.3556%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (9 samples, 0.86%)</title><rect x="95.1056%" y="357" width="0.8637%" height="15" fill="rgb(218,36,50)" fg:x="991" fg:w="9"/><text x="95.3556%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (7 samples, 0.67%)</title><rect x="95.2975%" y="341" width="0.6718%" height="15" fill="rgb(226,80,48)" fg:x="993" fg:w="7"/><text x="95.5475%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (7 samples, 0.67%)</title><rect x="95.2975%" y="325" width="0.6718%" height="15" fill="rgb(238,224,15)" fg:x="993" fg:w="7"/><text x="95.5475%" y="335.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.10%)</title><rect x="95.8733%" y="309" width="0.0960%" height="15" fill="rgb(241,136,10)" fg:x="999" fg:w="1"/><text x="96.1233%" y="319.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="95.8733%" y="293" width="0.0960%" height="15" fill="rgb(208,32,45)" fg:x="999" fg:w="1"/><text x="96.1233%" y="303.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.10%)</title><rect x="95.8733%" y="277" width="0.0960%" height="15" fill="rgb(207,135,9)" fg:x="999" fg:w="1"/><text x="96.1233%" y="287.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.38%)</title><rect x="95.9693%" y="357" width="0.3839%" height="15" fill="rgb(206,86,44)" fg:x="1000" fg:w="4"/><text x="96.2193%" y="367.50"></text></g><g><title>syscall (4 samples, 0.38%)</title><rect x="95.9693%" y="341" width="0.3839%" height="15" fill="rgb(245,177,15)" fg:x="1000" fg:w="4"/><text x="96.2193%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (7 samples, 0.67%)</title><rect x="96.3532%" y="357" width="0.6718%" height="15" fill="rgb(206,64,50)" fg:x="1004" fg:w="7"/><text x="96.6032%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (7 samples, 0.67%)</title><rect x="96.3532%" y="341" width="0.6718%" height="15" fill="rgb(234,36,40)" fg:x="1004" fg:w="7"/><text x="96.6032%" y="351.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (7 samples, 0.67%)</title><rect x="96.3532%" y="325" width="0.6718%" height="15" fill="rgb(213,64,8)" fg:x="1004" fg:w="7"/><text x="96.6032%" y="335.50"></text></g><g><title>write (6 samples, 0.58%)</title><rect x="96.4491%" y="309" width="0.5758%" height="15" fill="rgb(210,75,36)" fg:x="1005" fg:w="6"/><text x="96.6991%" y="319.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (1 samples, 0.10%)</title><rect x="97.1209%" y="277" width="0.0960%" height="15" fill="rgb(229,88,21)" fg:x="1012" fg:w="1"/><text x="97.3709%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.10%)</title><rect x="97.1209%" y="261" width="0.0960%" height="15" fill="rgb(252,204,47)" fg:x="1012" fg:w="1"/><text x="97.3709%" y="271.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (1 samples, 0.10%)</title><rect x="97.2169%" y="245" width="0.0960%" height="15" fill="rgb(208,77,27)" fg:x="1013" fg:w="1"/><text x="97.4669%" y="255.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="97.3129%" y="245" width="0.0960%" height="15" fill="rgb(221,76,26)" fg:x="1014" fg:w="1"/><text x="97.5629%" y="255.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (14 samples, 1.34%)</title><rect x="97.2169%" y="277" width="1.3436%" height="15" fill="rgb(225,139,18)" fg:x="1013" fg:w="14"/><text x="97.4669%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (14 samples, 1.34%)</title><rect x="97.2169%" y="261" width="1.3436%" height="15" fill="rgb(230,137,11)" fg:x="1013" fg:w="14"/><text x="97.4669%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (12 samples, 1.15%)</title><rect x="97.4088%" y="245" width="1.1516%" height="15" fill="rgb(212,28,1)" fg:x="1015" fg:w="12"/><text x="97.6588%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (12 samples, 1.15%)</title><rect x="97.4088%" y="229" width="1.1516%" height="15" fill="rgb(248,164,17)" fg:x="1015" fg:w="12"/><text x="97.6588%" y="239.50"></text></g><g><title>syscall (12 samples, 1.15%)</title><rect x="97.4088%" y="213" width="1.1516%" height="15" fill="rgb(222,171,42)" fg:x="1015" fg:w="12"/><text x="97.6588%" y="223.50"></text></g><g><title>&lt;rustls::client::tls12::ExpectTraffic as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.10%)</title><rect x="98.8484%" y="149" width="0.0960%" height="15" fill="rgb(243,84,45)" fg:x="1030" fg:w="1"/><text x="99.0984%" y="159.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (2 samples, 0.19%)</title><rect x="98.9443%" y="133" width="0.1919%" height="15" fill="rgb(252,49,23)" fg:x="1031" fg:w="2"/><text x="99.1943%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.10%)</title><rect x="99.0403%" y="117" width="0.0960%" height="15" fill="rgb(215,19,7)" fg:x="1032" fg:w="1"/><text x="99.2903%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (7 samples, 0.67%)</title><rect x="98.6564%" y="165" width="0.6718%" height="15" fill="rgb(238,81,41)" fg:x="1028" fg:w="7"/><text x="98.9064%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (4 samples, 0.38%)</title><rect x="98.9443%" y="149" width="0.3839%" height="15" fill="rgb(210,199,37)" fg:x="1031" fg:w="4"/><text x="99.1943%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (2 samples, 0.19%)</title><rect x="99.1363%" y="133" width="0.1919%" height="15" fill="rgb(244,192,49)" fg:x="1033" fg:w="2"/><text x="99.3863%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (2 samples, 0.19%)</title><rect x="99.1363%" y="117" width="0.1919%" height="15" fill="rgb(226,211,11)" fg:x="1033" fg:w="2"/><text x="99.3863%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (2 samples, 0.19%)</title><rect x="99.1363%" y="101" width="0.1919%" height="15" fill="rgb(236,162,54)" fg:x="1033" fg:w="2"/><text x="99.3863%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (2 samples, 0.19%)</title><rect x="99.1363%" y="85" width="0.1919%" height="15" fill="rgb(220,229,9)" fg:x="1033" fg:w="2"/><text x="99.3863%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (2 samples, 0.19%)</title><rect x="99.1363%" y="69" width="0.1919%" height="15" fill="rgb(250,87,22)" fg:x="1033" fg:w="2"/><text x="99.3863%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.10%)</title><rect x="99.2322%" y="53" width="0.0960%" height="15" fill="rgb(239,43,17)" fg:x="1034" fg:w="1"/><text x="99.4822%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.10%)</title><rect x="99.2322%" y="37" width="0.0960%" height="15" fill="rgb(231,177,25)" fg:x="1034" fg:w="1"/><text x="99.4822%" y="47.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (4 samples, 0.38%)</title><rect x="99.3282%" y="165" width="0.3839%" height="15" fill="rgb(219,179,1)" fg:x="1035" fg:w="4"/><text x="99.5782%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (4 samples, 0.38%)</title><rect x="99.3282%" y="149" width="0.3839%" height="15" fill="rgb(238,219,53)" fg:x="1035" fg:w="4"/><text x="99.5782%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.38%)</title><rect x="99.3282%" y="133" width="0.3839%" height="15" fill="rgb(232,167,36)" fg:x="1035" fg:w="4"/><text x="99.5782%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.38%)</title><rect x="99.3282%" y="117" width="0.3839%" height="15" fill="rgb(244,19,51)" fg:x="1035" fg:w="4"/><text x="99.5782%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (4 samples, 0.38%)</title><rect x="99.3282%" y="101" width="0.3839%" height="15" fill="rgb(224,6,22)" fg:x="1035" fg:w="4"/><text x="99.5782%" y="111.50"></text></g><g><title>recv (4 samples, 0.38%)</title><rect x="99.3282%" y="85" width="0.3839%" height="15" fill="rgb(224,145,5)" fg:x="1035" fg:w="4"/><text x="99.5782%" y="95.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (13 samples, 1.25%)</title><rect x="98.5605%" y="213" width="1.2476%" height="15" fill="rgb(234,130,49)" fg:x="1027" fg:w="13"/><text x="98.8105%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (13 samples, 1.25%)</title><rect x="98.5605%" y="197" width="1.2476%" height="15" fill="rgb(254,6,2)" fg:x="1027" fg:w="13"/><text x="98.8105%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (12 samples, 1.15%)</title><rect x="98.6564%" y="181" width="1.1516%" height="15" fill="rgb(208,96,46)" fg:x="1028" fg:w="12"/><text x="98.9064%" y="191.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.10%)</title><rect x="99.7121%" y="165" width="0.0960%" height="15" fill="rgb(239,3,39)" fg:x="1039" fg:w="1"/><text x="99.9621%" y="175.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (30 samples, 2.88%)</title><rect x="97.0250%" y="325" width="2.8791%" height="15" fill="rgb(233,210,1)" fg:x="1011" fg:w="30"/><text x="97.2750%" y="335.50">&lt;f..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (29 samples, 2.78%)</title><rect x="97.1209%" y="309" width="2.7831%" height="15" fill="rgb(244,137,37)" fg:x="1012" fg:w="29"/><text x="97.3709%" y="319.50">&lt;h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (29 samples, 2.78%)</title><rect x="97.1209%" y="293" width="2.7831%" height="15" fill="rgb(240,136,2)" fg:x="1012" fg:w="29"/><text x="97.3709%" y="303.50">hy..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (14 samples, 1.34%)</title><rect x="98.5605%" y="277" width="1.3436%" height="15" fill="rgb(239,18,37)" fg:x="1027" fg:w="14"/><text x="98.8105%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (14 samples, 1.34%)</title><rect x="98.5605%" y="261" width="1.3436%" height="15" fill="rgb(218,185,22)" fg:x="1027" fg:w="14"/><text x="98.8105%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (14 samples, 1.34%)</title><rect x="98.5605%" y="245" width="1.3436%" height="15" fill="rgb(225,218,4)" fg:x="1027" fg:w="14"/><text x="98.8105%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (14 samples, 1.34%)</title><rect x="98.5605%" y="229" width="1.3436%" height="15" fill="rgb(230,182,32)" fg:x="1027" fg:w="14"/><text x="98.8105%" y="239.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (1 samples, 0.10%)</title><rect x="99.8081%" y="213" width="0.0960%" height="15" fill="rgb(242,56,43)" fg:x="1040" fg:w="1"/><text x="100.0581%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="99.8081%" y="197" width="0.0960%" height="15" fill="rgb(233,99,24)" fg:x="1040" fg:w="1"/><text x="100.0581%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="99.8081%" y="181" width="0.0960%" height="15" fill="rgb(234,209,42)" fg:x="1040" fg:w="1"/><text x="100.0581%" y="191.50"></text></g><g><title>__libc_realloc (1 samples, 0.10%)</title><rect x="99.8081%" y="165" width="0.0960%" height="15" fill="rgb(227,7,12)" fg:x="1040" fg:w="1"/><text x="100.0581%" y="175.50"></text></g><g><title>all (1,042 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="1042"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (55 samples, 5.28%)</title><rect x="94.7217%" y="565" width="5.2783%" height="15" fill="rgb(238,205,33)" fg:x="987" fg:w="55"/><text x="94.9717%" y="575.50">tokio-..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (55 samples, 5.28%)</title><rect x="94.7217%" y="549" width="5.2783%" height="15" fill="rgb(231,56,7)" fg:x="987" fg:w="55"/><text x="94.9717%" y="559.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (55 samples, 5.28%)</title><rect x="94.7217%" y="533" width="5.2783%" height="15" fill="rgb(244,186,29)" fg:x="987" fg:w="55"/><text x="94.9717%" y="543.50">core::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (55 samples, 5.28%)</title><rect x="94.7217%" y="517" width="5.2783%" height="15" fill="rgb(234,111,31)" fg:x="987" fg:w="55"/><text x="94.9717%" y="527.50">std::s..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (55 samples, 5.28%)</title><rect x="94.7217%" y="501" width="5.2783%" height="15" fill="rgb(241,149,10)" fg:x="987" fg:w="55"/><text x="94.9717%" y="511.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (55 samples, 5.28%)</title><rect x="94.7217%" y="485" width="5.2783%" height="15" fill="rgb(249,206,44)" fg:x="987" fg:w="55"/><text x="94.9717%" y="495.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (55 samples, 5.28%)</title><rect x="94.7217%" y="469" width="5.2783%" height="15" fill="rgb(251,153,30)" fg:x="987" fg:w="55"/><text x="94.9717%" y="479.50">tokio:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (55 samples, 5.28%)</title><rect x="94.7217%" y="453" width="5.2783%" height="15" fill="rgb(239,152,38)" fg:x="987" fg:w="55"/><text x="94.9717%" y="463.50">&lt;tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (55 samples, 5.28%)</title><rect x="94.7217%" y="437" width="5.2783%" height="15" fill="rgb(249,139,47)" fg:x="987" fg:w="55"/><text x="94.9717%" y="447.50">tokio:..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (55 samples, 5.28%)</title><rect x="94.7217%" y="421" width="5.2783%" height="15" fill="rgb(244,64,35)" fg:x="987" fg:w="55"/><text x="94.9717%" y="431.50">tokio:..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (55 samples, 5.28%)</title><rect x="94.7217%" y="405" width="5.2783%" height="15" fill="rgb(216,46,15)" fg:x="987" fg:w="55"/><text x="94.9717%" y="415.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (55 samples, 5.28%)</title><rect x="94.7217%" y="389" width="5.2783%" height="15" fill="rgb(250,74,19)" fg:x="987" fg:w="55"/><text x="94.9717%" y="399.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (42 samples, 4.03%)</title><rect x="95.9693%" y="373" width="4.0307%" height="15" fill="rgb(249,42,33)" fg:x="1000" fg:w="42"/><text x="96.2193%" y="383.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (31 samples, 2.98%)</title><rect x="97.0250%" y="357" width="2.9750%" height="15" fill="rgb(242,149,17)" fg:x="1011" fg:w="31"/><text x="97.2750%" y="367.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (31 samples, 2.98%)</title><rect x="97.0250%" y="341" width="2.9750%" height="15" fill="rgb(244,29,21)" fg:x="1011" fg:w="31"/><text x="97.2750%" y="351.50">tok..</text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="99.9040%" y="325" width="0.0960%" height="15" fill="rgb(220,130,37)" fg:x="1041" fg:w="1"/><text x="100.1540%" y="335.50"></text></g></svg></svg>