<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="1144"><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.79%)</title><rect x="0.5245%" y="213" width="0.7867%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="9"/><text x="0.7745%" y="223.50"></text></g><g><title>syscall (8 samples, 0.70%)</title><rect x="0.6119%" y="197" width="0.6993%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="8"/><text x="0.8619%" y="207.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.31%)</title><rect x="0.4371%" y="373" width="1.3112%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="15"/><text x="0.6871%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (15 samples, 1.31%)</title><rect x="0.4371%" y="357" width="1.3112%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="15"/><text x="0.6871%" y="367.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (15 samples, 1.31%)</title><rect x="0.4371%" y="341" width="1.3112%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="15"/><text x="0.6871%" y="351.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (15 samples, 1.31%)</title><rect x="0.4371%" y="325" width="1.3112%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="15"/><text x="0.6871%" y="335.50"></text></g><g><title>hyper::body::body::Body::poll_inner (15 samples, 1.31%)</title><rect x="0.4371%" y="309" width="1.3112%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="15"/><text x="0.6871%" y="319.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.31%)</title><rect x="0.4371%" y="293" width="1.3112%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="15"/><text x="0.6871%" y="303.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (15 samples, 1.31%)</title><rect x="0.4371%" y="277" width="1.3112%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="15"/><text x="0.6871%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (14 samples, 1.22%)</title><rect x="0.5245%" y="261" width="1.2238%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="14"/><text x="0.7745%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (14 samples, 1.22%)</title><rect x="0.5245%" y="245" width="1.2238%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="14"/><text x="0.7745%" y="255.50"></text></g><g><title>tokio::runtime::context::with_scheduler (14 samples, 1.22%)</title><rect x="0.5245%" y="229" width="1.2238%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="14"/><text x="0.7745%" y="239.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (5 samples, 0.44%)</title><rect x="1.3112%" y="213" width="0.4371%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="5"/><text x="1.5612%" y="223.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (5 samples, 0.44%)</title><rect x="1.3112%" y="197" width="0.4371%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="5"/><text x="1.5612%" y="207.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (5 samples, 0.44%)</title><rect x="1.3112%" y="181" width="0.4371%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="5"/><text x="1.5612%" y="191.50"></text></g><g><title>write (5 samples, 0.44%)</title><rect x="1.3112%" y="165" width="0.4371%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="5"/><text x="1.5612%" y="175.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (1 samples, 0.09%)</title><rect x="1.7483%" y="373" width="0.0874%" height="15" fill="rgb(225,20,46)" fg:x="20" fg:w="1"/><text x="1.9983%" y="383.50"></text></g><g><title>bytes::bytes_mut::shared_v_is_unique (2 samples, 0.17%)</title><rect x="1.8357%" y="373" width="0.1748%" height="15" fill="rgb(210,31,41)" fg:x="21" fg:w="2"/><text x="2.0857%" y="383.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="2.0979%" y="357" width="0.0874%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="1"/><text x="2.3479%" y="367.50"></text></g><g><title>__munmap (1 samples, 0.09%)</title><rect x="2.0979%" y="341" width="0.0874%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="1"/><text x="2.3479%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (2 samples, 0.17%)</title><rect x="3.0594%" y="341" width="0.1748%" height="15" fill="rgb(249,33,26)" fg:x="35" fg:w="2"/><text x="3.3094%" y="351.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="3.4965%" y="309" width="0.0874%" height="15" fill="rgb(235,183,28)" fg:x="40" fg:w="1"/><text x="3.7465%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (17 samples, 1.49%)</title><rect x="3.5839%" y="309" width="1.4860%" height="15" fill="rgb(221,5,38)" fg:x="41" fg:w="17"/><text x="3.8339%" y="319.50"></text></g><g><title>malloc (14 samples, 1.22%)</title><rect x="3.8462%" y="293" width="1.2238%" height="15" fill="rgb(247,18,42)" fg:x="44" fg:w="14"/><text x="4.0962%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.09%)</title><rect x="5.1573%" y="229" width="0.0874%" height="15" fill="rgb(241,131,45)" fg:x="59" fg:w="1"/><text x="5.4073%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.09%)</title><rect x="5.1573%" y="213" width="0.0874%" height="15" fill="rgb(249,31,29)" fg:x="59" fg:w="1"/><text x="5.4073%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="5.1573%" y="197" width="0.0874%" height="15" fill="rgb(225,111,53)" fg:x="59" fg:w="1"/><text x="5.4073%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="5.1573%" y="181" width="0.0874%" height="15" fill="rgb(238,160,17)" fg:x="59" fg:w="1"/><text x="5.4073%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="5.1573%" y="165" width="0.0874%" height="15" fill="rgb(214,148,48)" fg:x="59" fg:w="1"/><text x="5.4073%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="5.1573%" y="149" width="0.0874%" height="15" fill="rgb(232,36,49)" fg:x="59" fg:w="1"/><text x="5.4073%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="5.2448%" y="197" width="0.0874%" height="15" fill="rgb(209,103,24)" fg:x="60" fg:w="1"/><text x="5.4948%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="5.2448%" y="181" width="0.0874%" height="15" fill="rgb(229,88,8)" fg:x="60" fg:w="1"/><text x="5.4948%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.2448%" y="165" width="0.0874%" height="15" fill="rgb(213,181,19)" fg:x="60" fg:w="1"/><text x="5.4948%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.2448%" y="149" width="0.0874%" height="15" fill="rgb(254,191,54)" fg:x="60" fg:w="1"/><text x="5.4948%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (3 samples, 0.26%)</title><rect x="5.1573%" y="277" width="0.2622%" height="15" fill="rgb(241,83,37)" fg:x="59" fg:w="3"/><text x="5.4073%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (3 samples, 0.26%)</title><rect x="5.1573%" y="261" width="0.2622%" height="15" fill="rgb(233,36,39)" fg:x="59" fg:w="3"/><text x="5.4073%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (3 samples, 0.26%)</title><rect x="5.1573%" y="245" width="0.2622%" height="15" fill="rgb(226,3,54)" fg:x="59" fg:w="3"/><text x="5.4073%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.17%)</title><rect x="5.2448%" y="229" width="0.1748%" height="15" fill="rgb(245,192,40)" fg:x="60" fg:w="2"/><text x="5.4948%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.17%)</title><rect x="5.2448%" y="213" width="0.1748%" height="15" fill="rgb(238,167,29)" fg:x="60" fg:w="2"/><text x="5.4948%" y="223.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="5.3322%" y="197" width="0.0874%" height="15" fill="rgb(232,182,51)" fg:x="61" fg:w="1"/><text x="5.5822%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (5 samples, 0.44%)</title><rect x="5.0699%" y="293" width="0.4371%" height="15" fill="rgb(231,60,39)" fg:x="58" fg:w="5"/><text x="5.3199%" y="303.50"></text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="5.4196%" y="277" width="0.0874%" height="15" fill="rgb(208,69,12)" fg:x="62" fg:w="1"/><text x="5.6696%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="5.4196%" y="261" width="0.0874%" height="15" fill="rgb(235,93,37)" fg:x="62" fg:w="1"/><text x="5.6696%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="5.4196%" y="245" width="0.0874%" height="15" fill="rgb(213,116,39)" fg:x="62" fg:w="1"/><text x="5.6696%" y="255.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.09%)</title><rect x="5.4196%" y="229" width="0.0874%" height="15" fill="rgb(222,207,29)" fg:x="62" fg:w="1"/><text x="5.6696%" y="239.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.5070%" y="149" width="0.0874%" height="15" fill="rgb(206,96,30)" fg:x="63" fg:w="1"/><text x="5.7570%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.5070%" y="133" width="0.0874%" height="15" fill="rgb(218,138,4)" fg:x="63" fg:w="1"/><text x="5.7570%" y="143.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.26%)</title><rect x="5.5070%" y="181" width="0.2622%" height="15" fill="rgb(250,191,14)" fg:x="63" fg:w="3"/><text x="5.7570%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="5.5070%" y="165" width="0.2622%" height="15" fill="rgb(239,60,40)" fg:x="63" fg:w="3"/><text x="5.7570%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.17%)</title><rect x="5.5944%" y="149" width="0.1748%" height="15" fill="rgb(206,27,48)" fg:x="64" fg:w="2"/><text x="5.8444%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.17%)</title><rect x="5.5944%" y="133" width="0.1748%" height="15" fill="rgb(225,35,8)" fg:x="64" fg:w="2"/><text x="5.8444%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.6818%" y="117" width="0.0874%" height="15" fill="rgb(250,213,24)" fg:x="65" fg:w="1"/><text x="5.9318%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (7 samples, 0.61%)</title><rect x="5.8566%" y="133" width="0.6119%" height="15" fill="rgb(247,123,22)" fg:x="67" fg:w="7"/><text x="6.1066%" y="143.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="6.3811%" y="117" width="0.0874%" height="15" fill="rgb(231,138,38)" fg:x="73" fg:w="1"/><text x="6.6311%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (9 samples, 0.79%)</title><rect x="5.7692%" y="149" width="0.7867%" height="15" fill="rgb(231,145,46)" fg:x="66" fg:w="9"/><text x="6.0192%" y="159.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="6.4685%" y="133" width="0.0874%" height="15" fill="rgb(251,118,11)" fg:x="74" fg:w="1"/><text x="6.7185%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (14 samples, 1.22%)</title><rect x="5.5070%" y="277" width="1.2238%" height="15" fill="rgb(217,147,25)" fg:x="63" fg:w="14"/><text x="5.7570%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.22%)</title><rect x="5.5070%" y="261" width="1.2238%" height="15" fill="rgb(247,81,37)" fg:x="63" fg:w="14"/><text x="5.7570%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (14 samples, 1.22%)</title><rect x="5.5070%" y="245" width="1.2238%" height="15" fill="rgb(209,12,38)" fg:x="63" fg:w="14"/><text x="5.7570%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.22%)</title><rect x="5.5070%" y="229" width="1.2238%" height="15" fill="rgb(227,1,9)" fg:x="63" fg:w="14"/><text x="5.7570%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (14 samples, 1.22%)</title><rect x="5.5070%" y="213" width="1.2238%" height="15" fill="rgb(248,47,43)" fg:x="63" fg:w="14"/><text x="5.7570%" y="223.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (14 samples, 1.22%)</title><rect x="5.5070%" y="197" width="1.2238%" height="15" fill="rgb(221,10,30)" fg:x="63" fg:w="14"/><text x="5.7570%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (11 samples, 0.96%)</title><rect x="5.7692%" y="181" width="0.9615%" height="15" fill="rgb(210,229,1)" fg:x="66" fg:w="11"/><text x="6.0192%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (11 samples, 0.96%)</title><rect x="5.7692%" y="165" width="0.9615%" height="15" fill="rgb(222,148,37)" fg:x="66" fg:w="11"/><text x="6.0192%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.17%)</title><rect x="6.5559%" y="149" width="0.1748%" height="15" fill="rgb(234,67,33)" fg:x="75" fg:w="2"/><text x="6.8059%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.17%)</title><rect x="6.5559%" y="133" width="0.1748%" height="15" fill="rgb(247,98,35)" fg:x="75" fg:w="2"/><text x="6.8059%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="6.6434%" y="117" width="0.0874%" height="15" fill="rgb(247,138,52)" fg:x="76" fg:w="1"/><text x="6.8934%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (17 samples, 1.49%)</title><rect x="5.5070%" y="293" width="1.4860%" height="15" fill="rgb(213,79,30)" fg:x="63" fg:w="17"/><text x="5.7570%" y="303.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (3 samples, 0.26%)</title><rect x="6.7308%" y="277" width="0.2622%" height="15" fill="rgb(246,177,23)" fg:x="77" fg:w="3"/><text x="6.9808%" y="287.50"></text></g><g><title>std::io::copy::stack_buffer_copy (3 samples, 0.26%)</title><rect x="6.7308%" y="261" width="0.2622%" height="15" fill="rgb(230,62,27)" fg:x="77" fg:w="3"/><text x="6.9808%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (3 samples, 0.26%)</title><rect x="6.7308%" y="245" width="0.2622%" height="15" fill="rgb(216,154,8)" fg:x="77" fg:w="3"/><text x="6.9808%" y="255.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.26%)</title><rect x="6.7308%" y="229" width="0.2622%" height="15" fill="rgb(244,35,45)" fg:x="77" fg:w="3"/><text x="6.9808%" y="239.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (3 samples, 0.26%)</title><rect x="6.7308%" y="213" width="0.2622%" height="15" fill="rgb(251,115,12)" fg:x="77" fg:w="3"/><text x="6.9808%" y="223.50"></text></g><g><title>write (3 samples, 0.26%)</title><rect x="6.7308%" y="197" width="0.2622%" height="15" fill="rgb(240,54,50)" fg:x="77" fg:w="3"/><text x="6.9808%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (23 samples, 2.01%)</title><rect x="5.0699%" y="309" width="2.0105%" height="15" fill="rgb(233,84,52)" fg:x="58" fg:w="23"/><text x="5.3199%" y="319.50">n..</text></g><g><title>parquet::file::writer::SerializedFileWriter&lt;W&gt;::finish (1 samples, 0.09%)</title><rect x="6.9930%" y="293" width="0.0874%" height="15" fill="rgb(207,117,47)" fg:x="80" fg:w="1"/><text x="7.2430%" y="303.50"></text></g><g><title>&lt;parquet::format::OffsetIndex as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="6.9930%" y="277" width="0.0874%" height="15" fill="rgb(249,43,39)" fg:x="80" fg:w="1"/><text x="7.2430%" y="287.50"></text></g><g><title>thrift::protocol::TFieldIdentifier::new (1 samples, 0.09%)</title><rect x="6.9930%" y="261" width="0.0874%" height="15" fill="rgb(209,38,44)" fg:x="80" fg:w="1"/><text x="7.2430%" y="271.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="6.9930%" y="245" width="0.0874%" height="15" fill="rgb(236,212,23)" fg:x="80" fg:w="1"/><text x="7.2430%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6 samples, 0.52%)</title><rect x="8.1294%" y="293" width="0.5245%" height="15" fill="rgb(242,79,21)" fg:x="93" fg:w="6"/><text x="8.3794%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.52%)</title><rect x="8.1294%" y="277" width="0.5245%" height="15" fill="rgb(211,96,35)" fg:x="93" fg:w="6"/><text x="8.3794%" y="287.50"></text></g><g><title>__libc_realloc (6 samples, 0.52%)</title><rect x="8.1294%" y="261" width="0.5245%" height="15" fill="rgb(253,215,40)" fg:x="93" fg:w="6"/><text x="8.3794%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.44%)</title><rect x="10.4021%" y="245" width="0.4371%" height="15" fill="rgb(211,81,21)" fg:x="119" fg:w="5"/><text x="10.6521%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.44%)</title><rect x="10.4021%" y="229" width="0.4371%" height="15" fill="rgb(208,190,38)" fg:x="119" fg:w="5"/><text x="10.6521%" y="239.50"></text></g><g><title>__libc_realloc (5 samples, 0.44%)</title><rect x="10.4021%" y="213" width="0.4371%" height="15" fill="rgb(235,213,38)" fg:x="119" fg:w="5"/><text x="10.6521%" y="223.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (83 samples, 7.26%)</title><rect x="9.0035%" y="277" width="7.2552%" height="15" fill="rgb(237,122,38)" fg:x="103" fg:w="83"/><text x="9.2535%" y="287.50">arrow_csv:..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (83 samples, 7.26%)</title><rect x="9.0035%" y="261" width="7.2552%" height="15" fill="rgb(244,218,35)" fg:x="103" fg:w="83"/><text x="9.2535%" y="271.50">arrow_csv:..</text></g><g><title>csv_core::reader::Reader::read_record (62 samples, 5.42%)</title><rect x="10.8392%" y="245" width="5.4196%" height="15" fill="rgb(240,68,47)" fg:x="124" fg:w="62"/><text x="11.0892%" y="255.50">csv_cor..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (2 samples, 0.17%)</title><rect x="16.2587%" y="261" width="0.1748%" height="15" fill="rgb(210,16,53)" fg:x="186" fg:w="2"/><text x="16.5087%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="16.3462%" y="245" width="0.0874%" height="15" fill="rgb(235,124,12)" fg:x="187" fg:w="1"/><text x="16.5962%" y="255.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (151 samples, 13.20%)</title><rect x="8.6538%" y="293" width="13.1993%" height="15" fill="rgb(224,169,11)" fg:x="99" fg:w="151"/><text x="8.9038%" y="303.50">arrow_csv::reader::B..</text></g><g><title>arrow_csv::reader::Decoder::flush (64 samples, 5.59%)</title><rect x="16.2587%" y="277" width="5.5944%" height="15" fill="rgb(250,166,2)" fg:x="186" fg:w="64"/><text x="16.5087%" y="287.50">arrow_c..</text></g><g><title>core::iter::adapters::try_process (62 samples, 5.42%)</title><rect x="16.4336%" y="261" width="5.4196%" height="15" fill="rgb(242,216,29)" fg:x="188" fg:w="62"/><text x="16.6836%" y="271.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (62 samples, 5.42%)</title><rect x="16.4336%" y="245" width="5.4196%" height="15" fill="rgb(230,116,27)" fg:x="188" fg:w="62"/><text x="16.6836%" y="255.50">&lt;alloc:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (62 samples, 5.42%)</title><rect x="16.4336%" y="229" width="5.4196%" height="15" fill="rgb(228,99,48)" fg:x="188" fg:w="62"/><text x="16.6836%" y="239.50">&lt;core::..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (62 samples, 5.42%)</title><rect x="16.4336%" y="213" width="5.4196%" height="15" fill="rgb(253,11,6)" fg:x="188" fg:w="62"/><text x="16.6836%" y="223.50">&lt;arrow_..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (44 samples, 3.85%)</title><rect x="18.0070%" y="197" width="3.8462%" height="15" fill="rgb(247,143,39)" fg:x="206" fg:w="44"/><text x="18.2570%" y="207.50">arro..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.17%)</title><rect x="21.6783%" y="181" width="0.1748%" height="15" fill="rgb(236,97,10)" fg:x="248" fg:w="2"/><text x="21.9283%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.17%)</title><rect x="21.6783%" y="165" width="0.1748%" height="15" fill="rgb(233,208,19)" fg:x="248" fg:w="2"/><text x="21.9283%" y="175.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="21.7657%" y="149" width="0.0874%" height="15" fill="rgb(216,164,2)" fg:x="249" fg:w="1"/><text x="22.0157%" y="159.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build (1 samples, 0.09%)</title><rect x="21.8531%" y="293" width="0.0874%" height="15" fill="rgb(220,129,5)" fg:x="250" fg:w="1"/><text x="22.1031%" y="303.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build_decoder (1 samples, 0.09%)</title><rect x="21.8531%" y="277" width="0.0874%" height="15" fill="rgb(242,17,10)" fg:x="250" fg:w="1"/><text x="22.1031%" y="287.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (1 samples, 0.09%)</title><rect x="21.8531%" y="261" width="0.0874%" height="15" fill="rgb(242,107,0)" fg:x="250" fg:w="1"/><text x="22.1031%" y="271.50"></text></g><g><title>cfree (11 samples, 0.96%)</title><rect x="21.9406%" y="293" width="0.9615%" height="15" fill="rgb(251,28,31)" fg:x="251" fg:w="11"/><text x="22.1906%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (5 samples, 0.44%)</title><rect x="22.9021%" y="293" width="0.4371%" height="15" fill="rgb(233,223,10)" fg:x="262" fg:w="5"/><text x="23.1521%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.44%)</title><rect x="22.9021%" y="277" width="0.4371%" height="15" fill="rgb(215,21,27)" fg:x="262" fg:w="5"/><text x="23.1521%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (5 samples, 0.44%)</title><rect x="22.9021%" y="261" width="0.4371%" height="15" fill="rgb(232,23,21)" fg:x="262" fg:w="5"/><text x="23.1521%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.44%)</title><rect x="22.9021%" y="245" width="0.4371%" height="15" fill="rgb(244,5,23)" fg:x="262" fg:w="5"/><text x="23.1521%" y="255.50"></text></g><g><title>cfree (5 samples, 0.44%)</title><rect x="22.9021%" y="229" width="0.4371%" height="15" fill="rgb(226,81,46)" fg:x="262" fg:w="5"/><text x="23.1521%" y="239.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="25.3497%" y="277" width="0.0874%" height="15" fill="rgb(247,70,30)" fg:x="290" fg:w="1"/><text x="25.5997%" y="287.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="25.3497%" y="261" width="0.0874%" height="15" fill="rgb(212,68,19)" fg:x="290" fg:w="1"/><text x="25.5997%" y="271.50"></text></g><g><title>arrow_array::builder::primitive_builder::PrimitiveBuilder&lt;T&gt;::finish (1 samples, 0.09%)</title><rect x="25.4371%" y="277" width="0.0874%" height="15" fill="rgb(240,187,13)" fg:x="291" fg:w="1"/><text x="25.6871%" y="287.50"></text></g><g><title>&lt;arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (1 samples, 0.09%)</title><rect x="25.4371%" y="261" width="0.0874%" height="15" fill="rgb(223,113,26)" fg:x="291" fg:w="1"/><text x="25.6871%" y="271.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.09%)</title><rect x="25.5245%" y="277" width="0.0874%" height="15" fill="rgb(206,192,2)" fg:x="292" fg:w="1"/><text x="25.7745%" y="287.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.09%)</title><rect x="25.5245%" y="261" width="0.0874%" height="15" fill="rgb(241,108,4)" fg:x="292" fg:w="1"/><text x="25.7745%" y="271.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="25.5245%" y="245" width="0.0874%" height="15" fill="rgb(247,173,49)" fg:x="292" fg:w="1"/><text x="25.7745%" y="255.50"></text></g><g><title>cfree (13 samples, 1.14%)</title><rect x="25.6119%" y="277" width="1.1364%" height="15" fill="rgb(224,114,35)" fg:x="293" fg:w="13"/><text x="25.8619%" y="287.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (37 samples, 3.23%)</title><rect x="26.7483%" y="277" width="3.2343%" height="15" fill="rgb(245,159,27)" fg:x="306" fg:w="37"/><text x="26.9983%" y="287.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (21 samples, 1.84%)</title><rect x="28.1469%" y="261" width="1.8357%" height="15" fill="rgb(245,172,44)" fg:x="322" fg:w="21"/><text x="28.3969%" y="271.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (6 samples, 0.52%)</title><rect x="30.8566%" y="261" width="0.5245%" height="15" fill="rgb(236,23,11)" fg:x="353" fg:w="6"/><text x="31.1066%" y="271.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (6 samples, 0.52%)</title><rect x="31.3811%" y="261" width="0.5245%" height="15" fill="rgb(205,117,38)" fg:x="359" fg:w="6"/><text x="31.6311%" y="271.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (3 samples, 0.26%)</title><rect x="31.6434%" y="245" width="0.2622%" height="15" fill="rgb(237,72,25)" fg:x="362" fg:w="3"/><text x="31.8934%" y="255.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (23 samples, 2.01%)</title><rect x="29.9825%" y="277" width="2.0105%" height="15" fill="rgb(244,70,9)" fg:x="343" fg:w="23"/><text x="30.2325%" y="287.50">n..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="31.9056%" y="261" width="0.0874%" height="15" fill="rgb(217,125,39)" fg:x="365" fg:w="1"/><text x="32.1556%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.17%)</title><rect x="33.7413%" y="261" width="0.1748%" height="15" fill="rgb(235,36,10)" fg:x="386" fg:w="2"/><text x="33.9913%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (12 samples, 1.05%)</title><rect x="33.9161%" y="261" width="1.0490%" height="15" fill="rgb(251,123,47)" fg:x="388" fg:w="12"/><text x="34.1661%" y="271.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (143 samples, 12.50%)</title><rect x="23.3392%" y="293" width="12.5000%" height="15" fill="rgb(221,13,13)" fg:x="267" fg:w="143"/><text x="23.5892%" y="303.50">nemscraper::process..</text></g><g><title>nemscraper::process::utils::clean_str (44 samples, 3.85%)</title><rect x="31.9930%" y="277" width="3.8462%" height="15" fill="rgb(238,131,9)" fg:x="366" fg:w="44"/><text x="32.2430%" y="287.50">nems..</text></g><g><title>malloc (10 samples, 0.87%)</title><rect x="34.9650%" y="261" width="0.8741%" height="15" fill="rgb(211,50,8)" fg:x="400" fg:w="10"/><text x="35.2150%" y="271.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="35.8392%" y="261" width="0.0874%" height="15" fill="rgb(245,182,24)" fg:x="410" fg:w="1"/><text x="36.0892%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;parquet::arrow::arrow_writer::ArrowLeafColumn&gt; (1 samples, 0.09%)</title><rect x="35.9266%" y="261" width="0.0874%" height="15" fill="rgb(242,14,37)" fg:x="411" fg:w="1"/><text x="36.1766%" y="271.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="35.9266%" y="245" width="0.0874%" height="15" fill="rgb(246,228,12)" fg:x="411" fg:w="1"/><text x="36.1766%" y="255.50"></text></g><g><title>arrow_cast::cast::cast (1 samples, 0.09%)</title><rect x="36.1014%" y="245" width="0.0874%" height="15" fill="rgb(213,55,15)" fg:x="413" fg:w="1"/><text x="36.3514%" y="255.50"></text></g><g><title>arrow_cast::cast::cast_with_options (1 samples, 0.09%)</title><rect x="36.1014%" y="229" width="0.0874%" height="15" fill="rgb(209,9,3)" fg:x="413" fg:w="1"/><text x="36.3514%" y="239.50"></text></g><g><title>arrow_cast::cast::cast_reinterpret_arrays (1 samples, 0.09%)</title><rect x="36.1014%" y="213" width="0.0874%" height="15" fill="rgb(230,59,30)" fg:x="413" fg:w="1"/><text x="36.3514%" y="223.50"></text></g><g><title>arrow_array::array::primitive_array::PrimitiveArray&lt;T&gt;::reinterpret_cast (1 samples, 0.09%)</title><rect x="36.1014%" y="197" width="0.0874%" height="15" fill="rgb(209,121,21)" fg:x="413" fg:w="1"/><text x="36.3514%" y="207.50"></text></g><g><title>&lt;arrow_schema::datatype::DataType as core::clone::Clone&gt;::clone (1 samples, 0.09%)</title><rect x="36.1014%" y="181" width="0.0874%" height="15" fill="rgb(220,109,13)" fg:x="413" fg:w="1"/><text x="36.3514%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (7 samples, 0.61%)</title><rect x="36.4510%" y="213" width="0.6119%" height="15" fill="rgb(232,18,1)" fg:x="417" fg:w="7"/><text x="36.7010%" y="223.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (6 samples, 0.52%)</title><rect x="36.5385%" y="197" width="0.5245%" height="15" fill="rgb(215,41,42)" fg:x="418" fg:w="6"/><text x="36.7885%" y="207.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.35%)</title><rect x="36.7133%" y="181" width="0.3497%" height="15" fill="rgb(224,123,36)" fg:x="420" fg:w="4"/><text x="36.9633%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (3 samples, 0.26%)</title><rect x="37.0629%" y="197" width="0.2622%" height="15" fill="rgb(240,125,3)" fg:x="424" fg:w="3"/><text x="37.3129%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (3 samples, 0.26%)</title><rect x="37.0629%" y="181" width="0.2622%" height="15" fill="rgb(205,98,50)" fg:x="424" fg:w="3"/><text x="37.3129%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="37.3252%" y="165" width="0.0874%" height="15" fill="rgb(205,185,37)" fg:x="427" fg:w="1"/><text x="37.5752%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="37.3252%" y="149" width="0.0874%" height="15" fill="rgb(238,207,15)" fg:x="427" fg:w="1"/><text x="37.5752%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="37.3252%" y="133" width="0.0874%" height="15" fill="rgb(213,199,42)" fg:x="427" fg:w="1"/><text x="37.5752%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="37.3252%" y="117" width="0.0874%" height="15" fill="rgb(235,201,11)" fg:x="427" fg:w="1"/><text x="37.5752%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (15 samples, 1.31%)</title><rect x="36.1888%" y="245" width="1.3112%" height="15" fill="rgb(207,46,11)" fg:x="414" fg:w="15"/><text x="36.4388%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (15 samples, 1.31%)</title><rect x="36.1888%" y="229" width="1.3112%" height="15" fill="rgb(241,35,35)" fg:x="414" fg:w="15"/><text x="36.4388%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (5 samples, 0.44%)</title><rect x="37.0629%" y="213" width="0.4371%" height="15" fill="rgb(243,32,47)" fg:x="424" fg:w="5"/><text x="37.3129%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="37.3252%" y="197" width="0.1748%" height="15" fill="rgb(247,202,23)" fg:x="427" fg:w="2"/><text x="37.5752%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.17%)</title><rect x="37.3252%" y="181" width="0.1748%" height="15" fill="rgb(219,102,11)" fg:x="427" fg:w="2"/><text x="37.5752%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="37.4126%" y="165" width="0.0874%" height="15" fill="rgb(243,110,44)" fg:x="428" fg:w="1"/><text x="37.6626%" y="175.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="37.4126%" y="149" width="0.0874%" height="15" fill="rgb(222,74,54)" fg:x="428" fg:w="1"/><text x="37.6626%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (48 samples, 4.20%)</title><rect x="39.3357%" y="229" width="4.1958%" height="15" fill="rgb(216,99,12)" fg:x="450" fg:w="48"/><text x="39.5857%" y="239.50">&lt;parq..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (25 samples, 2.19%)</title><rect x="41.3462%" y="213" width="2.1853%" height="15" fill="rgb(226,22,26)" fg:x="473" fg:w="25"/><text x="41.5962%" y="223.50">p..</text></g><g><title>ahash::random_state::RandomState::hash_one (4 samples, 0.35%)</title><rect x="43.1818%" y="197" width="0.3497%" height="15" fill="rgb(217,163,10)" fg:x="494" fg:w="4"/><text x="43.4318%" y="207.50"></text></g><g><title>malloc (2 samples, 0.17%)</title><rect x="43.7937%" y="213" width="0.1748%" height="15" fill="rgb(213,25,53)" fg:x="501" fg:w="2"/><text x="44.0437%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="44.7552%" y="197" width="0.0874%" height="15" fill="rgb(252,105,26)" fg:x="512" fg:w="1"/><text x="45.0052%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="44.7552%" y="181" width="0.0874%" height="15" fill="rgb(220,39,43)" fg:x="512" fg:w="1"/><text x="45.0052%" y="191.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="44.7552%" y="165" width="0.0874%" height="15" fill="rgb(229,68,48)" fg:x="512" fg:w="1"/><text x="45.0052%" y="175.50"></text></g><g><title>parquet::column::writer::compare_greater (8 samples, 0.70%)</title><rect x="44.8427%" y="197" width="0.6993%" height="15" fill="rgb(252,8,32)" fg:x="513" fg:w="8"/><text x="45.0927%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (60 samples, 5.24%)</title><rect x="43.5315%" y="229" width="5.2448%" height="15" fill="rgb(223,20,43)" fg:x="498" fg:w="60"/><text x="43.7815%" y="239.50">&lt;parqu..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (55 samples, 4.81%)</title><rect x="43.9685%" y="213" width="4.8077%" height="15" fill="rgb(229,81,49)" fg:x="503" fg:w="55"/><text x="44.2185%" y="223.50">parque..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (37 samples, 3.23%)</title><rect x="45.5420%" y="197" width="3.2343%" height="15" fill="rgb(236,28,36)" fg:x="521" fg:w="37"/><text x="45.7920%" y="207.50">par..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.26%)</title><rect x="48.5140%" y="181" width="0.2622%" height="15" fill="rgb(249,185,26)" fg:x="555" fg:w="3"/><text x="48.7640%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (5 samples, 0.44%)</title><rect x="48.9510%" y="213" width="0.4371%" height="15" fill="rgb(249,174,33)" fg:x="560" fg:w="5"/><text x="49.2010%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.35%)</title><rect x="49.0385%" y="197" width="0.3497%" height="15" fill="rgb(233,201,37)" fg:x="561" fg:w="4"/><text x="49.2885%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.17%)</title><rect x="49.2133%" y="181" width="0.1748%" height="15" fill="rgb(221,78,26)" fg:x="563" fg:w="2"/><text x="49.4633%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.09%)</title><rect x="49.5629%" y="181" width="0.0874%" height="15" fill="rgb(250,127,30)" fg:x="567" fg:w="1"/><text x="49.8129%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.09%)</title><rect x="49.5629%" y="165" width="0.0874%" height="15" fill="rgb(230,49,44)" fg:x="567" fg:w="1"/><text x="49.8129%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (7 samples, 0.61%)</title><rect x="49.3881%" y="213" width="0.6119%" height="15" fill="rgb(229,67,23)" fg:x="565" fg:w="7"/><text x="49.6381%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (7 samples, 0.61%)</title><rect x="49.3881%" y="197" width="0.6119%" height="15" fill="rgb(249,83,47)" fg:x="565" fg:w="7"/><text x="49.6381%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.35%)</title><rect x="49.6503%" y="181" width="0.3497%" height="15" fill="rgb(215,43,3)" fg:x="568" fg:w="4"/><text x="49.9003%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (4 samples, 0.35%)</title><rect x="54.0210%" y="165" width="0.3497%" height="15" fill="rgb(238,154,13)" fg:x="618" fg:w="4"/><text x="54.2710%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (44 samples, 3.85%)</title><rect x="50.6993%" y="181" width="3.8462%" height="15" fill="rgb(219,56,2)" fg:x="580" fg:w="44"/><text x="50.9493%" y="191.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="54.3706%" y="165" width="0.1748%" height="15" fill="rgb(233,0,4)" fg:x="622" fg:w="2"/><text x="54.6206%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (51 samples, 4.46%)</title><rect x="50.2622%" y="197" width="4.4580%" height="15" fill="rgb(235,30,7)" fg:x="575" fg:w="51"/><text x="50.5122%" y="207.50">brotl..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.17%)</title><rect x="54.5455%" y="181" width="0.1748%" height="15" fill="rgb(250,79,13)" fg:x="624" fg:w="2"/><text x="54.7955%" y="191.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (16 samples, 1.40%)</title><rect x="54.7203%" y="197" width="1.3986%" height="15" fill="rgb(211,146,34)" fg:x="626" fg:w="16"/><text x="54.9703%" y="207.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (16 samples, 1.40%)</title><rect x="54.7203%" y="181" width="1.3986%" height="15" fill="rgb(228,22,38)" fg:x="626" fg:w="16"/><text x="54.9703%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (3 samples, 0.26%)</title><rect x="56.1189%" y="197" width="0.2622%" height="15" fill="rgb(235,168,5)" fg:x="642" fg:w="3"/><text x="56.3689%" y="207.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="56.2937%" y="181" width="0.0874%" height="15" fill="rgb(221,155,16)" fg:x="644" fg:w="1"/><text x="56.5437%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (8 samples, 0.70%)</title><rect x="61.9755%" y="149" width="0.6993%" height="15" fill="rgb(215,215,53)" fg:x="709" fg:w="8"/><text x="62.2255%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (61 samples, 5.33%)</title><rect x="57.6049%" y="165" width="5.3322%" height="15" fill="rgb(223,4,10)" fg:x="659" fg:w="61"/><text x="57.8549%" y="175.50">&lt;brotli..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (3 samples, 0.26%)</title><rect x="62.6748%" y="149" width="0.2622%" height="15" fill="rgb(234,103,6)" fg:x="717" fg:w="3"/><text x="62.9248%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (71 samples, 6.21%)</title><rect x="56.8182%" y="181" width="6.2063%" height="15" fill="rgb(227,97,0)" fg:x="650" fg:w="71"/><text x="57.0682%" y="191.50">brotli::..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="62.9371%" y="165" width="0.0874%" height="15" fill="rgb(234,150,53)" fg:x="720" fg:w="1"/><text x="63.1871%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="64.3357%" y="117" width="0.0874%" height="15" fill="rgb(228,201,54)" fg:x="736" fg:w="1"/><text x="64.5857%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (4 samples, 0.35%)</title><rect x="64.1608%" y="133" width="0.3497%" height="15" fill="rgb(222,22,37)" fg:x="734" fg:w="4"/><text x="64.4108%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.09%)</title><rect x="64.4231%" y="117" width="0.0874%" height="15" fill="rgb(237,53,32)" fg:x="737" fg:w="1"/><text x="64.6731%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (4 samples, 0.35%)</title><rect x="64.5105%" y="133" width="0.3497%" height="15" fill="rgb(233,25,53)" fg:x="738" fg:w="4"/><text x="64.7605%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (16 samples, 1.40%)</title><rect x="64.0734%" y="165" width="1.3986%" height="15" fill="rgb(210,40,34)" fg:x="733" fg:w="16"/><text x="64.3234%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (16 samples, 1.40%)</title><rect x="64.0734%" y="149" width="1.3986%" height="15" fill="rgb(241,220,44)" fg:x="733" fg:w="16"/><text x="64.3234%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (7 samples, 0.61%)</title><rect x="64.8601%" y="133" width="0.6119%" height="15" fill="rgb(235,28,35)" fg:x="742" fg:w="7"/><text x="65.1101%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (2 samples, 0.17%)</title><rect x="65.4720%" y="165" width="0.1748%" height="15" fill="rgb(210,56,17)" fg:x="749" fg:w="2"/><text x="65.7220%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.61%)</title><rect x="65.6469%" y="165" width="0.6119%" height="15" fill="rgb(224,130,29)" fg:x="751" fg:w="7"/><text x="65.8969%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (40 samples, 3.50%)</title><rect x="63.0245%" y="181" width="3.4965%" height="15" fill="rgb(235,212,8)" fg:x="721" fg:w="40"/><text x="63.2745%" y="191.50">bro..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (3 samples, 0.26%)</title><rect x="66.2587%" y="165" width="0.2622%" height="15" fill="rgb(223,33,50)" fg:x="758" fg:w="3"/><text x="66.5087%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (12 samples, 1.05%)</title><rect x="66.5210%" y="181" width="1.0490%" height="15" fill="rgb(219,149,13)" fg:x="761" fg:w="12"/><text x="66.7710%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (140 samples, 12.24%)</title><rect x="56.3811%" y="197" width="12.2378%" height="15" fill="rgb(250,156,29)" fg:x="645" fg:w="140"/><text x="56.6311%" y="207.50">brotli::enc::write..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (12 samples, 1.05%)</title><rect x="67.5699%" y="181" width="1.0490%" height="15" fill="rgb(216,193,19)" fg:x="773" fg:w="12"/><text x="67.8199%" y="191.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (3 samples, 0.26%)</title><rect x="68.3566%" y="165" width="0.2622%" height="15" fill="rgb(216,135,14)" fg:x="782" fg:w="3"/><text x="68.6066%" y="175.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (3 samples, 0.26%)</title><rect x="68.3566%" y="149" width="0.2622%" height="15" fill="rgb(241,47,5)" fg:x="782" fg:w="3"/><text x="68.6066%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (214 samples, 18.71%)</title><rect x="50.0000%" y="213" width="18.7063%" height="15" fill="rgb(233,42,35)" fg:x="572" fg:w="214"/><text x="50.2500%" y="223.50">&lt;parquet::compression::brotli..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="68.6189%" y="197" width="0.0874%" height="15" fill="rgb(231,13,6)" fg:x="785" fg:w="1"/><text x="68.8689%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="68.6189%" y="181" width="0.0874%" height="15" fill="rgb(207,181,40)" fg:x="785" fg:w="1"/><text x="68.8689%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.09%)</title><rect x="68.7063%" y="213" width="0.0874%" height="15" fill="rgb(254,173,49)" fg:x="786" fg:w="1"/><text x="68.9563%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="68.7937%" y="213" width="0.0874%" height="15" fill="rgb(221,1,38)" fg:x="787" fg:w="1"/><text x="69.0437%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="68.7937%" y="197" width="0.0874%" height="15" fill="rgb(206,124,46)" fg:x="787" fg:w="1"/><text x="69.0437%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (235 samples, 20.54%)</title><rect x="48.7762%" y="229" width="20.5420%" height="15" fill="rgb(249,21,11)" fg:x="558" fg:w="235"/><text x="49.0262%" y="239.50">parquet::column::writer::Generic..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (5 samples, 0.44%)</title><rect x="68.8811%" y="213" width="0.4371%" height="15" fill="rgb(222,201,40)" fg:x="788" fg:w="5"/><text x="69.1311%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="74.3881%" y="165" width="0.0874%" height="15" fill="rgb(235,61,29)" fg:x="851" fg:w="1"/><text x="74.6381%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (52 samples, 4.55%)</title><rect x="70.1049%" y="197" width="4.5455%" height="15" fill="rgb(219,207,3)" fg:x="802" fg:w="52"/><text x="70.3549%" y="207.50">brotl..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (46 samples, 4.02%)</title><rect x="70.6294%" y="181" width="4.0210%" height="15" fill="rgb(222,56,46)" fg:x="808" fg:w="46"/><text x="70.8794%" y="191.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="74.4755%" y="165" width="0.1748%" height="15" fill="rgb(239,76,54)" fg:x="852" fg:w="2"/><text x="74.7255%" y="175.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (2 samples, 0.17%)</title><rect x="74.6503%" y="197" width="0.1748%" height="15" fill="rgb(231,124,27)" fg:x="854" fg:w="2"/><text x="74.9003%" y="207.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="74.7378%" y="181" width="0.0874%" height="15" fill="rgb(249,195,6)" fg:x="855" fg:w="1"/><text x="74.9878%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="74.8252%" y="197" width="0.0874%" height="15" fill="rgb(237,174,47)" fg:x="856" fg:w="1"/><text x="75.0752%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (7 samples, 0.61%)</title><rect x="74.9126%" y="181" width="0.6119%" height="15" fill="rgb(206,201,31)" fg:x="857" fg:w="7"/><text x="75.1626%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (3 samples, 0.26%)</title><rect x="75.2622%" y="165" width="0.2622%" height="15" fill="rgb(231,57,52)" fg:x="861" fg:w="3"/><text x="75.5122%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (9 samples, 0.79%)</title><rect x="74.9126%" y="197" width="0.7867%" height="15" fill="rgb(248,177,22)" fg:x="857" fg:w="9"/><text x="75.1626%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (2 samples, 0.17%)</title><rect x="75.5245%" y="181" width="0.1748%" height="15" fill="rgb(215,211,37)" fg:x="864" fg:w="2"/><text x="75.7745%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (455 samples, 39.77%)</title><rect x="36.0140%" y="261" width="39.7727%" height="15" fill="rgb(241,128,51)" fg:x="412" fg:w="455"/><text x="36.2640%" y="271.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (438 samples, 38.29%)</title><rect x="37.5000%" y="245" width="38.2867%" height="15" fill="rgb(227,165,31)" fg:x="429" fg:w="438"/><text x="37.7500%" y="255.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_i..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (74 samples, 6.47%)</title><rect x="69.3182%" y="229" width="6.4685%" height="15" fill="rgb(228,167,24)" fg:x="793" fg:w="74"/><text x="69.5682%" y="239.50">parquet:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (74 samples, 6.47%)</title><rect x="69.3182%" y="213" width="6.4685%" height="15" fill="rgb(228,143,12)" fg:x="793" fg:w="74"/><text x="69.5682%" y="223.50">&lt;parquet..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="75.6993%" y="197" width="0.0874%" height="15" fill="rgb(249,149,8)" fg:x="866" fg:w="1"/><text x="75.9493%" y="207.50"></text></g><g><title>brotli::enc::backward_references::UnionHasher&lt;Alloc&gt;::free (1 samples, 0.09%)</title><rect x="75.6993%" y="181" width="0.0874%" height="15" fill="rgb(243,35,44)" fg:x="866" fg:w="1"/><text x="75.9493%" y="191.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="75.6993%" y="165" width="0.0874%" height="15" fill="rgb(246,89,9)" fg:x="866" fg:w="1"/><text x="75.9493%" y="175.50"></text></g><g><title>__default_morecore (1 samples, 0.09%)</title><rect x="75.6993%" y="149" width="0.0874%" height="15" fill="rgb(233,213,13)" fg:x="866" fg:w="1"/><text x="75.9493%" y="159.50"></text></g><g><title>__sbrk (1 samples, 0.09%)</title><rect x="75.6993%" y="133" width="0.0874%" height="15" fill="rgb(233,141,41)" fg:x="866" fg:w="1"/><text x="75.9493%" y="143.50"></text></g><g><title>brk (1 samples, 0.09%)</title><rect x="75.6993%" y="117" width="0.0874%" height="15" fill="rgb(239,167,4)" fg:x="866" fg:w="1"/><text x="75.9493%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::finish (1 samples, 0.09%)</title><rect x="75.7867%" y="245" width="0.0874%" height="15" fill="rgb(209,217,16)" fg:x="867" fg:w="1"/><text x="76.0367%" y="255.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="75.7867%" y="229" width="0.0874%" height="15" fill="rgb(219,88,35)" fg:x="867" fg:w="1"/><text x="76.0367%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (460 samples, 40.21%)</title><rect x="35.8392%" y="277" width="40.2098%" height="15" fill="rgb(220,193,23)" fg:x="410" fg:w="460"/><text x="36.0892%" y="287.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (3 samples, 0.26%)</title><rect x="75.7867%" y="261" width="0.2622%" height="15" fill="rgb(230,90,52)" fg:x="867" fg:w="3"/><text x="76.0367%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (2 samples, 0.17%)</title><rect x="75.8741%" y="245" width="0.1748%" height="15" fill="rgb(252,106,19)" fg:x="868" fg:w="2"/><text x="76.1241%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="75.9615%" y="229" width="0.0874%" height="15" fill="rgb(206,74,20)" fg:x="869" fg:w="1"/><text x="76.2115%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="75.9615%" y="213" width="0.0874%" height="15" fill="rgb(230,138,44)" fg:x="869" fg:w="1"/><text x="76.2115%" y="223.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="75.9615%" y="197" width="0.0874%" height="15" fill="rgb(235,182,43)" fg:x="869" fg:w="1"/><text x="76.2115%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (461 samples, 40.30%)</title><rect x="35.8392%" y="293" width="40.2972%" height="15" fill="rgb(242,16,51)" fg:x="410" fg:w="461"/><text x="36.0892%" y="303.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriterFactory::create_row_group_writer (1 samples, 0.09%)</title><rect x="76.0490%" y="277" width="0.0874%" height="15" fill="rgb(248,9,4)" fg:x="870" fg:w="1"/><text x="76.2990%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::get_column_writers (1 samples, 0.09%)</title><rect x="76.0490%" y="261" width="0.0874%" height="15" fill="rgb(210,31,22)" fg:x="870" fg:w="1"/><text x="76.2990%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriterFactory::get_arrow_column_writer (1 samples, 0.09%)</title><rect x="76.0490%" y="245" width="0.0874%" height="15" fill="rgb(239,54,39)" fg:x="870" fg:w="1"/><text x="76.2990%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriterFactory::get_arrow_column_writer::{{closure}} (1 samples, 0.09%)</title><rect x="76.0490%" y="229" width="0.0874%" height="15" fill="rgb(230,99,41)" fg:x="870" fg:w="1"/><text x="76.2990%" y="239.50"></text></g><g><title>parquet::column::writer::get_column_writer (1 samples, 0.09%)</title><rect x="76.0490%" y="213" width="0.0874%" height="15" fill="rgb(253,106,12)" fg:x="870" fg:w="1"/><text x="76.2990%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::try_new (1 samples, 0.09%)</title><rect x="76.0490%" y="197" width="0.0874%" height="15" fill="rgb(213,46,41)" fg:x="870" fg:w="1"/><text x="76.2990%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::new (1 samples, 0.09%)</title><rect x="76.0490%" y="181" width="0.0874%" height="15" fill="rgb(215,133,35)" fg:x="870" fg:w="1"/><text x="76.2990%" y="191.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (5 samples, 0.44%)</title><rect x="76.1364%" y="245" width="0.4371%" height="15" fill="rgb(213,28,5)" fg:x="871" fg:w="5"/><text x="76.3864%" y="255.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (5 samples, 0.44%)</title><rect x="76.1364%" y="229" width="0.4371%" height="15" fill="rgb(215,77,49)" fg:x="871" fg:w="5"/><text x="76.3864%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5 samples, 0.44%)</title><rect x="76.1364%" y="213" width="0.4371%" height="15" fill="rgb(248,100,22)" fg:x="871" fg:w="5"/><text x="76.3864%" y="223.50"></text></g><g><title>write (5 samples, 0.44%)</title><rect x="76.1364%" y="197" width="0.4371%" height="15" fill="rgb(208,67,9)" fg:x="871" fg:w="5"/><text x="76.3864%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="76.5734%" y="229" width="0.0874%" height="15" fill="rgb(219,133,21)" fg:x="876" fg:w="1"/><text x="76.8234%" y="239.50"></text></g><g><title>&lt;nu_ansi_term::display::AnsiGenericString&lt;str&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="76.5734%" y="213" width="0.0874%" height="15" fill="rgb(246,46,29)" fg:x="876" fg:w="1"/><text x="76.8234%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.09%)</title><rect x="76.5734%" y="197" width="0.0874%" height="15" fill="rgb(246,185,52)" fg:x="876" fg:w="1"/><text x="76.8234%" y="207.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (7 samples, 0.61%)</title><rect x="76.1364%" y="277" width="0.6119%" height="15" fill="rgb(252,136,11)" fg:x="871" fg:w="7"/><text x="76.3864%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.61%)</title><rect x="76.1364%" y="261" width="0.6119%" height="15" fill="rgb(219,138,53)" fg:x="871" fg:w="7"/><text x="76.3864%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.17%)</title><rect x="76.5734%" y="245" width="0.1748%" height="15" fill="rgb(211,51,23)" fg:x="876" fg:w="2"/><text x="76.8234%" y="255.50"></text></g><g><title>tracing_subscriber::layer::context::Context&lt;S&gt;::event_scope (1 samples, 0.09%)</title><rect x="76.6608%" y="229" width="0.0874%" height="15" fill="rgb(247,221,28)" fg:x="877" fg:w="1"/><text x="76.9108%" y="239.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (798 samples, 69.76%)</title><rect x="7.0804%" y="309" width="69.7552%" height="15" fill="rgb(251,222,45)" fg:x="81" fg:w="798"/><text x="7.3304%" y="319.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (8 samples, 0.70%)</title><rect x="76.1364%" y="293" width="0.6993%" height="15" fill="rgb(217,162,53)" fg:x="871" fg:w="8"/><text x="76.3864%" y="303.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.09%)</title><rect x="76.7483%" y="277" width="0.0874%" height="15" fill="rgb(229,93,14)" fg:x="878" fg:w="1"/><text x="76.9983%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::event_enabled (1 samples, 0.09%)</title><rect x="76.7483%" y="261" width="0.0874%" height="15" fill="rgb(209,67,49)" fg:x="878" fg:w="1"/><text x="76.9983%" y="271.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::initialize (1 samples, 0.09%)</title><rect x="76.8357%" y="309" width="0.0874%" height="15" fill="rgb(213,87,29)" fg:x="879" fg:w="1"/><text x="77.0857%" y="319.50"></text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="76.8357%" y="293" width="0.0874%" height="15" fill="rgb(205,151,52)" fg:x="879" fg:w="1"/><text x="77.0857%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="76.8357%" y="277" width="0.0874%" height="15" fill="rgb(253,215,39)" fg:x="879" fg:w="1"/><text x="77.0857%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="76.8357%" y="261" width="0.0874%" height="15" fill="rgb(221,220,41)" fg:x="879" fg:w="1"/><text x="77.0857%" y="271.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="76.8357%" y="245" width="0.0874%" height="15" fill="rgb(218,133,21)" fg:x="879" fg:w="1"/><text x="77.0857%" y="255.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="76.8357%" y="229" width="0.0874%" height="15" fill="rgb(221,193,43)" fg:x="879" fg:w="1"/><text x="77.0857%" y="239.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="76.8357%" y="213" width="0.0874%" height="15" fill="rgb(240,128,52)" fg:x="879" fg:w="1"/><text x="77.0857%" y="223.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="76.8357%" y="197" width="0.0874%" height="15" fill="rgb(253,114,12)" fg:x="879" fg:w="1"/><text x="77.0857%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned (12 samples, 1.05%)</title><rect x="78.4965%" y="293" width="1.0490%" height="15" fill="rgb(215,223,47)" fg:x="898" fg:w="12"/><text x="78.7465%" y="303.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (891 samples, 77.88%)</title><rect x="2.1853%" y="357" width="77.8846%" height="15" fill="rgb(248,225,23)" fg:x="25" fg:w="891"/><text x="2.4353%" y="367.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (879 samples, 76.84%)</title><rect x="3.2343%" y="341" width="76.8357%" height="15" fill="rgb(250,108,0)" fg:x="37" fg:w="879"/><text x="3.4843%" y="351.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (879 samples, 76.84%)</title><rect x="3.2343%" y="325" width="76.8357%" height="15" fill="rgb(228,208,7)" fg:x="37" fg:w="879"/><text x="3.4843%" y="335.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (36 samples, 3.15%)</title><rect x="76.9231%" y="309" width="3.1469%" height="15" fill="rgb(244,45,10)" fg:x="880" fg:w="36"/><text x="77.1731%" y="319.50">std..</text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.52%)</title><rect x="79.5455%" y="293" width="0.5245%" height="15" fill="rgb(207,125,25)" fg:x="910" fg:w="6"/><text x="79.7955%" y="303.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (3 samples, 0.26%)</title><rect x="80.0699%" y="325" width="0.2622%" height="15" fill="rgb(210,195,18)" fg:x="916" fg:w="3"/><text x="80.3199%" y="335.50"></text></g><g><title>malloc (3 samples, 0.26%)</title><rect x="80.0699%" y="309" width="0.2622%" height="15" fill="rgb(249,80,12)" fg:x="916" fg:w="3"/><text x="80.3199%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (2 samples, 0.17%)</title><rect x="80.3322%" y="325" width="0.1748%" height="15" fill="rgb(221,65,9)" fg:x="919" fg:w="2"/><text x="80.5822%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.17%)</title><rect x="80.3322%" y="309" width="0.1748%" height="15" fill="rgb(235,49,36)" fg:x="919" fg:w="2"/><text x="80.5822%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.17%)</title><rect x="80.3322%" y="293" width="0.1748%" height="15" fill="rgb(225,32,20)" fg:x="919" fg:w="2"/><text x="80.5822%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.17%)</title><rect x="80.3322%" y="277" width="0.1748%" height="15" fill="rgb(215,141,46)" fg:x="919" fg:w="2"/><text x="80.5822%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.17%)</title><rect x="80.3322%" y="261" width="0.1748%" height="15" fill="rgb(250,160,47)" fg:x="919" fg:w="2"/><text x="80.5822%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.17%)</title><rect x="80.3322%" y="245" width="0.1748%" height="15" fill="rgb(216,222,40)" fg:x="919" fg:w="2"/><text x="80.5822%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.17%)</title><rect x="80.3322%" y="229" width="0.1748%" height="15" fill="rgb(234,217,39)" fg:x="919" fg:w="2"/><text x="80.5822%" y="239.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.17%)</title><rect x="80.3322%" y="213" width="0.1748%" height="15" fill="rgb(207,178,40)" fg:x="919" fg:w="2"/><text x="80.5822%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.17%)</title><rect x="80.3322%" y="197" width="0.1748%" height="15" fill="rgb(221,136,13)" fg:x="919" fg:w="2"/><text x="80.5822%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="80.3322%" y="181" width="0.1748%" height="15" fill="rgb(249,199,10)" fg:x="919" fg:w="2"/><text x="80.5822%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.17%)</title><rect x="80.3322%" y="165" width="0.1748%" height="15" fill="rgb(249,222,13)" fg:x="919" fg:w="2"/><text x="80.5822%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.17%)</title><rect x="80.3322%" y="149" width="0.1748%" height="15" fill="rgb(244,185,38)" fg:x="919" fg:w="2"/><text x="80.5822%" y="159.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (8 samples, 0.70%)</title><rect x="80.5070%" y="293" width="0.6993%" height="15" fill="rgb(236,202,9)" fg:x="921" fg:w="8"/><text x="80.7570%" y="303.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (8 samples, 0.70%)</title><rect x="80.5070%" y="277" width="0.6993%" height="15" fill="rgb(250,229,37)" fg:x="921" fg:w="8"/><text x="80.7570%" y="287.50"></text></g><g><title>csv_core::reader::Reader::read_record (7 samples, 0.61%)</title><rect x="80.5944%" y="261" width="0.6119%" height="15" fill="rgb(206,174,23)" fg:x="922" fg:w="7"/><text x="80.8444%" y="271.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (11 samples, 0.96%)</title><rect x="80.5070%" y="309" width="0.9615%" height="15" fill="rgb(211,33,43)" fg:x="921" fg:w="11"/><text x="80.7570%" y="319.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (3 samples, 0.26%)</title><rect x="81.2063%" y="293" width="0.2622%" height="15" fill="rgb(245,58,50)" fg:x="929" fg:w="3"/><text x="81.4563%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.26%)</title><rect x="81.2063%" y="277" width="0.2622%" height="15" fill="rgb(244,68,36)" fg:x="929" fg:w="3"/><text x="81.4563%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.26%)</title><rect x="81.2063%" y="261" width="0.2622%" height="15" fill="rgb(232,229,15)" fg:x="929" fg:w="3"/><text x="81.4563%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.26%)</title><rect x="81.2063%" y="245" width="0.2622%" height="15" fill="rgb(254,30,23)" fg:x="929" fg:w="3"/><text x="81.4563%" y="255.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (3 samples, 0.26%)</title><rect x="81.2063%" y="229" width="0.2622%" height="15" fill="rgb(235,160,14)" fg:x="929" fg:w="3"/><text x="81.4563%" y="239.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (1 samples, 0.09%)</title><rect x="81.3811%" y="213" width="0.0874%" height="15" fill="rgb(212,155,44)" fg:x="931" fg:w="1"/><text x="81.6311%" y="223.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::convert::From&lt;arrow_data::data::ArrayData&gt;&gt;::from (1 samples, 0.09%)</title><rect x="81.3811%" y="197" width="0.0874%" height="15" fill="rgb(226,2,50)" fg:x="931" fg:w="1"/><text x="81.6311%" y="207.50"></text></g><g><title>arrow_array::array::get_offsets (1 samples, 0.09%)</title><rect x="81.3811%" y="181" width="0.0874%" height="15" fill="rgb(234,177,6)" fg:x="931" fg:w="1"/><text x="81.6311%" y="191.50"></text></g><g><title>arrow_buffer::buffer::scalar::ScalarBuffer&lt;T&gt;::new (1 samples, 0.09%)</title><rect x="81.3811%" y="165" width="0.0874%" height="15" fill="rgb(217,24,9)" fg:x="931" fg:w="1"/><text x="81.6311%" y="175.50"></text></g><g><title>arrow_buffer::buffer::immutable::Buffer::slice_with_length (1 samples, 0.09%)</title><rect x="81.3811%" y="149" width="0.0874%" height="15" fill="rgb(220,13,46)" fg:x="931" fg:w="1"/><text x="81.6311%" y="159.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="81.4685%" y="293" width="0.0874%" height="15" fill="rgb(239,221,27)" fg:x="932" fg:w="1"/><text x="81.7185%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 0.26%)</title><rect x="81.5559%" y="293" width="0.2622%" height="15" fill="rgb(222,198,25)" fg:x="933" fg:w="3"/><text x="81.8059%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (2 samples, 0.17%)</title><rect x="81.6434%" y="277" width="0.1748%" height="15" fill="rgb(211,99,13)" fg:x="934" fg:w="2"/><text x="81.8934%" y="287.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.09%)</title><rect x="81.8182%" y="293" width="0.0874%" height="15" fill="rgb(232,111,31)" fg:x="936" fg:w="1"/><text x="82.0682%" y="303.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (1 samples, 0.09%)</title><rect x="81.8182%" y="277" width="0.0874%" height="15" fill="rgb(245,82,37)" fg:x="936" fg:w="1"/><text x="82.0682%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.09%)</title><rect x="81.8182%" y="261" width="0.0874%" height="15" fill="rgb(227,149,46)" fg:x="936" fg:w="1"/><text x="82.0682%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="82.1678%" y="277" width="0.0874%" height="15" fill="rgb(218,36,50)" fg:x="940" fg:w="1"/><text x="82.4178%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (10 samples, 0.87%)</title><rect x="81.4685%" y="309" width="0.8741%" height="15" fill="rgb(226,80,48)" fg:x="932" fg:w="10"/><text x="81.7185%" y="319.50"></text></g><g><title>nemscraper::process::utils::clean_str (5 samples, 0.44%)</title><rect x="81.9056%" y="293" width="0.4371%" height="15" fill="rgb(238,224,15)" fg:x="937" fg:w="5"/><text x="82.1556%" y="303.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="82.2552%" y="277" width="0.0874%" height="15" fill="rgb(241,136,10)" fg:x="941" fg:w="1"/><text x="82.5052%" y="287.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (5 samples, 0.44%)</title><rect x="82.5175%" y="245" width="0.4371%" height="15" fill="rgb(208,32,45)" fg:x="944" fg:w="5"/><text x="82.7675%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.17%)</title><rect x="82.7797%" y="229" width="0.1748%" height="15" fill="rgb(207,135,9)" fg:x="947" fg:w="2"/><text x="83.0297%" y="239.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.09%)</title><rect x="82.8671%" y="213" width="0.0874%" height="15" fill="rgb(206,86,44)" fg:x="948" fg:w="1"/><text x="83.1171%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (2 samples, 0.17%)</title><rect x="82.9545%" y="245" width="0.1748%" height="15" fill="rgb(245,177,15)" fg:x="949" fg:w="2"/><text x="83.2045%" y="255.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (2 samples, 0.17%)</title><rect x="82.9545%" y="229" width="0.1748%" height="15" fill="rgb(206,64,50)" fg:x="949" fg:w="2"/><text x="83.2045%" y="239.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.17%)</title><rect x="82.9545%" y="213" width="0.1748%" height="15" fill="rgb(234,36,40)" fg:x="949" fg:w="2"/><text x="83.2045%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.17%)</title><rect x="83.1294%" y="229" width="0.1748%" height="15" fill="rgb(213,64,8)" fg:x="951" fg:w="2"/><text x="83.3794%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.17%)</title><rect x="83.1294%" y="213" width="0.1748%" height="15" fill="rgb(210,75,36)" fg:x="951" fg:w="2"/><text x="83.3794%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="83.2168%" y="197" width="0.0874%" height="15" fill="rgb(229,88,21)" fg:x="952" fg:w="1"/><text x="83.4668%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (9 samples, 0.79%)</title><rect x="83.3042%" y="197" width="0.7867%" height="15" fill="rgb(252,204,47)" fg:x="953" fg:w="9"/><text x="83.5542%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (8 samples, 0.70%)</title><rect x="83.3916%" y="181" width="0.6993%" height="15" fill="rgb(208,77,27)" fg:x="954" fg:w="8"/><text x="83.6416%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="84.0035%" y="165" width="0.0874%" height="15" fill="rgb(221,76,26)" fg:x="961" fg:w="1"/><text x="84.2535%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::MetaBlockSplit&lt;Alloc&gt;::destroy (1 samples, 0.09%)</title><rect x="84.0909%" y="197" width="0.0874%" height="15" fill="rgb(225,139,18)" fg:x="962" fg:w="1"/><text x="84.3409%" y="207.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="84.0909%" y="181" width="0.0874%" height="15" fill="rgb(230,137,11)" fg:x="962" fg:w="1"/><text x="84.3409%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="84.1783%" y="181" width="0.0874%" height="15" fill="rgb(212,28,1)" fg:x="963" fg:w="1"/><text x="84.4283%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="84.1783%" y="165" width="0.0874%" height="15" fill="rgb(248,164,17)" fg:x="963" fg:w="1"/><text x="84.4283%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="84.1783%" y="149" width="0.0874%" height="15" fill="rgb(222,171,42)" fg:x="963" fg:w="1"/><text x="84.4283%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="84.2657%" y="181" width="0.0874%" height="15" fill="rgb(243,84,45)" fg:x="964" fg:w="1"/><text x="84.5157%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (3 samples, 0.26%)</title><rect x="84.1783%" y="197" width="0.2622%" height="15" fill="rgb(252,49,23)" fg:x="963" fg:w="3"/><text x="84.4283%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="84.3531%" y="181" width="0.0874%" height="15" fill="rgb(215,19,7)" fg:x="965" fg:w="1"/><text x="84.6031%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (17 samples, 1.49%)</title><rect x="83.1294%" y="245" width="1.4860%" height="15" fill="rgb(238,81,41)" fg:x="951" fg:w="17"/><text x="83.3794%" y="255.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (15 samples, 1.31%)</title><rect x="83.3042%" y="229" width="1.3112%" height="15" fill="rgb(210,199,37)" fg:x="953" fg:w="15"/><text x="83.5542%" y="239.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (15 samples, 1.31%)</title><rect x="83.3042%" y="213" width="1.3112%" height="15" fill="rgb(244,192,49)" fg:x="953" fg:w="15"/><text x="83.5542%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.17%)</title><rect x="84.4406%" y="197" width="0.1748%" height="15" fill="rgb(226,211,11)" fg:x="966" fg:w="2"/><text x="84.6906%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 0.44%)</title><rect x="84.6154%" y="213" width="0.4371%" height="15" fill="rgb(236,162,54)" fg:x="968" fg:w="5"/><text x="84.8654%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (3 samples, 0.26%)</title><rect x="84.7902%" y="197" width="0.2622%" height="15" fill="rgb(220,229,9)" fg:x="970" fg:w="3"/><text x="85.0402%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (32 samples, 2.80%)</title><rect x="82.3427%" y="309" width="2.7972%" height="15" fill="rgb(250,87,22)" fg:x="942" fg:w="32"/><text x="82.5927%" y="319.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (32 samples, 2.80%)</title><rect x="82.3427%" y="293" width="2.7972%" height="15" fill="rgb(239,43,17)" fg:x="942" fg:w="32"/><text x="82.5927%" y="303.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (32 samples, 2.80%)</title><rect x="82.3427%" y="277" width="2.7972%" height="15" fill="rgb(231,177,25)" fg:x="942" fg:w="32"/><text x="82.5927%" y="287.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (32 samples, 2.80%)</title><rect x="82.3427%" y="261" width="2.7972%" height="15" fill="rgb(219,179,1)" fg:x="942" fg:w="32"/><text x="82.5927%" y="271.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (6 samples, 0.52%)</title><rect x="84.6154%" y="245" width="0.5245%" height="15" fill="rgb(238,219,53)" fg:x="968" fg:w="6"/><text x="84.8654%" y="255.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.52%)</title><rect x="84.6154%" y="229" width="0.5245%" height="15" fill="rgb(232,167,36)" fg:x="968" fg:w="6"/><text x="84.8654%" y="239.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="85.0524%" y="213" width="0.0874%" height="15" fill="rgb(244,19,51)" fg:x="973" fg:w="1"/><text x="85.3024%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="85.0524%" y="197" width="0.0874%" height="15" fill="rgb(224,6,22)" fg:x="973" fg:w="1"/><text x="85.3024%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="85.0524%" y="181" width="0.0874%" height="15" fill="rgb(224,145,5)" fg:x="973" fg:w="1"/><text x="85.3024%" y="191.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (54 samples, 4.72%)</title><rect x="80.5070%" y="325" width="4.7203%" height="15" fill="rgb(234,130,49)" fg:x="921" fg:w="54"/><text x="80.7570%" y="335.50">nemscr..</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="85.1399%" y="309" width="0.0874%" height="15" fill="rgb(254,6,2)" fg:x="974" fg:w="1"/><text x="85.3899%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="85.1399%" y="293" width="0.0874%" height="15" fill="rgb(208,96,46)" fg:x="974" fg:w="1"/><text x="85.3899%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="85.1399%" y="277" width="0.0874%" height="15" fill="rgb(239,3,39)" fg:x="974" fg:w="1"/><text x="85.3899%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="85.1399%" y="261" width="0.0874%" height="15" fill="rgb(233,210,1)" fg:x="974" fg:w="1"/><text x="85.3899%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="85.1399%" y="245" width="0.0874%" height="15" fill="rgb(244,137,37)" fg:x="974" fg:w="1"/><text x="85.3899%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="85.1399%" y="229" width="0.0874%" height="15" fill="rgb(240,136,2)" fg:x="974" fg:w="1"/><text x="85.3899%" y="239.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="85.1399%" y="213" width="0.0874%" height="15" fill="rgb(239,18,37)" fg:x="974" fg:w="1"/><text x="85.3899%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.17%)</title><rect x="85.3147%" y="309" width="0.1748%" height="15" fill="rgb(218,185,22)" fg:x="976" fg:w="2"/><text x="85.5647%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (63 samples, 5.51%)</title><rect x="80.0699%" y="357" width="5.5070%" height="15" fill="rgb(225,218,4)" fg:x="916" fg:w="63"/><text x="80.3199%" y="367.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (63 samples, 5.51%)</title><rect x="80.0699%" y="341" width="5.5070%" height="15" fill="rgb(230,182,32)" fg:x="916" fg:w="63"/><text x="80.3199%" y="351.50">nemscra..</text></g><g><title>std::io::append_to_string (4 samples, 0.35%)</title><rect x="85.2273%" y="325" width="0.3497%" height="15" fill="rgb(242,56,43)" fg:x="975" fg:w="4"/><text x="85.4773%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="85.4895%" y="309" width="0.0874%" height="15" fill="rgb(233,99,24)" fg:x="978" fg:w="1"/><text x="85.7395%" y="319.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.09%)</title><rect x="86.1014%" y="309" width="0.0874%" height="15" fill="rgb(234,209,42)" fg:x="985" fg:w="1"/><text x="86.3514%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (10 samples, 0.87%)</title><rect x="86.1014%" y="325" width="0.8741%" height="15" fill="rgb(227,7,12)" fg:x="985" fg:w="10"/><text x="86.3514%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (9 samples, 0.79%)</title><rect x="86.1888%" y="309" width="0.7867%" height="15" fill="rgb(245,203,43)" fg:x="986" fg:w="9"/><text x="86.4388%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (8 samples, 0.70%)</title><rect x="86.2762%" y="293" width="0.6993%" height="15" fill="rgb(238,205,33)" fg:x="987" fg:w="8"/><text x="86.5262%" y="303.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.09%)</title><rect x="86.8881%" y="277" width="0.0874%" height="15" fill="rgb(231,56,7)" fg:x="994" fg:w="1"/><text x="87.1381%" y="287.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (58 samples, 5.07%)</title><rect x="87.4126%" y="261" width="5.0699%" height="15" fill="rgb(244,186,29)" fg:x="1000" fg:w="58"/><text x="87.6626%" y="271.50">zlib_r..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.09%)</title><rect x="92.4825%" y="261" width="0.0874%" height="15" fill="rgb(234,111,31)" fg:x="1058" fg:w="1"/><text x="92.7325%" y="271.50"></text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (2 samples, 0.17%)</title><rect x="92.5699%" y="261" width="0.1748%" height="15" fill="rgb(241,149,10)" fg:x="1059" fg:w="2"/><text x="92.8199%" y="271.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (67 samples, 5.86%)</title><rect x="86.9755%" y="309" width="5.8566%" height="15" fill="rgb(249,206,44)" fg:x="995" fg:w="67"/><text x="87.2255%" y="319.50">&lt;flate2..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (67 samples, 5.86%)</title><rect x="86.9755%" y="293" width="5.8566%" height="15" fill="rgb(251,153,30)" fg:x="995" fg:w="67"/><text x="87.2255%" y="303.50">&lt;flate2..</text></g><g><title>zlib_rs::inflate::inflate (67 samples, 5.86%)</title><rect x="86.9755%" y="277" width="5.8566%" height="15" fill="rgb(239,152,38)" fg:x="995" fg:w="67"/><text x="87.2255%" y="287.50">zlib_rs..</text></g><g><title>zlib_rs::inflate::writer::Writer::extend_from_window_runtime_dispatch (1 samples, 0.09%)</title><rect x="92.7448%" y="261" width="0.0874%" height="15" fill="rgb(249,139,47)" fg:x="1061" fg:w="1"/><text x="92.9948%" y="271.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (80 samples, 6.99%)</title><rect x="86.1014%" y="341" width="6.9930%" height="15" fill="rgb(244,64,35)" fg:x="985" fg:w="80"/><text x="86.3514%" y="351.50">&lt;zip::rea..</text></g><g><title>flate2::zio::read (70 samples, 6.12%)</title><rect x="86.9755%" y="325" width="6.1189%" height="15" fill="rgb(216,46,15)" fg:x="995" fg:w="70"/><text x="87.2255%" y="335.50">flate2::..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.26%)</title><rect x="92.8322%" y="309" width="0.2622%" height="15" fill="rgb(250,74,19)" fg:x="1062" fg:w="3"/><text x="93.0822%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_aligned (19 samples, 1.66%)</title><rect x="93.0944%" y="341" width="1.6608%" height="15" fill="rgb(249,42,33)" fg:x="1065" fg:w="19"/><text x="93.3444%" y="351.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,091 samples, 95.37%)</title><rect x="0.0000%" y="389" width="95.3671%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="399.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (1,068 samples, 93.36%)</title><rect x="2.0105%" y="373" width="93.3566%" height="15" fill="rgb(244,29,21)" fg:x="23" fg:w="1068"/><text x="2.2605%" y="383.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (112 samples, 9.79%)</title><rect x="85.5769%" y="357" width="9.7902%" height="15" fill="rgb(220,130,37)" fg:x="979" fg:w="112"/><text x="85.8269%" y="367.50">std::io::appen..</text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.61%)</title><rect x="94.7552%" y="341" width="0.6119%" height="15" fill="rgb(211,67,2)" fg:x="1084" fg:w="7"/><text x="95.0052%" y="351.50"></text></g><g><title>bench_zip_to_pa (1,092 samples, 95.45%)</title><rect x="0.0000%" y="549" width="95.4545%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="559.50">bench_zip_to_pa</text></g><g><title>_start (1,092 samples, 95.45%)</title><rect x="0.0000%" y="533" width="95.4545%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="543.50">_start</text></g><g><title>__libc_start_main (1,092 samples, 95.45%)</title><rect x="0.0000%" y="517" width="95.4545%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="527.50">__libc_start_main</text></g><g><title>main (1,092 samples, 95.45%)</title><rect x="0.0000%" y="501" width="95.4545%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="511.50">main</text></g><g><title>std::rt::lang_start_internal (1,092 samples, 95.45%)</title><rect x="0.0000%" y="485" width="95.4545%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="495.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,092 samples, 95.45%)</title><rect x="0.0000%" y="469" width="95.4545%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="479.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,092 samples, 95.45%)</title><rect x="0.0000%" y="453" width="95.4545%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="463.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,092 samples, 95.45%)</title><rect x="0.0000%" y="437" width="95.4545%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="447.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,092 samples, 95.45%)</title><rect x="0.0000%" y="421" width="95.4545%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="431.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,092 samples, 95.45%)</title><rect x="0.0000%" y="405" width="95.4545%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="1092"/><text x="0.2500%" y="415.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.09%)</title><rect x="95.3671%" y="389" width="0.0874%" height="15" fill="rgb(243,201,19)" fg:x="1091" fg:w="1"/><text x="95.6171%" y="399.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.09%)</title><rect x="95.3671%" y="373" width="0.0874%" height="15" fill="rgb(236,59,4)" fg:x="1091" fg:w="1"/><text x="95.6171%" y="383.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="95.3671%" y="357" width="0.0874%" height="15" fill="rgb(254,179,45)" fg:x="1091" fg:w="1"/><text x="95.6171%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.17%)</title><rect x="95.5420%" y="325" width="0.1748%" height="15" fill="rgb(226,14,10)" fg:x="1093" fg:w="2"/><text x="95.7920%" y="335.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="95.6294%" y="309" width="0.0874%" height="15" fill="rgb(244,27,41)" fg:x="1094" fg:w="1"/><text x="95.8794%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 0.26%)</title><rect x="95.5420%" y="357" width="0.2622%" height="15" fill="rgb(235,35,32)" fg:x="1093" fg:w="3"/><text x="95.7920%" y="367.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (3 samples, 0.26%)</title><rect x="95.5420%" y="341" width="0.2622%" height="15" fill="rgb(218,68,31)" fg:x="1093" fg:w="3"/><text x="95.7920%" y="351.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.09%)</title><rect x="95.7168%" y="325" width="0.0874%" height="15" fill="rgb(207,120,37)" fg:x="1095" fg:w="1"/><text x="95.9668%" y="335.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 0.09%)</title><rect x="95.7168%" y="309" width="0.0874%" height="15" fill="rgb(227,98,0)" fg:x="1095" fg:w="1"/><text x="95.9668%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.35%)</title><rect x="95.8042%" y="341" width="0.3497%" height="15" fill="rgb(207,7,3)" fg:x="1096" fg:w="4"/><text x="96.0542%" y="351.50"></text></g><g><title>syscall (4 samples, 0.35%)</title><rect x="95.8042%" y="325" width="0.3497%" height="15" fill="rgb(206,98,19)" fg:x="1096" fg:w="4"/><text x="96.0542%" y="335.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (5 samples, 0.44%)</title><rect x="96.1538%" y="341" width="0.4371%" height="15" fill="rgb(217,5,26)" fg:x="1100" fg:w="5"/><text x="96.4038%" y="351.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (5 samples, 0.44%)</title><rect x="96.1538%" y="325" width="0.4371%" height="15" fill="rgb(235,190,38)" fg:x="1100" fg:w="5"/><text x="96.4038%" y="335.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (5 samples, 0.44%)</title><rect x="96.1538%" y="309" width="0.4371%" height="15" fill="rgb(247,86,24)" fg:x="1100" fg:w="5"/><text x="96.4038%" y="319.50"></text></g><g><title>write (5 samples, 0.44%)</title><rect x="96.1538%" y="293" width="0.4371%" height="15" fill="rgb(205,101,16)" fg:x="1100" fg:w="5"/><text x="96.4038%" y="303.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.09%)</title><rect x="96.7657%" y="229" width="0.0874%" height="15" fill="rgb(246,168,33)" fg:x="1107" fg:w="1"/><text x="97.0157%" y="239.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="96.8531%" y="229" width="0.0874%" height="15" fill="rgb(231,114,1)" fg:x="1108" fg:w="1"/><text x="97.1031%" y="239.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.09%)</title><rect x="96.9406%" y="197" width="0.0874%" height="15" fill="rgb(207,184,53)" fg:x="1109" fg:w="1"/><text x="97.1906%" y="207.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="96.9406%" y="181" width="0.0874%" height="15" fill="rgb(224,95,51)" fg:x="1109" fg:w="1"/><text x="97.1906%" y="191.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (20 samples, 1.75%)</title><rect x="96.7657%" y="261" width="1.7483%" height="15" fill="rgb(212,188,45)" fg:x="1107" fg:w="20"/><text x="97.0157%" y="271.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (20 samples, 1.75%)</title><rect x="96.7657%" y="245" width="1.7483%" height="15" fill="rgb(223,154,38)" fg:x="1107" fg:w="20"/><text x="97.0157%" y="255.50"></text></g><g><title>tokio::runtime::park::wake (18 samples, 1.57%)</title><rect x="96.9406%" y="229" width="1.5734%" height="15" fill="rgb(251,22,52)" fg:x="1109" fg:w="18"/><text x="97.1906%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (18 samples, 1.57%)</title><rect x="96.9406%" y="213" width="1.5734%" height="15" fill="rgb(229,209,22)" fg:x="1109" fg:w="18"/><text x="97.1906%" y="223.50"></text></g><g><title>syscall (17 samples, 1.49%)</title><rect x="97.0280%" y="197" width="1.4860%" height="15" fill="rgb(234,138,34)" fg:x="1110" fg:w="17"/><text x="97.2780%" y="207.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (3 samples, 0.26%)</title><rect x="98.6888%" y="117" width="0.2622%" height="15" fill="rgb(212,95,11)" fg:x="1129" fg:w="3"/><text x="98.9388%" y="127.50"></text></g><g><title>rustls::msgs::base::Payload::read (2 samples, 0.17%)</title><rect x="98.7762%" y="101" width="0.1748%" height="15" fill="rgb(240,179,47)" fg:x="1130" fg:w="2"/><text x="99.0262%" y="111.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="98.8636%" y="85" width="0.0874%" height="15" fill="rgb(240,163,11)" fg:x="1131" fg:w="1"/><text x="99.1136%" y="95.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (4 samples, 0.35%)</title><rect x="98.6888%" y="149" width="0.3497%" height="15" fill="rgb(236,37,12)" fg:x="1129" fg:w="4"/><text x="98.9388%" y="159.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (4 samples, 0.35%)</title><rect x="98.6888%" y="133" width="0.3497%" height="15" fill="rgb(232,164,16)" fg:x="1129" fg:w="4"/><text x="98.9388%" y="143.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.09%)</title><rect x="98.9510%" y="117" width="0.0874%" height="15" fill="rgb(244,205,15)" fg:x="1132" fg:w="1"/><text x="99.2010%" y="127.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.09%)</title><rect x="98.9510%" y="101" width="0.0874%" height="15" fill="rgb(223,117,47)" fg:x="1132" fg:w="1"/><text x="99.2010%" y="111.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.09%)</title><rect x="98.9510%" y="85" width="0.0874%" height="15" fill="rgb(244,107,35)" fg:x="1132" fg:w="1"/><text x="99.2010%" y="95.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.09%)</title><rect x="98.9510%" y="69" width="0.0874%" height="15" fill="rgb(205,140,8)" fg:x="1132" fg:w="1"/><text x="99.2010%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.09%)</title><rect x="98.9510%" y="53" width="0.0874%" height="15" fill="rgb(228,84,46)" fg:x="1132" fg:w="1"/><text x="99.2010%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_hw_ctr32_encrypt_blocks (1 samples, 0.09%)</title><rect x="98.9510%" y="37" width="0.0874%" height="15" fill="rgb(254,188,9)" fg:x="1132" fg:w="1"/><text x="99.2010%" y="47.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (16 samples, 1.40%)</title><rect x="98.5140%" y="261" width="1.3986%" height="15" fill="rgb(206,112,54)" fg:x="1127" fg:w="16"/><text x="98.7640%" y="271.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (16 samples, 1.40%)</title><rect x="98.5140%" y="245" width="1.3986%" height="15" fill="rgb(216,84,49)" fg:x="1127" fg:w="16"/><text x="98.7640%" y="255.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (16 samples, 1.40%)</title><rect x="98.5140%" y="229" width="1.3986%" height="15" fill="rgb(214,194,35)" fg:x="1127" fg:w="16"/><text x="98.7640%" y="239.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (16 samples, 1.40%)</title><rect x="98.5140%" y="213" width="1.3986%" height="15" fill="rgb(249,28,3)" fg:x="1127" fg:w="16"/><text x="98.7640%" y="223.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (16 samples, 1.40%)</title><rect x="98.5140%" y="197" width="1.3986%" height="15" fill="rgb(222,56,52)" fg:x="1127" fg:w="16"/><text x="98.7640%" y="207.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (16 samples, 1.40%)</title><rect x="98.5140%" y="181" width="1.3986%" height="15" fill="rgb(245,217,50)" fg:x="1127" fg:w="16"/><text x="98.7640%" y="191.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (14 samples, 1.22%)</title><rect x="98.6888%" y="165" width="1.2238%" height="15" fill="rgb(213,201,24)" fg:x="1129" fg:w="14"/><text x="98.9388%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (10 samples, 0.87%)</title><rect x="99.0385%" y="149" width="0.8741%" height="15" fill="rgb(248,116,28)" fg:x="1133" fg:w="10"/><text x="99.2885%" y="159.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (10 samples, 0.87%)</title><rect x="99.0385%" y="133" width="0.8741%" height="15" fill="rgb(219,72,43)" fg:x="1133" fg:w="10"/><text x="99.2885%" y="143.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.70%)</title><rect x="99.2133%" y="117" width="0.6993%" height="15" fill="rgb(209,138,14)" fg:x="1135" fg:w="8"/><text x="99.4633%" y="127.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (8 samples, 0.70%)</title><rect x="99.2133%" y="101" width="0.6993%" height="15" fill="rgb(222,18,33)" fg:x="1135" fg:w="8"/><text x="99.4633%" y="111.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (8 samples, 0.70%)</title><rect x="99.2133%" y="85" width="0.6993%" height="15" fill="rgb(213,199,7)" fg:x="1135" fg:w="8"/><text x="99.4633%" y="95.50"></text></g><g><title>recv (7 samples, 0.61%)</title><rect x="99.3007%" y="69" width="0.6119%" height="15" fill="rgb(250,110,10)" fg:x="1136" fg:w="7"/><text x="99.5507%" y="79.50"></text></g><g><title>all (1,144 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(248,123,6)" fg:x="0" fg:w="1144"/><text x="0.2500%" y="575.50"></text></g><g><title>tokio-runtime-w (52 samples, 4.55%)</title><rect x="95.4545%" y="549" width="4.5455%" height="15" fill="rgb(206,91,31)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="559.50">tokio..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (52 samples, 4.55%)</title><rect x="95.4545%" y="533" width="4.5455%" height="15" fill="rgb(211,154,13)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="543.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (52 samples, 4.55%)</title><rect x="95.4545%" y="517" width="4.5455%" height="15" fill="rgb(225,148,7)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="527.50">core:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (52 samples, 4.55%)</title><rect x="95.4545%" y="501" width="4.5455%" height="15" fill="rgb(220,160,43)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="511.50">std::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (52 samples, 4.55%)</title><rect x="95.4545%" y="485" width="4.5455%" height="15" fill="rgb(213,52,39)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="495.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (52 samples, 4.55%)</title><rect x="95.4545%" y="469" width="4.5455%" height="15" fill="rgb(243,137,7)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="479.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (52 samples, 4.55%)</title><rect x="95.4545%" y="453" width="4.5455%" height="15" fill="rgb(230,79,13)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="463.50">tokio..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (52 samples, 4.55%)</title><rect x="95.4545%" y="437" width="4.5455%" height="15" fill="rgb(247,105,23)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="447.50">&lt;toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (52 samples, 4.55%)</title><rect x="95.4545%" y="421" width="4.5455%" height="15" fill="rgb(223,179,41)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="431.50">tokio..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (52 samples, 4.55%)</title><rect x="95.4545%" y="405" width="4.5455%" height="15" fill="rgb(218,9,34)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="415.50">tokio..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (52 samples, 4.55%)</title><rect x="95.4545%" y="389" width="4.5455%" height="15" fill="rgb(222,106,8)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="399.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (52 samples, 4.55%)</title><rect x="95.4545%" y="373" width="4.5455%" height="15" fill="rgb(211,220,0)" fg:x="1092" fg:w="52"/><text x="95.7045%" y="383.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (48 samples, 4.20%)</title><rect x="95.8042%" y="357" width="4.1958%" height="15" fill="rgb(229,52,16)" fg:x="1096" fg:w="48"/><text x="96.0542%" y="367.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (39 samples, 3.41%)</title><rect x="96.5909%" y="341" width="3.4091%" height="15" fill="rgb(212,155,18)" fg:x="1105" fg:w="39"/><text x="96.8409%" y="351.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (39 samples, 3.41%)</title><rect x="96.5909%" y="325" width="3.4091%" height="15" fill="rgb(242,21,14)" fg:x="1105" fg:w="39"/><text x="96.8409%" y="335.50">tok..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (39 samples, 3.41%)</title><rect x="96.5909%" y="309" width="3.4091%" height="15" fill="rgb(222,19,48)" fg:x="1105" fg:w="39"/><text x="96.8409%" y="319.50">&lt;fu..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (39 samples, 3.41%)</title><rect x="96.5909%" y="293" width="3.4091%" height="15" fill="rgb(232,45,27)" fg:x="1105" fg:w="39"/><text x="96.8409%" y="303.50">&lt;hy..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (39 samples, 3.41%)</title><rect x="96.5909%" y="277" width="3.4091%" height="15" fill="rgb(249,103,42)" fg:x="1105" fg:w="39"/><text x="96.8409%" y="287.50">hyp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (1 samples, 0.09%)</title><rect x="99.9126%" y="261" width="0.0874%" height="15" fill="rgb(246,81,33)" fg:x="1143" fg:w="1"/><text x="100.1626%" y="271.50"></text></g></svg></svg>