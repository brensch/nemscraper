<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1049"><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.57%)</title><rect x="0.5720%" y="229" width="0.5720%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="6"/><text x="0.8220%" y="239.50"></text></g><g><title>syscall (6 samples, 0.57%)</title><rect x="0.5720%" y="213" width="0.5720%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="6"/><text x="0.8220%" y="223.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (1 samples, 0.10%)</title><rect x="1.1439%" y="229" width="0.0953%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="1"/><text x="1.3939%" y="239.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.86%)</title><rect x="0.5720%" y="389" width="0.8580%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="9"/><text x="0.8220%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (9 samples, 0.86%)</title><rect x="0.5720%" y="373" width="0.8580%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="9"/><text x="0.8220%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (9 samples, 0.86%)</title><rect x="0.5720%" y="357" width="0.8580%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="9"/><text x="0.8220%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (9 samples, 0.86%)</title><rect x="0.5720%" y="341" width="0.8580%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="9"/><text x="0.8220%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (9 samples, 0.86%)</title><rect x="0.5720%" y="325" width="0.8580%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="9"/><text x="0.8220%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.86%)</title><rect x="0.5720%" y="309" width="0.8580%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="9"/><text x="0.8220%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (9 samples, 0.86%)</title><rect x="0.5720%" y="293" width="0.8580%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="9"/><text x="0.8220%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (9 samples, 0.86%)</title><rect x="0.5720%" y="277" width="0.8580%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="9"/><text x="0.8220%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (9 samples, 0.86%)</title><rect x="0.5720%" y="261" width="0.8580%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="9"/><text x="0.8220%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (9 samples, 0.86%)</title><rect x="0.5720%" y="245" width="0.8580%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="9"/><text x="0.8220%" y="255.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (2 samples, 0.19%)</title><rect x="1.2393%" y="229" width="0.1907%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="2"/><text x="1.4893%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (2 samples, 0.19%)</title><rect x="1.2393%" y="213" width="0.1907%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="2"/><text x="1.4893%" y="223.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (2 samples, 0.19%)</title><rect x="1.2393%" y="197" width="0.1907%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="2"/><text x="1.4893%" y="207.50"></text></g><g><title>write (2 samples, 0.19%)</title><rect x="1.2393%" y="181" width="0.1907%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="2"/><text x="1.4893%" y="191.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.10%)</title><rect x="1.4299%" y="389" width="0.0953%" height="15" fill="rgb(210,31,41)" fg:x="15" fg:w="1"/><text x="1.6799%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.10%)</title><rect x="1.4299%" y="373" width="0.0953%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="1"/><text x="1.6799%" y="383.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.10%)</title><rect x="1.9066%" y="341" width="0.0953%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="1"/><text x="2.1566%" y="351.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.10%)</title><rect x="1.9066%" y="325" width="0.0953%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="1"/><text x="2.1566%" y="335.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.10%)</title><rect x="1.9066%" y="309" width="0.0953%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="1"/><text x="2.1566%" y="319.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.10%)</title><rect x="1.9066%" y="293" width="0.0953%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="2.1566%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.10%)</title><rect x="2.0019%" y="341" width="0.0953%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="2.2519%" y="351.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.10%)</title><rect x="2.0019%" y="325" width="0.0953%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="2.2519%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (1 samples, 0.10%)</title><rect x="2.0972%" y="341" width="0.0953%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="1"/><text x="2.3472%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.10%)</title><rect x="2.0972%" y="325" width="0.0953%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="2.3472%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.10%)</title><rect x="2.0972%" y="309" width="0.0953%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="2.3472%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.10%)</title><rect x="2.0972%" y="293" width="0.0953%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="2.3472%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.10%)</title><rect x="2.0972%" y="277" width="0.0953%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="1"/><text x="2.3472%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="2.0972%" y="261" width="0.0953%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="1"/><text x="2.3472%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.10%)</title><rect x="2.0972%" y="245" width="0.0953%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="1"/><text x="2.3472%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.10%)</title><rect x="2.0972%" y="229" width="0.0953%" height="15" fill="rgb(213,181,19)" fg:x="22" fg:w="1"/><text x="2.3472%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.10%)</title><rect x="2.0972%" y="213" width="0.0953%" height="15" fill="rgb(254,191,54)" fg:x="22" fg:w="1"/><text x="2.3472%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="2.0972%" y="197" width="0.0953%" height="15" fill="rgb(241,83,37)" fg:x="22" fg:w="1"/><text x="2.3472%" y="207.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (4 samples, 0.38%)</title><rect x="1.9066%" y="373" width="0.3813%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="4"/><text x="2.1566%" y="383.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (4 samples, 0.38%)</title><rect x="1.9066%" y="357" width="0.3813%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="4"/><text x="2.1566%" y="367.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.10%)</title><rect x="2.1926%" y="341" width="0.0953%" height="15" fill="rgb(245,192,40)" fg:x="23" fg:w="1"/><text x="2.4426%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.10%)</title><rect x="2.1926%" y="325" width="0.0953%" height="15" fill="rgb(238,167,29)" fg:x="23" fg:w="1"/><text x="2.4426%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.10%)</title><rect x="2.1926%" y="309" width="0.0953%" height="15" fill="rgb(232,182,51)" fg:x="23" fg:w="1"/><text x="2.4426%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.10%)</title><rect x="2.1926%" y="293" width="0.0953%" height="15" fill="rgb(231,60,39)" fg:x="23" fg:w="1"/><text x="2.4426%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.10%)</title><rect x="2.1926%" y="277" width="0.0953%" height="15" fill="rgb(208,69,12)" fg:x="23" fg:w="1"/><text x="2.4426%" y="287.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="2.1926%" y="261" width="0.0953%" height="15" fill="rgb(235,93,37)" fg:x="23" fg:w="1"/><text x="2.4426%" y="271.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="2.1926%" y="245" width="0.0953%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="1"/><text x="2.4426%" y="255.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="2.1926%" y="229" width="0.0953%" height="15" fill="rgb(222,207,29)" fg:x="23" fg:w="1"/><text x="2.4426%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="2.1926%" y="213" width="0.0953%" height="15" fill="rgb(206,96,30)" fg:x="23" fg:w="1"/><text x="2.4426%" y="223.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="2.1926%" y="197" width="0.0953%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="1"/><text x="2.4426%" y="207.50"></text></g><g><title>malloc (14 samples, 1.33%)</title><rect x="2.3832%" y="357" width="1.3346%" height="15" fill="rgb(250,191,14)" fg:x="25" fg:w="14"/><text x="2.6332%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (16 samples, 1.53%)</title><rect x="8.1983%" y="293" width="1.5253%" height="15" fill="rgb(239,60,40)" fg:x="86" fg:w="16"/><text x="8.4483%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 1.53%)</title><rect x="8.1983%" y="277" width="1.5253%" height="15" fill="rgb(206,27,48)" fg:x="86" fg:w="16"/><text x="8.4483%" y="287.50"></text></g><g><title>__libc_realloc (16 samples, 1.53%)</title><rect x="8.1983%" y="261" width="1.5253%" height="15" fill="rgb(225,35,8)" fg:x="86" fg:w="16"/><text x="8.4483%" y="271.50"></text></g><g><title>__default_morecore (1 samples, 0.10%)</title><rect x="9.6282%" y="245" width="0.0953%" height="15" fill="rgb(250,213,24)" fg:x="101" fg:w="1"/><text x="9.8782%" y="255.50"></text></g><g><title>__sbrk (1 samples, 0.10%)</title><rect x="9.6282%" y="229" width="0.0953%" height="15" fill="rgb(247,123,22)" fg:x="101" fg:w="1"/><text x="9.8782%" y="239.50"></text></g><g><title>brk (1 samples, 0.10%)</title><rect x="9.6282%" y="213" width="0.0953%" height="15" fill="rgb(231,138,38)" fg:x="101" fg:w="1"/><text x="9.8782%" y="223.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (109 samples, 10.39%)</title><rect x="5.7197%" y="325" width="10.3908%" height="15" fill="rgb(231,145,46)" fg:x="60" fg:w="109"/><text x="5.9697%" y="335.50">arrow_csv::read..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (109 samples, 10.39%)</title><rect x="5.7197%" y="309" width="10.3908%" height="15" fill="rgb(251,118,11)" fg:x="60" fg:w="109"/><text x="5.9697%" y="319.50">arrow_csv::read..</text></g><g><title>csv_core::reader::Reader::read_record (67 samples, 6.39%)</title><rect x="9.7235%" y="293" width="6.3870%" height="15" fill="rgb(217,147,25)" fg:x="102" fg:w="67"/><text x="9.9735%" y="303.50">csv_core..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.10%)</title><rect x="16.1106%" y="309" width="0.0953%" height="15" fill="rgb(247,81,37)" fg:x="169" fg:w="1"/><text x="16.3606%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="16.1106%" y="293" width="0.0953%" height="15" fill="rgb(209,12,38)" fg:x="169" fg:w="1"/><text x="16.3606%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (196 samples, 18.68%)</title><rect x="5.0524%" y="341" width="18.6845%" height="15" fill="rgb(227,1,9)" fg:x="53" fg:w="196"/><text x="5.3024%" y="351.50">arrow_csv::reader::BufReader&lt;..</text></g><g><title>arrow_csv::reader::Decoder::flush (80 samples, 7.63%)</title><rect x="16.1106%" y="325" width="7.6263%" height="15" fill="rgb(248,47,43)" fg:x="169" fg:w="80"/><text x="16.3606%" y="335.50">arrow_csv:..</text></g><g><title>core::iter::adapters::try_process (79 samples, 7.53%)</title><rect x="16.2059%" y="309" width="7.5310%" height="15" fill="rgb(221,10,30)" fg:x="170" fg:w="79"/><text x="16.4559%" y="319.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (79 samples, 7.53%)</title><rect x="16.2059%" y="293" width="7.5310%" height="15" fill="rgb(210,229,1)" fg:x="170" fg:w="79"/><text x="16.4559%" y="303.50">&lt;alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (79 samples, 7.53%)</title><rect x="16.2059%" y="277" width="7.5310%" height="15" fill="rgb(222,148,37)" fg:x="170" fg:w="79"/><text x="16.4559%" y="287.50">&lt;core::ite..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (79 samples, 7.53%)</title><rect x="16.2059%" y="261" width="7.5310%" height="15" fill="rgb(234,67,33)" fg:x="170" fg:w="79"/><text x="16.4559%" y="271.50">&lt;arrow_arr..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (54 samples, 5.15%)</title><rect x="18.5891%" y="245" width="5.1478%" height="15" fill="rgb(247,98,35)" fg:x="195" fg:w="54"/><text x="18.8391%" y="255.50">arrow_..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (8 samples, 0.76%)</title><rect x="22.9743%" y="229" width="0.7626%" height="15" fill="rgb(247,138,52)" fg:x="241" fg:w="8"/><text x="23.2243%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (8 samples, 0.76%)</title><rect x="22.9743%" y="213" width="0.7626%" height="15" fill="rgb(213,79,30)" fg:x="241" fg:w="8"/><text x="23.2243%" y="223.50"></text></g><g><title>cfree (15 samples, 1.43%)</title><rect x="23.7369%" y="341" width="1.4299%" height="15" fill="rgb(246,177,23)" fg:x="249" fg:w="15"/><text x="23.9869%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (3 samples, 0.29%)</title><rect x="25.1668%" y="341" width="0.2860%" height="15" fill="rgb(230,62,27)" fg:x="264" fg:w="3"/><text x="25.4168%" y="351.50"></text></g><g><title>cfree (3 samples, 0.29%)</title><rect x="25.1668%" y="325" width="0.2860%" height="15" fill="rgb(216,154,8)" fg:x="264" fg:w="3"/><text x="25.4168%" y="335.50"></text></g><g><title>__default_morecore (3 samples, 0.29%)</title><rect x="25.1668%" y="309" width="0.2860%" height="15" fill="rgb(244,35,45)" fg:x="264" fg:w="3"/><text x="25.4168%" y="319.50"></text></g><g><title>__sbrk (3 samples, 0.29%)</title><rect x="25.1668%" y="293" width="0.2860%" height="15" fill="rgb(251,115,12)" fg:x="264" fg:w="3"/><text x="25.4168%" y="303.50"></text></g><g><title>brk (3 samples, 0.29%)</title><rect x="25.1668%" y="277" width="0.2860%" height="15" fill="rgb(240,54,50)" fg:x="264" fg:w="3"/><text x="25.4168%" y="287.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.19%)</title><rect x="27.3594%" y="325" width="0.1907%" height="15" fill="rgb(233,84,52)" fg:x="287" fg:w="2"/><text x="27.6094%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.19%)</title><rect x="27.3594%" y="309" width="0.1907%" height="15" fill="rgb(207,117,47)" fg:x="287" fg:w="2"/><text x="27.6094%" y="319.50"></text></g><g><title>cfree (16 samples, 1.53%)</title><rect x="27.5500%" y="325" width="1.5253%" height="15" fill="rgb(249,43,39)" fg:x="289" fg:w="16"/><text x="27.8000%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (29 samples, 2.76%)</title><rect x="29.0753%" y="325" width="2.7645%" height="15" fill="rgb(209,38,44)" fg:x="305" fg:w="29"/><text x="29.3253%" y="335.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (13 samples, 1.24%)</title><rect x="30.6006%" y="309" width="1.2393%" height="15" fill="rgb(236,212,23)" fg:x="321" fg:w="13"/><text x="30.8506%" y="319.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (6 samples, 0.57%)</title><rect x="32.9838%" y="309" width="0.5720%" height="15" fill="rgb(242,79,21)" fg:x="346" fg:w="6"/><text x="33.2338%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (8 samples, 0.76%)</title><rect x="33.5558%" y="309" width="0.7626%" height="15" fill="rgb(211,96,35)" fg:x="352" fg:w="8"/><text x="33.8058%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.10%)</title><rect x="34.2231%" y="293" width="0.0953%" height="15" fill="rgb(253,215,40)" fg:x="359" fg:w="1"/><text x="34.4731%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (27 samples, 2.57%)</title><rect x="31.8398%" y="325" width="2.5739%" height="15" fill="rgb(211,81,21)" fg:x="334" fg:w="27"/><text x="32.0898%" y="335.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="34.3184%" y="309" width="0.0953%" height="15" fill="rgb(208,190,38)" fg:x="360" fg:w="1"/><text x="34.5684%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (13 samples, 1.24%)</title><rect x="35.6530%" y="309" width="1.2393%" height="15" fill="rgb(235,213,38)" fg:x="374" fg:w="13"/><text x="35.9030%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (140 samples, 13.35%)</title><rect x="25.4528%" y="341" width="13.3460%" height="15" fill="rgb(237,122,38)" fg:x="267" fg:w="140"/><text x="25.7028%" y="351.50">nemscraper::process:..</text></g><g><title>nemscraper::process::utils::clean_str (46 samples, 4.39%)</title><rect x="34.4137%" y="325" width="4.3851%" height="15" fill="rgb(244,218,35)" fg:x="361" fg:w="46"/><text x="34.6637%" y="335.50">nemsc..</text></g><g><title>malloc (20 samples, 1.91%)</title><rect x="36.8923%" y="309" width="1.9066%" height="15" fill="rgb(240,68,47)" fg:x="387" fg:w="20"/><text x="37.1423%" y="319.50">m..</text></g><g><title>core::ptr::drop_in_place&lt;parquet::arrow::arrow_writer::ArrowWriter&lt;std::fs::File&gt;&gt; (1 samples, 0.10%)</title><rect x="38.7989%" y="325" width="0.0953%" height="15" fill="rgb(210,16,53)" fg:x="407" fg:w="1"/><text x="39.0489%" y="335.50"></text></g><g><title>__close (1 samples, 0.10%)</title><rect x="38.7989%" y="309" width="0.0953%" height="15" fill="rgb(235,124,12)" fg:x="407" fg:w="1"/><text x="39.0489%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.10%)</title><rect x="38.8942%" y="309" width="0.0953%" height="15" fill="rgb(224,169,11)" fg:x="408" fg:w="1"/><text x="39.1442%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;parquet::file::metadata::ColumnChunkMetaData&gt; (1 samples, 0.10%)</title><rect x="38.8942%" y="293" width="0.0953%" height="15" fill="rgb(250,166,2)" fg:x="408" fg:w="1"/><text x="39.1442%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.10%)</title><rect x="38.8942%" y="277" width="0.0953%" height="15" fill="rgb(242,216,29)" fg:x="408" fg:w="1"/><text x="39.1442%" y="287.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="38.9895%" y="165" width="0.0953%" height="15" fill="rgb(230,116,27)" fg:x="409" fg:w="1"/><text x="39.2395%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (3 samples, 0.29%)</title><rect x="39.1802%" y="117" width="0.2860%" height="15" fill="rgb(228,99,48)" fg:x="411" fg:w="3"/><text x="39.4302%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (2 samples, 0.19%)</title><rect x="39.2755%" y="101" width="0.1907%" height="15" fill="rgb(253,11,6)" fg:x="412" fg:w="2"/><text x="39.5255%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (4 samples, 0.38%)</title><rect x="39.1802%" y="149" width="0.3813%" height="15" fill="rgb(247,143,39)" fg:x="411" fg:w="4"/><text x="39.4302%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (4 samples, 0.38%)</title><rect x="39.1802%" y="133" width="0.3813%" height="15" fill="rgb(236,97,10)" fg:x="411" fg:w="4"/><text x="39.4302%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="39.4662%" y="117" width="0.0953%" height="15" fill="rgb(233,208,19)" fg:x="414" fg:w="1"/><text x="39.7162%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.10%)</title><rect x="39.5615%" y="149" width="0.0953%" height="15" fill="rgb(216,164,2)" fg:x="415" fg:w="1"/><text x="39.8115%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (7 samples, 0.67%)</title><rect x="39.0848%" y="165" width="0.6673%" height="15" fill="rgb(220,129,5)" fg:x="410" fg:w="7"/><text x="39.3348%" y="175.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="39.6568%" y="149" width="0.0953%" height="15" fill="rgb(242,17,10)" fg:x="416" fg:w="1"/><text x="39.9068%" y="159.50"></text></g><g><title>brotli::enc::encode::hasher_setup (3 samples, 0.29%)</title><rect x="39.7521%" y="165" width="0.2860%" height="15" fill="rgb(242,107,0)" fg:x="417" fg:w="3"/><text x="40.0021%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (12 samples, 1.14%)</title><rect x="38.9895%" y="213" width="1.1439%" height="15" fill="rgb(251,28,31)" fg:x="409" fg:w="12"/><text x="39.2395%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (12 samples, 1.14%)</title><rect x="38.9895%" y="197" width="1.1439%" height="15" fill="rgb(233,223,10)" fg:x="409" fg:w="12"/><text x="39.2395%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (12 samples, 1.14%)</title><rect x="38.9895%" y="181" width="1.1439%" height="15" fill="rgb(215,21,27)" fg:x="409" fg:w="12"/><text x="39.2395%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.10%)</title><rect x="40.0381%" y="165" width="0.0953%" height="15" fill="rgb(232,23,21)" fg:x="420" fg:w="1"/><text x="40.2881%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.10%)</title><rect x="40.0381%" y="149" width="0.0953%" height="15" fill="rgb(244,5,23)" fg:x="420" fg:w="1"/><text x="40.2881%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.10%)</title><rect x="40.1335%" y="213" width="0.0953%" height="15" fill="rgb(226,81,46)" fg:x="421" fg:w="1"/><text x="40.3835%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.10%)</title><rect x="40.1335%" y="197" width="0.0953%" height="15" fill="rgb(247,70,30)" fg:x="421" fg:w="1"/><text x="40.3835%" y="207.50"></text></g><g><title>parquet::column::page::CompressedPage::to_thrift_header (1 samples, 0.10%)</title><rect x="40.1335%" y="181" width="0.0953%" height="15" fill="rgb(212,68,19)" fg:x="421" fg:w="1"/><text x="40.3835%" y="191.50"></text></g><g><title>parquet::file::statistics::to_thrift (1 samples, 0.10%)</title><rect x="40.1335%" y="165" width="0.0953%" height="15" fill="rgb(240,187,13)" fg:x="421" fg:w="1"/><text x="40.3835%" y="175.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="40.1335%" y="149" width="0.0953%" height="15" fill="rgb(223,113,26)" fg:x="421" fg:w="1"/><text x="40.3835%" y="159.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_dict_page (1 samples, 0.10%)</title><rect x="40.2288%" y="197" width="0.0953%" height="15" fill="rgb(206,192,2)" fg:x="422" fg:w="1"/><text x="40.4788%" y="207.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="40.2288%" y="181" width="0.0953%" height="15" fill="rgb(241,108,4)" fg:x="422" fg:w="1"/><text x="40.4788%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.10%)</title><rect x="47.9504%" y="149" width="0.0953%" height="15" fill="rgb(247,173,49)" fg:x="503" fg:w="1"/><text x="48.2004%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (74 samples, 7.05%)</title><rect x="41.4681%" y="165" width="7.0543%" height="15" fill="rgb(224,114,35)" fg:x="435" fg:w="74"/><text x="41.7181%" y="175.50">&lt;brotli::..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (5 samples, 0.48%)</title><rect x="48.0458%" y="149" width="0.4766%" height="15" fill="rgb(245,159,27)" fg:x="504" fg:w="5"/><text x="48.2958%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (86 samples, 8.20%)</title><rect x="40.8008%" y="181" width="8.1983%" height="15" fill="rgb(245,172,44)" fg:x="428" fg:w="86"/><text x="41.0508%" y="191.50">brotli::enc..</text></g><g><title>brotli::enc::command::Command::init (5 samples, 0.48%)</title><rect x="48.5224%" y="165" width="0.4766%" height="15" fill="rgb(236,23,11)" fg:x="509" fg:w="5"/><text x="48.7724%" y="175.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (26 samples, 2.48%)</title><rect x="48.9990%" y="181" width="2.4786%" height="15" fill="rgb(205,117,38)" fg:x="514" fg:w="26"/><text x="49.2490%" y="191.50">br..</text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (24 samples, 2.29%)</title><rect x="49.1897%" y="165" width="2.2879%" height="15" fill="rgb(237,72,25)" fg:x="516" fg:w="24"/><text x="49.4397%" y="175.50">b..</text></g><g><title>brotli::enc::encode::hasher_setup (3 samples, 0.29%)</title><rect x="51.4776%" y="181" width="0.2860%" height="15" fill="rgb(244,70,9)" fg:x="540" fg:w="3"/><text x="51.7276%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (28 samples, 2.67%)</title><rect x="51.7636%" y="165" width="2.6692%" height="15" fill="rgb(217,125,39)" fg:x="543" fg:w="28"/><text x="52.0136%" y="175.50">br..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (25 samples, 2.38%)</title><rect x="52.0496%" y="149" width="2.3832%" height="15" fill="rgb(235,36,10)" fg:x="546" fg:w="25"/><text x="52.2996%" y="159.50">&lt;b..</text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.19%)</title><rect x="54.6235%" y="149" width="0.1907%" height="15" fill="rgb(251,123,47)" fg:x="573" fg:w="2"/><text x="54.8735%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.19%)</title><rect x="54.6235%" y="133" width="0.1907%" height="15" fill="rgb(221,13,13)" fg:x="573" fg:w="2"/><text x="54.8735%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (2 samples, 0.19%)</title><rect x="54.6235%" y="117" width="0.1907%" height="15" fill="rgb(238,131,9)" fg:x="573" fg:w="2"/><text x="54.8735%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.10%)</title><rect x="54.7188%" y="101" width="0.0953%" height="15" fill="rgb(211,50,8)" fg:x="574" fg:w="1"/><text x="54.9688%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (6 samples, 0.57%)</title><rect x="54.8141%" y="149" width="0.5720%" height="15" fill="rgb(245,182,24)" fg:x="575" fg:w="6"/><text x="55.0641%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (2 samples, 0.19%)</title><rect x="55.3861%" y="149" width="0.1907%" height="15" fill="rgb(242,14,37)" fg:x="581" fg:w="2"/><text x="55.6361%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (15 samples, 1.43%)</title><rect x="54.4328%" y="165" width="1.4299%" height="15" fill="rgb(246,228,12)" fg:x="571" fg:w="15"/><text x="54.6828%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (3 samples, 0.29%)</title><rect x="55.5767%" y="149" width="0.2860%" height="15" fill="rgb(213,55,15)" fg:x="583" fg:w="3"/><text x="55.8267%" y="159.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::inject_flush_or_push_output (2 samples, 0.19%)</title><rect x="55.8627%" y="165" width="0.1907%" height="15" fill="rgb(209,9,3)" fg:x="586" fg:w="2"/><text x="56.1127%" y="175.50"></text></g><g><title>brotli::enc::encode::DecideOverLiteralContextModeling (1 samples, 0.10%)</title><rect x="56.0534%" y="165" width="0.0953%" height="15" fill="rgb(230,59,30)" fg:x="588" fg:w="1"/><text x="56.3034%" y="175.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (185 samples, 17.64%)</title><rect x="38.9895%" y="229" width="17.6358%" height="15" fill="rgb(209,121,21)" fg:x="409" fg:w="185"/><text x="39.2395%" y="239.50">parquet::column::writer::Co..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (172 samples, 16.40%)</title><rect x="40.2288%" y="213" width="16.3966%" height="15" fill="rgb(220,109,13)" fg:x="422" fg:w="172"/><text x="40.4788%" y="223.50">parquet::column::writer::..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (171 samples, 16.30%)</title><rect x="40.3241%" y="197" width="16.3012%" height="15" fill="rgb(232,18,1)" fg:x="423" fg:w="171"/><text x="40.5741%" y="207.50">&lt;parquet::compression::br..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (51 samples, 4.86%)</title><rect x="51.7636%" y="181" width="4.8618%" height="15" fill="rgb(215,41,42)" fg:x="543" fg:w="51"/><text x="52.0136%" y="191.50">brotli..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (5 samples, 0.48%)</title><rect x="56.1487%" y="165" width="0.4766%" height="15" fill="rgb(224,123,36)" fg:x="589" fg:w="5"/><text x="56.3987%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.10%)</title><rect x="56.6254%" y="213" width="0.0953%" height="15" fill="rgb(240,125,3)" fg:x="594" fg:w="1"/><text x="56.8754%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="56.6254%" y="197" width="0.0953%" height="15" fill="rgb(205,98,50)" fg:x="594" fg:w="1"/><text x="56.8754%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="56.6254%" y="181" width="0.0953%" height="15" fill="rgb(205,185,37)" fg:x="594" fg:w="1"/><text x="56.8754%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="56.6254%" y="165" width="0.0953%" height="15" fill="rgb(238,207,15)" fg:x="594" fg:w="1"/><text x="56.8754%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="56.6254%" y="149" width="0.0953%" height="15" fill="rgb(213,199,42)" fg:x="594" fg:w="1"/><text x="56.8754%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (3 samples, 0.29%)</title><rect x="56.7207%" y="149" width="0.2860%" height="15" fill="rgb(235,201,11)" fg:x="595" fg:w="3"/><text x="56.9707%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.10%)</title><rect x="56.9113%" y="133" width="0.0953%" height="15" fill="rgb(207,46,11)" fg:x="597" fg:w="1"/><text x="57.1613%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (4 samples, 0.38%)</title><rect x="56.7207%" y="165" width="0.3813%" height="15" fill="rgb(241,35,35)" fg:x="595" fg:w="4"/><text x="56.9707%" y="175.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.10%)</title><rect x="57.0067%" y="149" width="0.0953%" height="15" fill="rgb(243,32,47)" fg:x="598" fg:w="1"/><text x="57.2567%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (191 samples, 18.21%)</title><rect x="38.9895%" y="309" width="18.2078%" height="15" fill="rgb(247,202,23)" fg:x="409" fg:w="191"/><text x="39.2395%" y="319.50">parquet::arrow::arrow_writer..</text></g><g><title>core::iter::adapters::try_process (191 samples, 18.21%)</title><rect x="38.9895%" y="293" width="18.2078%" height="15" fill="rgb(219,102,11)" fg:x="409" fg:w="191"/><text x="39.2395%" y="303.50">core::iter::adapters::try_pr..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (191 samples, 18.21%)</title><rect x="38.9895%" y="277" width="18.2078%" height="15" fill="rgb(243,110,44)" fg:x="409" fg:w="191"/><text x="39.2395%" y="287.50">alloc::vec::in_place_collect..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (191 samples, 18.21%)</title><rect x="38.9895%" y="261" width="18.2078%" height="15" fill="rgb(222,74,54)" fg:x="409" fg:w="191"/><text x="39.2395%" y="271.50">&lt;alloc::vec::into_iter::Into..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (191 samples, 18.21%)</title><rect x="38.9895%" y="245" width="18.2078%" height="15" fill="rgb(216,99,12)" fg:x="409" fg:w="191"/><text x="39.2395%" y="255.50">parquet::arrow::arrow_writer..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (6 samples, 0.57%)</title><rect x="56.6254%" y="229" width="0.5720%" height="15" fill="rgb(226,22,26)" fg:x="594" fg:w="6"/><text x="56.8754%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (5 samples, 0.48%)</title><rect x="56.7207%" y="213" width="0.4766%" height="15" fill="rgb(217,163,10)" fg:x="595" fg:w="5"/><text x="56.9707%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (5 samples, 0.48%)</title><rect x="56.7207%" y="197" width="0.4766%" height="15" fill="rgb(213,25,53)" fg:x="595" fg:w="5"/><text x="56.9707%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (5 samples, 0.48%)</title><rect x="56.7207%" y="181" width="0.4766%" height="15" fill="rgb(252,105,26)" fg:x="595" fg:w="5"/><text x="56.9707%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="57.1020%" y="165" width="0.0953%" height="15" fill="rgb(220,39,43)" fg:x="599" fg:w="1"/><text x="57.3520%" y="175.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (2 samples, 0.19%)</title><rect x="57.1973%" y="261" width="0.1907%" height="15" fill="rgb(229,68,48)" fg:x="600" fg:w="2"/><text x="57.4473%" y="271.50"></text></g><g><title>write (2 samples, 0.19%)</title><rect x="57.1973%" y="245" width="0.1907%" height="15" fill="rgb(252,8,32)" fg:x="600" fg:w="2"/><text x="57.4473%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (197 samples, 18.78%)</title><rect x="38.7989%" y="341" width="18.7798%" height="15" fill="rgb(223,20,43)" fg:x="407" fg:w="197"/><text x="39.0489%" y="351.50">parquet::arrow::arrow_writer:..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (196 samples, 18.68%)</title><rect x="38.8942%" y="325" width="18.6845%" height="15" fill="rgb(229,81,49)" fg:x="408" fg:w="196"/><text x="39.1442%" y="335.50">parquet::arrow::arrow_writer:..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (4 samples, 0.38%)</title><rect x="57.1973%" y="309" width="0.3813%" height="15" fill="rgb(236,28,36)" fg:x="600" fg:w="4"/><text x="57.4473%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (4 samples, 0.38%)</title><rect x="57.1973%" y="293" width="0.3813%" height="15" fill="rgb(249,185,26)" fg:x="600" fg:w="4"/><text x="57.4473%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (4 samples, 0.38%)</title><rect x="57.1973%" y="277" width="0.3813%" height="15" fill="rgb(249,174,33)" fg:x="600" fg:w="4"/><text x="57.4473%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.19%)</title><rect x="57.3880%" y="261" width="0.1907%" height="15" fill="rgb(233,201,37)" fg:x="602" fg:w="2"/><text x="57.6380%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (2 samples, 0.19%)</title><rect x="57.3880%" y="245" width="0.1907%" height="15" fill="rgb(221,78,26)" fg:x="602" fg:w="2"/><text x="57.6380%" y="255.50"></text></g><g><title>write (2 samples, 0.19%)</title><rect x="57.3880%" y="229" width="0.1907%" height="15" fill="rgb(250,127,30)" fg:x="602" fg:w="2"/><text x="57.6380%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::try_new (1 samples, 0.10%)</title><rect x="57.5786%" y="341" width="0.0953%" height="15" fill="rgb(230,49,44)" fg:x="604" fg:w="1"/><text x="57.8286%" y="351.50"></text></g><g><title>parquet::arrow::schema::add_encoded_arrow_schema_to_metadata (1 samples, 0.10%)</title><rect x="57.5786%" y="325" width="0.0953%" height="15" fill="rgb(229,67,23)" fg:x="604" fg:w="1"/><text x="57.8286%" y="335.50"></text></g><g><title>parquet::arrow::schema::encode_arrow_schema (1 samples, 0.10%)</title><rect x="57.5786%" y="309" width="0.0953%" height="15" fill="rgb(249,83,47)" fg:x="604" fg:w="1"/><text x="57.8286%" y="319.50"></text></g><g><title>arrow_ipc::writer::IpcDataGenerator::schema_to_bytes_with_dictionary_tracker (1 samples, 0.10%)</title><rect x="57.5786%" y="293" width="0.0953%" height="15" fill="rgb(215,43,3)" fg:x="604" fg:w="1"/><text x="57.8286%" y="303.50"></text></g><g><title>arrow_ipc::convert::IpcSchemaEncoder::schema_to_fb_offset (1 samples, 0.10%)</title><rect x="57.5786%" y="277" width="0.0953%" height="15" fill="rgb(238,154,13)" fg:x="604" fg:w="1"/><text x="57.8286%" y="287.50"></text></g><g><title>arrow_ipc::convert::build_field (1 samples, 0.10%)</title><rect x="57.5786%" y="261" width="0.0953%" height="15" fill="rgb(219,56,2)" fg:x="604" fg:w="1"/><text x="57.8286%" y="271.50"></text></g><g><title>arrow_ipc::convert::get_fb_field_type (1 samples, 0.10%)</title><rect x="57.5786%" y="245" width="0.0953%" height="15" fill="rgb(233,0,4)" fg:x="604" fg:w="1"/><text x="57.8286%" y="255.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="57.9600%" y="245" width="0.0953%" height="15" fill="rgb(235,30,7)" fg:x="608" fg:w="1"/><text x="58.2100%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (8 samples, 0.76%)</title><rect x="57.8646%" y="261" width="0.7626%" height="15" fill="rgb(250,79,13)" fg:x="607" fg:w="8"/><text x="58.1146%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (6 samples, 0.57%)</title><rect x="58.0553%" y="245" width="0.5720%" height="15" fill="rgb(211,146,34)" fg:x="609" fg:w="6"/><text x="58.3053%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (6 samples, 0.57%)</title><rect x="58.0553%" y="229" width="0.5720%" height="15" fill="rgb(228,22,38)" fg:x="609" fg:w="6"/><text x="58.3053%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.10%)</title><rect x="58.6273%" y="245" width="0.0953%" height="15" fill="rgb(235,168,5)" fg:x="615" fg:w="1"/><text x="58.8773%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.10%)</title><rect x="58.6273%" y="229" width="0.0953%" height="15" fill="rgb(221,155,16)" fg:x="615" fg:w="1"/><text x="58.8773%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.10%)</title><rect x="58.6273%" y="213" width="0.0953%" height="15" fill="rgb(215,215,53)" fg:x="615" fg:w="1"/><text x="58.8773%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.19%)</title><rect x="58.7226%" y="213" width="0.1907%" height="15" fill="rgb(223,4,10)" fg:x="616" fg:w="2"/><text x="58.9726%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.29%)</title><rect x="58.7226%" y="245" width="0.2860%" height="15" fill="rgb(234,103,6)" fg:x="616" fg:w="3"/><text x="58.9726%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.29%)</title><rect x="58.7226%" y="229" width="0.2860%" height="15" fill="rgb(227,97,0)" fg:x="616" fg:w="3"/><text x="58.9726%" y="239.50"></text></g><g><title>brotli::enc::encode::should_compress (1 samples, 0.10%)</title><rect x="58.9133%" y="213" width="0.0953%" height="15" fill="rgb(234,150,53)" fg:x="618" fg:w="1"/><text x="59.1633%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (15 samples, 1.43%)</title><rect x="57.6740%" y="293" width="1.4299%" height="15" fill="rgb(228,201,54)" fg:x="605" fg:w="15"/><text x="57.9240%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (15 samples, 1.43%)</title><rect x="57.6740%" y="277" width="1.4299%" height="15" fill="rgb(222,22,37)" fg:x="605" fg:w="15"/><text x="57.9240%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (5 samples, 0.48%)</title><rect x="58.6273%" y="261" width="0.4766%" height="15" fill="rgb(237,53,32)" fg:x="615" fg:w="5"/><text x="58.8773%" y="271.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.10%)</title><rect x="59.0086%" y="245" width="0.0953%" height="15" fill="rgb(233,25,53)" fg:x="619" fg:w="1"/><text x="59.2586%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::estimated_data_page_size (1 samples, 0.10%)</title><rect x="60.2479%" y="277" width="0.0953%" height="15" fill="rgb(210,40,34)" fg:x="632" fg:w="1"/><text x="60.4979%" y="287.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (30 samples, 2.86%)</title><rect x="60.3432%" y="277" width="2.8599%" height="15" fill="rgb(241,220,44)" fg:x="633" fg:w="30"/><text x="60.5932%" y="287.50">&lt;p..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (11 samples, 1.05%)</title><rect x="62.1544%" y="261" width="1.0486%" height="15" fill="rgb(235,28,35)" fg:x="652" fg:w="11"/><text x="62.4044%" y="271.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayStorage as parquet::util::interner::Storage&gt;::push (1 samples, 0.10%)</title><rect x="63.1077%" y="245" width="0.0953%" height="15" fill="rgb(210,56,17)" fg:x="662" fg:w="1"/><text x="63.3577%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="63.1077%" y="229" width="0.0953%" height="15" fill="rgb(224,130,29)" fg:x="662" fg:w="1"/><text x="63.3577%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="63.1077%" y="213" width="0.0953%" height="15" fill="rgb(235,212,8)" fg:x="662" fg:w="1"/><text x="63.3577%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.10%)</title><rect x="63.1077%" y="197" width="0.0953%" height="15" fill="rgb(223,33,50)" fg:x="662" fg:w="1"/><text x="63.3577%" y="207.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="63.5844%" y="261" width="0.0953%" height="15" fill="rgb(219,149,13)" fg:x="667" fg:w="1"/><text x="63.8344%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="64.6330%" y="245" width="0.0953%" height="15" fill="rgb(250,156,29)" fg:x="678" fg:w="1"/><text x="64.8830%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="64.6330%" y="229" width="0.0953%" height="15" fill="rgb(216,193,19)" fg:x="678" fg:w="1"/><text x="64.8830%" y="239.50"></text></g><g><title>__libc_realloc (1 samples, 0.10%)</title><rect x="64.6330%" y="213" width="0.0953%" height="15" fill="rgb(216,135,14)" fg:x="678" fg:w="1"/><text x="64.8830%" y="223.50"></text></g><g><title>parquet::column::writer::compare_greater (7 samples, 0.67%)</title><rect x="64.7283%" y="245" width="0.6673%" height="15" fill="rgb(241,47,5)" fg:x="679" fg:w="7"/><text x="64.9783%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.10%)</title><rect x="67.2069%" y="229" width="0.0953%" height="15" fill="rgb(233,42,35)" fg:x="705" fg:w="1"/><text x="67.4569%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="67.2069%" y="213" width="0.0953%" height="15" fill="rgb(231,13,6)" fg:x="705" fg:w="1"/><text x="67.4569%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.10%)</title><rect x="67.2069%" y="197" width="0.0953%" height="15" fill="rgb(207,181,40)" fg:x="705" fg:w="1"/><text x="67.4569%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (50 samples, 4.77%)</title><rect x="63.2031%" y="277" width="4.7664%" height="15" fill="rgb(254,173,49)" fg:x="663" fg:w="50"/><text x="63.4531%" y="287.50">&lt;parqu..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (45 samples, 4.29%)</title><rect x="63.6797%" y="261" width="4.2898%" height="15" fill="rgb(221,1,38)" fg:x="668" fg:w="45"/><text x="63.9297%" y="271.50">parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (27 samples, 2.57%)</title><rect x="65.3956%" y="245" width="2.5739%" height="15" fill="rgb(206,124,46)" fg:x="686" fg:w="27"/><text x="65.6456%" y="255.50">pa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.67%)</title><rect x="67.3022%" y="229" width="0.6673%" height="15" fill="rgb(249,21,11)" fg:x="706" fg:w="7"/><text x="67.5522%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="67.9695%" y="277" width="0.0953%" height="15" fill="rgb(222,201,40)" fg:x="713" fg:w="1"/><text x="68.2195%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="67.9695%" y="261" width="0.0953%" height="15" fill="rgb(235,61,29)" fg:x="713" fg:w="1"/><text x="68.2195%" y="271.50"></text></g><g><title>__libc_realloc (1 samples, 0.10%)</title><rect x="67.9695%" y="245" width="0.0953%" height="15" fill="rgb(219,207,3)" fg:x="713" fg:w="1"/><text x="68.2195%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (6 samples, 0.57%)</title><rect x="68.0648%" y="261" width="0.5720%" height="15" fill="rgb(222,56,46)" fg:x="714" fg:w="6"/><text x="68.3148%" y="271.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (5 samples, 0.48%)</title><rect x="68.1602%" y="245" width="0.4766%" height="15" fill="rgb(239,76,54)" fg:x="715" fg:w="5"/><text x="68.4102%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (5 samples, 0.48%)</title><rect x="68.1602%" y="229" width="0.4766%" height="15" fill="rgb(231,124,27)" fg:x="715" fg:w="5"/><text x="68.4102%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.10%)</title><rect x="68.6368%" y="229" width="0.0953%" height="15" fill="rgb(249,195,6)" fg:x="720" fg:w="1"/><text x="68.8868%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.10%)</title><rect x="68.6368%" y="213" width="0.0953%" height="15" fill="rgb(237,174,47)" fg:x="720" fg:w="1"/><text x="68.8868%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (4 samples, 0.38%)</title><rect x="68.6368%" y="261" width="0.3813%" height="15" fill="rgb(206,201,31)" fg:x="720" fg:w="4"/><text x="68.8868%" y="271.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (4 samples, 0.38%)</title><rect x="68.6368%" y="245" width="0.3813%" height="15" fill="rgb(231,57,52)" fg:x="720" fg:w="4"/><text x="68.8868%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (3 samples, 0.29%)</title><rect x="68.7321%" y="229" width="0.2860%" height="15" fill="rgb(248,177,22)" fg:x="721" fg:w="3"/><text x="68.9821%" y="239.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.10%)</title><rect x="69.0181%" y="245" width="0.0953%" height="15" fill="rgb(215,211,37)" fg:x="724" fg:w="1"/><text x="69.2681%" y="255.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (8 samples, 0.76%)</title><rect x="75.5005%" y="197" width="0.7626%" height="15" fill="rgb(241,128,51)" fg:x="792" fg:w="8"/><text x="75.7505%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (74 samples, 7.05%)</title><rect x="69.3041%" y="229" width="7.0543%" height="15" fill="rgb(227,165,31)" fg:x="727" fg:w="74"/><text x="69.5541%" y="239.50">brotli::e..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (62 samples, 5.91%)</title><rect x="70.4480%" y="213" width="5.9104%" height="15" fill="rgb(228,167,24)" fg:x="739" fg:w="62"/><text x="70.6980%" y="223.50">&lt;brotli:..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="76.2631%" y="197" width="0.0953%" height="15" fill="rgb(228,143,12)" fg:x="800" fg:w="1"/><text x="76.5131%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.19%)</title><rect x="77.1211%" y="181" width="0.1907%" height="15" fill="rgb(249,149,8)" fg:x="809" fg:w="2"/><text x="77.3711%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (2 samples, 0.19%)</title><rect x="77.1211%" y="165" width="0.1907%" height="15" fill="rgb(243,35,44)" fg:x="809" fg:w="2"/><text x="77.3711%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (11 samples, 1.05%)</title><rect x="77.1211%" y="213" width="1.0486%" height="15" fill="rgb(246,89,9)" fg:x="809" fg:w="11"/><text x="77.3711%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (11 samples, 1.05%)</title><rect x="77.1211%" y="197" width="1.0486%" height="15" fill="rgb(233,213,13)" fg:x="809" fg:w="11"/><text x="77.3711%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (9 samples, 0.86%)</title><rect x="77.3117%" y="181" width="0.8580%" height="15" fill="rgb(233,141,41)" fg:x="811" fg:w="9"/><text x="77.5617%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.10%)</title><rect x="78.0744%" y="165" width="0.0953%" height="15" fill="rgb(239,167,4)" fg:x="819" fg:w="1"/><text x="78.3244%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (3 samples, 0.29%)</title><rect x="78.1697%" y="213" width="0.2860%" height="15" fill="rgb(209,217,16)" fg:x="820" fg:w="3"/><text x="78.4197%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreBlockSplitCode (1 samples, 0.10%)</title><rect x="78.4557%" y="213" width="0.0953%" height="15" fill="rgb(219,88,35)" fg:x="823" fg:w="1"/><text x="78.7057%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreBlockSwitch (1 samples, 0.10%)</title><rect x="78.5510%" y="213" width="0.0953%" height="15" fill="rgb(220,193,23)" fg:x="824" fg:w="1"/><text x="78.8010%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (2 samples, 0.19%)</title><rect x="78.6463%" y="213" width="0.1907%" height="15" fill="rgb(230,90,52)" fg:x="825" fg:w="2"/><text x="78.8963%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (27 samples, 2.57%)</title><rect x="76.3584%" y="229" width="2.5739%" height="15" fill="rgb(252,106,19)" fg:x="801" fg:w="27"/><text x="76.6084%" y="239.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.10%)</title><rect x="78.8370%" y="213" width="0.0953%" height="15" fill="rgb(206,74,20)" fg:x="827" fg:w="1"/><text x="79.0870%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (9 samples, 0.86%)</title><rect x="78.9323%" y="229" width="0.8580%" height="15" fill="rgb(230,138,44)" fg:x="828" fg:w="9"/><text x="79.1823%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (8 samples, 0.76%)</title><rect x="79.7903%" y="229" width="0.7626%" height="15" fill="rgb(235,182,43)" fg:x="837" fg:w="8"/><text x="80.0403%" y="239.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.19%)</title><rect x="80.3622%" y="213" width="0.1907%" height="15" fill="rgb(242,16,51)" fg:x="843" fg:w="2"/><text x="80.6122%" y="223.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.19%)</title><rect x="80.3622%" y="197" width="0.1907%" height="15" fill="rgb(248,9,4)" fg:x="843" fg:w="2"/><text x="80.6122%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (127 samples, 12.11%)</title><rect x="69.1134%" y="245" width="12.1068%" height="15" fill="rgb(210,31,22)" fg:x="725" fg:w="127"/><text x="69.3634%" y="255.50">brotli::enc::write..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (7 samples, 0.67%)</title><rect x="80.5529%" y="229" width="0.6673%" height="15" fill="rgb(239,54,39)" fg:x="845" fg:w="7"/><text x="80.8029%" y="239.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (7 samples, 0.67%)</title><rect x="80.5529%" y="213" width="0.6673%" height="15" fill="rgb(230,99,41)" fg:x="845" fg:w="7"/><text x="80.8029%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.10%)</title><rect x="81.2202%" y="245" width="0.0953%" height="15" fill="rgb(253,106,12)" fg:x="852" fg:w="1"/><text x="81.4702%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="81.2202%" y="229" width="0.0953%" height="15" fill="rgb(213,46,41)" fg:x="852" fg:w="1"/><text x="81.4702%" y="239.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::inject_flush_or_push_output (1 samples, 0.10%)</title><rect x="81.2202%" y="213" width="0.0953%" height="15" fill="rgb(215,133,35)" fg:x="852" fg:w="1"/><text x="81.4702%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (130 samples, 12.39%)</title><rect x="69.0181%" y="261" width="12.3928%" height="15" fill="rgb(213,28,5)" fg:x="724" fg:w="130"/><text x="69.2681%" y="271.50">&lt;parquet::compressi..</text></g><g><title>std::io::error::Error::new (1 samples, 0.10%)</title><rect x="81.3155%" y="245" width="0.0953%" height="15" fill="rgb(215,77,49)" fg:x="853" fg:w="1"/><text x="81.5655%" y="255.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="81.3155%" y="229" width="0.0953%" height="15" fill="rgb(248,100,22)" fg:x="853" fg:w="1"/><text x="81.5655%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (250 samples, 23.83%)</title><rect x="57.6740%" y="309" width="23.8322%" height="15" fill="rgb(208,67,9)" fg:x="605" fg:w="250"/><text x="57.9240%" y="319.50">parquet::arrow::arrow_writer::ArrowCol..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (235 samples, 22.40%)</title><rect x="59.1039%" y="293" width="22.4023%" height="15" fill="rgb(219,133,21)" fg:x="620" fg:w="235"/><text x="59.3539%" y="303.50">parquet::column::writer::GenericCol..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (141 samples, 13.44%)</title><rect x="68.0648%" y="277" width="13.4414%" height="15" fill="rgb(246,46,29)" fg:x="714" fg:w="141"/><text x="68.3148%" y="287.50">parquet::column::wri..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.10%)</title><rect x="81.4109%" y="261" width="0.0953%" height="15" fill="rgb(246,185,52)" fg:x="854" fg:w="1"/><text x="81.6609%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (252 samples, 24.02%)</title><rect x="57.6740%" y="341" width="24.0229%" height="15" fill="rgb(252,136,11)" fg:x="605" fg:w="252"/><text x="57.9240%" y="351.50">parquet::arrow::arrow_writer::ArrowWri..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (252 samples, 24.02%)</title><rect x="57.6740%" y="325" width="24.0229%" height="15" fill="rgb(219,138,53)" fg:x="605" fg:w="252"/><text x="57.9240%" y="335.50">parquet::arrow::arrow_writer::ArrowRow..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (2 samples, 0.19%)</title><rect x="81.5062%" y="309" width="0.1907%" height="15" fill="rgb(211,51,23)" fg:x="855" fg:w="2"/><text x="81.7562%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (2 samples, 0.19%)</title><rect x="81.5062%" y="293" width="0.1907%" height="15" fill="rgb(247,221,28)" fg:x="855" fg:w="2"/><text x="81.7562%" y="303.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="81.6969%" y="341" width="0.0953%" height="15" fill="rgb(251,222,45)" fg:x="857" fg:w="1"/><text x="81.9469%" y="351.50"></text></g><g><title>open64 (1 samples, 0.10%)</title><rect x="81.6969%" y="325" width="0.0953%" height="15" fill="rgb(217,162,53)" fg:x="857" fg:w="1"/><text x="81.9469%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.10%)</title><rect x="81.7922%" y="325" width="0.0953%" height="15" fill="rgb(229,93,14)" fg:x="858" fg:w="1"/><text x="82.0422%" y="335.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.10%)</title><rect x="81.7922%" y="309" width="0.0953%" height="15" fill="rgb(209,67,49)" fg:x="858" fg:w="1"/><text x="82.0422%" y="319.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="81.7922%" y="293" width="0.0953%" height="15" fill="rgb(213,87,29)" fg:x="858" fg:w="1"/><text x="82.0422%" y="303.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="81.7922%" y="277" width="0.0953%" height="15" fill="rgb(205,151,52)" fg:x="858" fg:w="1"/><text x="82.0422%" y="287.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.10%)</title><rect x="81.7922%" y="261" width="0.0953%" height="15" fill="rgb(253,215,39)" fg:x="858" fg:w="1"/><text x="82.0422%" y="271.50"></text></g><g><title>write (1 samples, 0.10%)</title><rect x="81.7922%" y="245" width="0.0953%" height="15" fill="rgb(221,220,41)" fg:x="858" fg:w="1"/><text x="82.0422%" y="255.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (836 samples, 79.69%)</title><rect x="2.2879%" y="373" width="79.6949%" height="15" fill="rgb(218,133,21)" fg:x="24" fg:w="836"/><text x="2.5379%" y="383.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (821 samples, 78.27%)</title><rect x="3.7178%" y="357" width="78.2650%" height="15" fill="rgb(221,193,43)" fg:x="39" fg:w="821"/><text x="3.9678%" y="367.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.19%)</title><rect x="81.7922%" y="341" width="0.1907%" height="15" fill="rgb(240,128,52)" fg:x="858" fg:w="2"/><text x="82.0422%" y="351.50"></text></g><g><title>tracing_core::dispatcher::get_default (1 samples, 0.10%)</title><rect x="81.8875%" y="325" width="0.0953%" height="15" fill="rgb(253,114,12)" fg:x="859" fg:w="1"/><text x="82.1375%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (13 samples, 1.24%)</title><rect x="82.7455%" y="357" width="1.2393%" height="15" fill="rgb(215,223,47)" fg:x="868" fg:w="13"/><text x="82.9955%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.67%)</title><rect x="83.9847%" y="357" width="0.6673%" height="15" fill="rgb(248,225,23)" fg:x="881" fg:w="7"/><text x="84.2347%" y="367.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.10%)</title><rect x="84.7474%" y="309" width="0.0953%" height="15" fill="rgb(250,108,0)" fg:x="889" fg:w="1"/><text x="84.9974%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.19%)</title><rect x="85.1287%" y="293" width="0.1907%" height="15" fill="rgb(228,208,7)" fg:x="893" fg:w="2"/><text x="85.3787%" y="303.50"></text></g><g><title>crc32fast::Hasher::update (11 samples, 1.05%)</title><rect x="84.7474%" y="325" width="1.0486%" height="15" fill="rgb(244,45,10)" fg:x="889" fg:w="11"/><text x="84.9974%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (10 samples, 0.95%)</title><rect x="84.8427%" y="309" width="0.9533%" height="15" fill="rgb(207,125,25)" fg:x="890" fg:w="10"/><text x="85.0927%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (5 samples, 0.48%)</title><rect x="85.3194%" y="293" width="0.4766%" height="15" fill="rgb(210,195,18)" fg:x="895" fg:w="5"/><text x="85.5694%" y="303.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (75 samples, 7.15%)</title><rect x="86.3680%" y="261" width="7.1497%" height="15" fill="rgb(249,80,12)" fg:x="906" fg:w="75"/><text x="86.6180%" y="271.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.10%)</title><rect x="93.5176%" y="261" width="0.0953%" height="15" fill="rgb(221,65,9)" fg:x="981" fg:w="1"/><text x="93.7676%" y="271.50"></text></g><g><title>zlib_rs::inflate::window::Window::extend (2 samples, 0.19%)</title><rect x="93.6130%" y="261" width="0.1907%" height="15" fill="rgb(235,49,36)" fg:x="982" fg:w="2"/><text x="93.8630%" y="271.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (84 samples, 8.01%)</title><rect x="85.8913%" y="309" width="8.0076%" height="15" fill="rgb(225,32,20)" fg:x="901" fg:w="84"/><text x="86.1413%" y="319.50">&lt;flate2::me..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (84 samples, 8.01%)</title><rect x="85.8913%" y="293" width="8.0076%" height="15" fill="rgb(215,141,46)" fg:x="901" fg:w="84"/><text x="86.1413%" y="303.50">&lt;flate2::ff..</text></g><g><title>zlib_rs::inflate::inflate (83 samples, 7.91%)</title><rect x="85.9867%" y="277" width="7.9123%" height="15" fill="rgb(250,160,47)" fg:x="902" fg:w="83"/><text x="86.2367%" y="287.50">zlib_rs::in..</text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (1 samples, 0.10%)</title><rect x="93.8036%" y="261" width="0.0953%" height="15" fill="rgb(216,222,40)" fg:x="984" fg:w="1"/><text x="94.0536%" y="271.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (986 samples, 93.99%)</title><rect x="0.0000%" y="405" width="93.9943%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="986"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (970 samples, 92.47%)</title><rect x="1.5253%" y="389" width="92.4690%" height="15" fill="rgb(207,178,40)" fg:x="16" fg:w="970"/><text x="1.7753%" y="399.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (126 samples, 12.01%)</title><rect x="81.9828%" y="373" width="12.0114%" height="15" fill="rgb(221,136,13)" fg:x="860" fg:w="126"/><text x="82.2328%" y="383.50">std::io::append_to..</text></g><g><title>std::io::default_read_buf (98 samples, 9.34%)</title><rect x="84.6520%" y="357" width="9.3422%" height="15" fill="rgb(249,199,10)" fg:x="888" fg:w="98"/><text x="84.9020%" y="367.50">std::io::defa..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (98 samples, 9.34%)</title><rect x="84.6520%" y="341" width="9.3422%" height="15" fill="rgb(249,222,13)" fg:x="888" fg:w="98"/><text x="84.9020%" y="351.50">&lt;zip::crc32::..</text></g><g><title>flate2::zio::read (86 samples, 8.20%)</title><rect x="85.7960%" y="325" width="8.1983%" height="15" fill="rgb(244,185,38)" fg:x="900" fg:w="86"/><text x="86.0460%" y="335.50">flate2::zio..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.10%)</title><rect x="93.8990%" y="309" width="0.0953%" height="15" fill="rgb(236,202,9)" fg:x="985" fg:w="1"/><text x="94.1490%" y="319.50"></text></g><g><title>chrono::offset::local::Local::now (1 samples, 0.10%)</title><rect x="93.9943%" y="405" width="0.0953%" height="15" fill="rgb(250,229,37)" fg:x="986" fg:w="1"/><text x="94.2443%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.10%)</title><rect x="93.9943%" y="389" width="0.0953%" height="15" fill="rgb(206,174,23)" fg:x="986" fg:w="1"/><text x="94.2443%" y="399.50"></text></g><g><title>&lt;chrono::offset::local::inner::Cache as core::default::Default&gt;::default (1 samples, 0.10%)</title><rect x="93.9943%" y="373" width="0.0953%" height="15" fill="rgb(211,33,43)" fg:x="986" fg:w="1"/><text x="94.2443%" y="383.50"></text></g><g><title>chrono::offset::local::inner::Source::new (1 samples, 0.10%)</title><rect x="93.9943%" y="357" width="0.0953%" height="15" fill="rgb(245,58,50)" fg:x="986" fg:w="1"/><text x="94.2443%" y="367.50"></text></g><g><title>std::sys::fs::unix::lstat (1 samples, 0.10%)</title><rect x="93.9943%" y="341" width="0.0953%" height="15" fill="rgb(244,68,36)" fg:x="986" fg:w="1"/><text x="94.2443%" y="351.50"></text></g><g><title>std::sys::fs::unix::try_statx (1 samples, 0.10%)</title><rect x="93.9943%" y="325" width="0.0953%" height="15" fill="rgb(232,229,15)" fg:x="986" fg:w="1"/><text x="94.2443%" y="335.50"></text></g><g><title>statx (1 samples, 0.10%)</title><rect x="93.9943%" y="309" width="0.0953%" height="15" fill="rgb(254,30,23)" fg:x="986" fg:w="1"/><text x="94.2443%" y="319.50"></text></g><g><title>bench_zip_to_pa (989 samples, 94.28%)</title><rect x="0.0000%" y="565" width="94.2803%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="989"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (989 samples, 94.28%)</title><rect x="0.0000%" y="549" width="94.2803%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="989"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (989 samples, 94.28%)</title><rect x="0.0000%" y="533" width="94.2803%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="989"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (989 samples, 94.28%)</title><rect x="0.0000%" y="517" width="94.2803%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="989"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (989 samples, 94.28%)</title><rect x="0.0000%" y="501" width="94.2803%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="989"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (989 samples, 94.28%)</title><rect x="0.0000%" y="485" width="94.2803%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="989"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (989 samples, 94.28%)</title><rect x="0.0000%" y="469" width="94.2803%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="989"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (989 samples, 94.28%)</title><rect x="0.0000%" y="453" width="94.2803%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="989"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (989 samples, 94.28%)</title><rect x="0.0000%" y="437" width="94.2803%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="989"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (989 samples, 94.28%)</title><rect x="0.0000%" y="421" width="94.2803%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="989"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.19%)</title><rect x="94.0896%" y="405" width="0.1907%" height="15" fill="rgb(245,82,37)" fg:x="987" fg:w="2"/><text x="94.3396%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.19%)</title><rect x="94.0896%" y="389" width="0.1907%" height="15" fill="rgb(227,149,46)" fg:x="987" fg:w="2"/><text x="94.3396%" y="399.50"></text></g><g><title>syscall (1 samples, 0.10%)</title><rect x="94.1849%" y="373" width="0.0953%" height="15" fill="rgb(218,36,50)" fg:x="988" fg:w="1"/><text x="94.4349%" y="383.50"></text></g><g><title>std::time::Instant::elapsed (1 samples, 0.10%)</title><rect x="94.2803%" y="373" width="0.0953%" height="15" fill="rgb(226,80,48)" fg:x="989" fg:w="1"/><text x="94.5303%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="94.2803%" y="357" width="0.0953%" height="15" fill="rgb(238,224,15)" fg:x="989" fg:w="1"/><text x="94.5303%" y="367.50"></text></g><g><title>clock_gettime (1 samples, 0.10%)</title><rect x="94.2803%" y="341" width="0.0953%" height="15" fill="rgb(241,136,10)" fg:x="989" fg:w="1"/><text x="94.5303%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.38%)</title><rect x="94.3756%" y="341" width="0.3813%" height="15" fill="rgb(208,32,45)" fg:x="990" fg:w="4"/><text x="94.6256%" y="351.50"></text></g><g><title>syscall (4 samples, 0.38%)</title><rect x="94.3756%" y="325" width="0.3813%" height="15" fill="rgb(207,135,9)" fg:x="990" fg:w="4"/><text x="94.6256%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.10%)</title><rect x="94.7569%" y="341" width="0.0953%" height="15" fill="rgb(206,86,44)" fg:x="994" fg:w="1"/><text x="95.0069%" y="351.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.10%)</title><rect x="94.7569%" y="325" width="0.0953%" height="15" fill="rgb(245,177,15)" fg:x="994" fg:w="1"/><text x="95.0069%" y="335.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.10%)</title><rect x="94.7569%" y="309" width="0.0953%" height="15" fill="rgb(206,64,50)" fg:x="994" fg:w="1"/><text x="95.0069%" y="319.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.38%)</title><rect x="94.9476%" y="309" width="0.3813%" height="15" fill="rgb(234,36,40)" fg:x="996" fg:w="4"/><text x="95.1976%" y="319.50"></text></g><g><title>epoll_wait (4 samples, 0.38%)</title><rect x="94.9476%" y="293" width="0.3813%" height="15" fill="rgb(213,64,8)" fg:x="996" fg:w="4"/><text x="95.1976%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (11 samples, 1.05%)</title><rect x="94.3756%" y="373" width="1.0486%" height="15" fill="rgb(210,75,36)" fg:x="990" fg:w="11"/><text x="94.6256%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (11 samples, 1.05%)</title><rect x="94.3756%" y="357" width="1.0486%" height="15" fill="rgb(229,88,21)" fg:x="990" fg:w="11"/><text x="94.6256%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 0.57%)</title><rect x="94.8522%" y="341" width="0.5720%" height="15" fill="rgb(252,204,47)" fg:x="995" fg:w="6"/><text x="95.1022%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (5 samples, 0.48%)</title><rect x="94.9476%" y="325" width="0.4766%" height="15" fill="rgb(208,77,27)" fg:x="996" fg:w="5"/><text x="95.1976%" y="335.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.10%)</title><rect x="95.3289%" y="309" width="0.0953%" height="15" fill="rgb(221,76,26)" fg:x="1000" fg:w="1"/><text x="95.5789%" y="319.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.38%)</title><rect x="95.4242%" y="357" width="0.3813%" height="15" fill="rgb(225,139,18)" fg:x="1001" fg:w="4"/><text x="95.6742%" y="367.50"></text></g><g><title>syscall (4 samples, 0.38%)</title><rect x="95.4242%" y="341" width="0.3813%" height="15" fill="rgb(230,137,11)" fg:x="1001" fg:w="4"/><text x="95.6742%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (9 samples, 0.86%)</title><rect x="95.8055%" y="357" width="0.8580%" height="15" fill="rgb(212,28,1)" fg:x="1005" fg:w="9"/><text x="96.0555%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (9 samples, 0.86%)</title><rect x="95.8055%" y="341" width="0.8580%" height="15" fill="rgb(248,164,17)" fg:x="1005" fg:w="9"/><text x="96.0555%" y="351.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (9 samples, 0.86%)</title><rect x="95.8055%" y="325" width="0.8580%" height="15" fill="rgb(222,171,42)" fg:x="1005" fg:w="9"/><text x="96.0555%" y="335.50"></text></g><g><title>write (8 samples, 0.76%)</title><rect x="95.9009%" y="309" width="0.7626%" height="15" fill="rgb(243,84,45)" fg:x="1006" fg:w="8"/><text x="96.1509%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.10%)</title><rect x="96.6635%" y="357" width="0.0953%" height="15" fill="rgb(252,49,23)" fg:x="1014" fg:w="1"/><text x="96.9135%" y="367.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (10 samples, 0.95%)</title><rect x="97.1401%" y="277" width="0.9533%" height="15" fill="rgb(215,19,7)" fg:x="1019" fg:w="10"/><text x="97.3901%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (10 samples, 0.95%)</title><rect x="97.1401%" y="261" width="0.9533%" height="15" fill="rgb(238,81,41)" fg:x="1019" fg:w="10"/><text x="97.3901%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (10 samples, 0.95%)</title><rect x="97.1401%" y="245" width="0.9533%" height="15" fill="rgb(210,199,37)" fg:x="1019" fg:w="10"/><text x="97.3901%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.86%)</title><rect x="97.2355%" y="229" width="0.8580%" height="15" fill="rgb(244,192,49)" fg:x="1020" fg:w="9"/><text x="97.4855%" y="239.50"></text></g><g><title>syscall (9 samples, 0.86%)</title><rect x="97.2355%" y="213" width="0.8580%" height="15" fill="rgb(226,211,11)" fg:x="1020" fg:w="9"/><text x="97.4855%" y="223.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (2 samples, 0.19%)</title><rect x="98.3794%" y="133" width="0.1907%" height="15" fill="rgb(236,162,54)" fg:x="1032" fg:w="2"/><text x="98.6294%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (2 samples, 0.19%)</title><rect x="98.3794%" y="117" width="0.1907%" height="15" fill="rgb(220,229,9)" fg:x="1032" fg:w="2"/><text x="98.6294%" y="127.50"></text></g><g><title>malloc (2 samples, 0.19%)</title><rect x="98.3794%" y="101" width="0.1907%" height="15" fill="rgb(250,87,22)" fg:x="1032" fg:w="2"/><text x="98.6294%" y="111.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (7 samples, 0.67%)</title><rect x="98.3794%" y="165" width="0.6673%" height="15" fill="rgb(239,43,17)" fg:x="1032" fg:w="7"/><text x="98.6294%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (7 samples, 0.67%)</title><rect x="98.3794%" y="149" width="0.6673%" height="15" fill="rgb(231,177,25)" fg:x="1032" fg:w="7"/><text x="98.6294%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (5 samples, 0.48%)</title><rect x="98.5701%" y="133" width="0.4766%" height="15" fill="rgb(219,179,1)" fg:x="1034" fg:w="5"/><text x="98.8201%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (5 samples, 0.48%)</title><rect x="98.5701%" y="117" width="0.4766%" height="15" fill="rgb(238,219,53)" fg:x="1034" fg:w="5"/><text x="98.8201%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (5 samples, 0.48%)</title><rect x="98.5701%" y="101" width="0.4766%" height="15" fill="rgb(232,167,36)" fg:x="1034" fg:w="5"/><text x="98.8201%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (5 samples, 0.48%)</title><rect x="98.5701%" y="85" width="0.4766%" height="15" fill="rgb(244,19,51)" fg:x="1034" fg:w="5"/><text x="98.8201%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (5 samples, 0.48%)</title><rect x="98.5701%" y="69" width="0.4766%" height="15" fill="rgb(224,6,22)" fg:x="1034" fg:w="5"/><text x="98.8201%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (5 samples, 0.48%)</title><rect x="98.5701%" y="53" width="0.4766%" height="15" fill="rgb(224,145,5)" fg:x="1034" fg:w="5"/><text x="98.8201%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (5 samples, 0.48%)</title><rect x="98.5701%" y="37" width="0.4766%" height="15" fill="rgb(234,130,49)" fg:x="1034" fg:w="5"/><text x="98.8201%" y="47.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (19 samples, 1.81%)</title><rect x="98.0934%" y="277" width="1.8112%" height="15" fill="rgb(254,6,2)" fg:x="1029" fg:w="19"/><text x="98.3434%" y="287.50">h..</text></g><g><title>hyper::proto::h1::decode::Decoder::decode (18 samples, 1.72%)</title><rect x="98.1888%" y="261" width="1.7159%" height="15" fill="rgb(208,96,46)" fg:x="1030" fg:w="18"/><text x="98.4388%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (18 samples, 1.72%)</title><rect x="98.1888%" y="245" width="1.7159%" height="15" fill="rgb(239,3,39)" fg:x="1030" fg:w="18"/><text x="98.4388%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (18 samples, 1.72%)</title><rect x="98.1888%" y="229" width="1.7159%" height="15" fill="rgb(233,210,1)" fg:x="1030" fg:w="18"/><text x="98.4388%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (18 samples, 1.72%)</title><rect x="98.1888%" y="213" width="1.7159%" height="15" fill="rgb(244,137,37)" fg:x="1030" fg:w="18"/><text x="98.4388%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (17 samples, 1.62%)</title><rect x="98.2841%" y="197" width="1.6206%" height="15" fill="rgb(240,136,2)" fg:x="1031" fg:w="17"/><text x="98.5341%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (16 samples, 1.53%)</title><rect x="98.3794%" y="181" width="1.5253%" height="15" fill="rgb(239,18,37)" fg:x="1032" fg:w="16"/><text x="98.6294%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (9 samples, 0.86%)</title><rect x="99.0467%" y="165" width="0.8580%" height="15" fill="rgb(218,185,22)" fg:x="1039" fg:w="9"/><text x="99.2967%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (9 samples, 0.86%)</title><rect x="99.0467%" y="149" width="0.8580%" height="15" fill="rgb(225,218,4)" fg:x="1039" fg:w="9"/><text x="99.2967%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (9 samples, 0.86%)</title><rect x="99.0467%" y="133" width="0.8580%" height="15" fill="rgb(230,182,32)" fg:x="1039" fg:w="9"/><text x="99.2967%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (9 samples, 0.86%)</title><rect x="99.0467%" y="117" width="0.8580%" height="15" fill="rgb(242,56,43)" fg:x="1039" fg:w="9"/><text x="99.2967%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (9 samples, 0.86%)</title><rect x="99.0467%" y="101" width="0.8580%" height="15" fill="rgb(233,99,24)" fg:x="1039" fg:w="9"/><text x="99.2967%" y="111.50"></text></g><g><title>recv (9 samples, 0.86%)</title><rect x="99.0467%" y="85" width="0.8580%" height="15" fill="rgb(234,209,42)" fg:x="1039" fg:w="9"/><text x="99.2967%" y="95.50"></text></g><g><title>all (1,049 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="1049"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (60 samples, 5.72%)</title><rect x="94.2803%" y="565" width="5.7197%" height="15" fill="rgb(245,203,43)" fg:x="989" fg:w="60"/><text x="94.5303%" y="575.50">tokio-r..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (60 samples, 5.72%)</title><rect x="94.2803%" y="549" width="5.7197%" height="15" fill="rgb(238,205,33)" fg:x="989" fg:w="60"/><text x="94.5303%" y="559.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (60 samples, 5.72%)</title><rect x="94.2803%" y="533" width="5.7197%" height="15" fill="rgb(231,56,7)" fg:x="989" fg:w="60"/><text x="94.5303%" y="543.50">core::o..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (60 samples, 5.72%)</title><rect x="94.2803%" y="517" width="5.7197%" height="15" fill="rgb(244,186,29)" fg:x="989" fg:w="60"/><text x="94.5303%" y="527.50">std::sy..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (60 samples, 5.72%)</title><rect x="94.2803%" y="501" width="5.7197%" height="15" fill="rgb(234,111,31)" fg:x="989" fg:w="60"/><text x="94.5303%" y="511.50">tokio::..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (60 samples, 5.72%)</title><rect x="94.2803%" y="485" width="5.7197%" height="15" fill="rgb(241,149,10)" fg:x="989" fg:w="60"/><text x="94.5303%" y="495.50">tokio::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (60 samples, 5.72%)</title><rect x="94.2803%" y="469" width="5.7197%" height="15" fill="rgb(249,206,44)" fg:x="989" fg:w="60"/><text x="94.5303%" y="479.50">tokio::..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (60 samples, 5.72%)</title><rect x="94.2803%" y="453" width="5.7197%" height="15" fill="rgb(251,153,30)" fg:x="989" fg:w="60"/><text x="94.5303%" y="463.50">&lt;tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (60 samples, 5.72%)</title><rect x="94.2803%" y="437" width="5.7197%" height="15" fill="rgb(239,152,38)" fg:x="989" fg:w="60"/><text x="94.5303%" y="447.50">tokio::..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (60 samples, 5.72%)</title><rect x="94.2803%" y="421" width="5.7197%" height="15" fill="rgb(249,139,47)" fg:x="989" fg:w="60"/><text x="94.5303%" y="431.50">tokio::..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (60 samples, 5.72%)</title><rect x="94.2803%" y="405" width="5.7197%" height="15" fill="rgb(244,64,35)" fg:x="989" fg:w="60"/><text x="94.5303%" y="415.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (60 samples, 5.72%)</title><rect x="94.2803%" y="389" width="5.7197%" height="15" fill="rgb(216,46,15)" fg:x="989" fg:w="60"/><text x="94.5303%" y="399.50">tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (48 samples, 4.58%)</title><rect x="95.4242%" y="373" width="4.5758%" height="15" fill="rgb(250,74,19)" fg:x="1001" fg:w="48"/><text x="95.6742%" y="383.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (34 samples, 3.24%)</title><rect x="96.7588%" y="357" width="3.2412%" height="15" fill="rgb(249,42,33)" fg:x="1015" fg:w="34"/><text x="97.0088%" y="367.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (34 samples, 3.24%)</title><rect x="96.7588%" y="341" width="3.2412%" height="15" fill="rgb(242,149,17)" fg:x="1015" fg:w="34"/><text x="97.0088%" y="351.50">tok..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (34 samples, 3.24%)</title><rect x="96.7588%" y="325" width="3.2412%" height="15" fill="rgb(244,29,21)" fg:x="1015" fg:w="34"/><text x="97.0088%" y="335.50">&lt;fu..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (32 samples, 3.05%)</title><rect x="96.9495%" y="309" width="3.0505%" height="15" fill="rgb(220,130,37)" fg:x="1017" fg:w="32"/><text x="97.1995%" y="319.50">&lt;hy..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (32 samples, 3.05%)</title><rect x="96.9495%" y="293" width="3.0505%" height="15" fill="rgb(211,67,2)" fg:x="1017" fg:w="32"/><text x="97.1995%" y="303.50">hyp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (1 samples, 0.10%)</title><rect x="99.9047%" y="277" width="0.0953%" height="15" fill="rgb(235,68,52)" fg:x="1048" fg:w="1"/><text x="100.1547%" y="287.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1 samples, 0.10%)</title><rect x="99.9047%" y="261" width="0.0953%" height="15" fill="rgb(246,142,3)" fg:x="1048" fg:w="1"/><text x="100.1547%" y="271.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (1 samples, 0.10%)</title><rect x="99.9047%" y="245" width="0.0953%" height="15" fill="rgb(241,25,7)" fg:x="1048" fg:w="1"/><text x="100.1547%" y="255.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.10%)</title><rect x="99.9047%" y="229" width="0.0953%" height="15" fill="rgb(242,119,39)" fg:x="1048" fg:w="1"/><text x="100.1547%" y="239.50"></text></g><g><title>&lt;rustls::conn::Writer as std::io::Write&gt;::write (1 samples, 0.10%)</title><rect x="99.9047%" y="213" width="0.0953%" height="15" fill="rgb(241,98,45)" fg:x="1048" fg:w="1"/><text x="100.1547%" y="223.50"></text></g></svg></svg>