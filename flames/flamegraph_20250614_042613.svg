<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1036"><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.58%)</title><rect x="0.3861%" y="389" width="0.5792%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="6"/><text x="0.6361%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (6 samples, 0.58%)</title><rect x="0.3861%" y="373" width="0.5792%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="6"/><text x="0.6361%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (6 samples, 0.58%)</title><rect x="0.3861%" y="357" width="0.5792%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="6"/><text x="0.6361%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (6 samples, 0.58%)</title><rect x="0.3861%" y="341" width="0.5792%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="6"/><text x="0.6361%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (6 samples, 0.58%)</title><rect x="0.3861%" y="325" width="0.5792%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="6"/><text x="0.6361%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6 samples, 0.58%)</title><rect x="0.3861%" y="309" width="0.5792%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="6"/><text x="0.6361%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (6 samples, 0.58%)</title><rect x="0.3861%" y="293" width="0.5792%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="6"/><text x="0.6361%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (6 samples, 0.58%)</title><rect x="0.3861%" y="277" width="0.5792%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="6"/><text x="0.6361%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (6 samples, 0.58%)</title><rect x="0.3861%" y="261" width="0.5792%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="6"/><text x="0.6361%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (6 samples, 0.58%)</title><rect x="0.3861%" y="245" width="0.5792%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="6"/><text x="0.6361%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.58%)</title><rect x="0.3861%" y="229" width="0.5792%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="6"/><text x="0.6361%" y="239.50"></text></g><g><title>syscall (6 samples, 0.58%)</title><rect x="0.3861%" y="213" width="0.5792%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="6"/><text x="0.6361%" y="223.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (9 samples, 0.87%)</title><rect x="1.1583%" y="325" width="0.8687%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="9"/><text x="1.4083%" y="335.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (9 samples, 0.87%)</title><rect x="1.1583%" y="309" width="0.8687%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="9"/><text x="1.4083%" y="319.50"></text></g><g><title>csv_core::reader::Reader::read_record (3 samples, 0.29%)</title><rect x="1.7375%" y="293" width="0.2896%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="3"/><text x="1.9875%" y="303.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.10%)</title><rect x="2.0270%" y="309" width="0.0965%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="1"/><text x="2.2770%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="2.0270%" y="293" width="0.0965%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="1"/><text x="2.2770%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (14 samples, 1.35%)</title><rect x="1.1583%" y="341" width="1.3514%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="14"/><text x="1.4083%" y="351.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (5 samples, 0.48%)</title><rect x="2.0270%" y="325" width="0.4826%" height="15" fill="rgb(221,200,47)" fg:x="21" fg:w="5"/><text x="2.2770%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.39%)</title><rect x="2.1236%" y="309" width="0.3861%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="4"/><text x="2.3736%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.39%)</title><rect x="2.1236%" y="293" width="0.3861%" height="15" fill="rgb(249,33,26)" fg:x="22" fg:w="4"/><text x="2.3736%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.39%)</title><rect x="2.1236%" y="277" width="0.3861%" height="15" fill="rgb(235,183,28)" fg:x="22" fg:w="4"/><text x="2.3736%" y="287.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (4 samples, 0.39%)</title><rect x="2.1236%" y="261" width="0.3861%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="4"/><text x="2.3736%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (3 samples, 0.29%)</title><rect x="2.2201%" y="245" width="0.2896%" height="15" fill="rgb(247,18,42)" fg:x="23" fg:w="3"/><text x="2.4701%" y="255.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="2.5097%" y="341" width="0.0965%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="1"/><text x="2.7597%" y="351.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (5 samples, 0.48%)</title><rect x="2.6062%" y="341" width="0.4826%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="5"/><text x="2.8562%" y="351.50"></text></g><g><title>nemscraper::process::utils::clean_str (5 samples, 0.48%)</title><rect x="2.6062%" y="325" width="0.4826%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="5"/><text x="2.8562%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.19%)</title><rect x="2.8958%" y="309" width="0.1931%" height="15" fill="rgb(238,160,17)" fg:x="30" fg:w="2"/><text x="3.1458%" y="319.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.29%)</title><rect x="3.0888%" y="181" width="0.2896%" height="15" fill="rgb(214,148,48)" fg:x="32" fg:w="3"/><text x="3.3388%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.19%)</title><rect x="3.1853%" y="165" width="0.1931%" height="15" fill="rgb(232,36,49)" fg:x="33" fg:w="2"/><text x="3.4353%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (4 samples, 0.39%)</title><rect x="3.0888%" y="309" width="0.3861%" height="15" fill="rgb(209,103,24)" fg:x="32" fg:w="4"/><text x="3.3388%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.39%)</title><rect x="3.0888%" y="293" width="0.3861%" height="15" fill="rgb(229,88,8)" fg:x="32" fg:w="4"/><text x="3.3388%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (4 samples, 0.39%)</title><rect x="3.0888%" y="277" width="0.3861%" height="15" fill="rgb(213,181,19)" fg:x="32" fg:w="4"/><text x="3.3388%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.39%)</title><rect x="3.0888%" y="261" width="0.3861%" height="15" fill="rgb(254,191,54)" fg:x="32" fg:w="4"/><text x="3.3388%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (4 samples, 0.39%)</title><rect x="3.0888%" y="245" width="0.3861%" height="15" fill="rgb(241,83,37)" fg:x="32" fg:w="4"/><text x="3.3388%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (4 samples, 0.39%)</title><rect x="3.0888%" y="229" width="0.3861%" height="15" fill="rgb(233,36,39)" fg:x="32" fg:w="4"/><text x="3.3388%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (4 samples, 0.39%)</title><rect x="3.0888%" y="213" width="0.3861%" height="15" fill="rgb(226,3,54)" fg:x="32" fg:w="4"/><text x="3.3388%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.39%)</title><rect x="3.0888%" y="197" width="0.3861%" height="15" fill="rgb(245,192,40)" fg:x="32" fg:w="4"/><text x="3.3388%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.10%)</title><rect x="3.3784%" y="181" width="0.0965%" height="15" fill="rgb(238,167,29)" fg:x="35" fg:w="1"/><text x="3.6284%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.10%)</title><rect x="3.3784%" y="165" width="0.0965%" height="15" fill="rgb(232,182,51)" fg:x="35" fg:w="1"/><text x="3.6284%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (5 samples, 0.48%)</title><rect x="3.0888%" y="341" width="0.4826%" height="15" fill="rgb(231,60,39)" fg:x="32" fg:w="5"/><text x="3.3388%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (5 samples, 0.48%)</title><rect x="3.0888%" y="325" width="0.4826%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="5"/><text x="3.3388%" y="335.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.10%)</title><rect x="3.4749%" y="309" width="0.0965%" height="15" fill="rgb(235,93,37)" fg:x="36" fg:w="1"/><text x="3.7249%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.10%)</title><rect x="3.4749%" y="293" width="0.0965%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="1"/><text x="3.7249%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.10%)</title><rect x="3.4749%" y="277" width="0.0965%" height="15" fill="rgb(222,207,29)" fg:x="36" fg:w="1"/><text x="3.7249%" y="287.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (1 samples, 0.10%)</title><rect x="3.4749%" y="261" width="0.0965%" height="15" fill="rgb(206,96,30)" fg:x="36" fg:w="1"/><text x="3.7249%" y="271.50"></text></g><g><title>write (1 samples, 0.10%)</title><rect x="3.4749%" y="245" width="0.0965%" height="15" fill="rgb(218,138,4)" fg:x="36" fg:w="1"/><text x="3.7249%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.10%)</title><rect x="3.5714%" y="277" width="0.0965%" height="15" fill="rgb(250,191,14)" fg:x="37" fg:w="1"/><text x="3.8214%" y="287.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.10%)</title><rect x="3.6680%" y="277" width="0.0965%" height="15" fill="rgb(239,60,40)" fg:x="38" fg:w="1"/><text x="3.9180%" y="287.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.10%)</title><rect x="3.6680%" y="261" width="0.0965%" height="15" fill="rgb(206,27,48)" fg:x="38" fg:w="1"/><text x="3.9180%" y="271.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (4 samples, 0.39%)</title><rect x="3.7645%" y="229" width="0.3861%" height="15" fill="rgb(225,35,8)" fg:x="39" fg:w="4"/><text x="4.0145%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.39%)</title><rect x="3.7645%" y="213" width="0.3861%" height="15" fill="rgb(250,213,24)" fg:x="39" fg:w="4"/><text x="4.0145%" y="223.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (35 samples, 3.38%)</title><rect x="0.9653%" y="373" width="3.3784%" height="15" fill="rgb(247,123,22)" fg:x="10" fg:w="35"/><text x="1.2153%" y="383.50">nem..</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (35 samples, 3.38%)</title><rect x="0.9653%" y="357" width="3.3784%" height="15" fill="rgb(231,138,38)" fg:x="10" fg:w="35"/><text x="1.2153%" y="367.50">nem..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (8 samples, 0.77%)</title><rect x="3.5714%" y="341" width="0.7722%" height="15" fill="rgb(231,145,46)" fg:x="37" fg:w="8"/><text x="3.8214%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (8 samples, 0.77%)</title><rect x="3.5714%" y="325" width="0.7722%" height="15" fill="rgb(251,118,11)" fg:x="37" fg:w="8"/><text x="3.8214%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (8 samples, 0.77%)</title><rect x="3.5714%" y="309" width="0.7722%" height="15" fill="rgb(217,147,25)" fg:x="37" fg:w="8"/><text x="3.8214%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (8 samples, 0.77%)</title><rect x="3.5714%" y="293" width="0.7722%" height="15" fill="rgb(247,81,37)" fg:x="37" fg:w="8"/><text x="3.8214%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (6 samples, 0.58%)</title><rect x="3.7645%" y="277" width="0.5792%" height="15" fill="rgb(209,12,38)" fg:x="39" fg:w="6"/><text x="4.0145%" y="287.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.58%)</title><rect x="3.7645%" y="261" width="0.5792%" height="15" fill="rgb(227,1,9)" fg:x="39" fg:w="6"/><text x="4.0145%" y="271.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (6 samples, 0.58%)</title><rect x="3.7645%" y="245" width="0.5792%" height="15" fill="rgb(248,47,43)" fg:x="39" fg:w="6"/><text x="4.0145%" y="255.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.19%)</title><rect x="4.1506%" y="229" width="0.1931%" height="15" fill="rgb(221,10,30)" fg:x="43" fg:w="2"/><text x="4.4006%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.10%)</title><rect x="4.2471%" y="213" width="0.0965%" height="15" fill="rgb(210,229,1)" fg:x="44" fg:w="1"/><text x="4.4971%" y="223.50"></text></g><g><title>calloc (1 samples, 0.10%)</title><rect x="4.2471%" y="197" width="0.0965%" height="15" fill="rgb(222,148,37)" fg:x="44" fg:w="1"/><text x="4.4971%" y="207.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::new (1 samples, 0.10%)</title><rect x="4.3436%" y="373" width="0.0965%" height="15" fill="rgb(234,67,33)" fg:x="45" fg:w="1"/><text x="4.5936%" y="383.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (1 samples, 0.10%)</title><rect x="4.3436%" y="357" width="0.0965%" height="15" fill="rgb(247,98,35)" fg:x="45" fg:w="1"/><text x="4.5936%" y="367.50"></text></g><g><title>mkdir (1 samples, 0.10%)</title><rect x="4.3436%" y="341" width="0.0965%" height="15" fill="rgb(247,138,52)" fg:x="45" fg:w="1"/><text x="4.5936%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.10%)</title><rect x="4.8263%" y="357" width="0.0965%" height="15" fill="rgb(213,79,30)" fg:x="50" fg:w="1"/><text x="5.0763%" y="367.50"></text></g><g><title>malloc (16 samples, 1.54%)</title><rect x="4.9228%" y="357" width="1.5444%" height="15" fill="rgb(246,177,23)" fg:x="51" fg:w="16"/><text x="5.1728%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.39%)</title><rect x="11.8726%" y="293" width="0.3861%" height="15" fill="rgb(230,62,27)" fg:x="123" fg:w="4"/><text x="12.1226%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.39%)</title><rect x="11.8726%" y="277" width="0.3861%" height="15" fill="rgb(216,154,8)" fg:x="123" fg:w="4"/><text x="12.1226%" y="287.50"></text></g><g><title>__libc_realloc (4 samples, 0.39%)</title><rect x="11.8726%" y="261" width="0.3861%" height="15" fill="rgb(244,35,45)" fg:x="123" fg:w="4"/><text x="12.1226%" y="271.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (110 samples, 10.62%)</title><rect x="8.6873%" y="325" width="10.6178%" height="15" fill="rgb(251,115,12)" fg:x="90" fg:w="110"/><text x="8.9373%" y="335.50">arrow_csv::read..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (110 samples, 10.62%)</title><rect x="8.6873%" y="309" width="10.6178%" height="15" fill="rgb(240,54,50)" fg:x="90" fg:w="110"/><text x="8.9373%" y="319.50">arrow_csv::read..</text></g><g><title>csv_core::reader::Reader::read_record (73 samples, 7.05%)</title><rect x="12.2587%" y="293" width="7.0463%" height="15" fill="rgb(233,84,52)" fg:x="127" fg:w="73"/><text x="12.5087%" y="303.50">csv_core:..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (9 samples, 0.87%)</title><rect x="19.3050%" y="309" width="0.8687%" height="15" fill="rgb(207,117,47)" fg:x="200" fg:w="9"/><text x="19.5550%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.48%)</title><rect x="19.6911%" y="293" width="0.4826%" height="15" fill="rgb(249,43,39)" fg:x="204" fg:w="5"/><text x="19.9411%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (244 samples, 23.55%)</title><rect x="8.0116%" y="341" width="23.5521%" height="15" fill="rgb(209,38,44)" fg:x="83" fg:w="244"/><text x="8.2616%" y="351.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (127 samples, 12.26%)</title><rect x="19.3050%" y="325" width="12.2587%" height="15" fill="rgb(236,212,23)" fg:x="200" fg:w="127"/><text x="19.5550%" y="335.50">arrow_csv::reader:..</text></g><g><title>core::iter::adapters::try_process (118 samples, 11.39%)</title><rect x="20.1737%" y="309" width="11.3900%" height="15" fill="rgb(242,79,21)" fg:x="209" fg:w="118"/><text x="20.4237%" y="319.50">core::iter::adapt..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (118 samples, 11.39%)</title><rect x="20.1737%" y="293" width="11.3900%" height="15" fill="rgb(211,96,35)" fg:x="209" fg:w="118"/><text x="20.4237%" y="303.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (118 samples, 11.39%)</title><rect x="20.1737%" y="277" width="11.3900%" height="15" fill="rgb(253,215,40)" fg:x="209" fg:w="118"/><text x="20.4237%" y="287.50">&lt;core::iter::adap..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (118 samples, 11.39%)</title><rect x="20.1737%" y="261" width="11.3900%" height="15" fill="rgb(211,81,21)" fg:x="209" fg:w="118"/><text x="20.4237%" y="271.50">&lt;arrow_array::arr..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (78 samples, 7.53%)</title><rect x="24.0347%" y="245" width="7.5290%" height="15" fill="rgb(208,190,38)" fg:x="249" fg:w="78"/><text x="24.2847%" y="255.50">arrow_arra..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (12 samples, 1.16%)</title><rect x="30.4054%" y="229" width="1.1583%" height="15" fill="rgb(235,213,38)" fg:x="315" fg:w="12"/><text x="30.6554%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (12 samples, 1.16%)</title><rect x="30.4054%" y="213" width="1.1583%" height="15" fill="rgb(237,122,38)" fg:x="315" fg:w="12"/><text x="30.6554%" y="223.50"></text></g><g><title>cfree (15 samples, 1.45%)</title><rect x="31.5637%" y="341" width="1.4479%" height="15" fill="rgb(244,218,35)" fg:x="327" fg:w="15"/><text x="31.8137%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (2 samples, 0.19%)</title><rect x="33.0116%" y="341" width="0.1931%" height="15" fill="rgb(240,68,47)" fg:x="342" fg:w="2"/><text x="33.2616%" y="351.50"></text></g><g><title>cfree (2 samples, 0.19%)</title><rect x="33.0116%" y="325" width="0.1931%" height="15" fill="rgb(210,16,53)" fg:x="342" fg:w="2"/><text x="33.2616%" y="335.50"></text></g><g><title>__munmap (2 samples, 0.19%)</title><rect x="33.0116%" y="309" width="0.1931%" height="15" fill="rgb(235,124,12)" fg:x="342" fg:w="2"/><text x="33.2616%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.19%)</title><rect x="34.4595%" y="325" width="0.1931%" height="15" fill="rgb(224,169,11)" fg:x="357" fg:w="2"/><text x="34.7095%" y="335.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (4 samples, 0.39%)</title><rect x="34.6525%" y="325" width="0.3861%" height="15" fill="rgb(250,166,2)" fg:x="359" fg:w="4"/><text x="34.9025%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (4 samples, 0.39%)</title><rect x="34.6525%" y="309" width="0.3861%" height="15" fill="rgb(242,216,29)" fg:x="359" fg:w="4"/><text x="34.9025%" y="319.50"></text></g><g><title>cfree (18 samples, 1.74%)</title><rect x="35.0386%" y="325" width="1.7375%" height="15" fill="rgb(230,116,27)" fg:x="363" fg:w="18"/><text x="35.2886%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (37 samples, 3.57%)</title><rect x="36.7761%" y="325" width="3.5714%" height="15" fill="rgb(228,99,48)" fg:x="381" fg:w="37"/><text x="37.0261%" y="335.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (20 samples, 1.93%)</title><rect x="38.4170%" y="309" width="1.9305%" height="15" fill="rgb(253,11,6)" fg:x="398" fg:w="20"/><text x="38.6670%" y="319.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (10 samples, 0.97%)</title><rect x="41.2162%" y="309" width="0.9653%" height="15" fill="rgb(247,143,39)" fg:x="427" fg:w="10"/><text x="41.4662%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (6 samples, 0.58%)</title><rect x="42.1815%" y="309" width="0.5792%" height="15" fill="rgb(236,97,10)" fg:x="437" fg:w="6"/><text x="42.4315%" y="319.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (2 samples, 0.19%)</title><rect x="42.5676%" y="293" width="0.1931%" height="15" fill="rgb(233,208,19)" fg:x="441" fg:w="2"/><text x="42.8176%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (28 samples, 2.70%)</title><rect x="40.3475%" y="325" width="2.7027%" height="15" fill="rgb(216,164,2)" fg:x="418" fg:w="28"/><text x="40.5975%" y="335.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.29%)</title><rect x="42.7606%" y="309" width="0.2896%" height="15" fill="rgb(220,129,5)" fg:x="443" fg:w="3"/><text x="43.0106%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.19%)</title><rect x="44.3050%" y="309" width="0.1931%" height="15" fill="rgb(242,17,10)" fg:x="459" fg:w="2"/><text x="44.5550%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (10 samples, 0.97%)</title><rect x="44.4981%" y="309" width="0.9653%" height="15" fill="rgb(242,107,0)" fg:x="461" fg:w="10"/><text x="44.7481%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (140 samples, 13.51%)</title><rect x="33.2046%" y="341" width="13.5135%" height="15" fill="rgb(251,28,31)" fg:x="344" fg:w="140"/><text x="33.4546%" y="351.50">nemscraper::process:..</text></g><g><title>nemscraper::process::utils::clean_str (38 samples, 3.67%)</title><rect x="43.0502%" y="325" width="3.6680%" height="15" fill="rgb(233,223,10)" fg:x="446" fg:w="38"/><text x="43.3002%" y="335.50">nems..</text></g><g><title>malloc (13 samples, 1.25%)</title><rect x="45.4633%" y="309" width="1.2548%" height="15" fill="rgb(215,21,27)" fg:x="471" fg:w="13"/><text x="45.7133%" y="319.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.10%)</title><rect x="46.7181%" y="181" width="0.0965%" height="15" fill="rgb(232,23,21)" fg:x="484" fg:w="1"/><text x="46.9681%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.10%)</title><rect x="46.7181%" y="165" width="0.0965%" height="15" fill="rgb(244,5,23)" fg:x="484" fg:w="1"/><text x="46.9681%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="46.8147%" y="165" width="0.0965%" height="15" fill="rgb(226,81,46)" fg:x="485" fg:w="1"/><text x="47.0647%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="46.8147%" y="149" width="0.0965%" height="15" fill="rgb(247,70,30)" fg:x="485" fg:w="1"/><text x="47.0647%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.29%)</title><rect x="46.7181%" y="213" width="0.2896%" height="15" fill="rgb(212,68,19)" fg:x="484" fg:w="3"/><text x="46.9681%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.29%)</title><rect x="46.7181%" y="197" width="0.2896%" height="15" fill="rgb(240,187,13)" fg:x="484" fg:w="3"/><text x="46.9681%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.19%)</title><rect x="46.8147%" y="181" width="0.1931%" height="15" fill="rgb(223,113,26)" fg:x="485" fg:w="2"/><text x="47.0647%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="46.9112%" y="165" width="0.0965%" height="15" fill="rgb(206,192,2)" fg:x="486" fg:w="1"/><text x="47.1612%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (8 samples, 0.77%)</title><rect x="47.1042%" y="181" width="0.7722%" height="15" fill="rgb(241,108,4)" fg:x="488" fg:w="8"/><text x="47.3542%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (8 samples, 0.77%)</title><rect x="47.1042%" y="165" width="0.7722%" height="15" fill="rgb(247,173,49)" fg:x="488" fg:w="8"/><text x="47.3542%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="47.8764%" y="165" width="0.0965%" height="15" fill="rgb(224,114,35)" fg:x="496" fg:w="1"/><text x="48.1264%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="47.8764%" y="149" width="0.0965%" height="15" fill="rgb(245,159,27)" fg:x="496" fg:w="1"/><text x="48.1264%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="47.9730%" y="165" width="0.0965%" height="15" fill="rgb(245,172,44)" fg:x="497" fg:w="1"/><text x="48.2230%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.10%)</title><rect x="47.9730%" y="149" width="0.0965%" height="15" fill="rgb(236,23,11)" fg:x="497" fg:w="1"/><text x="48.2230%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.10%)</title><rect x="47.9730%" y="133" width="0.0965%" height="15" fill="rgb(205,117,38)" fg:x="497" fg:w="1"/><text x="48.2230%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="47.9730%" y="117" width="0.0965%" height="15" fill="rgb(237,72,25)" fg:x="497" fg:w="1"/><text x="48.2230%" y="127.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (15 samples, 1.45%)</title><rect x="46.7181%" y="229" width="1.4479%" height="15" fill="rgb(244,70,9)" fg:x="484" fg:w="15"/><text x="46.9681%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (12 samples, 1.16%)</title><rect x="47.0077%" y="213" width="1.1583%" height="15" fill="rgb(217,125,39)" fg:x="487" fg:w="12"/><text x="47.2577%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (12 samples, 1.16%)</title><rect x="47.0077%" y="197" width="1.1583%" height="15" fill="rgb(235,36,10)" fg:x="487" fg:w="12"/><text x="47.2577%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.29%)</title><rect x="47.8764%" y="181" width="0.2896%" height="15" fill="rgb(251,123,47)" fg:x="496" fg:w="3"/><text x="48.1264%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.10%)</title><rect x="48.0695%" y="165" width="0.0965%" height="15" fill="rgb(221,13,13)" fg:x="498" fg:w="1"/><text x="48.3195%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (16 samples, 1.54%)</title><rect x="46.7181%" y="309" width="1.5444%" height="15" fill="rgb(238,131,9)" fg:x="484" fg:w="16"/><text x="46.9681%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.54%)</title><rect x="46.7181%" y="293" width="1.5444%" height="15" fill="rgb(211,50,8)" fg:x="484" fg:w="16"/><text x="46.9681%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (16 samples, 1.54%)</title><rect x="46.7181%" y="277" width="1.5444%" height="15" fill="rgb(245,182,24)" fg:x="484" fg:w="16"/><text x="46.9681%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 1.54%)</title><rect x="46.7181%" y="261" width="1.5444%" height="15" fill="rgb(242,14,37)" fg:x="484" fg:w="16"/><text x="46.9681%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (16 samples, 1.54%)</title><rect x="46.7181%" y="245" width="1.5444%" height="15" fill="rgb(246,228,12)" fg:x="484" fg:w="16"/><text x="46.9681%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (1 samples, 0.10%)</title><rect x="48.1660%" y="229" width="0.0965%" height="15" fill="rgb(213,55,15)" fg:x="499" fg:w="1"/><text x="48.4160%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.10%)</title><rect x="48.1660%" y="213" width="0.0965%" height="15" fill="rgb(209,9,3)" fg:x="499" fg:w="1"/><text x="48.4160%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.10%)</title><rect x="48.1660%" y="197" width="0.0965%" height="15" fill="rgb(230,59,30)" fg:x="499" fg:w="1"/><text x="48.4160%" y="207.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="48.1660%" y="181" width="0.0965%" height="15" fill="rgb(209,121,21)" fg:x="499" fg:w="1"/><text x="48.4160%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (19 samples, 1.83%)</title><rect x="46.7181%" y="341" width="1.8340%" height="15" fill="rgb(220,109,13)" fg:x="484" fg:w="19"/><text x="46.9681%" y="351.50">p..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (19 samples, 1.83%)</title><rect x="46.7181%" y="325" width="1.8340%" height="15" fill="rgb(232,18,1)" fg:x="484" fg:w="19"/><text x="46.9681%" y="335.50">p..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (3 samples, 0.29%)</title><rect x="48.2625%" y="309" width="0.2896%" height="15" fill="rgb(215,41,42)" fg:x="500" fg:w="3"/><text x="48.5125%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (3 samples, 0.29%)</title><rect x="48.2625%" y="293" width="0.2896%" height="15" fill="rgb(224,123,36)" fg:x="500" fg:w="3"/><text x="48.5125%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (3 samples, 0.29%)</title><rect x="48.2625%" y="277" width="0.2896%" height="15" fill="rgb(240,125,3)" fg:x="500" fg:w="3"/><text x="48.5125%" y="287.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (3 samples, 0.29%)</title><rect x="48.2625%" y="261" width="0.2896%" height="15" fill="rgb(205,98,50)" fg:x="500" fg:w="3"/><text x="48.5125%" y="271.50"></text></g><g><title>write (3 samples, 0.29%)</title><rect x="48.2625%" y="245" width="0.2896%" height="15" fill="rgb(205,185,37)" fg:x="500" fg:w="3"/><text x="48.5125%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (8 samples, 0.77%)</title><rect x="49.0347%" y="261" width="0.7722%" height="15" fill="rgb(238,207,15)" fg:x="508" fg:w="8"/><text x="49.2847%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (7 samples, 0.68%)</title><rect x="49.1313%" y="245" width="0.6757%" height="15" fill="rgb(213,199,42)" fg:x="509" fg:w="7"/><text x="49.3813%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (6 samples, 0.58%)</title><rect x="49.2278%" y="229" width="0.5792%" height="15" fill="rgb(235,201,11)" fg:x="510" fg:w="6"/><text x="49.4778%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.19%)</title><rect x="49.8069%" y="245" width="0.1931%" height="15" fill="rgb(207,46,11)" fg:x="516" fg:w="2"/><text x="50.0569%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.19%)</title><rect x="49.8069%" y="229" width="0.1931%" height="15" fill="rgb(241,35,35)" fg:x="516" fg:w="2"/><text x="50.0569%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.10%)</title><rect x="49.9035%" y="213" width="0.0965%" height="15" fill="rgb(243,32,47)" fg:x="517" fg:w="1"/><text x="50.1535%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="50.0000%" y="245" width="0.0965%" height="15" fill="rgb(247,202,23)" fg:x="518" fg:w="1"/><text x="50.2500%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="50.0000%" y="229" width="0.0965%" height="15" fill="rgb(219,102,11)" fg:x="518" fg:w="1"/><text x="50.2500%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="50.0000%" y="213" width="0.0965%" height="15" fill="rgb(243,110,44)" fg:x="518" fg:w="1"/><text x="50.2500%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (16 samples, 1.54%)</title><rect x="48.6486%" y="293" width="1.5444%" height="15" fill="rgb(222,74,54)" fg:x="504" fg:w="16"/><text x="48.8986%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (16 samples, 1.54%)</title><rect x="48.6486%" y="277" width="1.5444%" height="15" fill="rgb(216,99,12)" fg:x="504" fg:w="16"/><text x="48.8986%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.39%)</title><rect x="49.8069%" y="261" width="0.3861%" height="15" fill="rgb(226,22,26)" fg:x="516" fg:w="4"/><text x="50.0569%" y="271.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.10%)</title><rect x="50.0965%" y="245" width="0.0965%" height="15" fill="rgb(217,163,10)" fg:x="519" fg:w="1"/><text x="50.3465%" y="255.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (2 samples, 0.19%)</title><rect x="53.7645%" y="245" width="0.1931%" height="15" fill="rgb(213,25,53)" fg:x="557" fg:w="2"/><text x="54.0145%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (24 samples, 2.32%)</title><rect x="51.7375%" y="277" width="2.3166%" height="15" fill="rgb(252,105,26)" fg:x="536" fg:w="24"/><text x="51.9875%" y="287.50">&lt;..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (13 samples, 1.25%)</title><rect x="52.7992%" y="261" width="1.2548%" height="15" fill="rgb(220,39,43)" fg:x="547" fg:w="13"/><text x="53.0492%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.10%)</title><rect x="53.9575%" y="245" width="0.0965%" height="15" fill="rgb(229,68,48)" fg:x="559" fg:w="1"/><text x="54.2075%" y="255.50"></text></g><g><title>parquet::column::writer::compare_greater (12 samples, 1.16%)</title><rect x="55.5019%" y="245" width="1.1583%" height="15" fill="rgb(252,8,32)" fg:x="575" fg:w="12"/><text x="55.7519%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (41 samples, 3.96%)</title><rect x="54.0541%" y="277" width="3.9575%" height="15" fill="rgb(223,20,43)" fg:x="560" fg:w="41"/><text x="54.3041%" y="287.50">&lt;par..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (35 samples, 3.38%)</title><rect x="54.6332%" y="261" width="3.3784%" height="15" fill="rgb(229,81,49)" fg:x="566" fg:w="35"/><text x="54.8832%" y="271.50">par..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (14 samples, 1.35%)</title><rect x="56.6602%" y="245" width="1.3514%" height="15" fill="rgb(236,28,36)" fg:x="587" fg:w="14"/><text x="56.9102%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (4 samples, 0.39%)</title><rect x="58.0116%" y="261" width="0.3861%" height="15" fill="rgb(249,185,26)" fg:x="601" fg:w="4"/><text x="58.2616%" y="271.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.39%)</title><rect x="58.0116%" y="245" width="0.3861%" height="15" fill="rgb(249,174,33)" fg:x="601" fg:w="4"/><text x="58.2616%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (4 samples, 0.39%)</title><rect x="58.0116%" y="229" width="0.3861%" height="15" fill="rgb(233,201,37)" fg:x="601" fg:w="4"/><text x="58.2616%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.29%)</title><rect x="58.3977%" y="229" width="0.2896%" height="15" fill="rgb(221,78,26)" fg:x="605" fg:w="3"/><text x="58.6477%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.29%)</title><rect x="58.3977%" y="213" width="0.2896%" height="15" fill="rgb(250,127,30)" fg:x="605" fg:w="3"/><text x="58.6477%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (7 samples, 0.68%)</title><rect x="58.3977%" y="261" width="0.6757%" height="15" fill="rgb(230,49,44)" fg:x="605" fg:w="7"/><text x="58.6477%" y="271.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (7 samples, 0.68%)</title><rect x="58.3977%" y="245" width="0.6757%" height="15" fill="rgb(229,67,23)" fg:x="605" fg:w="7"/><text x="58.6477%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.39%)</title><rect x="58.6873%" y="229" width="0.3861%" height="15" fill="rgb(249,83,47)" fg:x="608" fg:w="4"/><text x="58.9373%" y="239.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (3 samples, 0.29%)</title><rect x="64.2857%" y="213" width="0.2896%" height="15" fill="rgb(215,43,3)" fg:x="666" fg:w="3"/><text x="64.5357%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (49 samples, 4.73%)</title><rect x="59.9421%" y="229" width="4.7297%" height="15" fill="rgb(238,154,13)" fg:x="621" fg:w="49"/><text x="60.1921%" y="239.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="64.5753%" y="213" width="0.0965%" height="15" fill="rgb(219,56,2)" fg:x="669" fg:w="1"/><text x="64.8253%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (59 samples, 5.69%)</title><rect x="59.0734%" y="245" width="5.6950%" height="15" fill="rgb(233,0,4)" fg:x="612" fg:w="59"/><text x="59.3234%" y="255.50">brotli:..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.10%)</title><rect x="64.6718%" y="229" width="0.0965%" height="15" fill="rgb(235,30,7)" fg:x="670" fg:w="1"/><text x="64.9218%" y="239.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (7 samples, 0.68%)</title><rect x="64.7683%" y="245" width="0.6757%" height="15" fill="rgb(250,79,13)" fg:x="671" fg:w="7"/><text x="65.0183%" y="255.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (6 samples, 0.58%)</title><rect x="64.8649%" y="229" width="0.5792%" height="15" fill="rgb(211,146,34)" fg:x="672" fg:w="6"/><text x="65.1149%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="65.4440%" y="245" width="0.0965%" height="15" fill="rgb(228,22,38)" fg:x="678" fg:w="1"/><text x="65.6940%" y="255.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (4 samples, 0.39%)</title><rect x="71.3320%" y="197" width="0.3861%" height="15" fill="rgb(235,168,5)" fg:x="739" fg:w="4"/><text x="71.5820%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (64 samples, 6.18%)</title><rect x="65.8301%" y="229" width="6.1776%" height="15" fill="rgb(221,155,16)" fg:x="682" fg:w="64"/><text x="66.0801%" y="239.50">brotli::..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (52 samples, 5.02%)</title><rect x="66.9884%" y="213" width="5.0193%" height="15" fill="rgb(215,215,53)" fg:x="694" fg:w="52"/><text x="67.2384%" y="223.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (3 samples, 0.29%)</title><rect x="71.7181%" y="197" width="0.2896%" height="15" fill="rgb(223,4,10)" fg:x="743" fg:w="3"/><text x="71.9681%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::MetaBlockSplit&lt;Alloc&gt;::destroy (1 samples, 0.10%)</title><rect x="72.0077%" y="229" width="0.0965%" height="15" fill="rgb(234,103,6)" fg:x="746" fg:w="1"/><text x="72.2577%" y="239.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="72.0077%" y="213" width="0.0965%" height="15" fill="rgb(227,97,0)" fg:x="746" fg:w="1"/><text x="72.2577%" y="223.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="72.4903%" y="165" width="0.0965%" height="15" fill="rgb(234,150,53)" fg:x="751" fg:w="1"/><text x="72.7403%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.10%)</title><rect x="72.4903%" y="149" width="0.0965%" height="15" fill="rgb(228,201,54)" fg:x="751" fg:w="1"/><text x="72.7403%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (3 samples, 0.29%)</title><rect x="72.4903%" y="181" width="0.2896%" height="15" fill="rgb(222,22,37)" fg:x="751" fg:w="3"/><text x="72.7403%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (2 samples, 0.19%)</title><rect x="72.5869%" y="165" width="0.1931%" height="15" fill="rgb(237,53,32)" fg:x="752" fg:w="2"/><text x="72.8369%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.10%)</title><rect x="72.7799%" y="181" width="0.0965%" height="15" fill="rgb(233,25,53)" fg:x="754" fg:w="1"/><text x="73.0299%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (12 samples, 1.16%)</title><rect x="72.4903%" y="213" width="1.1583%" height="15" fill="rgb(210,40,34)" fg:x="751" fg:w="12"/><text x="72.7403%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (12 samples, 1.16%)</title><rect x="72.4903%" y="197" width="1.1583%" height="15" fill="rgb(241,220,44)" fg:x="751" fg:w="12"/><text x="72.7403%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (8 samples, 0.77%)</title><rect x="72.8764%" y="181" width="0.7722%" height="15" fill="rgb(235,28,35)" fg:x="755" fg:w="8"/><text x="73.1264%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (16 samples, 1.54%)</title><rect x="73.6486%" y="213" width="1.5444%" height="15" fill="rgb(210,56,17)" fg:x="763" fg:w="16"/><text x="73.8986%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (36 samples, 3.47%)</title><rect x="72.1042%" y="229" width="3.4749%" height="15" fill="rgb(224,130,29)" fg:x="747" fg:w="36"/><text x="72.3542%" y="239.50">bro..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (4 samples, 0.39%)</title><rect x="75.1931%" y="213" width="0.3861%" height="15" fill="rgb(235,212,8)" fg:x="779" fg:w="4"/><text x="75.4431%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (5 samples, 0.48%)</title><rect x="75.5792%" y="229" width="0.4826%" height="15" fill="rgb(223,33,50)" fg:x="783" fg:w="5"/><text x="75.8292%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (10 samples, 0.97%)</title><rect x="76.0618%" y="229" width="0.9653%" height="15" fill="rgb(219,149,13)" fg:x="788" fg:w="10"/><text x="76.3118%" y="239.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.19%)</title><rect x="76.8340%" y="213" width="0.1931%" height="15" fill="rgb(250,156,29)" fg:x="796" fg:w="2"/><text x="77.0840%" y="223.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.19%)</title><rect x="76.8340%" y="197" width="0.1931%" height="15" fill="rgb(216,193,19)" fg:x="796" fg:w="2"/><text x="77.0840%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (187 samples, 18.05%)</title><rect x="59.0734%" y="261" width="18.0502%" height="15" fill="rgb(216,135,14)" fg:x="612" fg:w="187"/><text x="59.3234%" y="271.50">&lt;parquet::compression::brotl..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (120 samples, 11.58%)</title><rect x="65.5405%" y="245" width="11.5830%" height="15" fill="rgb(241,47,5)" fg:x="679" fg:w="120"/><text x="65.7905%" y="255.50">brotli::enc::writ..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.10%)</title><rect x="77.0270%" y="229" width="0.0965%" height="15" fill="rgb(233,42,35)" fg:x="798" fg:w="1"/><text x="77.2770%" y="239.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.10%)</title><rect x="77.0270%" y="213" width="0.0965%" height="15" fill="rgb(231,13,6)" fg:x="798" fg:w="1"/><text x="77.2770%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (201 samples, 19.40%)</title><rect x="58.0116%" y="277" width="19.4015%" height="15" fill="rgb(207,181,40)" fg:x="601" fg:w="201"/><text x="58.2616%" y="287.50">parquet::column::writer::Gener..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (3 samples, 0.29%)</title><rect x="77.1236%" y="261" width="0.2896%" height="15" fill="rgb(254,173,49)" fg:x="799" fg:w="3"/><text x="77.3736%" y="271.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.10%)</title><rect x="82.3359%" y="213" width="0.0965%" height="15" fill="rgb(221,1,38)" fg:x="853" fg:w="1"/><text x="82.5859%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (45 samples, 4.34%)</title><rect x="78.1853%" y="229" width="4.3436%" height="15" fill="rgb(206,124,46)" fg:x="810" fg:w="45"/><text x="78.4353%" y="239.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="82.4324%" y="213" width="0.0965%" height="15" fill="rgb(249,21,11)" fg:x="854" fg:w="1"/><text x="82.6824%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (52 samples, 5.02%)</title><rect x="77.7027%" y="245" width="5.0193%" height="15" fill="rgb(222,201,40)" fg:x="805" fg:w="52"/><text x="77.9527%" y="255.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.19%)</title><rect x="82.5290%" y="229" width="0.1931%" height="15" fill="rgb(235,61,29)" fg:x="855" fg:w="2"/><text x="82.7790%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="82.7220%" y="245" width="0.0965%" height="15" fill="rgb(219,207,3)" fg:x="857" fg:w="1"/><text x="82.9720%" y="255.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.10%)</title><rect x="83.2046%" y="213" width="0.0965%" height="15" fill="rgb(222,56,46)" fg:x="862" fg:w="1"/><text x="83.4546%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.10%)</title><rect x="83.2046%" y="197" width="0.0965%" height="15" fill="rgb(239,76,54)" fg:x="862" fg:w="1"/><text x="83.4546%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="83.2046%" y="181" width="0.0965%" height="15" fill="rgb(231,124,27)" fg:x="862" fg:w="1"/><text x="83.4546%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (2 samples, 0.19%)</title><rect x="83.3012%" y="213" width="0.1931%" height="15" fill="rgb(249,195,6)" fg:x="863" fg:w="2"/><text x="83.5512%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (8 samples, 0.77%)</title><rect x="82.8185%" y="229" width="0.7722%" height="15" fill="rgb(237,174,47)" fg:x="858" fg:w="8"/><text x="83.0685%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.10%)</title><rect x="83.4942%" y="213" width="0.0965%" height="15" fill="rgb(206,201,31)" fg:x="865" fg:w="1"/><text x="83.7442%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (13 samples, 1.25%)</title><rect x="82.8185%" y="245" width="1.2548%" height="15" fill="rgb(231,57,52)" fg:x="858" fg:w="13"/><text x="83.0685%" y="255.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (5 samples, 0.48%)</title><rect x="83.5907%" y="229" width="0.4826%" height="15" fill="rgb(248,177,22)" fg:x="866" fg:w="5"/><text x="83.8407%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (369 samples, 35.62%)</title><rect x="48.5521%" y="309" width="35.6178%" height="15" fill="rgb(215,211,37)" fg:x="503" fg:w="369"/><text x="48.8021%" y="319.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (352 samples, 33.98%)</title><rect x="50.1931%" y="293" width="33.9768%" height="15" fill="rgb(241,128,51)" fg:x="520" fg:w="352"/><text x="50.4431%" y="303.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (70 samples, 6.76%)</title><rect x="77.4131%" y="277" width="6.7568%" height="15" fill="rgb(227,165,31)" fg:x="802" fg:w="70"/><text x="77.6631%" y="287.50">parquet::..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (70 samples, 6.76%)</title><rect x="77.4131%" y="261" width="6.7568%" height="15" fill="rgb(228,167,24)" fg:x="802" fg:w="70"/><text x="77.6631%" y="271.50">&lt;parquet:..</text></g><g><title>calloc (1 samples, 0.10%)</title><rect x="84.0734%" y="245" width="0.0965%" height="15" fill="rgb(228,143,12)" fg:x="871" fg:w="1"/><text x="84.3234%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (370 samples, 35.71%)</title><rect x="48.5521%" y="341" width="35.7143%" height="15" fill="rgb(249,149,8)" fg:x="503" fg:w="370"/><text x="48.8021%" y="351.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (370 samples, 35.71%)</title><rect x="48.5521%" y="325" width="35.7143%" height="15" fill="rgb(243,35,44)" fg:x="503" fg:w="370"/><text x="48.8021%" y="335.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (1 samples, 0.10%)</title><rect x="84.1699%" y="309" width="0.0965%" height="15" fill="rgb(246,89,9)" fg:x="872" fg:w="1"/><text x="84.4199%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (1 samples, 0.10%)</title><rect x="84.1699%" y="293" width="0.0965%" height="15" fill="rgb(233,213,13)" fg:x="872" fg:w="1"/><text x="84.4199%" y="303.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (828 samples, 79.92%)</title><rect x="4.4402%" y="373" width="79.9228%" height="15" fill="rgb(233,141,41)" fg:x="46" fg:w="828"/><text x="4.6902%" y="383.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (807 samples, 77.90%)</title><rect x="6.4672%" y="357" width="77.8958%" height="15" fill="rgb(239,167,4)" fg:x="67" fg:w="807"/><text x="6.7172%" y="367.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="84.2664%" y="341" width="0.0965%" height="15" fill="rgb(209,217,16)" fg:x="873" fg:w="1"/><text x="84.5164%" y="351.50"></text></g><g><title>open64 (1 samples, 0.10%)</title><rect x="84.2664%" y="325" width="0.0965%" height="15" fill="rgb(219,88,35)" fg:x="873" fg:w="1"/><text x="84.5164%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (8 samples, 0.77%)</title><rect x="84.9421%" y="357" width="0.7722%" height="15" fill="rgb(220,193,23)" fg:x="880" fg:w="8"/><text x="85.1921%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (10 samples, 0.97%)</title><rect x="85.7143%" y="357" width="0.9653%" height="15" fill="rgb(230,90,52)" fg:x="888" fg:w="10"/><text x="85.9643%" y="367.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.19%)</title><rect x="86.7761%" y="293" width="0.1931%" height="15" fill="rgb(252,106,19)" fg:x="899" fg:w="2"/><text x="87.0261%" y="303.50"></text></g><g><title>crc32fast::Hasher::update (13 samples, 1.25%)</title><rect x="86.7761%" y="325" width="1.2548%" height="15" fill="rgb(206,74,20)" fg:x="899" fg:w="13"/><text x="87.0261%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (13 samples, 1.25%)</title><rect x="86.7761%" y="309" width="1.2548%" height="15" fill="rgb(230,138,44)" fg:x="899" fg:w="13"/><text x="87.0261%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (11 samples, 1.06%)</title><rect x="86.9691%" y="293" width="1.0618%" height="15" fill="rgb(235,182,43)" fg:x="901" fg:w="11"/><text x="87.2191%" y="303.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.10%)</title><rect x="87.9344%" y="277" width="0.0965%" height="15" fill="rgb(242,16,51)" fg:x="911" fg:w="1"/><text x="88.1844%" y="287.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (71 samples, 6.85%)</title><rect x="88.7066%" y="261" width="6.8533%" height="15" fill="rgb(248,9,4)" fg:x="919" fg:w="71"/><text x="88.9566%" y="271.50">zlib_rs::..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (79 samples, 7.63%)</title><rect x="88.0309%" y="309" width="7.6255%" height="15" fill="rgb(210,31,22)" fg:x="912" fg:w="79"/><text x="88.2809%" y="319.50">&lt;flate2::m..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (79 samples, 7.63%)</title><rect x="88.0309%" y="293" width="7.6255%" height="15" fill="rgb(239,54,39)" fg:x="912" fg:w="79"/><text x="88.2809%" y="303.50">&lt;flate2::f..</text></g><g><title>zlib_rs::inflate::inflate (79 samples, 7.63%)</title><rect x="88.0309%" y="277" width="7.6255%" height="15" fill="rgb(230,99,41)" fg:x="912" fg:w="79"/><text x="88.2809%" y="287.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.10%)</title><rect x="95.5598%" y="261" width="0.0965%" height="15" fill="rgb(253,106,12)" fg:x="990" fg:w="1"/><text x="95.8098%" y="271.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (994 samples, 95.95%)</title><rect x="0.0000%" y="405" width="95.9459%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="994"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (984 samples, 94.98%)</title><rect x="0.9653%" y="389" width="94.9807%" height="15" fill="rgb(215,133,35)" fg:x="10" fg:w="984"/><text x="1.2153%" y="399.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (120 samples, 11.58%)</title><rect x="84.3629%" y="373" width="11.5830%" height="15" fill="rgb(213,28,5)" fg:x="874" fg:w="120"/><text x="84.6129%" y="383.50">std::io::append_t..</text></g><g><title>std::io::default_read_buf (96 samples, 9.27%)</title><rect x="86.6795%" y="357" width="9.2664%" height="15" fill="rgb(215,77,49)" fg:x="898" fg:w="96"/><text x="86.9295%" y="367.50">std::io::defa..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (96 samples, 9.27%)</title><rect x="86.6795%" y="341" width="9.2664%" height="15" fill="rgb(248,100,22)" fg:x="898" fg:w="96"/><text x="86.9295%" y="351.50">&lt;zip::crc32::..</text></g><g><title>flate2::zio::read (82 samples, 7.92%)</title><rect x="88.0309%" y="325" width="7.9151%" height="15" fill="rgb(208,67,9)" fg:x="912" fg:w="82"/><text x="88.2809%" y="335.50">flate2::zio..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (3 samples, 0.29%)</title><rect x="95.6564%" y="309" width="0.2896%" height="15" fill="rgb(219,133,21)" fg:x="991" fg:w="3"/><text x="95.9064%" y="319.50"></text></g><g><title>chrono::offset::local::Local::now (1 samples, 0.10%)</title><rect x="95.9459%" y="405" width="0.0965%" height="15" fill="rgb(246,46,29)" fg:x="994" fg:w="1"/><text x="96.1959%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.10%)</title><rect x="95.9459%" y="389" width="0.0965%" height="15" fill="rgb(246,185,52)" fg:x="994" fg:w="1"/><text x="96.1959%" y="399.50"></text></g><g><title>&lt;chrono::offset::local::inner::Cache as core::default::Default&gt;::default (1 samples, 0.10%)</title><rect x="95.9459%" y="373" width="0.0965%" height="15" fill="rgb(252,136,11)" fg:x="994" fg:w="1"/><text x="96.1959%" y="383.50"></text></g><g><title>bench_zip_to_pa (997 samples, 96.24%)</title><rect x="0.0000%" y="565" width="96.2355%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="997"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (997 samples, 96.24%)</title><rect x="0.0000%" y="549" width="96.2355%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="997"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (997 samples, 96.24%)</title><rect x="0.0000%" y="533" width="96.2355%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="997"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (997 samples, 96.24%)</title><rect x="0.0000%" y="517" width="96.2355%" height="15" fill="rgb(251,222,45)" fg:x="0" fg:w="997"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (997 samples, 96.24%)</title><rect x="0.0000%" y="501" width="96.2355%" height="15" fill="rgb(217,162,53)" fg:x="0" fg:w="997"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (997 samples, 96.24%)</title><rect x="0.0000%" y="485" width="96.2355%" height="15" fill="rgb(229,93,14)" fg:x="0" fg:w="997"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (997 samples, 96.24%)</title><rect x="0.0000%" y="469" width="96.2355%" height="15" fill="rgb(209,67,49)" fg:x="0" fg:w="997"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (997 samples, 96.24%)</title><rect x="0.0000%" y="453" width="96.2355%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="997"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (997 samples, 96.24%)</title><rect x="0.0000%" y="437" width="96.2355%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="997"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (997 samples, 96.24%)</title><rect x="0.0000%" y="421" width="96.2355%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="997"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.19%)</title><rect x="96.0425%" y="405" width="0.1931%" height="15" fill="rgb(221,220,41)" fg:x="995" fg:w="2"/><text x="96.2925%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.19%)</title><rect x="96.0425%" y="389" width="0.1931%" height="15" fill="rgb(218,133,21)" fg:x="995" fg:w="2"/><text x="96.2925%" y="399.50"></text></g><g><title>syscall (2 samples, 0.19%)</title><rect x="96.0425%" y="373" width="0.1931%" height="15" fill="rgb(221,193,43)" fg:x="995" fg:w="2"/><text x="96.2925%" y="383.50"></text></g><g><title>powf64 (1 samples, 0.10%)</title><rect x="96.2355%" y="373" width="0.0965%" height="15" fill="rgb(240,128,52)" fg:x="997" fg:w="1"/><text x="96.4855%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="96.3320%" y="373" width="0.0965%" height="15" fill="rgb(253,114,12)" fg:x="998" fg:w="1"/><text x="96.5820%" y="383.50"></text></g><g><title>clock_gettime (1 samples, 0.10%)</title><rect x="96.3320%" y="357" width="0.0965%" height="15" fill="rgb(215,223,47)" fg:x="998" fg:w="1"/><text x="96.5820%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.19%)</title><rect x="96.4286%" y="341" width="0.1931%" height="15" fill="rgb(248,225,23)" fg:x="999" fg:w="2"/><text x="96.6786%" y="351.50"></text></g><g><title>syscall (2 samples, 0.19%)</title><rect x="96.4286%" y="325" width="0.1931%" height="15" fill="rgb(250,108,0)" fg:x="999" fg:w="2"/><text x="96.6786%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.10%)</title><rect x="96.6216%" y="325" width="0.0965%" height="15" fill="rgb(228,208,7)" fg:x="1001" fg:w="1"/><text x="96.8716%" y="335.50"></text></g><g><title>clock_gettime (1 samples, 0.10%)</title><rect x="96.6216%" y="309" width="0.0965%" height="15" fill="rgb(244,45,10)" fg:x="1001" fg:w="1"/><text x="96.8716%" y="319.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.10%)</title><rect x="96.7181%" y="325" width="0.0965%" height="15" fill="rgb(207,125,25)" fg:x="1002" fg:w="1"/><text x="96.9681%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10 samples, 0.97%)</title><rect x="96.4286%" y="373" width="0.9653%" height="15" fill="rgb(210,195,18)" fg:x="999" fg:w="10"/><text x="96.6786%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (10 samples, 0.97%)</title><rect x="96.4286%" y="357" width="0.9653%" height="15" fill="rgb(249,80,12)" fg:x="999" fg:w="10"/><text x="96.6786%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (8 samples, 0.77%)</title><rect x="96.6216%" y="341" width="0.7722%" height="15" fill="rgb(221,65,9)" fg:x="1001" fg:w="8"/><text x="96.8716%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (6 samples, 0.58%)</title><rect x="96.8147%" y="325" width="0.5792%" height="15" fill="rgb(235,49,36)" fg:x="1003" fg:w="6"/><text x="97.0647%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (6 samples, 0.58%)</title><rect x="96.8147%" y="309" width="0.5792%" height="15" fill="rgb(225,32,20)" fg:x="1003" fg:w="6"/><text x="97.0647%" y="319.50"></text></g><g><title>epoll_wait (6 samples, 0.58%)</title><rect x="96.8147%" y="293" width="0.5792%" height="15" fill="rgb(215,141,46)" fg:x="1003" fg:w="6"/><text x="97.0647%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.19%)</title><rect x="97.3938%" y="357" width="0.1931%" height="15" fill="rgb(250,160,47)" fg:x="1009" fg:w="2"/><text x="97.6438%" y="367.50"></text></g><g><title>syscall (2 samples, 0.19%)</title><rect x="97.3938%" y="341" width="0.1931%" height="15" fill="rgb(216,222,40)" fg:x="1009" fg:w="2"/><text x="97.6438%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.39%)</title><rect x="97.5869%" y="357" width="0.3861%" height="15" fill="rgb(234,217,39)" fg:x="1011" fg:w="4"/><text x="97.8369%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.39%)</title><rect x="97.5869%" y="341" width="0.3861%" height="15" fill="rgb(207,178,40)" fg:x="1011" fg:w="4"/><text x="97.8369%" y="351.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (4 samples, 0.39%)</title><rect x="97.5869%" y="325" width="0.3861%" height="15" fill="rgb(221,136,13)" fg:x="1011" fg:w="4"/><text x="97.8369%" y="335.50"></text></g><g><title>write (4 samples, 0.39%)</title><rect x="97.5869%" y="309" width="0.3861%" height="15" fill="rgb(249,199,10)" fg:x="1011" fg:w="4"/><text x="97.8369%" y="319.50"></text></g><g><title>malloc (1 samples, 0.10%)</title><rect x="98.0695%" y="245" width="0.0965%" height="15" fill="rgb(249,222,13)" fg:x="1016" fg:w="1"/><text x="98.3195%" y="255.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.10%)</title><rect x="98.1660%" y="213" width="0.0965%" height="15" fill="rgb(244,185,38)" fg:x="1017" fg:w="1"/><text x="98.4160%" y="223.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (9 samples, 0.87%)</title><rect x="98.0695%" y="277" width="0.8687%" height="15" fill="rgb(236,202,9)" fg:x="1016" fg:w="9"/><text x="98.3195%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (9 samples, 0.87%)</title><rect x="98.0695%" y="261" width="0.8687%" height="15" fill="rgb(250,229,37)" fg:x="1016" fg:w="9"/><text x="98.3195%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (8 samples, 0.77%)</title><rect x="98.1660%" y="245" width="0.7722%" height="15" fill="rgb(206,174,23)" fg:x="1017" fg:w="8"/><text x="98.4160%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.77%)</title><rect x="98.1660%" y="229" width="0.7722%" height="15" fill="rgb(211,33,43)" fg:x="1017" fg:w="8"/><text x="98.4160%" y="239.50"></text></g><g><title>syscall (7 samples, 0.68%)</title><rect x="98.2625%" y="213" width="0.6757%" height="15" fill="rgb(245,58,50)" fg:x="1018" fg:w="7"/><text x="98.5125%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;rustls::key::Certificate&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="99.0347%" y="181" width="0.0965%" height="15" fill="rgb(244,68,36)" fg:x="1026" fg:w="1"/><text x="99.2847%" y="191.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.10%)</title><rect x="99.2278%" y="133" width="0.0965%" height="15" fill="rgb(232,229,15)" fg:x="1028" fg:w="1"/><text x="99.4778%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.10%)</title><rect x="99.2278%" y="117" width="0.0965%" height="15" fill="rgb(254,30,23)" fg:x="1028" fg:w="1"/><text x="99.4778%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (3 samples, 0.29%)</title><rect x="99.1313%" y="165" width="0.2896%" height="15" fill="rgb(235,160,14)" fg:x="1027" fg:w="3"/><text x="99.3813%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (2 samples, 0.19%)</title><rect x="99.2278%" y="149" width="0.1931%" height="15" fill="rgb(212,155,44)" fg:x="1028" fg:w="2"/><text x="99.4778%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.10%)</title><rect x="99.3243%" y="133" width="0.0965%" height="15" fill="rgb(226,2,50)" fg:x="1029" fg:w="1"/><text x="99.5743%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.10%)</title><rect x="99.3243%" y="117" width="0.0965%" height="15" fill="rgb(234,177,6)" fg:x="1029" fg:w="1"/><text x="99.5743%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.10%)</title><rect x="99.3243%" y="101" width="0.0965%" height="15" fill="rgb(217,24,9)" fg:x="1029" fg:w="1"/><text x="99.5743%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.10%)</title><rect x="99.3243%" y="85" width="0.0965%" height="15" fill="rgb(220,13,46)" fg:x="1029" fg:w="1"/><text x="99.5743%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.10%)</title><rect x="99.3243%" y="69" width="0.0965%" height="15" fill="rgb(239,221,27)" fg:x="1029" fg:w="1"/><text x="99.5743%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.10%)</title><rect x="99.3243%" y="53" width="0.0965%" height="15" fill="rgb(222,198,25)" fg:x="1029" fg:w="1"/><text x="99.5743%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.10%)</title><rect x="99.3243%" y="37" width="0.0965%" height="15" fill="rgb(211,99,13)" fg:x="1029" fg:w="1"/><text x="99.5743%" y="47.50"></text></g><g><title>all (1,036 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="1036"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (39 samples, 3.76%)</title><rect x="96.2355%" y="565" width="3.7645%" height="15" fill="rgb(245,82,37)" fg:x="997" fg:w="39"/><text x="96.4855%" y="575.50">toki..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (39 samples, 3.76%)</title><rect x="96.2355%" y="549" width="3.7645%" height="15" fill="rgb(227,149,46)" fg:x="997" fg:w="39"/><text x="96.4855%" y="559.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (39 samples, 3.76%)</title><rect x="96.2355%" y="533" width="3.7645%" height="15" fill="rgb(218,36,50)" fg:x="997" fg:w="39"/><text x="96.4855%" y="543.50">core..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (39 samples, 3.76%)</title><rect x="96.2355%" y="517" width="3.7645%" height="15" fill="rgb(226,80,48)" fg:x="997" fg:w="39"/><text x="96.4855%" y="527.50">std:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (39 samples, 3.76%)</title><rect x="96.2355%" y="501" width="3.7645%" height="15" fill="rgb(238,224,15)" fg:x="997" fg:w="39"/><text x="96.4855%" y="511.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (39 samples, 3.76%)</title><rect x="96.2355%" y="485" width="3.7645%" height="15" fill="rgb(241,136,10)" fg:x="997" fg:w="39"/><text x="96.4855%" y="495.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (39 samples, 3.76%)</title><rect x="96.2355%" y="469" width="3.7645%" height="15" fill="rgb(208,32,45)" fg:x="997" fg:w="39"/><text x="96.4855%" y="479.50">toki..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 3.76%)</title><rect x="96.2355%" y="453" width="3.7645%" height="15" fill="rgb(207,135,9)" fg:x="997" fg:w="39"/><text x="96.4855%" y="463.50">&lt;tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (39 samples, 3.76%)</title><rect x="96.2355%" y="437" width="3.7645%" height="15" fill="rgb(206,86,44)" fg:x="997" fg:w="39"/><text x="96.4855%" y="447.50">toki..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (39 samples, 3.76%)</title><rect x="96.2355%" y="421" width="3.7645%" height="15" fill="rgb(245,177,15)" fg:x="997" fg:w="39"/><text x="96.4855%" y="431.50">toki..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (39 samples, 3.76%)</title><rect x="96.2355%" y="405" width="3.7645%" height="15" fill="rgb(206,64,50)" fg:x="997" fg:w="39"/><text x="96.4855%" y="415.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (39 samples, 3.76%)</title><rect x="96.2355%" y="389" width="3.7645%" height="15" fill="rgb(234,36,40)" fg:x="997" fg:w="39"/><text x="96.4855%" y="399.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (27 samples, 2.61%)</title><rect x="97.3938%" y="373" width="2.6062%" height="15" fill="rgb(213,64,8)" fg:x="1009" fg:w="27"/><text x="97.6438%" y="383.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (21 samples, 2.03%)</title><rect x="97.9730%" y="357" width="2.0270%" height="15" fill="rgb(210,75,36)" fg:x="1015" fg:w="21"/><text x="98.2230%" y="367.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (21 samples, 2.03%)</title><rect x="97.9730%" y="341" width="2.0270%" height="15" fill="rgb(229,88,21)" fg:x="1015" fg:w="21"/><text x="98.2230%" y="351.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (21 samples, 2.03%)</title><rect x="97.9730%" y="325" width="2.0270%" height="15" fill="rgb(252,204,47)" fg:x="1015" fg:w="21"/><text x="98.2230%" y="335.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (21 samples, 2.03%)</title><rect x="97.9730%" y="309" width="2.0270%" height="15" fill="rgb(208,77,27)" fg:x="1015" fg:w="21"/><text x="98.2230%" y="319.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (21 samples, 2.03%)</title><rect x="97.9730%" y="293" width="2.0270%" height="15" fill="rgb(221,76,26)" fg:x="1015" fg:w="21"/><text x="98.2230%" y="303.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (11 samples, 1.06%)</title><rect x="98.9382%" y="277" width="1.0618%" height="15" fill="rgb(225,139,18)" fg:x="1025" fg:w="11"/><text x="99.1882%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (11 samples, 1.06%)</title><rect x="98.9382%" y="261" width="1.0618%" height="15" fill="rgb(230,137,11)" fg:x="1025" fg:w="11"/><text x="99.1882%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (11 samples, 1.06%)</title><rect x="98.9382%" y="245" width="1.0618%" height="15" fill="rgb(212,28,1)" fg:x="1025" fg:w="11"/><text x="99.1882%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (11 samples, 1.06%)</title><rect x="98.9382%" y="229" width="1.0618%" height="15" fill="rgb(248,164,17)" fg:x="1025" fg:w="11"/><text x="99.1882%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.06%)</title><rect x="98.9382%" y="213" width="1.0618%" height="15" fill="rgb(222,171,42)" fg:x="1025" fg:w="11"/><text x="99.1882%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.06%)</title><rect x="98.9382%" y="197" width="1.0618%" height="15" fill="rgb(243,84,45)" fg:x="1025" fg:w="11"/><text x="99.1882%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (9 samples, 0.87%)</title><rect x="99.1313%" y="181" width="0.8687%" height="15" fill="rgb(252,49,23)" fg:x="1027" fg:w="9"/><text x="99.3813%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (6 samples, 0.58%)</title><rect x="99.4208%" y="165" width="0.5792%" height="15" fill="rgb(215,19,7)" fg:x="1030" fg:w="6"/><text x="99.6708%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (6 samples, 0.58%)</title><rect x="99.4208%" y="149" width="0.5792%" height="15" fill="rgb(238,81,41)" fg:x="1030" fg:w="6"/><text x="99.6708%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (5 samples, 0.48%)</title><rect x="99.5174%" y="133" width="0.4826%" height="15" fill="rgb(210,199,37)" fg:x="1031" fg:w="5"/><text x="99.7674%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.39%)</title><rect x="99.6139%" y="117" width="0.3861%" height="15" fill="rgb(244,192,49)" fg:x="1032" fg:w="4"/><text x="99.8639%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (4 samples, 0.39%)</title><rect x="99.6139%" y="101" width="0.3861%" height="15" fill="rgb(226,211,11)" fg:x="1032" fg:w="4"/><text x="99.8639%" y="111.50"></text></g><g><title>recv (4 samples, 0.39%)</title><rect x="99.6139%" y="85" width="0.3861%" height="15" fill="rgb(236,162,54)" fg:x="1032" fg:w="4"/><text x="99.8639%" y="95.50"></text></g></svg></svg>