<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1081"><g><title>cfree (1 samples, 0.09%)</title><rect x="0.7401%" y="277" width="0.0925%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="1"/><text x="0.9901%" y="287.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.19%)</title><rect x="0.9251%" y="213" width="0.1850%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="2"/><text x="1.1751%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.74%)</title><rect x="0.9251%" y="229" width="0.7401%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="8"/><text x="1.1751%" y="239.50"></text></g><g><title>syscall (6 samples, 0.56%)</title><rect x="1.1101%" y="213" width="0.5550%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="6"/><text x="1.3601%" y="223.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (1 samples, 0.09%)</title><rect x="1.6651%" y="229" width="0.0925%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="1"/><text x="1.9151%" y="239.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.39%)</title><rect x="0.7401%" y="389" width="1.3876%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="15"/><text x="0.9901%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (15 samples, 1.39%)</title><rect x="0.7401%" y="373" width="1.3876%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="15"/><text x="0.9901%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (15 samples, 1.39%)</title><rect x="0.7401%" y="357" width="1.3876%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="15"/><text x="0.9901%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (15 samples, 1.39%)</title><rect x="0.7401%" y="341" width="1.3876%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="15"/><text x="0.9901%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (15 samples, 1.39%)</title><rect x="0.7401%" y="325" width="1.3876%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="15"/><text x="0.9901%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 1.39%)</title><rect x="0.7401%" y="309" width="1.3876%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="15"/><text x="0.9901%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (15 samples, 1.39%)</title><rect x="0.7401%" y="293" width="1.3876%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="15"/><text x="0.9901%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (14 samples, 1.30%)</title><rect x="0.8326%" y="277" width="1.2951%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="14"/><text x="1.0826%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (13 samples, 1.20%)</title><rect x="0.9251%" y="261" width="1.2026%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="13"/><text x="1.1751%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (13 samples, 1.20%)</title><rect x="0.9251%" y="245" width="1.2026%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="13"/><text x="1.1751%" y="255.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (4 samples, 0.37%)</title><rect x="1.7576%" y="229" width="0.3700%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="4"/><text x="2.0076%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.37%)</title><rect x="1.7576%" y="213" width="0.3700%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="4"/><text x="2.0076%" y="223.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (4 samples, 0.37%)</title><rect x="1.7576%" y="197" width="0.3700%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="4"/><text x="2.0076%" y="207.50"></text></g><g><title>write (4 samples, 0.37%)</title><rect x="1.7576%" y="181" width="0.3700%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="4"/><text x="2.0076%" y="191.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.09%)</title><rect x="2.1277%" y="389" width="0.0925%" height="15" fill="rgb(226,26,5)" fg:x="23" fg:w="1"/><text x="2.3777%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.09%)</title><rect x="2.1277%" y="373" width="0.0925%" height="15" fill="rgb(249,33,26)" fg:x="23" fg:w="1"/><text x="2.3777%" y="383.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.09%)</title><rect x="2.2202%" y="389" width="0.0925%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="1"/><text x="2.4702%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (1 samples, 0.09%)</title><rect x="2.2202%" y="373" width="0.0925%" height="15" fill="rgb(221,5,38)" fg:x="24" fg:w="1"/><text x="2.4702%" y="383.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::try_close (1 samples, 0.09%)</title><rect x="2.2202%" y="357" width="0.0925%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="1"/><text x="2.4702%" y="367.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.09%)</title><rect x="2.4052%" y="341" width="0.0925%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="1"/><text x="2.6552%" y="351.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.09%)</title><rect x="2.4977%" y="341" width="0.0925%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="1"/><text x="2.7477%" y="351.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="2.4977%" y="325" width="0.0925%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="1"/><text x="2.7477%" y="335.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="2.5902%" y="213" width="0.0925%" height="15" fill="rgb(238,160,17)" fg:x="28" fg:w="1"/><text x="2.8402%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="2.5902%" y="197" width="0.0925%" height="15" fill="rgb(214,148,48)" fg:x="28" fg:w="1"/><text x="2.8402%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="2.5902%" y="181" width="0.0925%" height="15" fill="rgb(232,36,49)" fg:x="28" fg:w="1"/><text x="2.8402%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="2.5902%" y="165" width="0.0925%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="1"/><text x="2.8402%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (2 samples, 0.19%)</title><rect x="2.5902%" y="341" width="0.1850%" height="15" fill="rgb(229,88,8)" fg:x="28" fg:w="2"/><text x="2.8402%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.19%)</title><rect x="2.5902%" y="325" width="0.1850%" height="15" fill="rgb(213,181,19)" fg:x="28" fg:w="2"/><text x="2.8402%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.19%)</title><rect x="2.5902%" y="309" width="0.1850%" height="15" fill="rgb(254,191,54)" fg:x="28" fg:w="2"/><text x="2.8402%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.19%)</title><rect x="2.5902%" y="293" width="0.1850%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="2"/><text x="2.8402%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.19%)</title><rect x="2.5902%" y="277" width="0.1850%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="2"/><text x="2.8402%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.19%)</title><rect x="2.5902%" y="261" width="0.1850%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="2"/><text x="2.8402%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.19%)</title><rect x="2.5902%" y="245" width="0.1850%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="2"/><text x="2.8402%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.19%)</title><rect x="2.5902%" y="229" width="0.1850%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="2"/><text x="2.8402%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="2.6827%" y="213" width="0.0925%" height="15" fill="rgb(232,182,51)" fg:x="29" fg:w="1"/><text x="2.9327%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="2.6827%" y="197" width="0.0925%" height="15" fill="rgb(231,60,39)" fg:x="29" fg:w="1"/><text x="2.9327%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="2.6827%" y="181" width="0.0925%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="1"/><text x="2.9327%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="2.6827%" y="165" width="0.0925%" height="15" fill="rgb(235,93,37)" fg:x="29" fg:w="1"/><text x="2.9327%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="2.6827%" y="149" width="0.0925%" height="15" fill="rgb(213,116,39)" fg:x="29" fg:w="1"/><text x="2.9327%" y="159.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (5 samples, 0.46%)</title><rect x="2.4052%" y="373" width="0.4625%" height="15" fill="rgb(222,207,29)" fg:x="26" fg:w="5"/><text x="2.6552%" y="383.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (5 samples, 0.46%)</title><rect x="2.4052%" y="357" width="0.4625%" height="15" fill="rgb(206,96,30)" fg:x="26" fg:w="5"/><text x="2.6552%" y="367.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.09%)</title><rect x="2.7752%" y="341" width="0.0925%" height="15" fill="rgb(218,138,4)" fg:x="30" fg:w="1"/><text x="3.0252%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.09%)</title><rect x="2.7752%" y="325" width="0.0925%" height="15" fill="rgb(250,191,14)" fg:x="30" fg:w="1"/><text x="3.0252%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.09%)</title><rect x="2.7752%" y="309" width="0.0925%" height="15" fill="rgb(239,60,40)" fg:x="30" fg:w="1"/><text x="3.0252%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.09%)</title><rect x="2.7752%" y="293" width="0.0925%" height="15" fill="rgb(206,27,48)" fg:x="30" fg:w="1"/><text x="3.0252%" y="303.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.09%)</title><rect x="2.7752%" y="277" width="0.0925%" height="15" fill="rgb(225,35,8)" fg:x="30" fg:w="1"/><text x="3.0252%" y="287.50"></text></g><g><title>malloc (16 samples, 1.48%)</title><rect x="3.1452%" y="357" width="1.4801%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="16"/><text x="3.3952%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (23 samples, 2.13%)</title><rect x="8.7882%" y="293" width="2.1277%" height="15" fill="rgb(247,123,22)" fg:x="95" fg:w="23"/><text x="9.0382%" y="303.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 2.13%)</title><rect x="8.7882%" y="277" width="2.1277%" height="15" fill="rgb(231,138,38)" fg:x="95" fg:w="23"/><text x="9.0382%" y="287.50">a..</text></g><g><title>__libc_realloc (23 samples, 2.13%)</title><rect x="8.7882%" y="261" width="2.1277%" height="15" fill="rgb(231,145,46)" fg:x="95" fg:w="23"/><text x="9.0382%" y="271.50">_..</text></g><g><title>arrow_csv::reader::Decoder::decode (111 samples, 10.27%)</title><rect x="6.8455%" y="325" width="10.2683%" height="15" fill="rgb(251,118,11)" fg:x="74" fg:w="111"/><text x="7.0955%" y="335.50">arrow_csv::read..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (111 samples, 10.27%)</title><rect x="6.8455%" y="309" width="10.2683%" height="15" fill="rgb(217,147,25)" fg:x="74" fg:w="111"/><text x="7.0955%" y="319.50">arrow_csv::read..</text></g><g><title>csv_core::reader::Reader::read_record (67 samples, 6.20%)</title><rect x="10.9158%" y="293" width="6.1980%" height="15" fill="rgb(247,81,37)" fg:x="118" fg:w="67"/><text x="11.1658%" y="303.50">csv_core..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (12 samples, 1.11%)</title><rect x="17.1138%" y="309" width="1.1101%" height="15" fill="rgb(209,12,38)" fg:x="185" fg:w="12"/><text x="17.3638%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.37%)</title><rect x="17.8538%" y="293" width="0.3700%" height="15" fill="rgb(227,1,9)" fg:x="193" fg:w="4"/><text x="18.1038%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (203 samples, 18.78%)</title><rect x="6.3830%" y="341" width="18.7789%" height="15" fill="rgb(248,47,43)" fg:x="69" fg:w="203"/><text x="6.6330%" y="351.50">arrow_csv::reader::BufReader&lt;..</text></g><g><title>arrow_csv::reader::Decoder::flush (87 samples, 8.05%)</title><rect x="17.1138%" y="325" width="8.0481%" height="15" fill="rgb(221,10,30)" fg:x="185" fg:w="87"/><text x="17.3638%" y="335.50">arrow_csv::..</text></g><g><title>core::iter::adapters::try_process (75 samples, 6.94%)</title><rect x="18.2239%" y="309" width="6.9380%" height="15" fill="rgb(210,229,1)" fg:x="197" fg:w="75"/><text x="18.4739%" y="319.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (75 samples, 6.94%)</title><rect x="18.2239%" y="293" width="6.9380%" height="15" fill="rgb(222,148,37)" fg:x="197" fg:w="75"/><text x="18.4739%" y="303.50">&lt;alloc::v..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (75 samples, 6.94%)</title><rect x="18.2239%" y="277" width="6.9380%" height="15" fill="rgb(234,67,33)" fg:x="197" fg:w="75"/><text x="18.4739%" y="287.50">&lt;core::it..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (75 samples, 6.94%)</title><rect x="18.2239%" y="261" width="6.9380%" height="15" fill="rgb(247,98,35)" fg:x="197" fg:w="75"/><text x="18.4739%" y="271.50">&lt;arrow_ar..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (59 samples, 5.46%)</title><rect x="19.7040%" y="245" width="5.4579%" height="15" fill="rgb(247,138,52)" fg:x="213" fg:w="59"/><text x="19.9540%" y="255.50">arrow_a..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (10 samples, 0.93%)</title><rect x="24.2368%" y="229" width="0.9251%" height="15" fill="rgb(213,79,30)" fg:x="262" fg:w="10"/><text x="24.4868%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (10 samples, 0.93%)</title><rect x="24.2368%" y="213" width="0.9251%" height="15" fill="rgb(246,177,23)" fg:x="262" fg:w="10"/><text x="24.4868%" y="223.50"></text></g><g><title>posix_memalign (2 samples, 0.19%)</title><rect x="24.9769%" y="197" width="0.1850%" height="15" fill="rgb(230,62,27)" fg:x="270" fg:w="2"/><text x="25.2269%" y="207.50"></text></g><g><title>cfree (25 samples, 2.31%)</title><rect x="25.1619%" y="341" width="2.3127%" height="15" fill="rgb(216,154,8)" fg:x="272" fg:w="25"/><text x="25.4119%" y="351.50">c..</text></g><g><title>__default_morecore (3 samples, 0.28%)</title><rect x="27.1970%" y="325" width="0.2775%" height="15" fill="rgb(244,35,45)" fg:x="294" fg:w="3"/><text x="27.4470%" y="335.50"></text></g><g><title>__sbrk (3 samples, 0.28%)</title><rect x="27.1970%" y="309" width="0.2775%" height="15" fill="rgb(251,115,12)" fg:x="294" fg:w="3"/><text x="27.4470%" y="319.50"></text></g><g><title>brk (3 samples, 0.28%)</title><rect x="27.1970%" y="293" width="0.2775%" height="15" fill="rgb(240,54,50)" fg:x="294" fg:w="3"/><text x="27.4470%" y="303.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (3 samples, 0.28%)</title><rect x="29.9722%" y="325" width="0.2775%" height="15" fill="rgb(233,84,52)" fg:x="324" fg:w="3"/><text x="30.2222%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (3 samples, 0.28%)</title><rect x="29.9722%" y="309" width="0.2775%" height="15" fill="rgb(207,117,47)" fg:x="324" fg:w="3"/><text x="30.2222%" y="319.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="30.1573%" y="293" width="0.0925%" height="15" fill="rgb(249,43,39)" fg:x="326" fg:w="1"/><text x="30.4073%" y="303.50"></text></g><g><title>cfree (14 samples, 1.30%)</title><rect x="30.2498%" y="325" width="1.2951%" height="15" fill="rgb(209,38,44)" fg:x="327" fg:w="14"/><text x="30.4998%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (46 samples, 4.26%)</title><rect x="31.5449%" y="325" width="4.2553%" height="15" fill="rgb(236,212,23)" fg:x="341" fg:w="46"/><text x="31.7949%" y="335.50">core:..</text></g><g><title>core::num::dec2flt::parse::parse_number (22 samples, 2.04%)</title><rect x="33.7650%" y="309" width="2.0352%" height="15" fill="rgb(242,79,21)" fg:x="365" fg:w="22"/><text x="34.0150%" y="319.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (5 samples, 0.46%)</title><rect x="36.6327%" y="309" width="0.4625%" height="15" fill="rgb(211,96,35)" fg:x="396" fg:w="5"/><text x="36.8827%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (9 samples, 0.83%)</title><rect x="37.0953%" y="309" width="0.8326%" height="15" fill="rgb(253,215,40)" fg:x="401" fg:w="9"/><text x="37.3453%" y="319.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (24 samples, 2.22%)</title><rect x="35.8002%" y="325" width="2.2202%" height="15" fill="rgb(211,81,21)" fg:x="387" fg:w="24"/><text x="36.0502%" y="335.50">n..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="37.9278%" y="309" width="0.0925%" height="15" fill="rgb(208,190,38)" fg:x="410" fg:w="1"/><text x="38.1778%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="38.8529%" y="309" width="0.0925%" height="15" fill="rgb(235,213,38)" fg:x="420" fg:w="1"/><text x="39.1029%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (11 samples, 1.02%)</title><rect x="38.9454%" y="309" width="1.0176%" height="15" fill="rgb(237,122,38)" fg:x="421" fg:w="11"/><text x="39.1954%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (149 samples, 13.78%)</title><rect x="27.4746%" y="341" width="13.7835%" height="15" fill="rgb(244,218,35)" fg:x="297" fg:w="149"/><text x="27.7246%" y="351.50">nemscraper::process::..</text></g><g><title>nemscraper::process::utils::clean_str (35 samples, 3.24%)</title><rect x="38.0204%" y="325" width="3.2377%" height="15" fill="rgb(240,68,47)" fg:x="411" fg:w="35"/><text x="38.2704%" y="335.50">nem..</text></g><g><title>malloc (14 samples, 1.30%)</title><rect x="39.9630%" y="309" width="1.2951%" height="15" fill="rgb(210,16,53)" fg:x="432" fg:w="14"/><text x="40.2130%" y="319.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (4 samples, 0.37%)</title><rect x="41.2581%" y="165" width="0.3700%" height="15" fill="rgb(235,124,12)" fg:x="446" fg:w="4"/><text x="41.5081%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.37%)</title><rect x="41.2581%" y="149" width="0.3700%" height="15" fill="rgb(224,169,11)" fg:x="446" fg:w="4"/><text x="41.5081%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="41.5356%" y="133" width="0.0925%" height="15" fill="rgb(250,166,2)" fg:x="449" fg:w="1"/><text x="41.7856%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="41.6281%" y="165" width="0.0925%" height="15" fill="rgb(242,216,29)" fg:x="450" fg:w="1"/><text x="41.8781%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="41.6281%" y="149" width="0.0925%" height="15" fill="rgb(230,116,27)" fg:x="450" fg:w="1"/><text x="41.8781%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="41.6281%" y="133" width="0.0925%" height="15" fill="rgb(228,99,48)" fg:x="450" fg:w="1"/><text x="41.8781%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="41.6281%" y="117" width="0.0925%" height="15" fill="rgb(253,11,6)" fg:x="450" fg:w="1"/><text x="41.8781%" y="127.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="41.7206%" y="165" width="0.0925%" height="15" fill="rgb(247,143,39)" fg:x="451" fg:w="1"/><text x="41.9706%" y="175.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="41.8131%" y="165" width="0.0925%" height="15" fill="rgb(236,97,10)" fg:x="452" fg:w="1"/><text x="42.0631%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (8 samples, 0.74%)</title><rect x="41.2581%" y="213" width="0.7401%" height="15" fill="rgb(233,208,19)" fg:x="446" fg:w="8"/><text x="41.5081%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (8 samples, 0.74%)</title><rect x="41.2581%" y="197" width="0.7401%" height="15" fill="rgb(216,164,2)" fg:x="446" fg:w="8"/><text x="41.5081%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (8 samples, 0.74%)</title><rect x="41.2581%" y="181" width="0.7401%" height="15" fill="rgb(220,129,5)" fg:x="446" fg:w="8"/><text x="41.5081%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.09%)</title><rect x="41.9056%" y="165" width="0.0925%" height="15" fill="rgb(242,17,10)" fg:x="453" fg:w="1"/><text x="42.1556%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.09%)</title><rect x="41.9056%" y="149" width="0.0925%" height="15" fill="rgb(242,107,0)" fg:x="453" fg:w="1"/><text x="42.1556%" y="159.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="41.9981%" y="197" width="0.0925%" height="15" fill="rgb(251,28,31)" fg:x="454" fg:w="1"/><text x="42.2481%" y="207.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="41.9981%" y="181" width="0.0925%" height="15" fill="rgb(233,223,10)" fg:x="454" fg:w="1"/><text x="42.2481%" y="191.50"></text></g><g><title>thrift::protocol::TFieldIdentifier::new (1 samples, 0.09%)</title><rect x="41.9981%" y="165" width="0.0925%" height="15" fill="rgb(215,21,27)" fg:x="454" fg:w="1"/><text x="42.2481%" y="175.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="41.9981%" y="149" width="0.0925%" height="15" fill="rgb(232,23,21)" fg:x="454" fg:w="1"/><text x="42.2481%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (2 samples, 0.19%)</title><rect x="49.3987%" y="149" width="0.1850%" height="15" fill="rgb(244,5,23)" fg:x="534" fg:w="2"/><text x="49.6487%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (2 samples, 0.19%)</title><rect x="49.5837%" y="149" width="0.1850%" height="15" fill="rgb(226,81,46)" fg:x="536" fg:w="2"/><text x="49.8337%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (70 samples, 6.48%)</title><rect x="43.3858%" y="165" width="6.4755%" height="15" fill="rgb(247,70,30)" fg:x="469" fg:w="70"/><text x="43.6358%" y="175.50">&lt;brotli:..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="49.7687%" y="149" width="0.0925%" height="15" fill="rgb(212,68,19)" fg:x="538" fg:w="1"/><text x="50.0187%" y="159.50"></text></g><g><title>brotli::enc::backward_references::adv_prepare_distance_cache (1 samples, 0.09%)</title><rect x="49.8612%" y="165" width="0.0925%" height="15" fill="rgb(240,187,13)" fg:x="539" fg:w="1"/><text x="50.1112%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (85 samples, 7.86%)</title><rect x="42.2757%" y="181" width="7.8631%" height="15" fill="rgb(223,113,26)" fg:x="457" fg:w="85"/><text x="42.5257%" y="191.50">brotli::enc..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.19%)</title><rect x="49.9537%" y="165" width="0.1850%" height="15" fill="rgb(206,192,2)" fg:x="540" fg:w="2"/><text x="50.2037%" y="175.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (13 samples, 1.20%)</title><rect x="50.1388%" y="181" width="1.2026%" height="15" fill="rgb(241,108,4)" fg:x="542" fg:w="13"/><text x="50.3888%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (12 samples, 1.11%)</title><rect x="50.2313%" y="165" width="1.1101%" height="15" fill="rgb(247,173,49)" fg:x="543" fg:w="12"/><text x="50.4813%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="51.3414%" y="181" width="0.0925%" height="15" fill="rgb(224,114,35)" fg:x="555" fg:w="1"/><text x="51.5914%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (42 samples, 3.89%)</title><rect x="51.4339%" y="165" width="3.8853%" height="15" fill="rgb(245,159,27)" fg:x="556" fg:w="42"/><text x="51.6839%" y="175.50">brot..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (34 samples, 3.15%)</title><rect x="52.1739%" y="149" width="3.1452%" height="15" fill="rgb(245,172,44)" fg:x="564" fg:w="34"/><text x="52.4239%" y="159.50">&lt;br..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="55.2266%" y="133" width="0.0925%" height="15" fill="rgb(236,23,11)" fg:x="597" fg:w="1"/><text x="55.4766%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="55.9667%" y="117" width="0.0925%" height="15" fill="rgb(205,117,38)" fg:x="605" fg:w="1"/><text x="56.2167%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.19%)</title><rect x="55.9667%" y="149" width="0.1850%" height="15" fill="rgb(237,72,25)" fg:x="605" fg:w="2"/><text x="56.2167%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.19%)</title><rect x="55.9667%" y="133" width="0.1850%" height="15" fill="rgb(244,70,9)" fg:x="605" fg:w="2"/><text x="56.2167%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="56.0592%" y="117" width="0.0925%" height="15" fill="rgb(217,125,39)" fg:x="606" fg:w="1"/><text x="56.3092%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (3 samples, 0.28%)</title><rect x="56.1517%" y="149" width="0.2775%" height="15" fill="rgb(235,36,10)" fg:x="607" fg:w="3"/><text x="56.4017%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (4 samples, 0.37%)</title><rect x="56.4292%" y="149" width="0.3700%" height="15" fill="rgb(251,123,47)" fg:x="610" fg:w="4"/><text x="56.6792%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.09%)</title><rect x="56.7993%" y="149" width="0.0925%" height="15" fill="rgb(221,13,13)" fg:x="614" fg:w="1"/><text x="57.0493%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (18 samples, 1.67%)</title><rect x="55.3191%" y="165" width="1.6651%" height="15" fill="rgb(238,131,9)" fg:x="598" fg:w="18"/><text x="55.5691%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.09%)</title><rect x="56.8918%" y="149" width="0.0925%" height="15" fill="rgb(211,50,8)" fg:x="615" fg:w="1"/><text x="57.1418%" y="159.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (175 samples, 16.19%)</title><rect x="41.2581%" y="229" width="16.1887%" height="15" fill="rgb(245,182,24)" fg:x="446" fg:w="175"/><text x="41.5081%" y="239.50">parquet::column::writer::..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (167 samples, 15.45%)</title><rect x="41.9981%" y="213" width="15.4487%" height="15" fill="rgb(242,14,37)" fg:x="454" fg:w="167"/><text x="42.2481%" y="223.50">parquet::column::writer:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (166 samples, 15.36%)</title><rect x="42.0907%" y="197" width="15.3562%" height="15" fill="rgb(246,228,12)" fg:x="455" fg:w="166"/><text x="42.3407%" y="207.50">&lt;parquet::compression::b..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (65 samples, 6.01%)</title><rect x="51.4339%" y="181" width="6.0130%" height="15" fill="rgb(213,55,15)" fg:x="556" fg:w="65"/><text x="51.6839%" y="191.50">brotli::..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (5 samples, 0.46%)</title><rect x="56.9843%" y="165" width="0.4625%" height="15" fill="rgb(209,9,3)" fg:x="616" fg:w="5"/><text x="57.2343%" y="175.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.19%)</title><rect x="57.2618%" y="149" width="0.1850%" height="15" fill="rgb(230,59,30)" fg:x="619" fg:w="2"/><text x="57.5118%" y="159.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="57.3543%" y="133" width="0.0925%" height="15" fill="rgb(209,121,21)" fg:x="620" fg:w="1"/><text x="57.6043%" y="143.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="57.4468%" y="213" width="0.0925%" height="15" fill="rgb(220,109,13)" fg:x="621" fg:w="1"/><text x="57.6968%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="57.4468%" y="197" width="0.0925%" height="15" fill="rgb(232,18,1)" fg:x="621" fg:w="1"/><text x="57.6968%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;parquet::file::statistics::Statistics&gt;&gt; (1 samples, 0.09%)</title><rect x="57.4468%" y="181" width="0.0925%" height="15" fill="rgb(215,41,42)" fg:x="621" fg:w="1"/><text x="57.6968%" y="191.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.09%)</title><rect x="57.4468%" y="165" width="0.0925%" height="15" fill="rgb(224,123,36)" fg:x="621" fg:w="1"/><text x="57.6968%" y="175.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="57.4468%" y="149" width="0.0925%" height="15" fill="rgb(240,125,3)" fg:x="621" fg:w="1"/><text x="57.6968%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.28%)</title><rect x="57.6318%" y="165" width="0.2775%" height="15" fill="rgb(205,98,50)" fg:x="623" fg:w="3"/><text x="57.8818%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.19%)</title><rect x="57.7243%" y="149" width="0.1850%" height="15" fill="rgb(205,185,37)" fg:x="624" fg:w="2"/><text x="57.9743%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="57.9093%" y="117" width="0.0925%" height="15" fill="rgb(238,207,15)" fg:x="626" fg:w="1"/><text x="58.1593%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="57.9093%" y="101" width="0.0925%" height="15" fill="rgb(213,199,42)" fg:x="626" fg:w="1"/><text x="58.1593%" y="111.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (183 samples, 16.93%)</title><rect x="41.2581%" y="309" width="16.9288%" height="15" fill="rgb(235,201,11)" fg:x="446" fg:w="183"/><text x="41.5081%" y="319.50">parquet::arrow::arrow_writ..</text></g><g><title>core::iter::adapters::try_process (183 samples, 16.93%)</title><rect x="41.2581%" y="293" width="16.9288%" height="15" fill="rgb(207,46,11)" fg:x="446" fg:w="183"/><text x="41.5081%" y="303.50">core::iter::adapters::try_..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (183 samples, 16.93%)</title><rect x="41.2581%" y="277" width="16.9288%" height="15" fill="rgb(241,35,35)" fg:x="446" fg:w="183"/><text x="41.5081%" y="287.50">alloc::vec::in_place_colle..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (183 samples, 16.93%)</title><rect x="41.2581%" y="261" width="16.9288%" height="15" fill="rgb(243,32,47)" fg:x="446" fg:w="183"/><text x="41.5081%" y="271.50">&lt;alloc::vec::into_iter::In..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (183 samples, 16.93%)</title><rect x="41.2581%" y="245" width="16.9288%" height="15" fill="rgb(247,202,23)" fg:x="446" fg:w="183"/><text x="41.5081%" y="255.50">parquet::arrow::arrow_writ..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (8 samples, 0.74%)</title><rect x="57.4468%" y="229" width="0.7401%" height="15" fill="rgb(219,102,11)" fg:x="621" fg:w="8"/><text x="57.6968%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (7 samples, 0.65%)</title><rect x="57.5393%" y="213" width="0.6475%" height="15" fill="rgb(243,110,44)" fg:x="622" fg:w="7"/><text x="57.7893%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.65%)</title><rect x="57.5393%" y="197" width="0.6475%" height="15" fill="rgb(222,74,54)" fg:x="622" fg:w="7"/><text x="57.7893%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 0.65%)</title><rect x="57.5393%" y="181" width="0.6475%" height="15" fill="rgb(216,99,12)" fg:x="622" fg:w="7"/><text x="57.7893%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (3 samples, 0.28%)</title><rect x="57.9093%" y="165" width="0.2775%" height="15" fill="rgb(226,22,26)" fg:x="626" fg:w="3"/><text x="58.1593%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (3 samples, 0.28%)</title><rect x="57.9093%" y="149" width="0.2775%" height="15" fill="rgb(217,163,10)" fg:x="626" fg:w="3"/><text x="58.1593%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (3 samples, 0.28%)</title><rect x="57.9093%" y="133" width="0.2775%" height="15" fill="rgb(213,25,53)" fg:x="626" fg:w="3"/><text x="58.1593%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (2 samples, 0.19%)</title><rect x="58.0019%" y="117" width="0.1850%" height="15" fill="rgb(252,105,26)" fg:x="627" fg:w="2"/><text x="58.2519%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="58.0944%" y="101" width="0.0925%" height="15" fill="rgb(220,39,43)" fg:x="628" fg:w="1"/><text x="58.3444%" y="111.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.09%)</title><rect x="58.1869%" y="277" width="0.0925%" height="15" fill="rgb(229,68,48)" fg:x="629" fg:w="1"/><text x="58.4369%" y="287.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="58.1869%" y="261" width="0.0925%" height="15" fill="rgb(252,8,32)" fg:x="629" fg:w="1"/><text x="58.4369%" y="271.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (2 samples, 0.19%)</title><rect x="58.2794%" y="261" width="0.1850%" height="15" fill="rgb(223,20,43)" fg:x="630" fg:w="2"/><text x="58.5294%" y="271.50"></text></g><g><title>write (2 samples, 0.19%)</title><rect x="58.2794%" y="245" width="0.1850%" height="15" fill="rgb(229,81,49)" fg:x="630" fg:w="2"/><text x="58.5294%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (187 samples, 17.30%)</title><rect x="41.2581%" y="341" width="17.2988%" height="15" fill="rgb(236,28,36)" fg:x="446" fg:w="187"/><text x="41.5081%" y="351.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (187 samples, 17.30%)</title><rect x="41.2581%" y="325" width="17.2988%" height="15" fill="rgb(249,185,26)" fg:x="446" fg:w="187"/><text x="41.5081%" y="335.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (4 samples, 0.37%)</title><rect x="58.1869%" y="309" width="0.3700%" height="15" fill="rgb(249,174,33)" fg:x="629" fg:w="4"/><text x="58.4369%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (4 samples, 0.37%)</title><rect x="58.1869%" y="293" width="0.3700%" height="15" fill="rgb(233,201,37)" fg:x="629" fg:w="4"/><text x="58.4369%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (3 samples, 0.28%)</title><rect x="58.2794%" y="277" width="0.2775%" height="15" fill="rgb(221,78,26)" fg:x="630" fg:w="3"/><text x="58.5294%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.09%)</title><rect x="58.4644%" y="261" width="0.0925%" height="15" fill="rgb(250,127,30)" fg:x="632" fg:w="1"/><text x="58.7144%" y="271.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="58.4644%" y="245" width="0.0925%" height="15" fill="rgb(230,49,44)" fg:x="632" fg:w="1"/><text x="58.7144%" y="255.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="58.4644%" y="229" width="0.0925%" height="15" fill="rgb(229,67,23)" fg:x="632" fg:w="1"/><text x="58.7144%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (5 samples, 0.46%)</title><rect x="59.2044%" y="261" width="0.4625%" height="15" fill="rgb(249,83,47)" fg:x="640" fg:w="5"/><text x="59.4544%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (4 samples, 0.37%)</title><rect x="59.2969%" y="245" width="0.3700%" height="15" fill="rgb(215,43,3)" fg:x="641" fg:w="4"/><text x="59.5469%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.19%)</title><rect x="59.4820%" y="229" width="0.1850%" height="15" fill="rgb(238,154,13)" fg:x="643" fg:w="2"/><text x="59.7320%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="59.6670%" y="245" width="0.0925%" height="15" fill="rgb(219,56,2)" fg:x="645" fg:w="1"/><text x="59.9170%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="59.6670%" y="229" width="0.0925%" height="15" fill="rgb(233,0,4)" fg:x="645" fg:w="1"/><text x="59.9170%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.28%)</title><rect x="59.7595%" y="245" width="0.2775%" height="15" fill="rgb(235,30,7)" fg:x="646" fg:w="3"/><text x="60.0095%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.28%)</title><rect x="59.7595%" y="229" width="0.2775%" height="15" fill="rgb(250,79,13)" fg:x="646" fg:w="3"/><text x="60.0095%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (3 samples, 0.28%)</title><rect x="59.7595%" y="213" width="0.2775%" height="15" fill="rgb(211,146,34)" fg:x="646" fg:w="3"/><text x="60.0095%" y="223.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="59.9445%" y="197" width="0.0925%" height="15" fill="rgb(228,22,38)" fg:x="648" fg:w="1"/><text x="60.1945%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (17 samples, 1.57%)</title><rect x="58.5569%" y="293" width="1.5726%" height="15" fill="rgb(235,168,5)" fg:x="633" fg:w="17"/><text x="58.8069%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (17 samples, 1.57%)</title><rect x="58.5569%" y="277" width="1.5726%" height="15" fill="rgb(221,155,16)" fg:x="633" fg:w="17"/><text x="58.8069%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (5 samples, 0.46%)</title><rect x="59.6670%" y="261" width="0.4625%" height="15" fill="rgb(215,215,53)" fg:x="645" fg:w="5"/><text x="59.9170%" y="271.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="60.0370%" y="245" width="0.0925%" height="15" fill="rgb(223,4,10)" fg:x="649" fg:w="1"/><text x="60.2870%" y="255.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (7 samples, 0.65%)</title><rect x="66.2350%" y="245" width="0.6475%" height="15" fill="rgb(234,103,6)" fg:x="716" fg:w="7"/><text x="66.4850%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (62 samples, 5.74%)</title><rect x="61.2396%" y="277" width="5.7354%" height="15" fill="rgb(227,97,0)" fg:x="662" fg:w="62"/><text x="61.4896%" y="287.50">&lt;parque..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (31 samples, 2.87%)</title><rect x="64.1073%" y="261" width="2.8677%" height="15" fill="rgb(234,150,53)" fg:x="693" fg:w="31"/><text x="64.3573%" y="271.50">pa..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.09%)</title><rect x="66.8825%" y="245" width="0.0925%" height="15" fill="rgb(228,201,54)" fg:x="723" fg:w="1"/><text x="67.1325%" y="255.50"></text></g><g><title>parquet::column::writer::compare_greater (12 samples, 1.11%)</title><rect x="68.4551%" y="245" width="1.1101%" height="15" fill="rgb(222,22,37)" fg:x="740" fg:w="12"/><text x="68.7051%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (49 samples, 4.53%)</title><rect x="66.9750%" y="277" width="4.5328%" height="15" fill="rgb(237,53,32)" fg:x="724" fg:w="49"/><text x="67.2250%" y="287.50">&lt;parq..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (45 samples, 4.16%)</title><rect x="67.3451%" y="261" width="4.1628%" height="15" fill="rgb(233,25,53)" fg:x="728" fg:w="45"/><text x="67.5951%" y="271.50">parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (21 samples, 1.94%)</title><rect x="69.5652%" y="245" width="1.9426%" height="15" fill="rgb(210,40,34)" fg:x="752" fg:w="21"/><text x="69.8152%" y="255.50">p..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.37%)</title><rect x="71.1378%" y="229" width="0.3700%" height="15" fill="rgb(241,220,44)" fg:x="769" fg:w="4"/><text x="71.3878%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (3 samples, 0.28%)</title><rect x="71.5079%" y="261" width="0.2775%" height="15" fill="rgb(235,28,35)" fg:x="773" fg:w="3"/><text x="71.7579%" y="271.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (2 samples, 0.19%)</title><rect x="71.6004%" y="245" width="0.1850%" height="15" fill="rgb(210,56,17)" fg:x="774" fg:w="2"/><text x="71.8504%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.09%)</title><rect x="71.6929%" y="229" width="0.0925%" height="15" fill="rgb(224,130,29)" fg:x="775" fg:w="1"/><text x="71.9429%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (7 samples, 0.65%)</title><rect x="72.0629%" y="229" width="0.6475%" height="15" fill="rgb(235,212,8)" fg:x="779" fg:w="7"/><text x="72.3129%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (6 samples, 0.56%)</title><rect x="72.1554%" y="213" width="0.5550%" height="15" fill="rgb(223,33,50)" fg:x="780" fg:w="6"/><text x="72.4054%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (18 samples, 1.67%)</title><rect x="71.7854%" y="261" width="1.6651%" height="15" fill="rgb(219,149,13)" fg:x="776" fg:w="18"/><text x="72.0354%" y="271.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (18 samples, 1.67%)</title><rect x="71.7854%" y="245" width="1.6651%" height="15" fill="rgb(250,156,29)" fg:x="776" fg:w="18"/><text x="72.0354%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (8 samples, 0.74%)</title><rect x="72.7105%" y="229" width="0.7401%" height="15" fill="rgb(216,193,19)" fg:x="786" fg:w="8"/><text x="72.9605%" y="239.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (2 samples, 0.19%)</title><rect x="80.3885%" y="197" width="0.1850%" height="15" fill="rgb(216,135,14)" fg:x="869" fg:w="2"/><text x="80.6385%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (64 samples, 5.92%)</title><rect x="75.0231%" y="213" width="5.9204%" height="15" fill="rgb(241,47,5)" fg:x="811" fg:w="64"/><text x="75.2731%" y="223.50">&lt;brotli:..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (4 samples, 0.37%)</title><rect x="80.5735%" y="197" width="0.3700%" height="15" fill="rgb(233,42,35)" fg:x="871" fg:w="4"/><text x="80.8235%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (79 samples, 7.31%)</title><rect x="73.7280%" y="229" width="7.3080%" height="15" fill="rgb(231,13,6)" fg:x="797" fg:w="79"/><text x="73.9780%" y="239.50">brotli::en..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="80.9436%" y="213" width="0.0925%" height="15" fill="rgb(207,181,40)" fg:x="875" fg:w="1"/><text x="81.1936%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (5 samples, 0.46%)</title><rect x="81.6836%" y="181" width="0.4625%" height="15" fill="rgb(254,173,49)" fg:x="883" fg:w="5"/><text x="81.9336%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (4 samples, 0.37%)</title><rect x="81.7761%" y="165" width="0.3700%" height="15" fill="rgb(221,1,38)" fg:x="884" fg:w="4"/><text x="82.0261%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="82.1462%" y="181" width="0.0925%" height="15" fill="rgb(206,124,46)" fg:x="888" fg:w="1"/><text x="82.3962%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (11 samples, 1.02%)</title><rect x="81.6836%" y="197" width="1.0176%" height="15" fill="rgb(249,21,11)" fg:x="883" fg:w="11"/><text x="81.9336%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (5 samples, 0.46%)</title><rect x="82.2387%" y="181" width="0.4625%" height="15" fill="rgb(222,201,40)" fg:x="889" fg:w="5"/><text x="82.4887%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (13 samples, 1.20%)</title><rect x="81.6836%" y="213" width="1.2026%" height="15" fill="rgb(235,61,29)" fg:x="883" fg:w="13"/><text x="81.9336%" y="223.50"></text></g><g><title>calloc (2 samples, 0.19%)</title><rect x="82.7012%" y="197" width="0.1850%" height="15" fill="rgb(219,207,3)" fg:x="894" fg:w="2"/><text x="82.9512%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.65%)</title><rect x="82.8862%" y="213" width="0.6475%" height="15" fill="rgb(222,56,46)" fg:x="896" fg:w="7"/><text x="83.1362%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (28 samples, 2.59%)</title><rect x="81.0361%" y="229" width="2.5902%" height="15" fill="rgb(239,76,54)" fg:x="876" fg:w="28"/><text x="81.2861%" y="239.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.09%)</title><rect x="83.5338%" y="213" width="0.0925%" height="15" fill="rgb(231,124,27)" fg:x="903" fg:w="1"/><text x="83.7838%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (7 samples, 0.65%)</title><rect x="83.6263%" y="229" width="0.6475%" height="15" fill="rgb(249,195,6)" fg:x="904" fg:w="7"/><text x="83.8763%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (8 samples, 0.74%)</title><rect x="84.2738%" y="229" width="0.7401%" height="15" fill="rgb(237,174,47)" fg:x="911" fg:w="8"/><text x="84.5238%" y="239.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.19%)</title><rect x="84.8289%" y="213" width="0.1850%" height="15" fill="rgb(206,201,31)" fg:x="917" fg:w="2"/><text x="85.0789%" y="223.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.19%)</title><rect x="84.8289%" y="197" width="0.1850%" height="15" fill="rgb(231,57,52)" fg:x="917" fg:w="2"/><text x="85.0789%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (126 samples, 11.66%)</title><rect x="73.4505%" y="245" width="11.6559%" height="15" fill="rgb(248,177,22)" fg:x="794" fg:w="126"/><text x="73.7005%" y="255.50">brotli::enc::writ..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.09%)</title><rect x="85.0139%" y="229" width="0.0925%" height="15" fill="rgb(215,211,37)" fg:x="919" fg:w="1"/><text x="85.2639%" y="239.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.09%)</title><rect x="85.0139%" y="213" width="0.0925%" height="15" fill="rgb(241,128,51)" fg:x="919" fg:w="1"/><text x="85.2639%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (127 samples, 11.75%)</title><rect x="73.4505%" y="261" width="11.7484%" height="15" fill="rgb(227,165,31)" fg:x="794" fg:w="127"/><text x="73.7005%" y="271.50">&lt;parquet::compres..</text></g><g><title>std::io::error::Error::new (1 samples, 0.09%)</title><rect x="85.1064%" y="245" width="0.0925%" height="15" fill="rgb(228,167,24)" fg:x="920" fg:w="1"/><text x="85.3564%" y="255.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="85.1064%" y="229" width="0.0925%" height="15" fill="rgb(228,143,12)" fg:x="920" fg:w="1"/><text x="85.3564%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (289 samples, 26.73%)</title><rect x="58.5569%" y="309" width="26.7345%" height="15" fill="rgb(249,149,8)" fg:x="633" fg:w="289"/><text x="58.8069%" y="319.50">parquet::arrow::arrow_writer::ArrowColumnWr..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (272 samples, 25.16%)</title><rect x="60.1295%" y="293" width="25.1619%" height="15" fill="rgb(243,35,44)" fg:x="650" fg:w="272"/><text x="60.3795%" y="303.50">parquet::column::writer::GenericColumnWr..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (149 samples, 13.78%)</title><rect x="71.5079%" y="277" width="13.7835%" height="15" fill="rgb(246,89,9)" fg:x="773" fg:w="149"/><text x="71.7579%" y="287.50">parquet::column::writ..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="85.1989%" y="261" width="0.0925%" height="15" fill="rgb(233,213,13)" fg:x="921" fg:w="1"/><text x="85.4489%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (290 samples, 26.83%)</title><rect x="58.5569%" y="341" width="26.8270%" height="15" fill="rgb(233,141,41)" fg:x="633" fg:w="290"/><text x="58.8069%" y="351.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (290 samples, 26.83%)</title><rect x="58.5569%" y="325" width="26.8270%" height="15" fill="rgb(239,167,4)" fg:x="633" fg:w="290"/><text x="58.8069%" y="335.50">parquet::arrow::arrow_writer::ArrowRowGroup..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (1 samples, 0.09%)</title><rect x="85.2914%" y="309" width="0.0925%" height="15" fill="rgb(209,217,16)" fg:x="922" fg:w="1"/><text x="85.5414%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (1 samples, 0.09%)</title><rect x="85.2914%" y="293" width="0.0925%" height="15" fill="rgb(219,88,35)" fg:x="922" fg:w="1"/><text x="85.5414%" y="303.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (894 samples, 82.70%)</title><rect x="2.8677%" y="373" width="82.7012%" height="15" fill="rgb(220,193,23)" fg:x="31" fg:w="894"/><text x="3.1177%" y="383.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (875 samples, 80.94%)</title><rect x="4.6253%" y="357" width="80.9436%" height="15" fill="rgb(230,90,52)" fg:x="50" fg:w="875"/><text x="4.8753%" y="367.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>std::fs::OpenOptions::_open (2 samples, 0.19%)</title><rect x="85.3839%" y="341" width="0.1850%" height="15" fill="rgb(252,106,19)" fg:x="923" fg:w="2"/><text x="85.6339%" y="351.50"></text></g><g><title>open64 (2 samples, 0.19%)</title><rect x="85.3839%" y="325" width="0.1850%" height="15" fill="rgb(206,74,20)" fg:x="923" fg:w="2"/><text x="85.6339%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (8 samples, 0.74%)</title><rect x="86.4015%" y="357" width="0.7401%" height="15" fill="rgb(230,138,44)" fg:x="934" fg:w="8"/><text x="86.6515%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.56%)</title><rect x="87.1415%" y="357" width="0.5550%" height="15" fill="rgb(235,182,43)" fg:x="942" fg:w="6"/><text x="87.3915%" y="367.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.09%)</title><rect x="87.7891%" y="293" width="0.0925%" height="15" fill="rgb(242,16,51)" fg:x="949" fg:w="1"/><text x="88.0391%" y="303.50"></text></g><g><title>crc32fast::Hasher::update (6 samples, 0.56%)</title><rect x="87.6966%" y="325" width="0.5550%" height="15" fill="rgb(248,9,4)" fg:x="948" fg:w="6"/><text x="87.9466%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (6 samples, 0.56%)</title><rect x="87.6966%" y="309" width="0.5550%" height="15" fill="rgb(210,31,22)" fg:x="948" fg:w="6"/><text x="87.9466%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (4 samples, 0.37%)</title><rect x="87.8816%" y="293" width="0.3700%" height="15" fill="rgb(239,54,39)" fg:x="950" fg:w="4"/><text x="88.1316%" y="303.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (82 samples, 7.59%)</title><rect x="88.8067%" y="261" width="7.5856%" height="15" fill="rgb(230,99,41)" fg:x="960" fg:w="82"/><text x="89.0567%" y="271.50">zlib_rs::i..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (89 samples, 8.23%)</title><rect x="88.2516%" y="309" width="8.2331%" height="15" fill="rgb(253,106,12)" fg:x="954" fg:w="89"/><text x="88.5016%" y="319.50">&lt;flate2::me..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (89 samples, 8.23%)</title><rect x="88.2516%" y="293" width="8.2331%" height="15" fill="rgb(213,46,41)" fg:x="954" fg:w="89"/><text x="88.5016%" y="303.50">&lt;flate2::ff..</text></g><g><title>zlib_rs::inflate::inflate (89 samples, 8.23%)</title><rect x="88.2516%" y="277" width="8.2331%" height="15" fill="rgb(215,133,35)" fg:x="954" fg:w="89"/><text x="88.5016%" y="287.50">zlib_rs::in..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.09%)</title><rect x="96.3922%" y="261" width="0.0925%" height="15" fill="rgb(213,28,5)" fg:x="1042" fg:w="1"/><text x="96.6422%" y="271.50"></text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (1,020 samples, 94.36%)</title><rect x="2.3127%" y="389" width="94.3571%" height="15" fill="rgb(215,77,49)" fg:x="25" fg:w="1020"/><text x="2.5627%" y="399.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (120 samples, 11.10%)</title><rect x="85.5689%" y="373" width="11.1008%" height="15" fill="rgb(248,100,22)" fg:x="925" fg:w="120"/><text x="85.8189%" y="383.50">std::io::append_..</text></g><g><title>std::io::default_read_buf (97 samples, 8.97%)</title><rect x="87.6966%" y="357" width="8.9732%" height="15" fill="rgb(208,67,9)" fg:x="948" fg:w="97"/><text x="87.9466%" y="367.50">std::io::defa..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (97 samples, 8.97%)</title><rect x="87.6966%" y="341" width="8.9732%" height="15" fill="rgb(219,133,21)" fg:x="948" fg:w="97"/><text x="87.9466%" y="351.50">&lt;zip::crc32::..</text></g><g><title>flate2::zio::read (91 samples, 8.42%)</title><rect x="88.2516%" y="325" width="8.4181%" height="15" fill="rgb(246,46,29)" fg:x="954" fg:w="91"/><text x="88.5016%" y="335.50">flate2::zio:..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.19%)</title><rect x="96.4847%" y="309" width="0.1850%" height="15" fill="rgb(246,185,52)" fg:x="1043" fg:w="2"/><text x="96.7347%" y="319.50"></text></g><g><title>bench_zip_to_pa (1,046 samples, 96.76%)</title><rect x="0.0000%" y="565" width="96.7623%" height="15" fill="rgb(252,136,11)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,046 samples, 96.76%)</title><rect x="0.0000%" y="549" width="96.7623%" height="15" fill="rgb(219,138,53)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,046 samples, 96.76%)</title><rect x="0.0000%" y="533" width="96.7623%" height="15" fill="rgb(211,51,23)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,046 samples, 96.76%)</title><rect x="0.0000%" y="517" width="96.7623%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,046 samples, 96.76%)</title><rect x="0.0000%" y="501" width="96.7623%" height="15" fill="rgb(251,222,45)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,046 samples, 96.76%)</title><rect x="0.0000%" y="485" width="96.7623%" height="15" fill="rgb(217,162,53)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,046 samples, 96.76%)</title><rect x="0.0000%" y="469" width="96.7623%" height="15" fill="rgb(229,93,14)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,046 samples, 96.76%)</title><rect x="0.0000%" y="453" width="96.7623%" height="15" fill="rgb(209,67,49)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,046 samples, 96.76%)</title><rect x="0.0000%" y="437" width="96.7623%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,046 samples, 96.76%)</title><rect x="0.0000%" y="421" width="96.7623%" height="15" fill="rgb(205,151,52)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,046 samples, 96.76%)</title><rect x="0.0000%" y="405" width="96.7623%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="1046"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>reqwest::async_impl::decoder::Decoder::detect (1 samples, 0.09%)</title><rect x="96.6698%" y="389" width="0.0925%" height="15" fill="rgb(221,220,41)" fg:x="1045" fg:w="1"/><text x="96.9198%" y="399.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.28%)</title><rect x="96.7623%" y="341" width="0.2775%" height="15" fill="rgb(218,133,21)" fg:x="1046" fg:w="3"/><text x="97.0123%" y="351.50"></text></g><g><title>syscall (2 samples, 0.19%)</title><rect x="96.8548%" y="325" width="0.1850%" height="15" fill="rgb(221,193,43)" fg:x="1047" fg:w="2"/><text x="97.1048%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.09%)</title><rect x="97.0398%" y="325" width="0.0925%" height="15" fill="rgb(240,128,52)" fg:x="1049" fg:w="1"/><text x="97.2898%" y="335.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="97.0398%" y="309" width="0.0925%" height="15" fill="rgb(253,114,12)" fg:x="1049" fg:w="1"/><text x="97.2898%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (6 samples, 0.56%)</title><rect x="96.7623%" y="373" width="0.5550%" height="15" fill="rgb(215,223,47)" fg:x="1046" fg:w="6"/><text x="97.0123%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (6 samples, 0.56%)</title><rect x="96.7623%" y="357" width="0.5550%" height="15" fill="rgb(248,225,23)" fg:x="1046" fg:w="6"/><text x="97.0123%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 0.28%)</title><rect x="97.0398%" y="341" width="0.2775%" height="15" fill="rgb(250,108,0)" fg:x="1049" fg:w="3"/><text x="97.2898%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (2 samples, 0.19%)</title><rect x="97.1323%" y="325" width="0.1850%" height="15" fill="rgb(228,208,7)" fg:x="1050" fg:w="2"/><text x="97.3823%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 0.19%)</title><rect x="97.1323%" y="309" width="0.1850%" height="15" fill="rgb(244,45,10)" fg:x="1050" fg:w="2"/><text x="97.3823%" y="319.50"></text></g><g><title>epoll_wait (2 samples, 0.19%)</title><rect x="97.1323%" y="293" width="0.1850%" height="15" fill="rgb(207,125,25)" fg:x="1050" fg:w="2"/><text x="97.3823%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.19%)</title><rect x="97.3173%" y="357" width="0.1850%" height="15" fill="rgb(210,195,18)" fg:x="1052" fg:w="2"/><text x="97.5673%" y="367.50"></text></g><g><title>syscall (2 samples, 0.19%)</title><rect x="97.3173%" y="341" width="0.1850%" height="15" fill="rgb(249,80,12)" fg:x="1052" fg:w="2"/><text x="97.5673%" y="351.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (8 samples, 0.74%)</title><rect x="97.5023%" y="357" width="0.7401%" height="15" fill="rgb(221,65,9)" fg:x="1054" fg:w="8"/><text x="97.7523%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (8 samples, 0.74%)</title><rect x="97.5023%" y="341" width="0.7401%" height="15" fill="rgb(235,49,36)" fg:x="1054" fg:w="8"/><text x="97.7523%" y="351.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (8 samples, 0.74%)</title><rect x="97.5023%" y="325" width="0.7401%" height="15" fill="rgb(225,32,20)" fg:x="1054" fg:w="8"/><text x="97.7523%" y="335.50"></text></g><g><title>write (8 samples, 0.74%)</title><rect x="97.5023%" y="309" width="0.7401%" height="15" fill="rgb(215,141,46)" fg:x="1054" fg:w="8"/><text x="97.7523%" y="319.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (1 samples, 0.09%)</title><rect x="98.2424%" y="277" width="0.0925%" height="15" fill="rgb(250,160,47)" fg:x="1062" fg:w="1"/><text x="98.4924%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.09%)</title><rect x="98.2424%" y="261" width="0.0925%" height="15" fill="rgb(216,222,40)" fg:x="1062" fg:w="1"/><text x="98.4924%" y="271.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.09%)</title><rect x="98.2424%" y="245" width="0.0925%" height="15" fill="rgb(234,217,39)" fg:x="1062" fg:w="1"/><text x="98.4924%" y="255.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="98.2424%" y="229" width="0.0925%" height="15" fill="rgb(207,178,40)" fg:x="1062" fg:w="1"/><text x="98.4924%" y="239.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (6 samples, 0.56%)</title><rect x="98.3349%" y="277" width="0.5550%" height="15" fill="rgb(221,136,13)" fg:x="1063" fg:w="6"/><text x="98.5849%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (6 samples, 0.56%)</title><rect x="98.3349%" y="261" width="0.5550%" height="15" fill="rgb(249,199,10)" fg:x="1063" fg:w="6"/><text x="98.5849%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (6 samples, 0.56%)</title><rect x="98.3349%" y="245" width="0.5550%" height="15" fill="rgb(249,222,13)" fg:x="1063" fg:w="6"/><text x="98.5849%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.56%)</title><rect x="98.3349%" y="229" width="0.5550%" height="15" fill="rgb(244,185,38)" fg:x="1063" fg:w="6"/><text x="98.5849%" y="239.50"></text></g><g><title>syscall (6 samples, 0.56%)</title><rect x="98.3349%" y="213" width="0.5550%" height="15" fill="rgb(236,202,9)" fg:x="1063" fg:w="6"/><text x="98.5849%" y="223.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.09%)</title><rect x="99.0749%" y="133" width="0.0925%" height="15" fill="rgb(250,229,37)" fg:x="1071" fg:w="1"/><text x="99.3249%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.09%)</title><rect x="99.0749%" y="117" width="0.0925%" height="15" fill="rgb(206,174,23)" fg:x="1071" fg:w="1"/><text x="99.3249%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (2 samples, 0.19%)</title><rect x="99.0749%" y="165" width="0.1850%" height="15" fill="rgb(211,33,43)" fg:x="1071" fg:w="2"/><text x="99.3249%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (2 samples, 0.19%)</title><rect x="99.0749%" y="149" width="0.1850%" height="15" fill="rgb(245,58,50)" fg:x="1071" fg:w="2"/><text x="99.3249%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.09%)</title><rect x="99.1674%" y="133" width="0.0925%" height="15" fill="rgb(244,68,36)" fg:x="1072" fg:w="1"/><text x="99.4174%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.09%)</title><rect x="99.1674%" y="117" width="0.0925%" height="15" fill="rgb(232,229,15)" fg:x="1072" fg:w="1"/><text x="99.4174%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.09%)</title><rect x="99.1674%" y="101" width="0.0925%" height="15" fill="rgb(254,30,23)" fg:x="1072" fg:w="1"/><text x="99.4174%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.09%)</title><rect x="99.1674%" y="85" width="0.0925%" height="15" fill="rgb(235,160,14)" fg:x="1072" fg:w="1"/><text x="99.4174%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.09%)</title><rect x="99.1674%" y="69" width="0.0925%" height="15" fill="rgb(212,155,44)" fg:x="1072" fg:w="1"/><text x="99.4174%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.09%)</title><rect x="99.1674%" y="53" width="0.0925%" height="15" fill="rgb(226,2,50)" fg:x="1072" fg:w="1"/><text x="99.4174%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.09%)</title><rect x="99.1674%" y="37" width="0.0925%" height="15" fill="rgb(234,177,6)" fg:x="1072" fg:w="1"/><text x="99.4174%" y="47.50"></text></g><g><title>all (1,081 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="1081"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (35 samples, 3.24%)</title><rect x="96.7623%" y="565" width="3.2377%" height="15" fill="rgb(220,13,46)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="575.50">tok..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (35 samples, 3.24%)</title><rect x="96.7623%" y="549" width="3.2377%" height="15" fill="rgb(239,221,27)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="559.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (35 samples, 3.24%)</title><rect x="96.7623%" y="533" width="3.2377%" height="15" fill="rgb(222,198,25)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="543.50">cor..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (35 samples, 3.24%)</title><rect x="96.7623%" y="517" width="3.2377%" height="15" fill="rgb(211,99,13)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="527.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (35 samples, 3.24%)</title><rect x="96.7623%" y="501" width="3.2377%" height="15" fill="rgb(232,111,31)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="511.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (35 samples, 3.24%)</title><rect x="96.7623%" y="485" width="3.2377%" height="15" fill="rgb(245,82,37)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="495.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (35 samples, 3.24%)</title><rect x="96.7623%" y="469" width="3.2377%" height="15" fill="rgb(227,149,46)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="479.50">tok..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (35 samples, 3.24%)</title><rect x="96.7623%" y="453" width="3.2377%" height="15" fill="rgb(218,36,50)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="463.50">&lt;to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (35 samples, 3.24%)</title><rect x="96.7623%" y="437" width="3.2377%" height="15" fill="rgb(226,80,48)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="447.50">tok..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (35 samples, 3.24%)</title><rect x="96.7623%" y="421" width="3.2377%" height="15" fill="rgb(238,224,15)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="431.50">tok..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (35 samples, 3.24%)</title><rect x="96.7623%" y="405" width="3.2377%" height="15" fill="rgb(241,136,10)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="415.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (35 samples, 3.24%)</title><rect x="96.7623%" y="389" width="3.2377%" height="15" fill="rgb(208,32,45)" fg:x="1046" fg:w="35"/><text x="97.0123%" y="399.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (29 samples, 2.68%)</title><rect x="97.3173%" y="373" width="2.6827%" height="15" fill="rgb(207,135,9)" fg:x="1052" fg:w="29"/><text x="97.5673%" y="383.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (19 samples, 1.76%)</title><rect x="98.2424%" y="357" width="1.7576%" height="15" fill="rgb(206,86,44)" fg:x="1062" fg:w="19"/><text x="98.4924%" y="367.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (19 samples, 1.76%)</title><rect x="98.2424%" y="341" width="1.7576%" height="15" fill="rgb(245,177,15)" fg:x="1062" fg:w="19"/><text x="98.4924%" y="351.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (19 samples, 1.76%)</title><rect x="98.2424%" y="325" width="1.7576%" height="15" fill="rgb(206,64,50)" fg:x="1062" fg:w="19"/><text x="98.4924%" y="335.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (19 samples, 1.76%)</title><rect x="98.2424%" y="309" width="1.7576%" height="15" fill="rgb(234,36,40)" fg:x="1062" fg:w="19"/><text x="98.4924%" y="319.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (19 samples, 1.76%)</title><rect x="98.2424%" y="293" width="1.7576%" height="15" fill="rgb(213,64,8)" fg:x="1062" fg:w="19"/><text x="98.4924%" y="303.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (12 samples, 1.11%)</title><rect x="98.8899%" y="277" width="1.1101%" height="15" fill="rgb(210,75,36)" fg:x="1069" fg:w="12"/><text x="99.1399%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (12 samples, 1.11%)</title><rect x="98.8899%" y="261" width="1.1101%" height="15" fill="rgb(229,88,21)" fg:x="1069" fg:w="12"/><text x="99.1399%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (12 samples, 1.11%)</title><rect x="98.8899%" y="245" width="1.1101%" height="15" fill="rgb(252,204,47)" fg:x="1069" fg:w="12"/><text x="99.1399%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (12 samples, 1.11%)</title><rect x="98.8899%" y="229" width="1.1101%" height="15" fill="rgb(208,77,27)" fg:x="1069" fg:w="12"/><text x="99.1399%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.02%)</title><rect x="98.9824%" y="213" width="1.0176%" height="15" fill="rgb(221,76,26)" fg:x="1070" fg:w="11"/><text x="99.2324%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.02%)</title><rect x="98.9824%" y="197" width="1.0176%" height="15" fill="rgb(225,139,18)" fg:x="1070" fg:w="11"/><text x="99.2324%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (11 samples, 1.02%)</title><rect x="98.9824%" y="181" width="1.0176%" height="15" fill="rgb(230,137,11)" fg:x="1070" fg:w="11"/><text x="99.2324%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (8 samples, 0.74%)</title><rect x="99.2599%" y="165" width="0.7401%" height="15" fill="rgb(212,28,1)" fg:x="1073" fg:w="8"/><text x="99.5099%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (8 samples, 0.74%)</title><rect x="99.2599%" y="149" width="0.7401%" height="15" fill="rgb(248,164,17)" fg:x="1073" fg:w="8"/><text x="99.5099%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.74%)</title><rect x="99.2599%" y="133" width="0.7401%" height="15" fill="rgb(222,171,42)" fg:x="1073" fg:w="8"/><text x="99.5099%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (8 samples, 0.74%)</title><rect x="99.2599%" y="117" width="0.7401%" height="15" fill="rgb(243,84,45)" fg:x="1073" fg:w="8"/><text x="99.5099%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (8 samples, 0.74%)</title><rect x="99.2599%" y="101" width="0.7401%" height="15" fill="rgb(252,49,23)" fg:x="1073" fg:w="8"/><text x="99.5099%" y="111.50"></text></g><g><title>recv (8 samples, 0.74%)</title><rect x="99.2599%" y="85" width="0.7401%" height="15" fill="rgb(215,19,7)" fg:x="1073" fg:w="8"/><text x="99.5099%" y="95.50"></text></g></svg></svg>