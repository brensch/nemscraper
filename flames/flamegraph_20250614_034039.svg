<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1499"><g><title>cfree (1 samples, 0.07%)</title><rect x="0.4003%" y="277" width="0.0667%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="1"/><text x="0.6503%" y="287.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.53%)</title><rect x="0.4670%" y="229" width="0.5337%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="8"/><text x="0.7170%" y="239.50"></text></g><g><title>syscall (8 samples, 0.53%)</title><rect x="0.4670%" y="213" width="0.5337%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="8"/><text x="0.7170%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (14 samples, 0.93%)</title><rect x="0.3336%" y="389" width="0.9340%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="14"/><text x="0.5836%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (14 samples, 0.93%)</title><rect x="0.3336%" y="373" width="0.9340%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="14"/><text x="0.5836%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (13 samples, 0.87%)</title><rect x="0.4003%" y="357" width="0.8672%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="13"/><text x="0.6503%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (13 samples, 0.87%)</title><rect x="0.4003%" y="341" width="0.8672%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="13"/><text x="0.6503%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (13 samples, 0.87%)</title><rect x="0.4003%" y="325" width="0.8672%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="13"/><text x="0.6503%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 0.87%)</title><rect x="0.4003%" y="309" width="0.8672%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="13"/><text x="0.6503%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (13 samples, 0.87%)</title><rect x="0.4003%" y="293" width="0.8672%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="13"/><text x="0.6503%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 0.80%)</title><rect x="0.4670%" y="277" width="0.8005%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="12"/><text x="0.7170%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (12 samples, 0.80%)</title><rect x="0.4670%" y="261" width="0.8005%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="12"/><text x="0.7170%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (12 samples, 0.80%)</title><rect x="0.4670%" y="245" width="0.8005%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="12"/><text x="0.7170%" y="255.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (4 samples, 0.27%)</title><rect x="1.0007%" y="229" width="0.2668%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="4"/><text x="1.2507%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.27%)</title><rect x="1.0007%" y="213" width="0.2668%" height="15" fill="rgb(217,207,13)" fg:x="15" fg:w="4"/><text x="1.2507%" y="223.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (4 samples, 0.27%)</title><rect x="1.0007%" y="197" width="0.2668%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="4"/><text x="1.2507%" y="207.50"></text></g><g><title>write (4 samples, 0.27%)</title><rect x="1.0007%" y="181" width="0.2668%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="4"/><text x="1.2507%" y="191.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.07%)</title><rect x="1.5344%" y="373" width="0.0667%" height="15" fill="rgb(210,31,41)" fg:x="23" fg:w="1"/><text x="1.7844%" y="383.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.07%)</title><rect x="1.6011%" y="341" width="0.0667%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="1"/><text x="1.8511%" y="351.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.07%)</title><rect x="1.6011%" y="325" width="0.0667%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="1"/><text x="1.8511%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.07%)</title><rect x="1.6011%" y="309" width="0.0667%" height="15" fill="rgb(249,33,26)" fg:x="24" fg:w="1"/><text x="1.8511%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="1.6011%" y="293" width="0.0667%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="1"/><text x="1.8511%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.07%)</title><rect x="1.6011%" y="277" width="0.0667%" height="15" fill="rgb(221,5,38)" fg:x="24" fg:w="1"/><text x="1.8511%" y="287.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="1.6011%" y="261" width="0.0667%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="1"/><text x="1.8511%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1 samples, 0.07%)</title><rect x="1.6011%" y="245" width="0.0667%" height="15" fill="rgb(241,131,45)" fg:x="24" fg:w="1"/><text x="1.8511%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.07%)</title><rect x="1.6011%" y="229" width="0.0667%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="1"/><text x="1.8511%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.07%)</title><rect x="1.6011%" y="213" width="0.0667%" height="15" fill="rgb(225,111,53)" fg:x="24" fg:w="1"/><text x="1.8511%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.07%)</title><rect x="1.6678%" y="325" width="0.0667%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="1"/><text x="1.9178%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="1.6678%" y="309" width="0.0667%" height="15" fill="rgb(214,148,48)" fg:x="25" fg:w="1"/><text x="1.9178%" y="319.50"></text></g><g><title>__libc_realloc (1 samples, 0.07%)</title><rect x="1.6678%" y="293" width="0.0667%" height="15" fill="rgb(232,36,49)" fg:x="25" fg:w="1"/><text x="1.9178%" y="303.50"></text></g><g><title>nemscraper::process2::csv_processor::parse_csv_fields (3 samples, 0.20%)</title><rect x="1.6678%" y="341" width="0.2001%" height="15" fill="rgb(209,103,24)" fg:x="25" fg:w="3"/><text x="1.9178%" y="351.50"></text></g><g><title>malloc (2 samples, 0.13%)</title><rect x="1.7345%" y="325" width="0.1334%" height="15" fill="rgb(229,88,8)" fg:x="26" fg:w="2"/><text x="1.9845%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (1 samples, 0.07%)</title><rect x="1.8679%" y="341" width="0.0667%" height="15" fill="rgb(213,181,19)" fg:x="28" fg:w="1"/><text x="2.1179%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.07%)</title><rect x="1.8679%" y="325" width="0.0667%" height="15" fill="rgb(254,191,54)" fg:x="28" fg:w="1"/><text x="2.1179%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.07%)</title><rect x="1.8679%" y="309" width="0.0667%" height="15" fill="rgb(241,83,37)" fg:x="28" fg:w="1"/><text x="2.1179%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.07%)</title><rect x="1.8679%" y="293" width="0.0667%" height="15" fill="rgb(233,36,39)" fg:x="28" fg:w="1"/><text x="2.1179%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.07%)</title><rect x="1.8679%" y="277" width="0.0667%" height="15" fill="rgb(226,3,54)" fg:x="28" fg:w="1"/><text x="2.1179%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.07%)</title><rect x="1.8679%" y="261" width="0.0667%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="1"/><text x="2.1179%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.07%)</title><rect x="1.8679%" y="245" width="0.0667%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="1"/><text x="2.1179%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.07%)</title><rect x="1.8679%" y="229" width="0.0667%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="2.1179%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.07%)</title><rect x="1.8679%" y="213" width="0.0667%" height="15" fill="rgb(231,60,39)" fg:x="28" fg:w="1"/><text x="2.1179%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.07%)</title><rect x="1.8679%" y="197" width="0.0667%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="1"/><text x="2.1179%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.07%)</title><rect x="1.8679%" y="181" width="0.0667%" height="15" fill="rgb(235,93,37)" fg:x="28" fg:w="1"/><text x="2.1179%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.07%)</title><rect x="1.8679%" y="165" width="0.0667%" height="15" fill="rgb(213,116,39)" fg:x="28" fg:w="1"/><text x="2.1179%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.07%)</title><rect x="1.9346%" y="341" width="0.0667%" height="15" fill="rgb(222,207,29)" fg:x="29" fg:w="1"/><text x="2.1846%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.07%)</title><rect x="1.9346%" y="325" width="0.0667%" height="15" fill="rgb(206,96,30)" fg:x="29" fg:w="1"/><text x="2.1846%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.07%)</title><rect x="1.9346%" y="309" width="0.0667%" height="15" fill="rgb(218,138,4)" fg:x="29" fg:w="1"/><text x="2.1846%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.07%)</title><rect x="1.9346%" y="293" width="0.0667%" height="15" fill="rgb(250,191,14)" fg:x="29" fg:w="1"/><text x="2.1846%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.07%)</title><rect x="1.9346%" y="277" width="0.0667%" height="15" fill="rgb(239,60,40)" fg:x="29" fg:w="1"/><text x="2.1846%" y="287.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.07%)</title><rect x="1.9346%" y="261" width="0.0667%" height="15" fill="rgb(206,27,48)" fg:x="29" fg:w="1"/><text x="2.1846%" y="271.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.07%)</title><rect x="1.9346%" y="245" width="0.0667%" height="15" fill="rgb(225,35,8)" fg:x="29" fg:w="1"/><text x="2.1846%" y="255.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.07%)</title><rect x="1.9346%" y="229" width="0.0667%" height="15" fill="rgb(250,213,24)" fg:x="29" fg:w="1"/><text x="2.1846%" y="239.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (7 samples, 0.47%)</title><rect x="1.6011%" y="373" width="0.4670%" height="15" fill="rgb(247,123,22)" fg:x="24" fg:w="7"/><text x="1.8511%" y="383.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (7 samples, 0.47%)</title><rect x="1.6011%" y="357" width="0.4670%" height="15" fill="rgb(231,138,38)" fg:x="24" fg:w="7"/><text x="1.8511%" y="367.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.07%)</title><rect x="2.0013%" y="341" width="0.0667%" height="15" fill="rgb(231,145,46)" fg:x="30" fg:w="1"/><text x="2.2513%" y="351.50"></text></g><g><title>open64 (1 samples, 0.07%)</title><rect x="2.0013%" y="325" width="0.0667%" height="15" fill="rgb(251,118,11)" fg:x="30" fg:w="1"/><text x="2.2513%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (2 samples, 0.13%)</title><rect x="2.4683%" y="357" width="0.1334%" height="15" fill="rgb(217,147,25)" fg:x="37" fg:w="2"/><text x="2.7183%" y="367.50"></text></g><g><title>malloc (25 samples, 1.67%)</title><rect x="2.6017%" y="357" width="1.6678%" height="15" fill="rgb(247,81,37)" fg:x="39" fg:w="25"/><text x="2.8517%" y="367.50"></text></g><g><title>__rustc::__rdl_dealloc (1 samples, 0.07%)</title><rect x="5.4036%" y="341" width="0.0667%" height="15" fill="rgb(209,12,38)" fg:x="81" fg:w="1"/><text x="5.6536%" y="351.50"></text></g><g><title>alloc::str::join_generic_copy (21 samples, 1.40%)</title><rect x="5.4703%" y="341" width="1.4009%" height="15" fill="rgb(227,1,9)" fg:x="82" fg:w="21"/><text x="5.7203%" y="351.50"></text></g><g><title>malloc (8 samples, 0.53%)</title><rect x="6.3376%" y="325" width="0.5337%" height="15" fill="rgb(248,47,43)" fg:x="95" fg:w="8"/><text x="6.5876%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (23 samples, 1.53%)</title><rect x="8.0720%" y="293" width="1.5344%" height="15" fill="rgb(221,10,30)" fg:x="121" fg:w="23"/><text x="8.3220%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 1.53%)</title><rect x="8.0720%" y="277" width="1.5344%" height="15" fill="rgb(210,229,1)" fg:x="121" fg:w="23"/><text x="8.3220%" y="287.50"></text></g><g><title>__libc_realloc (23 samples, 1.53%)</title><rect x="8.0720%" y="261" width="1.5344%" height="15" fill="rgb(222,148,37)" fg:x="121" fg:w="23"/><text x="8.3220%" y="271.50"></text></g><g><title>__default_morecore (1 samples, 0.07%)</title><rect x="9.5397%" y="245" width="0.0667%" height="15" fill="rgb(234,67,33)" fg:x="143" fg:w="1"/><text x="9.7897%" y="255.50"></text></g><g><title>__sbrk (1 samples, 0.07%)</title><rect x="9.5397%" y="229" width="0.0667%" height="15" fill="rgb(247,98,35)" fg:x="143" fg:w="1"/><text x="9.7897%" y="239.50"></text></g><g><title>brk (1 samples, 0.07%)</title><rect x="9.5397%" y="213" width="0.0667%" height="15" fill="rgb(247,138,52)" fg:x="143" fg:w="1"/><text x="9.7897%" y="223.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (96 samples, 6.40%)</title><rect x="7.0047%" y="325" width="6.4043%" height="15" fill="rgb(213,79,30)" fg:x="105" fg:w="96"/><text x="7.2547%" y="335.50">arrow_cs..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (96 samples, 6.40%)</title><rect x="7.0047%" y="309" width="6.4043%" height="15" fill="rgb(246,177,23)" fg:x="105" fg:w="96"/><text x="7.2547%" y="319.50">arrow_cs..</text></g><g><title>csv_core::reader::Reader::read_record (57 samples, 3.80%)</title><rect x="9.6064%" y="293" width="3.8025%" height="15" fill="rgb(230,62,27)" fg:x="144" fg:w="57"/><text x="9.8564%" y="303.50">csv_..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (8 samples, 0.53%)</title><rect x="13.4089%" y="309" width="0.5337%" height="15" fill="rgb(216,154,8)" fg:x="201" fg:w="8"/><text x="13.6589%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.27%)</title><rect x="13.6758%" y="293" width="0.2668%" height="15" fill="rgb(244,35,45)" fg:x="205" fg:w="4"/><text x="13.9258%" y="303.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (33 samples, 2.20%)</title><rect x="14.6097%" y="245" width="2.2015%" height="15" fill="rgb(251,115,12)" fg:x="219" fg:w="33"/><text x="14.8597%" y="255.50">a..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (10 samples, 0.67%)</title><rect x="16.1441%" y="229" width="0.6671%" height="15" fill="rgb(240,54,50)" fg:x="242" fg:w="10"/><text x="16.3941%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (10 samples, 0.67%)</title><rect x="16.1441%" y="213" width="0.6671%" height="15" fill="rgb(233,84,52)" fg:x="242" fg:w="10"/><text x="16.3941%" y="223.50"></text></g><g><title>posix_memalign (1 samples, 0.07%)</title><rect x="16.7445%" y="197" width="0.0667%" height="15" fill="rgb(207,117,47)" fg:x="251" fg:w="1"/><text x="16.9945%" y="207.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (150 samples, 10.01%)</title><rect x="6.8712%" y="341" width="10.0067%" height="15" fill="rgb(249,43,39)" fg:x="103" fg:w="150"/><text x="7.1212%" y="351.50">arrow_csv::rea..</text></g><g><title>arrow_csv::reader::Decoder::flush (52 samples, 3.47%)</title><rect x="13.4089%" y="325" width="3.4690%" height="15" fill="rgb(209,38,44)" fg:x="201" fg:w="52"/><text x="13.6589%" y="335.50">arr..</text></g><g><title>core::iter::adapters::try_process (44 samples, 2.94%)</title><rect x="13.9426%" y="309" width="2.9353%" height="15" fill="rgb(236,212,23)" fg:x="209" fg:w="44"/><text x="14.1926%" y="319.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 2.94%)</title><rect x="13.9426%" y="293" width="2.9353%" height="15" fill="rgb(242,79,21)" fg:x="209" fg:w="44"/><text x="14.1926%" y="303.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 2.94%)</title><rect x="13.9426%" y="277" width="2.9353%" height="15" fill="rgb(211,96,35)" fg:x="209" fg:w="44"/><text x="14.1926%" y="287.50">&lt;c..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (44 samples, 2.94%)</title><rect x="13.9426%" y="261" width="2.9353%" height="15" fill="rgb(253,215,40)" fg:x="209" fg:w="44"/><text x="14.1926%" y="271.50">&lt;a..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (1 samples, 0.07%)</title><rect x="16.8112%" y="245" width="0.0667%" height="15" fill="rgb(211,81,21)" fg:x="252" fg:w="1"/><text x="17.0612%" y="255.50"></text></g><g><title>cfree (144 samples, 9.61%)</title><rect x="16.8779%" y="341" width="9.6064%" height="15" fill="rgb(208,190,38)" fg:x="253" fg:w="144"/><text x="17.1279%" y="351.50">cfree</text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (1 samples, 0.07%)</title><rect x="26.4843%" y="341" width="0.0667%" height="15" fill="rgb(235,213,38)" fg:x="397" fg:w="1"/><text x="26.7343%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="26.4843%" y="325" width="0.0667%" height="15" fill="rgb(237,122,38)" fg:x="397" fg:w="1"/><text x="26.7343%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="26.4843%" y="309" width="0.0667%" height="15" fill="rgb(244,218,35)" fg:x="397" fg:w="1"/><text x="26.7343%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.07%)</title><rect x="26.4843%" y="293" width="0.0667%" height="15" fill="rgb(240,68,47)" fg:x="397" fg:w="1"/><text x="26.7343%" y="303.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="26.4843%" y="277" width="0.0667%" height="15" fill="rgb(210,16,53)" fg:x="397" fg:w="1"/><text x="26.7343%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (7 samples, 0.47%)</title><rect x="26.5510%" y="341" width="0.4670%" height="15" fill="rgb(235,124,12)" fg:x="398" fg:w="7"/><text x="26.8010%" y="351.50"></text></g><g><title>cfree (7 samples, 0.47%)</title><rect x="26.5510%" y="325" width="0.4670%" height="15" fill="rgb(224,169,11)" fg:x="398" fg:w="7"/><text x="26.8010%" y="335.50"></text></g><g><title>__default_morecore (7 samples, 0.47%)</title><rect x="26.5510%" y="309" width="0.4670%" height="15" fill="rgb(250,166,2)" fg:x="398" fg:w="7"/><text x="26.8010%" y="319.50"></text></g><g><title>__sbrk (7 samples, 0.47%)</title><rect x="26.5510%" y="293" width="0.4670%" height="15" fill="rgb(242,216,29)" fg:x="398" fg:w="7"/><text x="26.8010%" y="303.50"></text></g><g><title>brk (7 samples, 0.47%)</title><rect x="26.5510%" y="277" width="0.4670%" height="15" fill="rgb(230,116,27)" fg:x="398" fg:w="7"/><text x="26.8010%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.13%)</title><rect x="34.3562%" y="325" width="0.1334%" height="15" fill="rgb(228,99,48)" fg:x="515" fg:w="2"/><text x="34.6062%" y="335.50"></text></g><g><title>__libc_realloc (78 samples, 5.20%)</title><rect x="35.5570%" y="293" width="5.2035%" height="15" fill="rgb(253,11,6)" fg:x="533" fg:w="78"/><text x="35.8070%" y="303.50">__libc..</text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.33%)</title><rect x="40.7605%" y="293" width="0.3336%" height="15" fill="rgb(247,143,39)" fg:x="611" fg:w="5"/><text x="41.0105%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (116 samples, 7.74%)</title><rect x="34.4897%" y="325" width="7.7385%" height="15" fill="rgb(236,97,10)" fg:x="517" fg:w="116"/><text x="34.7397%" y="335.50">alloc::raw_..</text></g><g><title>alloc::raw_vec::finish_grow (103 samples, 6.87%)</title><rect x="35.3569%" y="309" width="6.8712%" height="15" fill="rgb(233,208,19)" fg:x="530" fg:w="103"/><text x="35.6069%" y="319.50">alloc::ra..</text></g><g><title>malloc (17 samples, 1.13%)</title><rect x="41.0941%" y="293" width="1.1341%" height="15" fill="rgb(216,164,2)" fg:x="616" fg:w="17"/><text x="41.3441%" y="303.50"></text></g><g><title>cfree (8 samples, 0.53%)</title><rect x="42.2282%" y="325" width="0.5337%" height="15" fill="rgb(220,129,5)" fg:x="633" fg:w="8"/><text x="42.4782%" y="335.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (17 samples, 1.13%)</title><rect x="42.7618%" y="325" width="1.1341%" height="15" fill="rgb(242,17,10)" fg:x="641" fg:w="17"/><text x="43.0118%" y="335.50"></text></g><g><title>nemscraper::process2::csv_processor::parse_csv_fields (329 samples, 21.95%)</title><rect x="27.0180%" y="341" width="21.9480%" height="15" fill="rgb(242,107,0)" fg:x="405" fg:w="329"/><text x="27.2680%" y="351.50">nemscraper::process2::csv_processor..</text></g><g><title>malloc (76 samples, 5.07%)</title><rect x="43.8959%" y="325" width="5.0700%" height="15" fill="rgb(251,28,31)" fg:x="658" fg:w="76"/><text x="44.1459%" y="335.50">malloc</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (4 samples, 0.27%)</title><rect x="50.3002%" y="325" width="0.2668%" height="15" fill="rgb(233,223,10)" fg:x="754" fg:w="4"/><text x="50.5502%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (4 samples, 0.27%)</title><rect x="50.3002%" y="309" width="0.2668%" height="15" fill="rgb(215,21,27)" fg:x="754" fg:w="4"/><text x="50.5502%" y="319.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="50.5003%" y="293" width="0.0667%" height="15" fill="rgb(232,23,21)" fg:x="757" fg:w="1"/><text x="50.7503%" y="303.50"></text></g><g><title>cfree (8 samples, 0.53%)</title><rect x="50.5670%" y="325" width="0.5337%" height="15" fill="rgb(244,5,23)" fg:x="758" fg:w="8"/><text x="50.8170%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (38 samples, 2.54%)</title><rect x="51.1007%" y="325" width="2.5350%" height="15" fill="rgb(226,81,46)" fg:x="766" fg:w="38"/><text x="51.3507%" y="335.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (23 samples, 1.53%)</title><rect x="52.1014%" y="309" width="1.5344%" height="15" fill="rgb(247,70,30)" fg:x="781" fg:w="23"/><text x="52.3514%" y="319.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (4 samples, 0.27%)</title><rect x="54.7698%" y="309" width="0.2668%" height="15" fill="rgb(212,68,19)" fg:x="821" fg:w="4"/><text x="55.0198%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (10 samples, 0.67%)</title><rect x="55.0367%" y="309" width="0.6671%" height="15" fill="rgb(240,187,13)" fg:x="825" fg:w="10"/><text x="55.2867%" y="319.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (36 samples, 2.40%)</title><rect x="53.6358%" y="325" width="2.4016%" height="15" fill="rgb(223,113,26)" fg:x="804" fg:w="36"/><text x="53.8858%" y="335.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (5 samples, 0.33%)</title><rect x="55.7038%" y="309" width="0.3336%" height="15" fill="rgb(206,192,2)" fg:x="835" fg:w="5"/><text x="55.9538%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (3 samples, 0.20%)</title><rect x="56.7712%" y="309" width="0.2001%" height="15" fill="rgb(241,108,4)" fg:x="851" fg:w="3"/><text x="57.0212%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (4 samples, 0.27%)</title><rect x="56.9713%" y="309" width="0.2668%" height="15" fill="rgb(247,173,49)" fg:x="854" fg:w="4"/><text x="57.2213%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (133 samples, 8.87%)</title><rect x="48.9660%" y="341" width="8.8726%" height="15" fill="rgb(224,114,35)" fg:x="734" fg:w="133"/><text x="49.2160%" y="351.50">nemscraper::p..</text></g><g><title>nemscraper::process::utils::clean_str (27 samples, 1.80%)</title><rect x="56.0374%" y="325" width="1.8012%" height="15" fill="rgb(245,159,27)" fg:x="840" fg:w="27"/><text x="56.2874%" y="335.50">n..</text></g><g><title>malloc (9 samples, 0.60%)</title><rect x="57.2382%" y="309" width="0.6004%" height="15" fill="rgb(245,172,44)" fg:x="858" fg:w="9"/><text x="57.4882%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;parquet::arrow::arrow_writer::ArrowWriter&lt;std::fs::File&gt;&gt; (1 samples, 0.07%)</title><rect x="57.8386%" y="325" width="0.0667%" height="15" fill="rgb(236,23,11)" fg:x="867" fg:w="1"/><text x="58.0886%" y="335.50"></text></g><g><title>__close (1 samples, 0.07%)</title><rect x="57.8386%" y="309" width="0.0667%" height="15" fill="rgb(205,117,38)" fg:x="867" fg:w="1"/><text x="58.0886%" y="319.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.07%)</title><rect x="57.9053%" y="197" width="0.0667%" height="15" fill="rgb(237,72,25)" fg:x="868" fg:w="1"/><text x="58.1553%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.07%)</title><rect x="57.9053%" y="181" width="0.0667%" height="15" fill="rgb(244,70,9)" fg:x="868" fg:w="1"/><text x="58.1553%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.07%)</title><rect x="57.9053%" y="165" width="0.0667%" height="15" fill="rgb(217,125,39)" fg:x="868" fg:w="1"/><text x="58.1553%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (6 samples, 0.40%)</title><rect x="57.9720%" y="165" width="0.4003%" height="15" fill="rgb(235,36,10)" fg:x="869" fg:w="6"/><text x="58.2220%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (5 samples, 0.33%)</title><rect x="58.0387%" y="149" width="0.3336%" height="15" fill="rgb(251,123,47)" fg:x="870" fg:w="5"/><text x="58.2887%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (3 samples, 0.20%)</title><rect x="58.1721%" y="133" width="0.2001%" height="15" fill="rgb(221,13,13)" fg:x="872" fg:w="3"/><text x="58.4221%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.13%)</title><rect x="58.3722%" y="165" width="0.1334%" height="15" fill="rgb(238,131,9)" fg:x="875" fg:w="2"/><text x="58.6222%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.13%)</title><rect x="58.3722%" y="149" width="0.1334%" height="15" fill="rgb(211,50,8)" fg:x="875" fg:w="2"/><text x="58.6222%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.13%)</title><rect x="58.3722%" y="133" width="0.1334%" height="15" fill="rgb(245,182,24)" fg:x="875" fg:w="2"/><text x="58.6222%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (2 samples, 0.13%)</title><rect x="58.3722%" y="117" width="0.1334%" height="15" fill="rgb(242,14,37)" fg:x="875" fg:w="2"/><text x="58.6222%" y="127.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (11 samples, 0.73%)</title><rect x="57.9053%" y="213" width="0.7338%" height="15" fill="rgb(246,228,12)" fg:x="868" fg:w="11"/><text x="58.1553%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (10 samples, 0.67%)</title><rect x="57.9720%" y="197" width="0.6671%" height="15" fill="rgb(213,55,15)" fg:x="869" fg:w="10"/><text x="58.2220%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (10 samples, 0.67%)</title><rect x="57.9720%" y="181" width="0.6671%" height="15" fill="rgb(209,9,3)" fg:x="869" fg:w="10"/><text x="58.2220%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (2 samples, 0.13%)</title><rect x="58.5057%" y="165" width="0.1334%" height="15" fill="rgb(230,59,30)" fg:x="877" fg:w="2"/><text x="58.7557%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (2 samples, 0.13%)</title><rect x="58.5057%" y="149" width="0.1334%" height="15" fill="rgb(209,121,21)" fg:x="877" fg:w="2"/><text x="58.7557%" y="159.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_dict_page (1 samples, 0.07%)</title><rect x="58.6391%" y="197" width="0.0667%" height="15" fill="rgb(220,109,13)" fg:x="879" fg:w="1"/><text x="58.8891%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_dict (1 samples, 0.07%)</title><rect x="58.6391%" y="181" width="0.0667%" height="15" fill="rgb(232,18,1)" fg:x="879" fg:w="1"/><text x="58.8891%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.07%)</title><rect x="64.3763%" y="149" width="0.0667%" height="15" fill="rgb(215,41,42)" fg:x="965" fg:w="1"/><text x="64.6263%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (77 samples, 5.14%)</title><rect x="59.4396%" y="165" width="5.1368%" height="15" fill="rgb(224,123,36)" fg:x="891" fg:w="77"/><text x="59.6896%" y="175.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.13%)</title><rect x="64.4430%" y="149" width="0.1334%" height="15" fill="rgb(240,125,3)" fg:x="966" fg:w="2"/><text x="64.6930%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (87 samples, 5.80%)</title><rect x="58.8392%" y="181" width="5.8039%" height="15" fill="rgb(205,98,50)" fg:x="882" fg:w="87"/><text x="59.0892%" y="191.50">brotli:..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.07%)</title><rect x="64.5764%" y="165" width="0.0667%" height="15" fill="rgb(205,185,37)" fg:x="968" fg:w="1"/><text x="64.8264%" y="175.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (19 samples, 1.27%)</title><rect x="64.6431%" y="181" width="1.2675%" height="15" fill="rgb(238,207,15)" fg:x="969" fg:w="19"/><text x="64.8931%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (19 samples, 1.27%)</title><rect x="64.6431%" y="165" width="1.2675%" height="15" fill="rgb(213,199,42)" fg:x="969" fg:w="19"/><text x="64.8931%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.07%)</title><rect x="65.9106%" y="181" width="0.0667%" height="15" fill="rgb(235,201,11)" fg:x="988" fg:w="1"/><text x="66.1606%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.07%)</title><rect x="67.8452%" y="133" width="0.0667%" height="15" fill="rgb(207,46,11)" fg:x="1017" fg:w="1"/><text x="68.0952%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (27 samples, 1.80%)</title><rect x="66.1775%" y="149" width="1.8012%" height="15" fill="rgb(241,35,35)" fg:x="992" fg:w="27"/><text x="66.4275%" y="159.50">&lt;..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.07%)</title><rect x="67.9119%" y="133" width="0.0667%" height="15" fill="rgb(243,32,47)" fg:x="1018" fg:w="1"/><text x="68.1619%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (33 samples, 2.20%)</title><rect x="65.9773%" y="165" width="2.2015%" height="15" fill="rgb(247,202,23)" fg:x="989" fg:w="33"/><text x="66.2273%" y="175.50">b..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.20%)</title><rect x="67.9787%" y="149" width="0.2001%" height="15" fill="rgb(219,102,11)" fg:x="1019" fg:w="3"/><text x="68.2287%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.13%)</title><rect x="68.5123%" y="117" width="0.1334%" height="15" fill="rgb(243,110,44)" fg:x="1027" fg:w="2"/><text x="68.7623%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.07%)</title><rect x="68.5791%" y="101" width="0.0667%" height="15" fill="rgb(222,74,54)" fg:x="1028" fg:w="1"/><text x="68.8291%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (5 samples, 0.33%)</title><rect x="68.5123%" y="149" width="0.3336%" height="15" fill="rgb(216,99,12)" fg:x="1027" fg:w="5"/><text x="68.7623%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (5 samples, 0.33%)</title><rect x="68.5123%" y="133" width="0.3336%" height="15" fill="rgb(226,22,26)" fg:x="1027" fg:w="5"/><text x="68.7623%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (3 samples, 0.20%)</title><rect x="68.6458%" y="117" width="0.2001%" height="15" fill="rgb(217,163,10)" fg:x="1029" fg:w="3"/><text x="68.8958%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (6 samples, 0.40%)</title><rect x="68.8459%" y="149" width="0.4003%" height="15" fill="rgb(213,25,53)" fg:x="1032" fg:w="6"/><text x="69.0959%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (2 samples, 0.13%)</title><rect x="69.2462%" y="149" width="0.1334%" height="15" fill="rgb(252,105,26)" fg:x="1038" fg:w="2"/><text x="69.4962%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (19 samples, 1.27%)</title><rect x="68.1788%" y="165" width="1.2675%" height="15" fill="rgb(220,39,43)" fg:x="1022" fg:w="19"/><text x="68.4288%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.07%)</title><rect x="69.3796%" y="149" width="0.0667%" height="15" fill="rgb(229,68,48)" fg:x="1040" fg:w="1"/><text x="69.6296%" y="159.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.13%)</title><rect x="69.4463%" y="165" width="0.1334%" height="15" fill="rgb(252,8,32)" fg:x="1041" fg:w="2"/><text x="69.6963%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (180 samples, 12.01%)</title><rect x="58.6391%" y="213" width="12.0080%" height="15" fill="rgb(223,20,43)" fg:x="879" fg:w="180"/><text x="58.8891%" y="223.50">parquet::column::w..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (179 samples, 11.94%)</title><rect x="58.7058%" y="197" width="11.9413%" height="15" fill="rgb(229,81,49)" fg:x="880" fg:w="179"/><text x="58.9558%" y="207.50">&lt;parquet::compress..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (70 samples, 4.67%)</title><rect x="65.9773%" y="181" width="4.6698%" height="15" fill="rgb(236,28,36)" fg:x="989" fg:w="70"/><text x="66.2273%" y="191.50">brotl..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (16 samples, 1.07%)</title><rect x="69.5797%" y="165" width="1.0674%" height="15" fill="rgb(249,185,26)" fg:x="1043" fg:w="16"/><text x="69.8297%" y="175.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.13%)</title><rect x="70.5137%" y="149" width="0.1334%" height="15" fill="rgb(249,174,33)" fg:x="1057" fg:w="2"/><text x="70.7637%" y="159.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.13%)</title><rect x="70.5137%" y="133" width="0.1334%" height="15" fill="rgb(233,201,37)" fg:x="1057" fg:w="2"/><text x="70.7637%" y="143.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (192 samples, 12.81%)</title><rect x="57.9053%" y="229" width="12.8085%" height="15" fill="rgb(221,78,26)" fg:x="868" fg:w="192"/><text x="58.1553%" y="239.50">parquet::column::wr..</text></g><g><title>parquet::schema::types::ColumnDescriptor::sort_order (1 samples, 0.07%)</title><rect x="70.6471%" y="213" width="0.0667%" height="15" fill="rgb(250,127,30)" fg:x="1059" fg:w="1"/><text x="70.8971%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.07%)</title><rect x="70.7138%" y="213" width="0.0667%" height="15" fill="rgb(230,49,44)" fg:x="1060" fg:w="1"/><text x="70.9638%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.07%)</title><rect x="70.7138%" y="197" width="0.0667%" height="15" fill="rgb(229,67,23)" fg:x="1060" fg:w="1"/><text x="70.9638%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.07%)</title><rect x="70.7138%" y="181" width="0.0667%" height="15" fill="rgb(249,83,47)" fg:x="1060" fg:w="1"/><text x="70.9638%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.07%)</title><rect x="70.7138%" y="165" width="0.0667%" height="15" fill="rgb(215,43,3)" fg:x="1060" fg:w="1"/><text x="70.9638%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.07%)</title><rect x="70.7138%" y="149" width="0.0667%" height="15" fill="rgb(238,154,13)" fg:x="1060" fg:w="1"/><text x="70.9638%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.07%)</title><rect x="70.7138%" y="133" width="0.0667%" height="15" fill="rgb(219,56,2)" fg:x="1060" fg:w="1"/><text x="70.9638%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.07%)</title><rect x="70.7138%" y="117" width="0.0667%" height="15" fill="rgb(233,0,4)" fg:x="1060" fg:w="1"/><text x="70.9638%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.20%)</title><rect x="70.7805%" y="165" width="0.2001%" height="15" fill="rgb(235,30,7)" fg:x="1061" fg:w="3"/><text x="71.0305%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (3 samples, 0.20%)</title><rect x="70.7805%" y="149" width="0.2001%" height="15" fill="rgb(250,79,13)" fg:x="1061" fg:w="3"/><text x="71.0305%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.07%)</title><rect x="70.9807%" y="165" width="0.0667%" height="15" fill="rgb(211,146,34)" fg:x="1064" fg:w="1"/><text x="71.2307%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.07%)</title><rect x="70.9807%" y="149" width="0.0667%" height="15" fill="rgb(228,22,38)" fg:x="1064" fg:w="1"/><text x="71.2307%" y="159.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.07%)</title><rect x="71.0474%" y="165" width="0.0667%" height="15" fill="rgb(235,168,5)" fg:x="1065" fg:w="1"/><text x="71.2974%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (200 samples, 13.34%)</title><rect x="57.9053%" y="309" width="13.3422%" height="15" fill="rgb(221,155,16)" fg:x="868" fg:w="200"/><text x="58.1553%" y="319.50">parquet::arrow::arro..</text></g><g><title>core::iter::adapters::try_process (200 samples, 13.34%)</title><rect x="57.9053%" y="293" width="13.3422%" height="15" fill="rgb(215,215,53)" fg:x="868" fg:w="200"/><text x="58.1553%" y="303.50">core::iter::adapters..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (200 samples, 13.34%)</title><rect x="57.9053%" y="277" width="13.3422%" height="15" fill="rgb(223,4,10)" fg:x="868" fg:w="200"/><text x="58.1553%" y="287.50">alloc::vec::in_place..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (200 samples, 13.34%)</title><rect x="57.9053%" y="261" width="13.3422%" height="15" fill="rgb(234,103,6)" fg:x="868" fg:w="200"/><text x="58.1553%" y="271.50">&lt;alloc::vec::into_it..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (200 samples, 13.34%)</title><rect x="57.9053%" y="245" width="13.3422%" height="15" fill="rgb(227,97,0)" fg:x="868" fg:w="200"/><text x="58.1553%" y="255.50">parquet::arrow::arro..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (8 samples, 0.53%)</title><rect x="70.7138%" y="229" width="0.5337%" height="15" fill="rgb(234,150,53)" fg:x="1060" fg:w="8"/><text x="70.9638%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (7 samples, 0.47%)</title><rect x="70.7805%" y="213" width="0.4670%" height="15" fill="rgb(228,201,54)" fg:x="1061" fg:w="7"/><text x="71.0305%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.47%)</title><rect x="70.7805%" y="197" width="0.4670%" height="15" fill="rgb(222,22,37)" fg:x="1061" fg:w="7"/><text x="71.0305%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 0.47%)</title><rect x="70.7805%" y="181" width="0.4670%" height="15" fill="rgb(237,53,32)" fg:x="1061" fg:w="7"/><text x="71.0305%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (2 samples, 0.13%)</title><rect x="71.1141%" y="165" width="0.1334%" height="15" fill="rgb(233,25,53)" fg:x="1066" fg:w="2"/><text x="71.3641%" y="175.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.07%)</title><rect x="71.1808%" y="149" width="0.0667%" height="15" fill="rgb(210,40,34)" fg:x="1067" fg:w="1"/><text x="71.4308%" y="159.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.07%)</title><rect x="71.1808%" y="133" width="0.0667%" height="15" fill="rgb(241,220,44)" fg:x="1067" fg:w="1"/><text x="71.4308%" y="143.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.07%)</title><rect x="71.2475%" y="277" width="0.0667%" height="15" fill="rgb(235,28,35)" fg:x="1068" fg:w="1"/><text x="71.4975%" y="287.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="71.2475%" y="261" width="0.0667%" height="15" fill="rgb(210,56,17)" fg:x="1068" fg:w="1"/><text x="71.4975%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (3 samples, 0.20%)</title><rect x="71.3142%" y="261" width="0.2001%" height="15" fill="rgb(224,130,29)" fg:x="1069" fg:w="3"/><text x="71.5642%" y="271.50"></text></g><g><title>write (3 samples, 0.20%)</title><rect x="71.3142%" y="245" width="0.2001%" height="15" fill="rgb(235,212,8)" fg:x="1069" fg:w="3"/><text x="71.5642%" y="255.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (7 samples, 0.47%)</title><rect x="71.2475%" y="309" width="0.4670%" height="15" fill="rgb(223,33,50)" fg:x="1068" fg:w="7"/><text x="71.4975%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (7 samples, 0.47%)</title><rect x="71.2475%" y="293" width="0.4670%" height="15" fill="rgb(219,149,13)" fg:x="1068" fg:w="7"/><text x="71.4975%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (6 samples, 0.40%)</title><rect x="71.3142%" y="277" width="0.4003%" height="15" fill="rgb(250,156,29)" fg:x="1069" fg:w="6"/><text x="71.5642%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.20%)</title><rect x="71.5143%" y="261" width="0.2001%" height="15" fill="rgb(216,193,19)" fg:x="1072" fg:w="3"/><text x="71.7643%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (3 samples, 0.20%)</title><rect x="71.5143%" y="245" width="0.2001%" height="15" fill="rgb(216,135,14)" fg:x="1072" fg:w="3"/><text x="71.7643%" y="255.50"></text></g><g><title>write (3 samples, 0.20%)</title><rect x="71.5143%" y="229" width="0.2001%" height="15" fill="rgb(241,47,5)" fg:x="1072" fg:w="3"/><text x="71.7643%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (209 samples, 13.94%)</title><rect x="57.8386%" y="341" width="13.9426%" height="15" fill="rgb(233,42,35)" fg:x="867" fg:w="209"/><text x="58.0886%" y="351.50">parquet::arrow::arrow..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (208 samples, 13.88%)</title><rect x="57.9053%" y="325" width="13.8759%" height="15" fill="rgb(231,13,6)" fg:x="868" fg:w="208"/><text x="58.1553%" y="335.50">parquet::arrow::arrow..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::close (1 samples, 0.07%)</title><rect x="71.7145%" y="309" width="0.0667%" height="15" fill="rgb(207,181,40)" fg:x="1075" fg:w="1"/><text x="71.9645%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="71.7145%" y="293" width="0.0667%" height="15" fill="rgb(254,173,49)" fg:x="1075" fg:w="1"/><text x="71.9645%" y="303.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="72.0480%" y="245" width="0.0667%" height="15" fill="rgb(221,1,38)" fg:x="1080" fg:w="1"/><text x="72.2980%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (15 samples, 1.00%)</title><rect x="71.9146%" y="261" width="1.0007%" height="15" fill="rgb(206,124,46)" fg:x="1078" fg:w="15"/><text x="72.1646%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (12 samples, 0.80%)</title><rect x="72.1147%" y="245" width="0.8005%" height="15" fill="rgb(249,21,11)" fg:x="1081" fg:w="12"/><text x="72.3647%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (6 samples, 0.40%)</title><rect x="72.5150%" y="229" width="0.4003%" height="15" fill="rgb(222,201,40)" fg:x="1087" fg:w="6"/><text x="72.7650%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.07%)</title><rect x="72.9153%" y="245" width="0.0667%" height="15" fill="rgb(235,61,29)" fg:x="1093" fg:w="1"/><text x="73.1653%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.07%)</title><rect x="72.9153%" y="229" width="0.0667%" height="15" fill="rgb(219,207,3)" fg:x="1093" fg:w="1"/><text x="73.1653%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (21 samples, 1.40%)</title><rect x="71.7812%" y="293" width="1.4009%" height="15" fill="rgb(222,56,46)" fg:x="1076" fg:w="21"/><text x="72.0312%" y="303.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (21 samples, 1.40%)</title><rect x="71.7812%" y="277" width="1.4009%" height="15" fill="rgb(239,76,54)" fg:x="1076" fg:w="21"/><text x="72.0312%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.27%)</title><rect x="72.9153%" y="261" width="0.2668%" height="15" fill="rgb(231,124,27)" fg:x="1093" fg:w="4"/><text x="73.1653%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.20%)</title><rect x="72.9820%" y="245" width="0.2001%" height="15" fill="rgb(249,195,6)" fg:x="1094" fg:w="3"/><text x="73.2320%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.20%)</title><rect x="72.9820%" y="229" width="0.2001%" height="15" fill="rgb(237,174,47)" fg:x="1094" fg:w="3"/><text x="73.2320%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (3 samples, 0.20%)</title><rect x="72.9820%" y="213" width="0.2001%" height="15" fill="rgb(206,201,31)" fg:x="1094" fg:w="3"/><text x="73.2320%" y="223.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (2 samples, 0.13%)</title><rect x="76.3843%" y="245" width="0.1334%" height="15" fill="rgb(231,57,52)" fg:x="1145" fg:w="2"/><text x="76.6343%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (42 samples, 2.80%)</title><rect x="73.7825%" y="277" width="2.8019%" height="15" fill="rgb(248,177,22)" fg:x="1106" fg:w="42"/><text x="74.0325%" y="287.50">&lt;p..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (19 samples, 1.27%)</title><rect x="75.3169%" y="261" width="1.2675%" height="15" fill="rgb(215,211,37)" fg:x="1129" fg:w="19"/><text x="75.5669%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.07%)</title><rect x="76.5177%" y="245" width="0.0667%" height="15" fill="rgb(241,128,51)" fg:x="1147" fg:w="1"/><text x="76.7677%" y="255.50"></text></g><g><title>parquet::column::writer::compare_greater (7 samples, 0.47%)</title><rect x="77.5183%" y="245" width="0.4670%" height="15" fill="rgb(227,165,31)" fg:x="1162" fg:w="7"/><text x="77.7683%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (42 samples, 2.80%)</title><rect x="76.5844%" y="277" width="2.8019%" height="15" fill="rgb(228,167,24)" fg:x="1148" fg:w="42"/><text x="76.8344%" y="287.50">&lt;p..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (37 samples, 2.47%)</title><rect x="76.9179%" y="261" width="2.4683%" height="15" fill="rgb(228,143,12)" fg:x="1153" fg:w="37"/><text x="77.1679%" y="271.50">pa..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (21 samples, 1.40%)</title><rect x="77.9853%" y="245" width="1.4009%" height="15" fill="rgb(249,149,8)" fg:x="1169" fg:w="21"/><text x="78.2353%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.27%)</title><rect x="79.1194%" y="229" width="0.2668%" height="15" fill="rgb(243,35,44)" fg:x="1186" fg:w="4"/><text x="79.3694%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (3 samples, 0.20%)</title><rect x="79.3863%" y="261" width="0.2001%" height="15" fill="rgb(246,89,9)" fg:x="1190" fg:w="3"/><text x="79.6363%" y="271.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.20%)</title><rect x="79.3863%" y="245" width="0.2001%" height="15" fill="rgb(233,213,13)" fg:x="1190" fg:w="3"/><text x="79.6363%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.07%)</title><rect x="79.5197%" y="229" width="0.0667%" height="15" fill="rgb(233,141,41)" fg:x="1192" fg:w="1"/><text x="79.7697%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (2 samples, 0.13%)</title><rect x="79.7198%" y="229" width="0.1334%" height="15" fill="rgb(239,167,4)" fg:x="1195" fg:w="2"/><text x="79.9698%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.13%)</title><rect x="79.7198%" y="213" width="0.1334%" height="15" fill="rgb(209,217,16)" fg:x="1195" fg:w="2"/><text x="79.9698%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (8 samples, 0.53%)</title><rect x="79.5864%" y="261" width="0.5337%" height="15" fill="rgb(219,88,35)" fg:x="1193" fg:w="8"/><text x="79.8364%" y="271.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (8 samples, 0.53%)</title><rect x="79.5864%" y="245" width="0.5337%" height="15" fill="rgb(220,193,23)" fg:x="1193" fg:w="8"/><text x="79.8364%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (4 samples, 0.27%)</title><rect x="79.8532%" y="229" width="0.2668%" height="15" fill="rgb(230,90,52)" fg:x="1197" fg:w="4"/><text x="80.1032%" y="239.50"></text></g><g><title>brotli::enc::backward_references::TestStaticDictionaryItem (1 samples, 0.07%)</title><rect x="84.5897%" y="197" width="0.0667%" height="15" fill="rgb(252,106,19)" fg:x="1268" fg:w="1"/><text x="84.8397%" y="207.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (9 samples, 0.60%)</title><rect x="84.6564%" y="197" width="0.6004%" height="15" fill="rgb(206,74,20)" fg:x="1269" fg:w="9"/><text x="84.9064%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (71 samples, 4.74%)</title><rect x="80.6538%" y="213" width="4.7365%" height="15" fill="rgb(230,138,44)" fg:x="1209" fg:w="71"/><text x="80.9038%" y="223.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.13%)</title><rect x="85.2568%" y="197" width="0.1334%" height="15" fill="rgb(235,182,43)" fg:x="1278" fg:w="2"/><text x="85.5068%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (81 samples, 5.40%)</title><rect x="80.1868%" y="229" width="5.4036%" height="15" fill="rgb(242,16,51)" fg:x="1202" fg:w="81"/><text x="80.4368%" y="239.50">brotli:..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.20%)</title><rect x="85.3903%" y="213" width="0.2001%" height="15" fill="rgb(248,9,4)" fg:x="1280" fg:w="3"/><text x="85.6403%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.13%)</title><rect x="85.9239%" y="181" width="0.1334%" height="15" fill="rgb(210,31,22)" fg:x="1288" fg:w="2"/><text x="86.1739%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.07%)</title><rect x="85.9907%" y="165" width="0.0667%" height="15" fill="rgb(239,54,39)" fg:x="1289" fg:w="1"/><text x="86.2407%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (5 samples, 0.33%)</title><rect x="86.0574%" y="181" width="0.3336%" height="15" fill="rgb(230,99,41)" fg:x="1290" fg:w="5"/><text x="86.3074%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (22 samples, 1.47%)</title><rect x="85.9239%" y="213" width="1.4676%" height="15" fill="rgb(253,106,12)" fg:x="1288" fg:w="22"/><text x="86.1739%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (22 samples, 1.47%)</title><rect x="85.9239%" y="197" width="1.4676%" height="15" fill="rgb(213,46,41)" fg:x="1288" fg:w="22"/><text x="86.1739%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (15 samples, 1.00%)</title><rect x="86.3909%" y="181" width="1.0007%" height="15" fill="rgb(215,133,35)" fg:x="1295" fg:w="15"/><text x="86.6409%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (6 samples, 0.40%)</title><rect x="87.3916%" y="213" width="0.4003%" height="15" fill="rgb(213,28,5)" fg:x="1310" fg:w="6"/><text x="87.6416%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (5 samples, 0.33%)</title><rect x="87.7919%" y="213" width="0.3336%" height="15" fill="rgb(215,77,49)" fg:x="1316" fg:w="5"/><text x="88.0419%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (39 samples, 2.60%)</title><rect x="85.5904%" y="229" width="2.6017%" height="15" fill="rgb(248,100,22)" fg:x="1283" fg:w="39"/><text x="85.8404%" y="239.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.07%)</title><rect x="88.1254%" y="213" width="0.0667%" height="15" fill="rgb(208,67,9)" fg:x="1321" fg:w="1"/><text x="88.3754%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (6 samples, 0.40%)</title><rect x="88.1921%" y="229" width="0.4003%" height="15" fill="rgb(219,133,21)" fg:x="1322" fg:w="6"/><text x="88.4421%" y="239.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.13%)</title><rect x="88.7258%" y="213" width="0.1334%" height="15" fill="rgb(246,46,29)" fg:x="1330" fg:w="2"/><text x="88.9758%" y="223.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.13%)</title><rect x="88.7258%" y="197" width="0.1334%" height="15" fill="rgb(246,185,52)" fg:x="1330" fg:w="2"/><text x="88.9758%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (5 samples, 0.33%)</title><rect x="88.5924%" y="229" width="0.3336%" height="15" fill="rgb(252,136,11)" fg:x="1328" fg:w="5"/><text x="88.8424%" y="239.50"></text></g><g><title>calloc (1 samples, 0.07%)</title><rect x="88.8592%" y="213" width="0.0667%" height="15" fill="rgb(219,138,53)" fg:x="1332" fg:w="1"/><text x="89.1092%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (133 samples, 8.87%)</title><rect x="80.1201%" y="245" width="8.8726%" height="15" fill="rgb(211,51,23)" fg:x="1201" fg:w="133"/><text x="80.3701%" y="255.50">brotli::enc::..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.07%)</title><rect x="88.9260%" y="229" width="0.0667%" height="15" fill="rgb(247,221,28)" fg:x="1333" fg:w="1"/><text x="89.1760%" y="239.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.07%)</title><rect x="88.9260%" y="213" width="0.0667%" height="15" fill="rgb(251,222,45)" fg:x="1333" fg:w="1"/><text x="89.1760%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (134 samples, 8.94%)</title><rect x="80.1201%" y="261" width="8.9393%" height="15" fill="rgb(217,162,53)" fg:x="1201" fg:w="134"/><text x="80.3701%" y="271.50">&lt;parquet::com..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.07%)</title><rect x="88.9927%" y="245" width="0.0667%" height="15" fill="rgb(229,93,14)" fg:x="1334" fg:w="1"/><text x="89.2427%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.07%)</title><rect x="88.9927%" y="229" width="0.0667%" height="15" fill="rgb(209,67,49)" fg:x="1334" fg:w="1"/><text x="89.2427%" y="239.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.07%)</title><rect x="88.9927%" y="213" width="0.0667%" height="15" fill="rgb(213,87,29)" fg:x="1334" fg:w="1"/><text x="89.2427%" y="223.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::consume (1 samples, 0.07%)</title><rect x="89.0594%" y="261" width="0.0667%" height="15" fill="rgb(205,151,52)" fg:x="1335" fg:w="1"/><text x="89.3094%" y="271.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::consume (1 samples, 0.07%)</title><rect x="89.0594%" y="245" width="0.0667%" height="15" fill="rgb(253,215,39)" fg:x="1335" fg:w="1"/><text x="89.3094%" y="255.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.07%)</title><rect x="89.1261%" y="261" width="0.0667%" height="15" fill="rgb(221,220,41)" fg:x="1336" fg:w="1"/><text x="89.3761%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (262 samples, 17.48%)</title><rect x="71.7812%" y="309" width="17.4783%" height="15" fill="rgb(218,133,21)" fg:x="1076" fg:w="262"/><text x="72.0312%" y="319.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (241 samples, 16.08%)</title><rect x="73.1821%" y="293" width="16.0774%" height="15" fill="rgb(221,193,43)" fg:x="1097" fg:w="241"/><text x="73.4321%" y="303.50">parquet::column::writer::..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (148 samples, 9.87%)</title><rect x="79.3863%" y="277" width="9.8732%" height="15" fill="rgb(240,128,52)" fg:x="1190" fg:w="148"/><text x="79.6363%" y="287.50">parquet::colum..</text></g><g><title>parquet::file::metadata::ColumnIndexBuilder::append_histograms (1 samples, 0.07%)</title><rect x="89.1928%" y="261" width="0.0667%" height="15" fill="rgb(253,114,12)" fg:x="1337" fg:w="1"/><text x="89.4428%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="89.1928%" y="245" width="0.0667%" height="15" fill="rgb(215,223,47)" fg:x="1337" fg:w="1"/><text x="89.4428%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.07%)</title><rect x="89.1928%" y="229" width="0.0667%" height="15" fill="rgb(248,225,23)" fg:x="1337" fg:w="1"/><text x="89.4428%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (264 samples, 17.61%)</title><rect x="71.7812%" y="341" width="17.6117%" height="15" fill="rgb(250,108,0)" fg:x="1076" fg:w="264"/><text x="72.0312%" y="351.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (264 samples, 17.61%)</title><rect x="71.7812%" y="325" width="17.6117%" height="15" fill="rgb(228,208,7)" fg:x="1076" fg:w="264"/><text x="72.0312%" y="335.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (2 samples, 0.13%)</title><rect x="89.2595%" y="309" width="0.1334%" height="15" fill="rgb(244,45,10)" fg:x="1338" fg:w="2"/><text x="89.5095%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (2 samples, 0.13%)</title><rect x="89.2595%" y="293" width="0.1334%" height="15" fill="rgb(207,125,25)" fg:x="1338" fg:w="2"/><text x="89.5095%" y="303.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (1,312 samples, 87.53%)</title><rect x="2.0680%" y="373" width="87.5250%" height="15" fill="rgb(210,195,18)" fg:x="31" fg:w="1312"/><text x="2.3180%" y="383.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (1,279 samples, 85.32%)</title><rect x="4.2695%" y="357" width="85.3235%" height="15" fill="rgb(249,80,12)" fg:x="64" fg:w="1279"/><text x="4.5195%" y="367.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>std::fs::OpenOptions::_open (3 samples, 0.20%)</title><rect x="89.3929%" y="341" width="0.2001%" height="15" fill="rgb(221,65,9)" fg:x="1340" fg:w="3"/><text x="89.6429%" y="351.50"></text></g><g><title>open64 (3 samples, 0.20%)</title><rect x="89.3929%" y="325" width="0.2001%" height="15" fill="rgb(235,49,36)" fg:x="1340" fg:w="3"/><text x="89.6429%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (10 samples, 0.67%)</title><rect x="89.7265%" y="357" width="0.6671%" height="15" fill="rgb(225,32,20)" fg:x="1345" fg:w="10"/><text x="89.9765%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.53%)</title><rect x="90.3936%" y="357" width="0.5337%" height="15" fill="rgb(215,141,46)" fg:x="1355" fg:w="8"/><text x="90.6436%" y="367.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.07%)</title><rect x="91.1941%" y="293" width="0.0667%" height="15" fill="rgb(250,160,47)" fg:x="1367" fg:w="1"/><text x="91.4441%" y="303.50"></text></g><g><title>crc32fast::Hasher::update (12 samples, 0.80%)</title><rect x="90.9273%" y="325" width="0.8005%" height="15" fill="rgb(216,222,40)" fg:x="1363" fg:w="12"/><text x="91.1773%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (12 samples, 0.80%)</title><rect x="90.9273%" y="309" width="0.8005%" height="15" fill="rgb(234,217,39)" fg:x="1363" fg:w="12"/><text x="91.1773%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (7 samples, 0.47%)</title><rect x="91.2608%" y="293" width="0.4670%" height="15" fill="rgb(207,178,40)" fg:x="1368" fg:w="7"/><text x="91.5108%" y="303.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (79 samples, 5.27%)</title><rect x="91.7278%" y="309" width="5.2702%" height="15" fill="rgb(221,136,13)" fg:x="1375" fg:w="79"/><text x="91.9778%" y="319.50">&lt;flate..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (78 samples, 5.20%)</title><rect x="91.7945%" y="293" width="5.2035%" height="15" fill="rgb(249,199,10)" fg:x="1376" fg:w="78"/><text x="92.0445%" y="303.50">&lt;flate..</text></g><g><title>zlib_rs::inflate::inflate (78 samples, 5.20%)</title><rect x="91.7945%" y="277" width="5.2035%" height="15" fill="rgb(249,222,13)" fg:x="1376" fg:w="78"/><text x="92.0445%" y="287.50">zlib_r..</text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (73 samples, 4.87%)</title><rect x="92.1281%" y="261" width="4.8699%" height="15" fill="rgb(244,185,38)" fg:x="1381" fg:w="73"/><text x="92.3781%" y="271.50">zlib_r..</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,455 samples, 97.06%)</title><rect x="0.0000%" y="405" width="97.0647%" height="15" fill="rgb(236,202,9)" fg:x="0" fg:w="1455"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (1,436 samples, 95.80%)</title><rect x="1.2675%" y="389" width="95.7972%" height="15" fill="rgb(250,229,37)" fg:x="19" fg:w="1436"/><text x="1.5175%" y="399.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (112 samples, 7.47%)</title><rect x="89.5931%" y="373" width="7.4716%" height="15" fill="rgb(206,174,23)" fg:x="1343" fg:w="112"/><text x="89.8431%" y="383.50">std::io::a..</text></g><g><title>std::io::default_read_buf (92 samples, 6.14%)</title><rect x="90.9273%" y="357" width="6.1374%" height="15" fill="rgb(211,33,43)" fg:x="1363" fg:w="92"/><text x="91.1773%" y="367.50">std::io:..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (92 samples, 6.14%)</title><rect x="90.9273%" y="341" width="6.1374%" height="15" fill="rgb(245,58,50)" fg:x="1363" fg:w="92"/><text x="91.1773%" y="351.50">&lt;zip::cr..</text></g><g><title>flate2::zio::read (80 samples, 5.34%)</title><rect x="91.7278%" y="325" width="5.3369%" height="15" fill="rgb(244,68,36)" fg:x="1375" fg:w="80"/><text x="91.9778%" y="335.50">flate2:..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.07%)</title><rect x="96.9980%" y="309" width="0.0667%" height="15" fill="rgb(232,229,15)" fg:x="1454" fg:w="1"/><text x="97.2480%" y="319.50"></text></g><g><title>bench_zip_to_pa (1,456 samples, 97.13%)</title><rect x="0.0000%" y="565" width="97.1314%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,456 samples, 97.13%)</title><rect x="0.0000%" y="549" width="97.1314%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,456 samples, 97.13%)</title><rect x="0.0000%" y="533" width="97.1314%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,456 samples, 97.13%)</title><rect x="0.0000%" y="517" width="97.1314%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,456 samples, 97.13%)</title><rect x="0.0000%" y="501" width="97.1314%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,456 samples, 97.13%)</title><rect x="0.0000%" y="485" width="97.1314%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,456 samples, 97.13%)</title><rect x="0.0000%" y="469" width="97.1314%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,456 samples, 97.13%)</title><rect x="0.0000%" y="453" width="97.1314%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,456 samples, 97.13%)</title><rect x="0.0000%" y="437" width="97.1314%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,456 samples, 97.13%)</title><rect x="0.0000%" y="421" width="97.1314%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="1456"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (1 samples, 0.07%)</title><rect x="97.0647%" y="405" width="0.0667%" height="15" fill="rgb(232,111,31)" fg:x="1455" fg:w="1"/><text x="97.3147%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.07%)</title><rect x="97.0647%" y="389" width="0.0667%" height="15" fill="rgb(245,82,37)" fg:x="1455" fg:w="1"/><text x="97.3147%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (1 samples, 0.07%)</title><rect x="97.1314%" y="373" width="0.0667%" height="15" fill="rgb(227,149,46)" fg:x="1456" fg:w="1"/><text x="97.3814%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.20%)</title><rect x="97.1981%" y="341" width="0.2001%" height="15" fill="rgb(218,36,50)" fg:x="1457" fg:w="3"/><text x="97.4481%" y="351.50"></text></g><g><title>syscall (2 samples, 0.13%)</title><rect x="97.2648%" y="325" width="0.1334%" height="15" fill="rgb(226,80,48)" fg:x="1458" fg:w="2"/><text x="97.5148%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (6 samples, 0.40%)</title><rect x="97.1981%" y="373" width="0.4003%" height="15" fill="rgb(238,224,15)" fg:x="1457" fg:w="6"/><text x="97.4481%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (6 samples, 0.40%)</title><rect x="97.1981%" y="357" width="0.4003%" height="15" fill="rgb(241,136,10)" fg:x="1457" fg:w="6"/><text x="97.4481%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 0.20%)</title><rect x="97.3983%" y="341" width="0.2001%" height="15" fill="rgb(208,32,45)" fg:x="1460" fg:w="3"/><text x="97.6483%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (3 samples, 0.20%)</title><rect x="97.3983%" y="325" width="0.2001%" height="15" fill="rgb(207,135,9)" fg:x="1460" fg:w="3"/><text x="97.6483%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (3 samples, 0.20%)</title><rect x="97.3983%" y="309" width="0.2001%" height="15" fill="rgb(206,86,44)" fg:x="1460" fg:w="3"/><text x="97.6483%" y="319.50"></text></g><g><title>epoll_wait (3 samples, 0.20%)</title><rect x="97.3983%" y="293" width="0.2001%" height="15" fill="rgb(245,177,15)" fg:x="1460" fg:w="3"/><text x="97.6483%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.13%)</title><rect x="97.5984%" y="357" width="0.1334%" height="15" fill="rgb(206,64,50)" fg:x="1463" fg:w="2"/><text x="97.8484%" y="367.50"></text></g><g><title>syscall (2 samples, 0.13%)</title><rect x="97.5984%" y="341" width="0.1334%" height="15" fill="rgb(234,36,40)" fg:x="1463" fg:w="2"/><text x="97.8484%" y="351.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (1 samples, 0.07%)</title><rect x="97.7318%" y="357" width="0.0667%" height="15" fill="rgb(213,64,8)" fg:x="1465" fg:w="1"/><text x="97.9818%" y="367.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (5 samples, 0.33%)</title><rect x="97.7985%" y="357" width="0.3336%" height="15" fill="rgb(210,75,36)" fg:x="1466" fg:w="5"/><text x="98.0485%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (5 samples, 0.33%)</title><rect x="97.7985%" y="341" width="0.3336%" height="15" fill="rgb(229,88,21)" fg:x="1466" fg:w="5"/><text x="98.0485%" y="351.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (5 samples, 0.33%)</title><rect x="97.7985%" y="325" width="0.3336%" height="15" fill="rgb(252,204,47)" fg:x="1466" fg:w="5"/><text x="98.0485%" y="335.50"></text></g><g><title>write (5 samples, 0.33%)</title><rect x="97.7985%" y="309" width="0.3336%" height="15" fill="rgb(208,77,27)" fg:x="1466" fg:w="5"/><text x="98.0485%" y="319.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (2 samples, 0.13%)</title><rect x="98.1321%" y="277" width="0.1334%" height="15" fill="rgb(221,76,26)" fg:x="1471" fg:w="2"/><text x="98.3821%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.07%)</title><rect x="98.1988%" y="261" width="0.0667%" height="15" fill="rgb(225,139,18)" fg:x="1472" fg:w="1"/><text x="98.4488%" y="271.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.07%)</title><rect x="98.1988%" y="245" width="0.0667%" height="15" fill="rgb(230,137,11)" fg:x="1472" fg:w="1"/><text x="98.4488%" y="255.50"></text></g><g><title>syscall (1 samples, 0.07%)</title><rect x="98.1988%" y="229" width="0.0667%" height="15" fill="rgb(212,28,1)" fg:x="1472" fg:w="1"/><text x="98.4488%" y="239.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (11 samples, 0.73%)</title><rect x="98.2655%" y="277" width="0.7338%" height="15" fill="rgb(248,164,17)" fg:x="1473" fg:w="11"/><text x="98.5155%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (11 samples, 0.73%)</title><rect x="98.2655%" y="261" width="0.7338%" height="15" fill="rgb(222,171,42)" fg:x="1473" fg:w="11"/><text x="98.5155%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (11 samples, 0.73%)</title><rect x="98.2655%" y="245" width="0.7338%" height="15" fill="rgb(243,84,45)" fg:x="1473" fg:w="11"/><text x="98.5155%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (11 samples, 0.73%)</title><rect x="98.2655%" y="229" width="0.7338%" height="15" fill="rgb(252,49,23)" fg:x="1473" fg:w="11"/><text x="98.5155%" y="239.50"></text></g><g><title>syscall (11 samples, 0.73%)</title><rect x="98.2655%" y="213" width="0.7338%" height="15" fill="rgb(215,19,7)" fg:x="1473" fg:w="11"/><text x="98.5155%" y="223.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (6 samples, 0.40%)</title><rect x="99.1328%" y="165" width="0.4003%" height="15" fill="rgb(238,81,41)" fg:x="1486" fg:w="6"/><text x="99.3828%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (4 samples, 0.27%)</title><rect x="99.2662%" y="149" width="0.2668%" height="15" fill="rgb(210,199,37)" fg:x="1488" fg:w="4"/><text x="99.5162%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (2 samples, 0.13%)</title><rect x="99.3996%" y="133" width="0.1334%" height="15" fill="rgb(244,192,49)" fg:x="1490" fg:w="2"/><text x="99.6496%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (2 samples, 0.13%)</title><rect x="99.3996%" y="117" width="0.1334%" height="15" fill="rgb(226,211,11)" fg:x="1490" fg:w="2"/><text x="99.6496%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (2 samples, 0.13%)</title><rect x="99.3996%" y="101" width="0.1334%" height="15" fill="rgb(236,162,54)" fg:x="1490" fg:w="2"/><text x="99.6496%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.07%)</title><rect x="99.4663%" y="85" width="0.0667%" height="15" fill="rgb(220,229,9)" fg:x="1491" fg:w="1"/><text x="99.7163%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.07%)</title><rect x="99.4663%" y="69" width="0.0667%" height="15" fill="rgb(250,87,22)" fg:x="1491" fg:w="1"/><text x="99.7163%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.07%)</title><rect x="99.4663%" y="53" width="0.0667%" height="15" fill="rgb(239,43,17)" fg:x="1491" fg:w="1"/><text x="99.7163%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.07%)</title><rect x="99.4663%" y="37" width="0.0667%" height="15" fill="rgb(231,177,25)" fg:x="1491" fg:w="1"/><text x="99.7163%" y="47.50"></text></g><g><title>all (1,499 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="1499"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (43 samples, 2.87%)</title><rect x="97.1314%" y="565" width="2.8686%" height="15" fill="rgb(238,219,53)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="575.50">to..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (43 samples, 2.87%)</title><rect x="97.1314%" y="549" width="2.8686%" height="15" fill="rgb(232,167,36)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="559.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (43 samples, 2.87%)</title><rect x="97.1314%" y="533" width="2.8686%" height="15" fill="rgb(244,19,51)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="543.50">co..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (43 samples, 2.87%)</title><rect x="97.1314%" y="517" width="2.8686%" height="15" fill="rgb(224,6,22)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="527.50">st..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43 samples, 2.87%)</title><rect x="97.1314%" y="501" width="2.8686%" height="15" fill="rgb(224,145,5)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="511.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (43 samples, 2.87%)</title><rect x="97.1314%" y="485" width="2.8686%" height="15" fill="rgb(234,130,49)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="495.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (43 samples, 2.87%)</title><rect x="97.1314%" y="469" width="2.8686%" height="15" fill="rgb(254,6,2)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="479.50">to..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 2.87%)</title><rect x="97.1314%" y="453" width="2.8686%" height="15" fill="rgb(208,96,46)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="463.50">&lt;t..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (43 samples, 2.87%)</title><rect x="97.1314%" y="437" width="2.8686%" height="15" fill="rgb(239,3,39)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="447.50">to..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (43 samples, 2.87%)</title><rect x="97.1314%" y="421" width="2.8686%" height="15" fill="rgb(233,210,1)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="431.50">to..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (43 samples, 2.87%)</title><rect x="97.1314%" y="405" width="2.8686%" height="15" fill="rgb(244,137,37)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="415.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (43 samples, 2.87%)</title><rect x="97.1314%" y="389" width="2.8686%" height="15" fill="rgb(240,136,2)" fg:x="1456" fg:w="43"/><text x="97.3814%" y="399.50">to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (36 samples, 2.40%)</title><rect x="97.5984%" y="373" width="2.4016%" height="15" fill="rgb(239,18,37)" fg:x="1463" fg:w="36"/><text x="97.8484%" y="383.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (28 samples, 1.87%)</title><rect x="98.1321%" y="357" width="1.8679%" height="15" fill="rgb(218,185,22)" fg:x="1471" fg:w="28"/><text x="98.3821%" y="367.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (28 samples, 1.87%)</title><rect x="98.1321%" y="341" width="1.8679%" height="15" fill="rgb(225,218,4)" fg:x="1471" fg:w="28"/><text x="98.3821%" y="351.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (28 samples, 1.87%)</title><rect x="98.1321%" y="325" width="1.8679%" height="15" fill="rgb(230,182,32)" fg:x="1471" fg:w="28"/><text x="98.3821%" y="335.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (28 samples, 1.87%)</title><rect x="98.1321%" y="309" width="1.8679%" height="15" fill="rgb(242,56,43)" fg:x="1471" fg:w="28"/><text x="98.3821%" y="319.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (28 samples, 1.87%)</title><rect x="98.1321%" y="293" width="1.8679%" height="15" fill="rgb(233,99,24)" fg:x="1471" fg:w="28"/><text x="98.3821%" y="303.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (15 samples, 1.00%)</title><rect x="98.9993%" y="277" width="1.0007%" height="15" fill="rgb(234,209,42)" fg:x="1484" fg:w="15"/><text x="99.2493%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (15 samples, 1.00%)</title><rect x="98.9993%" y="261" width="1.0007%" height="15" fill="rgb(227,7,12)" fg:x="1484" fg:w="15"/><text x="99.2493%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (15 samples, 1.00%)</title><rect x="98.9993%" y="245" width="1.0007%" height="15" fill="rgb(245,203,43)" fg:x="1484" fg:w="15"/><text x="99.2493%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (15 samples, 1.00%)</title><rect x="98.9993%" y="229" width="1.0007%" height="15" fill="rgb(238,205,33)" fg:x="1484" fg:w="15"/><text x="99.2493%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 1.00%)</title><rect x="98.9993%" y="213" width="1.0007%" height="15" fill="rgb(231,56,7)" fg:x="1484" fg:w="15"/><text x="99.2493%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 1.00%)</title><rect x="98.9993%" y="197" width="1.0007%" height="15" fill="rgb(244,186,29)" fg:x="1484" fg:w="15"/><text x="99.2493%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (13 samples, 0.87%)</title><rect x="99.1328%" y="181" width="0.8672%" height="15" fill="rgb(234,111,31)" fg:x="1486" fg:w="13"/><text x="99.3828%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (7 samples, 0.47%)</title><rect x="99.5330%" y="165" width="0.4670%" height="15" fill="rgb(241,149,10)" fg:x="1492" fg:w="7"/><text x="99.7830%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (7 samples, 0.47%)</title><rect x="99.5330%" y="149" width="0.4670%" height="15" fill="rgb(249,206,44)" fg:x="1492" fg:w="7"/><text x="99.7830%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (7 samples, 0.47%)</title><rect x="99.5330%" y="133" width="0.4670%" height="15" fill="rgb(251,153,30)" fg:x="1492" fg:w="7"/><text x="99.7830%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (7 samples, 0.47%)</title><rect x="99.5330%" y="117" width="0.4670%" height="15" fill="rgb(239,152,38)" fg:x="1492" fg:w="7"/><text x="99.7830%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (7 samples, 0.47%)</title><rect x="99.5330%" y="101" width="0.4670%" height="15" fill="rgb(249,139,47)" fg:x="1492" fg:w="7"/><text x="99.7830%" y="111.50"></text></g><g><title>recv (7 samples, 0.47%)</title><rect x="99.5330%" y="85" width="0.4670%" height="15" fill="rgb(244,64,35)" fg:x="1492" fg:w="7"/><text x="99.7830%" y="95.50"></text></g></svg></svg>