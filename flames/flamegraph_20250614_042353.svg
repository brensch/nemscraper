<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1006"><g><title>cfree (1 samples, 0.10%)</title><rect x="0.2982%" y="229" width="0.0994%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="1"/><text x="0.5482%" y="239.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.40%)</title><rect x="0.3976%" y="181" width="0.3976%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="4"/><text x="0.6476%" y="191.50"></text></g><g><title>syscall (4 samples, 0.40%)</title><rect x="0.3976%" y="165" width="0.3976%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="4"/><text x="0.6476%" y="175.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.89%)</title><rect x="0.2982%" y="341" width="0.8946%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="9"/><text x="0.5482%" y="351.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (9 samples, 0.89%)</title><rect x="0.2982%" y="325" width="0.8946%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="9"/><text x="0.5482%" y="335.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (9 samples, 0.89%)</title><rect x="0.2982%" y="309" width="0.8946%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="9"/><text x="0.5482%" y="319.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (9 samples, 0.89%)</title><rect x="0.2982%" y="293" width="0.8946%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="9"/><text x="0.5482%" y="303.50"></text></g><g><title>hyper::body::body::Body::poll_inner (9 samples, 0.89%)</title><rect x="0.2982%" y="277" width="0.8946%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="9"/><text x="0.5482%" y="287.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.89%)</title><rect x="0.2982%" y="261" width="0.8946%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="9"/><text x="0.5482%" y="271.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (9 samples, 0.89%)</title><rect x="0.2982%" y="245" width="0.8946%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="9"/><text x="0.5482%" y="255.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.80%)</title><rect x="0.3976%" y="229" width="0.7952%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="8"/><text x="0.6476%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (8 samples, 0.80%)</title><rect x="0.3976%" y="213" width="0.7952%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="8"/><text x="0.6476%" y="223.50"></text></g><g><title>tokio::runtime::context::with_scheduler (8 samples, 0.80%)</title><rect x="0.3976%" y="197" width="0.7952%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="8"/><text x="0.6476%" y="207.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (4 samples, 0.40%)</title><rect x="0.7952%" y="181" width="0.3976%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="4"/><text x="1.0452%" y="191.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.40%)</title><rect x="0.7952%" y="165" width="0.3976%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="4"/><text x="1.0452%" y="175.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (4 samples, 0.40%)</title><rect x="0.7952%" y="149" width="0.3976%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="4"/><text x="1.0452%" y="159.50"></text></g><g><title>write (4 samples, 0.40%)</title><rect x="0.7952%" y="133" width="0.3976%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="4"/><text x="1.0452%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.10%)</title><rect x="1.1928%" y="341" width="0.0994%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="1"/><text x="1.4428%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (1 samples, 0.10%)</title><rect x="1.1928%" y="325" width="0.0994%" height="15" fill="rgb(221,200,47)" fg:x="12" fg:w="1"/><text x="1.4428%" y="335.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (1 samples, 0.10%)</title><rect x="1.1928%" y="309" width="0.0994%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="1"/><text x="1.4428%" y="319.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (2 samples, 0.20%)</title><rect x="1.8887%" y="277" width="0.1988%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="2"/><text x="2.1387%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (2 samples, 0.20%)</title><rect x="1.8887%" y="261" width="0.1988%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="2"/><text x="2.1387%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.10%)</title><rect x="1.9881%" y="245" width="0.0994%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="2.2381%" y="255.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (3 samples, 0.30%)</title><rect x="1.8887%" y="293" width="0.2982%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="3"/><text x="2.1387%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.10%)</title><rect x="2.0875%" y="277" width="0.0994%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="2.3375%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.10%)</title><rect x="2.0875%" y="261" width="0.0994%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="1"/><text x="2.3375%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="2.0875%" y="245" width="0.0994%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="1"/><text x="2.3375%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="2.0875%" y="229" width="0.0994%" height="15" fill="rgb(238,160,17)" fg:x="21" fg:w="1"/><text x="2.3375%" y="239.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="2.0875%" y="213" width="0.0994%" height="15" fill="rgb(214,148,48)" fg:x="21" fg:w="1"/><text x="2.3375%" y="223.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1 samples, 0.10%)</title><rect x="2.0875%" y="197" width="0.0994%" height="15" fill="rgb(232,36,49)" fg:x="21" fg:w="1"/><text x="2.3375%" y="207.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="2.1869%" y="293" width="0.0994%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="1"/><text x="2.4369%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (2 samples, 0.20%)</title><rect x="2.2863%" y="293" width="0.1988%" height="15" fill="rgb(229,88,8)" fg:x="23" fg:w="2"/><text x="2.5363%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.10%)</title><rect x="2.3857%" y="277" width="0.0994%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="1"/><text x="2.6357%" y="287.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.10%)</title><rect x="2.4851%" y="181" width="0.0994%" height="15" fill="rgb(254,191,54)" fg:x="25" fg:w="1"/><text x="2.7351%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.10%)</title><rect x="2.4851%" y="165" width="0.0994%" height="15" fill="rgb(241,83,37)" fg:x="25" fg:w="1"/><text x="2.7351%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="2.4851%" y="149" width="0.0994%" height="15" fill="rgb(233,36,39)" fg:x="25" fg:w="1"/><text x="2.7351%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="2.4851%" y="133" width="0.0994%" height="15" fill="rgb(226,3,54)" fg:x="25" fg:w="1"/><text x="2.7351%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="2.4851%" y="117" width="0.0994%" height="15" fill="rgb(245,192,40)" fg:x="25" fg:w="1"/><text x="2.7351%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (2 samples, 0.20%)</title><rect x="2.4851%" y="293" width="0.1988%" height="15" fill="rgb(238,167,29)" fg:x="25" fg:w="2"/><text x="2.7351%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.20%)</title><rect x="2.4851%" y="277" width="0.1988%" height="15" fill="rgb(232,182,51)" fg:x="25" fg:w="2"/><text x="2.7351%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.20%)</title><rect x="2.4851%" y="261" width="0.1988%" height="15" fill="rgb(231,60,39)" fg:x="25" fg:w="2"/><text x="2.7351%" y="271.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.20%)</title><rect x="2.4851%" y="245" width="0.1988%" height="15" fill="rgb(208,69,12)" fg:x="25" fg:w="2"/><text x="2.7351%" y="255.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.20%)</title><rect x="2.4851%" y="229" width="0.1988%" height="15" fill="rgb(235,93,37)" fg:x="25" fg:w="2"/><text x="2.7351%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.20%)</title><rect x="2.4851%" y="213" width="0.1988%" height="15" fill="rgb(213,116,39)" fg:x="25" fg:w="2"/><text x="2.7351%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.20%)</title><rect x="2.4851%" y="197" width="0.1988%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="2"/><text x="2.7351%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (1 samples, 0.10%)</title><rect x="2.5845%" y="181" width="0.0994%" height="15" fill="rgb(206,96,30)" fg:x="26" fg:w="1"/><text x="2.8345%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.10%)</title><rect x="2.5845%" y="165" width="0.0994%" height="15" fill="rgb(218,138,4)" fg:x="26" fg:w="1"/><text x="2.8345%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="2.5845%" y="149" width="0.0994%" height="15" fill="rgb(250,191,14)" fg:x="26" fg:w="1"/><text x="2.8345%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="2.5845%" y="133" width="0.0994%" height="15" fill="rgb(239,60,40)" fg:x="26" fg:w="1"/><text x="2.8345%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="2.5845%" y="117" width="0.0994%" height="15" fill="rgb(206,27,48)" fg:x="26" fg:w="1"/><text x="2.8345%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="2.5845%" y="101" width="0.0994%" height="15" fill="rgb(225,35,8)" fg:x="26" fg:w="1"/><text x="2.8345%" y="111.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.10%)</title><rect x="2.5845%" y="85" width="0.0994%" height="15" fill="rgb(250,213,24)" fg:x="26" fg:w="1"/><text x="2.8345%" y="95.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.10%)</title><rect x="2.6839%" y="229" width="0.0994%" height="15" fill="rgb(247,123,22)" fg:x="27" fg:w="1"/><text x="2.9339%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.10%)</title><rect x="2.6839%" y="213" width="0.0994%" height="15" fill="rgb(231,138,38)" fg:x="27" fg:w="1"/><text x="2.9339%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.10%)</title><rect x="2.6839%" y="197" width="0.0994%" height="15" fill="rgb(231,145,46)" fg:x="27" fg:w="1"/><text x="2.9339%" y="207.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (10 samples, 0.99%)</title><rect x="1.8887%" y="325" width="0.9940%" height="15" fill="rgb(251,118,11)" fg:x="19" fg:w="10"/><text x="2.1387%" y="335.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (10 samples, 0.99%)</title><rect x="1.8887%" y="309" width="0.9940%" height="15" fill="rgb(217,147,25)" fg:x="19" fg:w="10"/><text x="2.1387%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (2 samples, 0.20%)</title><rect x="2.6839%" y="293" width="0.1988%" height="15" fill="rgb(247,81,37)" fg:x="27" fg:w="2"/><text x="2.9339%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (2 samples, 0.20%)</title><rect x="2.6839%" y="277" width="0.1988%" height="15" fill="rgb(209,12,38)" fg:x="27" fg:w="2"/><text x="2.9339%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (2 samples, 0.20%)</title><rect x="2.6839%" y="261" width="0.1988%" height="15" fill="rgb(227,1,9)" fg:x="27" fg:w="2"/><text x="2.9339%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.20%)</title><rect x="2.6839%" y="245" width="0.1988%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="2"/><text x="2.9339%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.10%)</title><rect x="2.7833%" y="229" width="0.0994%" height="15" fill="rgb(221,10,30)" fg:x="28" fg:w="1"/><text x="3.0333%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="2.7833%" y="213" width="0.0994%" height="15" fill="rgb(210,229,1)" fg:x="28" fg:w="1"/><text x="3.0333%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="2.7833%" y="197" width="0.0994%" height="15" fill="rgb(222,148,37)" fg:x="28" fg:w="1"/><text x="3.0333%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="2.7833%" y="181" width="0.0994%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="1"/><text x="3.0333%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.10%)</title><rect x="2.7833%" y="165" width="0.0994%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="1"/><text x="3.0333%" y="175.50"></text></g><g><title>malloc (17 samples, 1.69%)</title><rect x="3.3797%" y="309" width="1.6899%" height="15" fill="rgb(247,138,52)" fg:x="34" fg:w="17"/><text x="3.6297%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (14 samples, 1.39%)</title><rect x="8.2505%" y="245" width="1.3917%" height="15" fill="rgb(213,79,30)" fg:x="83" fg:w="14"/><text x="8.5005%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 1.39%)</title><rect x="8.2505%" y="229" width="1.3917%" height="15" fill="rgb(246,177,23)" fg:x="83" fg:w="14"/><text x="8.5005%" y="239.50"></text></g><g><title>__libc_realloc (14 samples, 1.39%)</title><rect x="8.2505%" y="213" width="1.3917%" height="15" fill="rgb(230,62,27)" fg:x="83" fg:w="14"/><text x="8.5005%" y="223.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (94 samples, 9.34%)</title><rect x="7.3559%" y="277" width="9.3439%" height="15" fill="rgb(216,154,8)" fg:x="74" fg:w="94"/><text x="7.6059%" y="287.50">arrow_csv::re..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (94 samples, 9.34%)</title><rect x="7.3559%" y="261" width="9.3439%" height="15" fill="rgb(244,35,45)" fg:x="74" fg:w="94"/><text x="7.6059%" y="271.50">arrow_csv::re..</text></g><g><title>csv_core::reader::Reader::read_record (71 samples, 7.06%)</title><rect x="9.6421%" y="245" width="7.0577%" height="15" fill="rgb(251,115,12)" fg:x="97" fg:w="71"/><text x="9.8921%" y="255.50">csv_core:..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (11 samples, 1.09%)</title><rect x="16.6998%" y="261" width="1.0934%" height="15" fill="rgb(240,54,50)" fg:x="168" fg:w="11"/><text x="16.9498%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.30%)</title><rect x="17.4950%" y="245" width="0.2982%" height="15" fill="rgb(233,84,52)" fg:x="176" fg:w="3"/><text x="17.7450%" y="255.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (222 samples, 22.07%)</title><rect x="6.6600%" y="293" width="22.0676%" height="15" fill="rgb(207,117,47)" fg:x="67" fg:w="222"/><text x="6.9100%" y="303.50">arrow_csv::reader::BufReader&lt;R&gt;::re..</text></g><g><title>arrow_csv::reader::Decoder::flush (121 samples, 12.03%)</title><rect x="16.6998%" y="277" width="12.0278%" height="15" fill="rgb(249,43,39)" fg:x="168" fg:w="121"/><text x="16.9498%" y="287.50">arrow_csv::reader:..</text></g><g><title>core::iter::adapters::try_process (110 samples, 10.93%)</title><rect x="17.7932%" y="261" width="10.9344%" height="15" fill="rgb(209,38,44)" fg:x="179" fg:w="110"/><text x="18.0432%" y="271.50">core::iter::adap..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (110 samples, 10.93%)</title><rect x="17.7932%" y="245" width="10.9344%" height="15" fill="rgb(236,212,23)" fg:x="179" fg:w="110"/><text x="18.0432%" y="255.50">&lt;alloc::vec::Vec..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (110 samples, 10.93%)</title><rect x="17.7932%" y="229" width="10.9344%" height="15" fill="rgb(242,79,21)" fg:x="179" fg:w="110"/><text x="18.0432%" y="239.50">&lt;core::iter::ada..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (110 samples, 10.93%)</title><rect x="17.7932%" y="213" width="10.9344%" height="15" fill="rgb(211,96,35)" fg:x="179" fg:w="110"/><text x="18.0432%" y="223.50">&lt;arrow_array::ar..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (75 samples, 7.46%)</title><rect x="21.2724%" y="197" width="7.4553%" height="15" fill="rgb(253,215,40)" fg:x="214" fg:w="75"/><text x="21.5224%" y="207.50">arrow_arra..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (5 samples, 0.50%)</title><rect x="28.2306%" y="181" width="0.4970%" height="15" fill="rgb(211,81,21)" fg:x="284" fg:w="5"/><text x="28.4806%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.50%)</title><rect x="28.2306%" y="165" width="0.4970%" height="15" fill="rgb(208,190,38)" fg:x="284" fg:w="5"/><text x="28.4806%" y="175.50"></text></g><g><title>cfree (24 samples, 2.39%)</title><rect x="28.7276%" y="293" width="2.3857%" height="15" fill="rgb(235,213,38)" fg:x="289" fg:w="24"/><text x="28.9776%" y="303.50">cf..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.70%)</title><rect x="32.5050%" y="277" width="0.6958%" height="15" fill="rgb(237,122,38)" fg:x="327" fg:w="7"/><text x="32.7550%" y="287.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (3 samples, 0.30%)</title><rect x="33.2008%" y="277" width="0.2982%" height="15" fill="rgb(244,218,35)" fg:x="334" fg:w="3"/><text x="33.4508%" y="287.50"></text></g><g><title>__rustc::__rdl_realloc (3 samples, 0.30%)</title><rect x="33.2008%" y="261" width="0.2982%" height="15" fill="rgb(240,68,47)" fg:x="334" fg:w="3"/><text x="33.4508%" y="271.50"></text></g><g><title>cfree (13 samples, 1.29%)</title><rect x="33.4990%" y="277" width="1.2922%" height="15" fill="rgb(210,16,53)" fg:x="337" fg:w="13"/><text x="33.7490%" y="287.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (36 samples, 3.58%)</title><rect x="34.7913%" y="277" width="3.5785%" height="15" fill="rgb(235,124,12)" fg:x="350" fg:w="36"/><text x="35.0413%" y="287.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (22 samples, 2.19%)</title><rect x="36.1829%" y="261" width="2.1869%" height="15" fill="rgb(224,169,11)" fg:x="364" fg:w="22"/><text x="36.4329%" y="271.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (6 samples, 0.60%)</title><rect x="39.8608%" y="261" width="0.5964%" height="15" fill="rgb(250,166,2)" fg:x="401" fg:w="6"/><text x="40.1108%" y="271.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (1 samples, 0.10%)</title><rect x="40.6561%" y="245" width="0.0994%" height="15" fill="rgb(242,216,29)" fg:x="409" fg:w="1"/><text x="40.9061%" y="255.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (4 samples, 0.40%)</title><rect x="40.4573%" y="261" width="0.3976%" height="15" fill="rgb(230,116,27)" fg:x="407" fg:w="4"/><text x="40.7073%" y="271.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.10%)</title><rect x="40.7555%" y="245" width="0.0994%" height="15" fill="rgb(228,99,48)" fg:x="410" fg:w="1"/><text x="41.0055%" y="255.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (26 samples, 2.58%)</title><rect x="38.3698%" y="277" width="2.5845%" height="15" fill="rgb(253,11,6)" fg:x="386" fg:w="26"/><text x="38.6198%" y="287.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.10%)</title><rect x="40.8549%" y="261" width="0.0994%" height="15" fill="rgb(247,143,39)" fg:x="411" fg:w="1"/><text x="41.1049%" y="271.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.20%)</title><rect x="42.2465%" y="261" width="0.1988%" height="15" fill="rgb(236,97,10)" fg:x="425" fg:w="2"/><text x="42.4965%" y="271.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (10 samples, 0.99%)</title><rect x="42.4453%" y="261" width="0.9940%" height="15" fill="rgb(233,208,19)" fg:x="427" fg:w="10"/><text x="42.6953%" y="271.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (139 samples, 13.82%)</title><rect x="31.1133%" y="293" width="13.8171%" height="15" fill="rgb(216,164,2)" fg:x="313" fg:w="139"/><text x="31.3633%" y="303.50">nemscraper::process::..</text></g><g><title>nemscraper::process::utils::clean_str (40 samples, 3.98%)</title><rect x="40.9543%" y="277" width="3.9761%" height="15" fill="rgb(220,129,5)" fg:x="412" fg:w="40"/><text x="41.2043%" y="287.50">nems..</text></g><g><title>malloc (15 samples, 1.49%)</title><rect x="43.4394%" y="261" width="1.4911%" height="15" fill="rgb(242,17,10)" fg:x="437" fg:w="15"/><text x="43.6894%" y="271.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.10%)</title><rect x="45.0298%" y="85" width="0.0994%" height="15" fill="rgb(242,107,0)" fg:x="453" fg:w="1"/><text x="45.2798%" y="95.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.30%)</title><rect x="44.9304%" y="117" width="0.2982%" height="15" fill="rgb(251,28,31)" fg:x="452" fg:w="3"/><text x="45.1804%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (3 samples, 0.30%)</title><rect x="44.9304%" y="101" width="0.2982%" height="15" fill="rgb(233,223,10)" fg:x="452" fg:w="3"/><text x="45.1804%" y="111.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.10%)</title><rect x="45.1292%" y="85" width="0.0994%" height="15" fill="rgb(215,21,27)" fg:x="454" fg:w="1"/><text x="45.3792%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="45.2286%" y="117" width="0.0994%" height="15" fill="rgb(232,23,21)" fg:x="455" fg:w="1"/><text x="45.4786%" y="127.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="45.2286%" y="101" width="0.0994%" height="15" fill="rgb(244,5,23)" fg:x="455" fg:w="1"/><text x="45.4786%" y="111.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (5 samples, 0.50%)</title><rect x="44.9304%" y="165" width="0.4970%" height="15" fill="rgb(226,81,46)" fg:x="452" fg:w="5"/><text x="45.1804%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (5 samples, 0.50%)</title><rect x="44.9304%" y="149" width="0.4970%" height="15" fill="rgb(247,70,30)" fg:x="452" fg:w="5"/><text x="45.1804%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (5 samples, 0.50%)</title><rect x="44.9304%" y="133" width="0.4970%" height="15" fill="rgb(212,68,19)" fg:x="452" fg:w="5"/><text x="45.1804%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="45.3280%" y="117" width="0.0994%" height="15" fill="rgb(240,187,13)" fg:x="456" fg:w="1"/><text x="45.5780%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (95 samples, 9.44%)</title><rect x="46.6203%" y="117" width="9.4433%" height="15" fill="rgb(223,113,26)" fg:x="469" fg:w="95"/><text x="46.8703%" y="127.50">&lt;brotli::enc::..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (4 samples, 0.40%)</title><rect x="55.6660%" y="101" width="0.3976%" height="15" fill="rgb(206,192,2)" fg:x="560" fg:w="4"/><text x="55.9160%" y="111.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (105 samples, 10.44%)</title><rect x="45.7256%" y="133" width="10.4374%" height="15" fill="rgb(241,108,4)" fg:x="460" fg:w="105"/><text x="45.9756%" y="143.50">brotli::enc::ba..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.10%)</title><rect x="56.0636%" y="117" width="0.0994%" height="15" fill="rgb(247,173,49)" fg:x="564" fg:w="1"/><text x="56.3136%" y="127.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (3 samples, 0.30%)</title><rect x="56.1630%" y="133" width="0.2982%" height="15" fill="rgb(224,114,35)" fg:x="565" fg:w="3"/><text x="56.4130%" y="143.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (2 samples, 0.20%)</title><rect x="56.2624%" y="117" width="0.1988%" height="15" fill="rgb(245,159,27)" fg:x="566" fg:w="2"/><text x="56.5124%" y="127.50"></text></g><g><title>brotli::enc::encode::hasher_setup (3 samples, 0.30%)</title><rect x="56.4612%" y="133" width="0.2982%" height="15" fill="rgb(245,172,44)" fg:x="568" fg:w="3"/><text x="56.7112%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (9 samples, 0.89%)</title><rect x="56.7594%" y="117" width="0.8946%" height="15" fill="rgb(236,23,11)" fg:x="571" fg:w="9"/><text x="57.0094%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (7 samples, 0.70%)</title><rect x="56.9583%" y="101" width="0.6958%" height="15" fill="rgb(205,117,38)" fg:x="573" fg:w="7"/><text x="57.2083%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.10%)</title><rect x="58.0517%" y="101" width="0.0994%" height="15" fill="rgb(237,72,25)" fg:x="584" fg:w="1"/><text x="58.3017%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.10%)</title><rect x="58.0517%" y="85" width="0.0994%" height="15" fill="rgb(244,70,9)" fg:x="584" fg:w="1"/><text x="58.3017%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.10%)</title><rect x="58.0517%" y="69" width="0.0994%" height="15" fill="rgb(217,125,39)" fg:x="584" fg:w="1"/><text x="58.3017%" y="79.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (2 samples, 0.20%)</title><rect x="58.1511%" y="101" width="0.1988%" height="15" fill="rgb(235,36,10)" fg:x="585" fg:w="2"/><text x="58.4011%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (6 samples, 0.60%)</title><rect x="58.3499%" y="101" width="0.5964%" height="15" fill="rgb(251,123,47)" fg:x="587" fg:w="6"/><text x="58.5999%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (14 samples, 1.39%)</title><rect x="57.6541%" y="117" width="1.3917%" height="15" fill="rgb(221,13,13)" fg:x="580" fg:w="14"/><text x="57.9041%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.10%)</title><rect x="58.9463%" y="101" width="0.0994%" height="15" fill="rgb(238,131,9)" fg:x="593" fg:w="1"/><text x="59.1963%" y="111.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (150 samples, 14.91%)</title><rect x="44.9304%" y="181" width="14.9105%" height="15" fill="rgb(211,50,8)" fg:x="452" fg:w="150"/><text x="45.1804%" y="191.50">parquet::column::writer..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (145 samples, 14.41%)</title><rect x="45.4274%" y="165" width="14.4135%" height="15" fill="rgb(245,182,24)" fg:x="457" fg:w="145"/><text x="45.6774%" y="175.50">parquet::column::write..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (145 samples, 14.41%)</title><rect x="45.4274%" y="149" width="14.4135%" height="15" fill="rgb(242,14,37)" fg:x="457" fg:w="145"/><text x="45.6774%" y="159.50">&lt;parquet::compression:..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (31 samples, 3.08%)</title><rect x="56.7594%" y="133" width="3.0815%" height="15" fill="rgb(246,228,12)" fg:x="571" fg:w="31"/><text x="57.0094%" y="143.50">bro..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (8 samples, 0.80%)</title><rect x="59.0457%" y="117" width="0.7952%" height="15" fill="rgb(213,55,15)" fg:x="594" fg:w="8"/><text x="59.2957%" y="127.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.10%)</title><rect x="59.8410%" y="165" width="0.0994%" height="15" fill="rgb(209,9,3)" fg:x="602" fg:w="1"/><text x="60.0910%" y="175.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.10%)</title><rect x="59.8410%" y="149" width="0.0994%" height="15" fill="rgb(230,59,30)" fg:x="602" fg:w="1"/><text x="60.0910%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (152 samples, 15.11%)</title><rect x="44.9304%" y="261" width="15.1093%" height="15" fill="rgb(209,121,21)" fg:x="452" fg:w="152"/><text x="45.1804%" y="271.50">parquet::arrow::arrow_w..</text></g><g><title>core::iter::adapters::try_process (152 samples, 15.11%)</title><rect x="44.9304%" y="245" width="15.1093%" height="15" fill="rgb(220,109,13)" fg:x="452" fg:w="152"/><text x="45.1804%" y="255.50">core::iter::adapters::t..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (152 samples, 15.11%)</title><rect x="44.9304%" y="229" width="15.1093%" height="15" fill="rgb(232,18,1)" fg:x="452" fg:w="152"/><text x="45.1804%" y="239.50">alloc::vec::in_place_co..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (152 samples, 15.11%)</title><rect x="44.9304%" y="213" width="15.1093%" height="15" fill="rgb(215,41,42)" fg:x="452" fg:w="152"/><text x="45.1804%" y="223.50">&lt;alloc::vec::into_iter:..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (152 samples, 15.11%)</title><rect x="44.9304%" y="197" width="15.1093%" height="15" fill="rgb(224,123,36)" fg:x="452" fg:w="152"/><text x="45.1804%" y="207.50">parquet::arrow::arrow_w..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (2 samples, 0.20%)</title><rect x="59.8410%" y="181" width="0.1988%" height="15" fill="rgb(240,125,3)" fg:x="602" fg:w="2"/><text x="60.0910%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.10%)</title><rect x="59.9404%" y="165" width="0.0994%" height="15" fill="rgb(205,98,50)" fg:x="603" fg:w="1"/><text x="60.1904%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.10%)</title><rect x="59.9404%" y="149" width="0.0994%" height="15" fill="rgb(205,185,37)" fg:x="603" fg:w="1"/><text x="60.1904%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.10%)</title><rect x="59.9404%" y="133" width="0.0994%" height="15" fill="rgb(238,207,15)" fg:x="603" fg:w="1"/><text x="60.1904%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.10%)</title><rect x="59.9404%" y="117" width="0.0994%" height="15" fill="rgb(213,199,42)" fg:x="603" fg:w="1"/><text x="60.1904%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.10%)</title><rect x="59.9404%" y="101" width="0.0994%" height="15" fill="rgb(235,201,11)" fg:x="603" fg:w="1"/><text x="60.1904%" y="111.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (153 samples, 15.21%)</title><rect x="44.9304%" y="293" width="15.2087%" height="15" fill="rgb(207,46,11)" fg:x="452" fg:w="153"/><text x="45.1804%" y="303.50">parquet::arrow::arrow_w..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (153 samples, 15.21%)</title><rect x="44.9304%" y="277" width="15.2087%" height="15" fill="rgb(241,35,35)" fg:x="452" fg:w="153"/><text x="45.1804%" y="287.50">parquet::arrow::arrow_w..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.10%)</title><rect x="60.0398%" y="261" width="0.0994%" height="15" fill="rgb(243,32,47)" fg:x="604" fg:w="1"/><text x="60.2898%" y="271.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.10%)</title><rect x="60.0398%" y="245" width="0.0994%" height="15" fill="rgb(247,202,23)" fg:x="604" fg:w="1"/><text x="60.2898%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.10%)</title><rect x="60.0398%" y="229" width="0.0994%" height="15" fill="rgb(219,102,11)" fg:x="604" fg:w="1"/><text x="60.2898%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (1 samples, 0.10%)</title><rect x="60.0398%" y="213" width="0.0994%" height="15" fill="rgb(243,110,44)" fg:x="604" fg:w="1"/><text x="60.2898%" y="223.50"></text></g><g><title>write (1 samples, 0.10%)</title><rect x="60.0398%" y="197" width="0.0994%" height="15" fill="rgb(222,74,54)" fg:x="604" fg:w="1"/><text x="60.2898%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (14 samples, 1.39%)</title><rect x="60.3380%" y="213" width="1.3917%" height="15" fill="rgb(216,99,12)" fg:x="607" fg:w="14"/><text x="60.5880%" y="223.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (10 samples, 0.99%)</title><rect x="60.7356%" y="197" width="0.9940%" height="15" fill="rgb(226,22,26)" fg:x="611" fg:w="10"/><text x="60.9856%" y="207.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (7 samples, 0.70%)</title><rect x="61.0338%" y="181" width="0.6958%" height="15" fill="rgb(217,163,10)" fg:x="614" fg:w="7"/><text x="61.2838%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.20%)</title><rect x="61.7296%" y="197" width="0.1988%" height="15" fill="rgb(213,25,53)" fg:x="621" fg:w="2"/><text x="61.9796%" y="207.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.20%)</title><rect x="61.7296%" y="181" width="0.1988%" height="15" fill="rgb(252,105,26)" fg:x="621" fg:w="2"/><text x="61.9796%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (2 samples, 0.20%)</title><rect x="61.7296%" y="165" width="0.1988%" height="15" fill="rgb(220,39,43)" fg:x="621" fg:w="2"/><text x="61.9796%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.10%)</title><rect x="61.9284%" y="165" width="0.0994%" height="15" fill="rgb(229,68,48)" fg:x="623" fg:w="1"/><text x="62.1784%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.10%)</title><rect x="61.9284%" y="149" width="0.0994%" height="15" fill="rgb(252,8,32)" fg:x="623" fg:w="1"/><text x="62.1784%" y="159.50"></text></g><g><title>brotli::enc::backward_references::TestStaticDictionaryItem (1 samples, 0.10%)</title><rect x="61.9284%" y="133" width="0.0994%" height="15" fill="rgb(223,20,43)" fg:x="623" fg:w="1"/><text x="62.1784%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (20 samples, 1.99%)</title><rect x="60.1392%" y="245" width="1.9881%" height="15" fill="rgb(229,81,49)" fg:x="605" fg:w="20"/><text x="60.3892%" y="255.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (20 samples, 1.99%)</title><rect x="60.1392%" y="229" width="1.9881%" height="15" fill="rgb(236,28,36)" fg:x="605" fg:w="20"/><text x="60.3892%" y="239.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.40%)</title><rect x="61.7296%" y="213" width="0.3976%" height="15" fill="rgb(249,185,26)" fg:x="621" fg:w="4"/><text x="61.9796%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.20%)</title><rect x="61.9284%" y="197" width="0.1988%" height="15" fill="rgb(249,174,33)" fg:x="623" fg:w="2"/><text x="62.1784%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.20%)</title><rect x="61.9284%" y="181" width="0.1988%" height="15" fill="rgb(233,201,37)" fg:x="623" fg:w="2"/><text x="62.1784%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.10%)</title><rect x="62.0278%" y="165" width="0.0994%" height="15" fill="rgb(221,78,26)" fg:x="624" fg:w="1"/><text x="62.2778%" y="175.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (27 samples, 2.68%)</title><rect x="62.8231%" y="229" width="2.6839%" height="15" fill="rgb(250,127,30)" fg:x="632" fg:w="27"/><text x="63.0731%" y="239.50">&lt;p..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (10 samples, 0.99%)</title><rect x="64.5129%" y="213" width="0.9940%" height="15" fill="rgb(230,49,44)" fg:x="649" fg:w="10"/><text x="64.7629%" y="223.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.10%)</title><rect x="65.4076%" y="197" width="0.0994%" height="15" fill="rgb(229,67,23)" fg:x="658" fg:w="1"/><text x="65.6576%" y="207.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="65.7058%" y="213" width="0.0994%" height="15" fill="rgb(249,83,47)" fg:x="661" fg:w="1"/><text x="65.9558%" y="223.50"></text></g><g><title>parquet::column::writer::compare_greater (8 samples, 0.80%)</title><rect x="66.4016%" y="197" width="0.7952%" height="15" fill="rgb(215,43,3)" fg:x="668" fg:w="8"/><text x="66.6516%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (41 samples, 4.08%)</title><rect x="65.5070%" y="229" width="4.0755%" height="15" fill="rgb(238,154,13)" fg:x="659" fg:w="41"/><text x="65.7570%" y="239.50">&lt;par..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (38 samples, 3.78%)</title><rect x="65.8052%" y="213" width="3.7773%" height="15" fill="rgb(219,56,2)" fg:x="662" fg:w="38"/><text x="66.0552%" y="223.50">parq..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (24 samples, 2.39%)</title><rect x="67.1968%" y="197" width="2.3857%" height="15" fill="rgb(233,0,4)" fg:x="676" fg:w="24"/><text x="67.4468%" y="207.50">pa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.30%)</title><rect x="69.2843%" y="181" width="0.2982%" height="15" fill="rgb(235,30,7)" fg:x="697" fg:w="3"/><text x="69.5343%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (6 samples, 0.60%)</title><rect x="69.5825%" y="213" width="0.5964%" height="15" fill="rgb(250,79,13)" fg:x="700" fg:w="6"/><text x="69.8325%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.40%)</title><rect x="69.7813%" y="197" width="0.3976%" height="15" fill="rgb(211,146,34)" fg:x="702" fg:w="4"/><text x="70.0313%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.20%)</title><rect x="69.9801%" y="181" width="0.1988%" height="15" fill="rgb(228,22,38)" fg:x="704" fg:w="2"/><text x="70.2301%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (5 samples, 0.50%)</title><rect x="70.3777%" y="181" width="0.4970%" height="15" fill="rgb(235,168,5)" fg:x="708" fg:w="5"/><text x="70.6277%" y="191.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (5 samples, 0.50%)</title><rect x="70.3777%" y="165" width="0.4970%" height="15" fill="rgb(221,155,16)" fg:x="708" fg:w="5"/><text x="70.6277%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (13 samples, 1.29%)</title><rect x="70.1789%" y="213" width="1.2922%" height="15" fill="rgb(215,215,53)" fg:x="706" fg:w="13"/><text x="70.4289%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (13 samples, 1.29%)</title><rect x="70.1789%" y="197" width="1.2922%" height="15" fill="rgb(223,4,10)" fg:x="706" fg:w="13"/><text x="70.4289%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (6 samples, 0.60%)</title><rect x="70.8748%" y="181" width="0.5964%" height="15" fill="rgb(234,103,6)" fg:x="713" fg:w="6"/><text x="71.1248%" y="191.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.10%)</title><rect x="71.4712%" y="197" width="0.0994%" height="15" fill="rgb(227,97,0)" fg:x="719" fg:w="1"/><text x="71.7212%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (73 samples, 7.26%)</title><rect x="72.9622%" y="165" width="7.2565%" height="15" fill="rgb(234,150,53)" fg:x="734" fg:w="73"/><text x="73.2122%" y="175.50">&lt;brotli::e..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (11 samples, 1.09%)</title><rect x="79.1252%" y="149" width="1.0934%" height="15" fill="rgb(228,201,54)" fg:x="796" fg:w="11"/><text x="79.3752%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (87 samples, 8.65%)</title><rect x="71.6700%" y="181" width="8.6481%" height="15" fill="rgb(222,22,37)" fg:x="721" fg:w="87"/><text x="71.9200%" y="191.50">brotli::enc:..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.10%)</title><rect x="80.2187%" y="165" width="0.0994%" height="15" fill="rgb(237,53,32)" fg:x="807" fg:w="1"/><text x="80.4687%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.10%)</title><rect x="80.8151%" y="133" width="0.0994%" height="15" fill="rgb(233,25,53)" fg:x="813" fg:w="1"/><text x="81.0651%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (4 samples, 0.40%)</title><rect x="80.9145%" y="133" width="0.3976%" height="15" fill="rgb(210,40,34)" fg:x="814" fg:w="4"/><text x="81.1645%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (14 samples, 1.39%)</title><rect x="80.7157%" y="165" width="1.3917%" height="15" fill="rgb(241,220,44)" fg:x="812" fg:w="14"/><text x="80.9657%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (14 samples, 1.39%)</title><rect x="80.7157%" y="149" width="1.3917%" height="15" fill="rgb(235,28,35)" fg:x="812" fg:w="14"/><text x="80.9657%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (8 samples, 0.80%)</title><rect x="81.3121%" y="133" width="0.7952%" height="15" fill="rgb(210,56,17)" fg:x="818" fg:w="8"/><text x="81.5621%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (22 samples, 2.19%)</title><rect x="80.3181%" y="181" width="2.1869%" height="15" fill="rgb(224,130,29)" fg:x="808" fg:w="22"/><text x="80.5681%" y="191.50">b..</text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (4 samples, 0.40%)</title><rect x="82.1074%" y="165" width="0.3976%" height="15" fill="rgb(235,212,8)" fg:x="826" fg:w="4"/><text x="82.3574%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (9 samples, 0.89%)</title><rect x="82.5050%" y="181" width="0.8946%" height="15" fill="rgb(223,33,50)" fg:x="830" fg:w="9"/><text x="82.7550%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (5 samples, 0.50%)</title><rect x="83.3996%" y="181" width="0.4970%" height="15" fill="rgb(219,149,13)" fg:x="839" fg:w="5"/><text x="83.6496%" y="191.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.10%)</title><rect x="83.7972%" y="165" width="0.0994%" height="15" fill="rgb(250,156,29)" fg:x="843" fg:w="1"/><text x="84.0472%" y="175.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.10%)</title><rect x="83.7972%" y="149" width="0.0994%" height="15" fill="rgb(216,193,19)" fg:x="843" fg:w="1"/><text x="84.0472%" y="159.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (128 samples, 12.72%)</title><rect x="71.5706%" y="197" width="12.7237%" height="15" fill="rgb(216,135,14)" fg:x="720" fg:w="128"/><text x="71.8206%" y="207.50">brotli::enc::writer..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (4 samples, 0.40%)</title><rect x="83.8966%" y="181" width="0.3976%" height="15" fill="rgb(241,47,5)" fg:x="844" fg:w="4"/><text x="84.1466%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (4 samples, 0.40%)</title><rect x="83.8966%" y="165" width="0.3976%" height="15" fill="rgb(233,42,35)" fg:x="844" fg:w="4"/><text x="84.1466%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (244 samples, 24.25%)</title><rect x="60.1392%" y="261" width="24.2545%" height="15" fill="rgb(231,13,6)" fg:x="605" fg:w="244"/><text x="60.3892%" y="271.50">parquet::arrow::arrow_writer::ArrowColu..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (224 samples, 22.27%)</title><rect x="62.1272%" y="245" width="22.2664%" height="15" fill="rgb(207,181,40)" fg:x="625" fg:w="224"/><text x="62.3772%" y="255.50">parquet::column::writer::GenericCol..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (149 samples, 14.81%)</title><rect x="69.5825%" y="229" width="14.8111%" height="15" fill="rgb(254,173,49)" fg:x="700" fg:w="149"/><text x="69.8325%" y="239.50">parquet::column::writer..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (130 samples, 12.92%)</title><rect x="71.4712%" y="213" width="12.9225%" height="15" fill="rgb(221,1,38)" fg:x="719" fg:w="130"/><text x="71.7212%" y="223.50">&lt;parquet::compressi..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.10%)</title><rect x="84.2942%" y="197" width="0.0994%" height="15" fill="rgb(206,124,46)" fg:x="848" fg:w="1"/><text x="84.5442%" y="207.50"></text></g><g><title>brotli::enc::backward_references::UnionHasher&lt;Alloc&gt;::free (1 samples, 0.10%)</title><rect x="84.2942%" y="181" width="0.0994%" height="15" fill="rgb(249,21,11)" fg:x="848" fg:w="1"/><text x="84.5442%" y="191.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="84.2942%" y="165" width="0.0994%" height="15" fill="rgb(222,201,40)" fg:x="848" fg:w="1"/><text x="84.5442%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (248 samples, 24.65%)</title><rect x="60.1392%" y="293" width="24.6521%" height="15" fill="rgb(235,61,29)" fg:x="605" fg:w="248"/><text x="60.3892%" y="303.50">parquet::arrow::arrow_writer::ArrowWrit..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (248 samples, 24.65%)</title><rect x="60.1392%" y="277" width="24.6521%" height="15" fill="rgb(219,207,3)" fg:x="605" fg:w="248"/><text x="60.3892%" y="287.50">parquet::arrow::arrow_writer::ArrowRowG..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (4 samples, 0.40%)</title><rect x="84.3936%" y="261" width="0.3976%" height="15" fill="rgb(222,56,46)" fg:x="849" fg:w="4"/><text x="84.6436%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (4 samples, 0.40%)</title><rect x="84.3936%" y="245" width="0.3976%" height="15" fill="rgb(239,76,54)" fg:x="849" fg:w="4"/><text x="84.6436%" y="255.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (825 samples, 82.01%)</title><rect x="2.8827%" y="325" width="82.0080%" height="15" fill="rgb(231,124,27)" fg:x="29" fg:w="825"/><text x="3.1327%" y="335.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (803 samples, 79.82%)</title><rect x="5.0696%" y="309" width="79.8211%" height="15" fill="rgb(249,195,6)" fg:x="51" fg:w="803"/><text x="5.3196%" y="319.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.10%)</title><rect x="84.7913%" y="293" width="0.0994%" height="15" fill="rgb(237,174,47)" fg:x="853" fg:w="1"/><text x="85.0413%" y="303.50"></text></g><g><title>open64 (1 samples, 0.10%)</title><rect x="84.7913%" y="277" width="0.0994%" height="15" fill="rgb(206,201,31)" fg:x="853" fg:w="1"/><text x="85.0413%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 0.89%)</title><rect x="85.2883%" y="309" width="0.8946%" height="15" fill="rgb(231,57,52)" fg:x="858" fg:w="9"/><text x="85.5383%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.70%)</title><rect x="86.1829%" y="309" width="0.6958%" height="15" fill="rgb(248,177,22)" fg:x="867" fg:w="7"/><text x="86.4329%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (3 samples, 0.30%)</title><rect x="86.8787%" y="245" width="0.2982%" height="15" fill="rgb(215,211,37)" fg:x="874" fg:w="3"/><text x="87.1287%" y="255.50"></text></g><g><title>crc32fast::Hasher::update (19 samples, 1.89%)</title><rect x="86.8787%" y="277" width="1.8887%" height="15" fill="rgb(241,128,51)" fg:x="874" fg:w="19"/><text x="87.1287%" y="287.50">c..</text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (19 samples, 1.89%)</title><rect x="86.8787%" y="261" width="1.8887%" height="15" fill="rgb(227,165,31)" fg:x="874" fg:w="19"/><text x="87.1287%" y="271.50">c..</text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (16 samples, 1.59%)</title><rect x="87.1769%" y="245" width="1.5905%" height="15" fill="rgb(228,167,24)" fg:x="877" fg:w="16"/><text x="87.4269%" y="255.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (3 samples, 0.30%)</title><rect x="88.4692%" y="229" width="0.2982%" height="15" fill="rgb(228,143,12)" fg:x="890" fg:w="3"/><text x="88.7192%" y="239.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (59 samples, 5.86%)</title><rect x="89.6620%" y="213" width="5.8648%" height="15" fill="rgb(249,149,8)" fg:x="902" fg:w="59"/><text x="89.9120%" y="223.50">zlib_rs..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.10%)</title><rect x="95.5268%" y="213" width="0.0994%" height="15" fill="rgb(243,35,44)" fg:x="961" fg:w="1"/><text x="95.7768%" y="223.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (70 samples, 6.96%)</title><rect x="88.7674%" y="261" width="6.9583%" height="15" fill="rgb(246,89,9)" fg:x="893" fg:w="70"/><text x="89.0174%" y="271.50">&lt;flate2::..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (70 samples, 6.96%)</title><rect x="88.7674%" y="245" width="6.9583%" height="15" fill="rgb(233,213,13)" fg:x="893" fg:w="70"/><text x="89.0174%" y="255.50">&lt;flate2::..</text></g><g><title>zlib_rs::inflate::inflate (70 samples, 6.96%)</title><rect x="88.7674%" y="229" width="6.9583%" height="15" fill="rgb(233,141,41)" fg:x="893" fg:w="70"/><text x="89.0174%" y="239.50">zlib_rs::..</text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.10%)</title><rect x="95.6262%" y="213" width="0.0994%" height="15" fill="rgb(239,167,4)" fg:x="962" fg:w="1"/><text x="95.8762%" y="223.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (964 samples, 95.83%)</title><rect x="0.0000%" y="357" width="95.8250%" height="15" fill="rgb(209,217,16)" fg:x="0" fg:w="964"/><text x="0.2500%" y="367.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (951 samples, 94.53%)</title><rect x="1.2922%" y="341" width="94.5328%" height="15" fill="rgb(219,88,35)" fg:x="13" fg:w="951"/><text x="1.5422%" y="351.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (110 samples, 10.93%)</title><rect x="84.8907%" y="325" width="10.9344%" height="15" fill="rgb(220,193,23)" fg:x="854" fg:w="110"/><text x="85.1407%" y="335.50">std::io::append_..</text></g><g><title>std::io::default_read_buf (90 samples, 8.95%)</title><rect x="86.8787%" y="309" width="8.9463%" height="15" fill="rgb(230,90,52)" fg:x="874" fg:w="90"/><text x="87.1287%" y="319.50">std::io::defa..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (90 samples, 8.95%)</title><rect x="86.8787%" y="293" width="8.9463%" height="15" fill="rgb(252,106,19)" fg:x="874" fg:w="90"/><text x="87.1287%" y="303.50">&lt;zip::crc32::..</text></g><g><title>flate2::zio::read (71 samples, 7.06%)</title><rect x="88.7674%" y="277" width="7.0577%" height="15" fill="rgb(206,74,20)" fg:x="893" fg:w="71"/><text x="89.0174%" y="287.50">flate2::z..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.10%)</title><rect x="95.7256%" y="261" width="0.0994%" height="15" fill="rgb(230,138,44)" fg:x="963" fg:w="1"/><text x="95.9756%" y="271.50"></text></g><g><title>bench_zip_to_pa (966 samples, 96.02%)</title><rect x="0.0000%" y="517" width="96.0239%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="966"/><text x="0.2500%" y="527.50">bench_zip_to_pa</text></g><g><title>_start (966 samples, 96.02%)</title><rect x="0.0000%" y="501" width="96.0239%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="966"/><text x="0.2500%" y="511.50">_start</text></g><g><title>__libc_start_main (966 samples, 96.02%)</title><rect x="0.0000%" y="485" width="96.0239%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="966"/><text x="0.2500%" y="495.50">__libc_start_main</text></g><g><title>main (966 samples, 96.02%)</title><rect x="0.0000%" y="469" width="96.0239%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="966"/><text x="0.2500%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (966 samples, 96.02%)</title><rect x="0.0000%" y="453" width="96.0239%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="966"/><text x="0.2500%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (966 samples, 96.02%)</title><rect x="0.0000%" y="437" width="96.0239%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="966"/><text x="0.2500%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (966 samples, 96.02%)</title><rect x="0.0000%" y="421" width="96.0239%" height="15" fill="rgb(253,106,12)" fg:x="0" fg:w="966"/><text x="0.2500%" y="431.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (966 samples, 96.02%)</title><rect x="0.0000%" y="405" width="96.0239%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="966"/><text x="0.2500%" y="415.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (966 samples, 96.02%)</title><rect x="0.0000%" y="389" width="96.0239%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="966"/><text x="0.2500%" y="399.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (966 samples, 96.02%)</title><rect x="0.0000%" y="373" width="96.0239%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="966"/><text x="0.2500%" y="383.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.20%)</title><rect x="95.8250%" y="357" width="0.1988%" height="15" fill="rgb(215,77,49)" fg:x="964" fg:w="2"/><text x="96.0750%" y="367.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.20%)</title><rect x="95.8250%" y="341" width="0.1988%" height="15" fill="rgb(248,100,22)" fg:x="964" fg:w="2"/><text x="96.0750%" y="351.50"></text></g><g><title>syscall (2 samples, 0.20%)</title><rect x="95.8250%" y="325" width="0.1988%" height="15" fill="rgb(208,67,9)" fg:x="964" fg:w="2"/><text x="96.0750%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (2 samples, 0.20%)</title><rect x="96.1233%" y="325" width="0.1988%" height="15" fill="rgb(219,133,21)" fg:x="967" fg:w="2"/><text x="96.3733%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (1 samples, 0.10%)</title><rect x="96.3221%" y="325" width="0.0994%" height="15" fill="rgb(246,46,29)" fg:x="969" fg:w="1"/><text x="96.5721%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.10%)</title><rect x="96.6203%" y="293" width="0.0994%" height="15" fill="rgb(246,185,52)" fg:x="972" fg:w="1"/><text x="96.8703%" y="303.50"></text></g><g><title>syscall (1 samples, 0.10%)</title><rect x="96.6203%" y="277" width="0.0994%" height="15" fill="rgb(252,136,11)" fg:x="972" fg:w="1"/><text x="96.8703%" y="287.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.40%)</title><rect x="96.7197%" y="261" width="0.3976%" height="15" fill="rgb(219,138,53)" fg:x="973" fg:w="4"/><text x="96.9697%" y="271.50"></text></g><g><title>epoll_wait (4 samples, 0.40%)</title><rect x="96.7197%" y="245" width="0.3976%" height="15" fill="rgb(211,51,23)" fg:x="973" fg:w="4"/><text x="96.9697%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (8 samples, 0.80%)</title><rect x="96.4215%" y="325" width="0.7952%" height="15" fill="rgb(247,221,28)" fg:x="970" fg:w="8"/><text x="96.6715%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (6 samples, 0.60%)</title><rect x="96.6203%" y="309" width="0.5964%" height="15" fill="rgb(251,222,45)" fg:x="972" fg:w="6"/><text x="96.8703%" y="319.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.50%)</title><rect x="96.7197%" y="293" width="0.4970%" height="15" fill="rgb(217,162,53)" fg:x="973" fg:w="5"/><text x="96.9697%" y="303.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (5 samples, 0.50%)</title><rect x="96.7197%" y="277" width="0.4970%" height="15" fill="rgb(229,93,14)" fg:x="973" fg:w="5"/><text x="96.9697%" y="287.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.10%)</title><rect x="97.1173%" y="261" width="0.0994%" height="15" fill="rgb(209,67,49)" fg:x="977" fg:w="1"/><text x="97.3673%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.10%)</title><rect x="97.1173%" y="245" width="0.0994%" height="15" fill="rgb(213,87,29)" fg:x="977" fg:w="1"/><text x="97.3673%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.20%)</title><rect x="97.2167%" y="309" width="0.1988%" height="15" fill="rgb(205,151,52)" fg:x="978" fg:w="2"/><text x="97.4667%" y="319.50"></text></g><g><title>syscall (2 samples, 0.20%)</title><rect x="97.2167%" y="293" width="0.1988%" height="15" fill="rgb(253,215,39)" fg:x="978" fg:w="2"/><text x="97.4667%" y="303.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (7 samples, 0.70%)</title><rect x="97.4155%" y="309" width="0.6958%" height="15" fill="rgb(221,220,41)" fg:x="980" fg:w="7"/><text x="97.6655%" y="319.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (7 samples, 0.70%)</title><rect x="97.4155%" y="293" width="0.6958%" height="15" fill="rgb(218,133,21)" fg:x="980" fg:w="7"/><text x="97.6655%" y="303.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (6 samples, 0.60%)</title><rect x="97.5149%" y="277" width="0.5964%" height="15" fill="rgb(221,193,43)" fg:x="981" fg:w="6"/><text x="97.7649%" y="287.50"></text></g><g><title>write (6 samples, 0.60%)</title><rect x="97.5149%" y="261" width="0.5964%" height="15" fill="rgb(240,128,52)" fg:x="981" fg:w="6"/><text x="97.7649%" y="271.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (7 samples, 0.70%)</title><rect x="98.1113%" y="229" width="0.6958%" height="15" fill="rgb(253,114,12)" fg:x="987" fg:w="7"/><text x="98.3613%" y="239.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (7 samples, 0.70%)</title><rect x="98.1113%" y="213" width="0.6958%" height="15" fill="rgb(215,223,47)" fg:x="987" fg:w="7"/><text x="98.3613%" y="223.50"></text></g><g><title>tokio::runtime::park::wake (7 samples, 0.70%)</title><rect x="98.1113%" y="197" width="0.6958%" height="15" fill="rgb(248,225,23)" fg:x="987" fg:w="7"/><text x="98.3613%" y="207.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.70%)</title><rect x="98.1113%" y="181" width="0.6958%" height="15" fill="rgb(250,108,0)" fg:x="987" fg:w="7"/><text x="98.3613%" y="191.50"></text></g><g><title>syscall (7 samples, 0.70%)</title><rect x="98.1113%" y="165" width="0.6958%" height="15" fill="rgb(228,208,7)" fg:x="987" fg:w="7"/><text x="98.3613%" y="175.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.10%)</title><rect x="99.0060%" y="133" width="0.0994%" height="15" fill="rgb(244,45,10)" fg:x="996" fg:w="1"/><text x="99.2560%" y="143.50"></text></g><g><title>rustls::vecbuf::ChunkVecBuffer::consume (1 samples, 0.10%)</title><rect x="99.0060%" y="117" width="0.0994%" height="15" fill="rgb(207,125,25)" fg:x="996" fg:w="1"/><text x="99.2560%" y="127.50"></text></g><g><title>cfree (1 samples, 0.10%)</title><rect x="99.0060%" y="101" width="0.0994%" height="15" fill="rgb(210,195,18)" fg:x="996" fg:w="1"/><text x="99.2560%" y="111.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (4 samples, 0.40%)</title><rect x="99.1054%" y="117" width="0.3976%" height="15" fill="rgb(249,80,12)" fg:x="997" fg:w="4"/><text x="99.3554%" y="127.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (3 samples, 0.30%)</title><rect x="99.2048%" y="101" width="0.2982%" height="15" fill="rgb(221,65,9)" fg:x="998" fg:w="3"/><text x="99.4548%" y="111.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (2 samples, 0.20%)</title><rect x="99.3042%" y="85" width="0.1988%" height="15" fill="rgb(235,49,36)" fg:x="999" fg:w="2"/><text x="99.5542%" y="95.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.10%)</title><rect x="99.4036%" y="69" width="0.0994%" height="15" fill="rgb(225,32,20)" fg:x="1000" fg:w="1"/><text x="99.6536%" y="79.50"></text></g><g><title>all (1,006 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="1006"/><text x="0.2500%" y="543.50"></text></g><g><title>tokio-runtime-w (40 samples, 3.98%)</title><rect x="96.0239%" y="517" width="3.9761%" height="15" fill="rgb(250,160,47)" fg:x="966" fg:w="40"/><text x="96.2739%" y="527.50">toki..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (40 samples, 3.98%)</title><rect x="96.0239%" y="501" width="3.9761%" height="15" fill="rgb(216,222,40)" fg:x="966" fg:w="40"/><text x="96.2739%" y="511.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (40 samples, 3.98%)</title><rect x="96.0239%" y="485" width="3.9761%" height="15" fill="rgb(234,217,39)" fg:x="966" fg:w="40"/><text x="96.2739%" y="495.50">core..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (40 samples, 3.98%)</title><rect x="96.0239%" y="469" width="3.9761%" height="15" fill="rgb(207,178,40)" fg:x="966" fg:w="40"/><text x="96.2739%" y="479.50">std:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (40 samples, 3.98%)</title><rect x="96.0239%" y="453" width="3.9761%" height="15" fill="rgb(221,136,13)" fg:x="966" fg:w="40"/><text x="96.2739%" y="463.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (40 samples, 3.98%)</title><rect x="96.0239%" y="437" width="3.9761%" height="15" fill="rgb(249,199,10)" fg:x="966" fg:w="40"/><text x="96.2739%" y="447.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (40 samples, 3.98%)</title><rect x="96.0239%" y="421" width="3.9761%" height="15" fill="rgb(249,222,13)" fg:x="966" fg:w="40"/><text x="96.2739%" y="431.50">toki..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (40 samples, 3.98%)</title><rect x="96.0239%" y="405" width="3.9761%" height="15" fill="rgb(244,185,38)" fg:x="966" fg:w="40"/><text x="96.2739%" y="415.50">&lt;tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (40 samples, 3.98%)</title><rect x="96.0239%" y="389" width="3.9761%" height="15" fill="rgb(236,202,9)" fg:x="966" fg:w="40"/><text x="96.2739%" y="399.50">toki..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (40 samples, 3.98%)</title><rect x="96.0239%" y="373" width="3.9761%" height="15" fill="rgb(250,229,37)" fg:x="966" fg:w="40"/><text x="96.2739%" y="383.50">toki..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (40 samples, 3.98%)</title><rect x="96.0239%" y="357" width="3.9761%" height="15" fill="rgb(206,174,23)" fg:x="966" fg:w="40"/><text x="96.2739%" y="367.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (40 samples, 3.98%)</title><rect x="96.0239%" y="341" width="3.9761%" height="15" fill="rgb(211,33,43)" fg:x="966" fg:w="40"/><text x="96.2739%" y="351.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (28 samples, 2.78%)</title><rect x="97.2167%" y="325" width="2.7833%" height="15" fill="rgb(245,58,50)" fg:x="978" fg:w="28"/><text x="97.4667%" y="335.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (19 samples, 1.89%)</title><rect x="98.1113%" y="309" width="1.8887%" height="15" fill="rgb(244,68,36)" fg:x="987" fg:w="19"/><text x="98.3613%" y="319.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (19 samples, 1.89%)</title><rect x="98.1113%" y="293" width="1.8887%" height="15" fill="rgb(232,229,15)" fg:x="987" fg:w="19"/><text x="98.3613%" y="303.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (19 samples, 1.89%)</title><rect x="98.1113%" y="277" width="1.8887%" height="15" fill="rgb(254,30,23)" fg:x="987" fg:w="19"/><text x="98.3613%" y="287.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (19 samples, 1.89%)</title><rect x="98.1113%" y="261" width="1.8887%" height="15" fill="rgb(235,160,14)" fg:x="987" fg:w="19"/><text x="98.3613%" y="271.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (19 samples, 1.89%)</title><rect x="98.1113%" y="245" width="1.8887%" height="15" fill="rgb(212,155,44)" fg:x="987" fg:w="19"/><text x="98.3613%" y="255.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (12 samples, 1.19%)</title><rect x="98.8072%" y="229" width="1.1928%" height="15" fill="rgb(226,2,50)" fg:x="994" fg:w="12"/><text x="99.0572%" y="239.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (12 samples, 1.19%)</title><rect x="98.8072%" y="213" width="1.1928%" height="15" fill="rgb(234,177,6)" fg:x="994" fg:w="12"/><text x="99.0572%" y="223.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (11 samples, 1.09%)</title><rect x="98.9066%" y="197" width="1.0934%" height="15" fill="rgb(217,24,9)" fg:x="995" fg:w="11"/><text x="99.1566%" y="207.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (11 samples, 1.09%)</title><rect x="98.9066%" y="181" width="1.0934%" height="15" fill="rgb(220,13,46)" fg:x="995" fg:w="11"/><text x="99.1566%" y="191.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.09%)</title><rect x="98.9066%" y="165" width="1.0934%" height="15" fill="rgb(239,221,27)" fg:x="995" fg:w="11"/><text x="99.1566%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.09%)</title><rect x="98.9066%" y="149" width="1.0934%" height="15" fill="rgb(222,198,25)" fg:x="995" fg:w="11"/><text x="99.1566%" y="159.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (9 samples, 0.89%)</title><rect x="99.1054%" y="133" width="0.8946%" height="15" fill="rgb(211,99,13)" fg:x="997" fg:w="9"/><text x="99.3554%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (5 samples, 0.50%)</title><rect x="99.5030%" y="117" width="0.4970%" height="15" fill="rgb(232,111,31)" fg:x="1001" fg:w="5"/><text x="99.7530%" y="127.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (5 samples, 0.50%)</title><rect x="99.5030%" y="101" width="0.4970%" height="15" fill="rgb(245,82,37)" fg:x="1001" fg:w="5"/><text x="99.7530%" y="111.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (5 samples, 0.50%)</title><rect x="99.5030%" y="85" width="0.4970%" height="15" fill="rgb(227,149,46)" fg:x="1001" fg:w="5"/><text x="99.7530%" y="95.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (5 samples, 0.50%)</title><rect x="99.5030%" y="69" width="0.4970%" height="15" fill="rgb(218,36,50)" fg:x="1001" fg:w="5"/><text x="99.7530%" y="79.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (5 samples, 0.50%)</title><rect x="99.5030%" y="53" width="0.4970%" height="15" fill="rgb(226,80,48)" fg:x="1001" fg:w="5"/><text x="99.7530%" y="63.50"></text></g><g><title>recv (5 samples, 0.50%)</title><rect x="99.5030%" y="37" width="0.4970%" height="15" fill="rgb(238,224,15)" fg:x="1001" fg:w="5"/><text x="99.7530%" y="47.50"></text></g></svg></svg>