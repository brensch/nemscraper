<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="598" onload="init(evt)" viewBox="0 0 1200 598" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="598" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="581.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="581.00"> </text><svg id="frames" x="10" width="1180" total_samples="1056"><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.85%)</title><rect x="0.2841%" y="197" width="0.8523%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="9"/><text x="0.5341%" y="207.50"></text></g><g><title>syscall (9 samples, 0.85%)</title><rect x="0.2841%" y="181" width="0.8523%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="9"/><text x="0.5341%" y="191.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (14 samples, 1.33%)</title><rect x="0.1894%" y="357" width="1.3258%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="14"/><text x="0.4394%" y="367.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (14 samples, 1.33%)</title><rect x="0.1894%" y="341" width="1.3258%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="14"/><text x="0.4394%" y="351.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (14 samples, 1.33%)</title><rect x="0.1894%" y="325" width="1.3258%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="14"/><text x="0.4394%" y="335.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (14 samples, 1.33%)</title><rect x="0.1894%" y="309" width="1.3258%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="14"/><text x="0.4394%" y="319.50"></text></g><g><title>hyper::body::body::Body::poll_inner (14 samples, 1.33%)</title><rect x="0.1894%" y="293" width="1.3258%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="14"/><text x="0.4394%" y="303.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (14 samples, 1.33%)</title><rect x="0.1894%" y="277" width="1.3258%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="14"/><text x="0.4394%" y="287.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (14 samples, 1.33%)</title><rect x="0.1894%" y="261" width="1.3258%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="14"/><text x="0.4394%" y="271.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (13 samples, 1.23%)</title><rect x="0.2841%" y="245" width="1.2311%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="13"/><text x="0.5341%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (13 samples, 1.23%)</title><rect x="0.2841%" y="229" width="1.2311%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="13"/><text x="0.5341%" y="239.50"></text></g><g><title>tokio::runtime::context::with_scheduler (13 samples, 1.23%)</title><rect x="0.2841%" y="213" width="1.2311%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="13"/><text x="0.5341%" y="223.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.38%)</title><rect x="1.1364%" y="197" width="0.3788%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="4"/><text x="1.3864%" y="207.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.38%)</title><rect x="1.1364%" y="181" width="0.3788%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="4"/><text x="1.3864%" y="191.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (4 samples, 0.38%)</title><rect x="1.1364%" y="165" width="0.3788%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="4"/><text x="1.3864%" y="175.50"></text></g><g><title>write (4 samples, 0.38%)</title><rect x="1.1364%" y="149" width="0.3788%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="4"/><text x="1.3864%" y="159.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (1 samples, 0.09%)</title><rect x="1.5152%" y="341" width="0.0947%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="1"/><text x="1.7652%" y="351.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (1 samples, 0.09%)</title><rect x="1.5152%" y="325" width="0.0947%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="1"/><text x="1.7652%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (2 samples, 0.19%)</title><rect x="1.5152%" y="357" width="0.1894%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="2"/><text x="1.7652%" y="367.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.09%)</title><rect x="1.6098%" y="341" width="0.0947%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="1"/><text x="1.8598%" y="351.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="1.7045%" y="357" width="0.0947%" height="15" fill="rgb(249,33,26)" fg:x="18" fg:w="1"/><text x="1.9545%" y="367.50"></text></g><g><title>__munmap (1 samples, 0.09%)</title><rect x="1.7045%" y="341" width="0.0947%" height="15" fill="rgb(235,183,28)" fg:x="18" fg:w="1"/><text x="1.9545%" y="351.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.09%)</title><rect x="1.8939%" y="309" width="0.0947%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="2.1439%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.09%)</title><rect x="1.9886%" y="309" width="0.0947%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="2.2386%" y="319.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="1.9886%" y="293" width="0.0947%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="2.2386%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (1 samples, 0.09%)</title><rect x="2.0833%" y="309" width="0.0947%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="1"/><text x="2.3333%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.09%)</title><rect x="2.0833%" y="293" width="0.0947%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="1"/><text x="2.3333%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.09%)</title><rect x="2.0833%" y="277" width="0.0947%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="2.3333%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.09%)</title><rect x="2.0833%" y="261" width="0.0947%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="2.3333%" y="271.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.09%)</title><rect x="2.0833%" y="245" width="0.0947%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="1"/><text x="2.3333%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.09%)</title><rect x="2.0833%" y="229" width="0.0947%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="1"/><text x="2.3333%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.09%)</title><rect x="2.0833%" y="213" width="0.0947%" height="15" fill="rgb(229,88,8)" fg:x="22" fg:w="1"/><text x="2.3333%" y="223.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.09%)</title><rect x="2.0833%" y="197" width="0.0947%" height="15" fill="rgb(213,181,19)" fg:x="22" fg:w="1"/><text x="2.3333%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="2.0833%" y="181" width="0.0947%" height="15" fill="rgb(254,191,54)" fg:x="22" fg:w="1"/><text x="2.3333%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="2.0833%" y="165" width="0.0947%" height="15" fill="rgb(241,83,37)" fg:x="22" fg:w="1"/><text x="2.3333%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="2.0833%" y="149" width="0.0947%" height="15" fill="rgb(233,36,39)" fg:x="22" fg:w="1"/><text x="2.3333%" y="159.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="2.0833%" y="133" width="0.0947%" height="15" fill="rgb(226,3,54)" fg:x="22" fg:w="1"/><text x="2.3333%" y="143.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::finalize (4 samples, 0.38%)</title><rect x="1.8939%" y="341" width="0.3788%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="4"/><text x="2.1439%" y="351.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (4 samples, 0.38%)</title><rect x="1.8939%" y="325" width="0.3788%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="4"/><text x="2.1439%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (1 samples, 0.09%)</title><rect x="2.1780%" y="309" width="0.0947%" height="15" fill="rgb(232,182,51)" fg:x="23" fg:w="1"/><text x="2.4280%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (1 samples, 0.09%)</title><rect x="2.1780%" y="293" width="0.0947%" height="15" fill="rgb(231,60,39)" fg:x="23" fg:w="1"/><text x="2.4280%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (1 samples, 0.09%)</title><rect x="2.1780%" y="277" width="0.0947%" height="15" fill="rgb(208,69,12)" fg:x="23" fg:w="1"/><text x="2.4280%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.09%)</title><rect x="2.1780%" y="261" width="0.0947%" height="15" fill="rgb(235,93,37)" fg:x="23" fg:w="1"/><text x="2.4280%" y="271.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.09%)</title><rect x="2.1780%" y="245" width="0.0947%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="1"/><text x="2.4280%" y="255.50"></text></g><g><title>malloc (21 samples, 1.99%)</title><rect x="2.3674%" y="325" width="1.9886%" height="15" fill="rgb(222,207,29)" fg:x="25" fg:w="21"/><text x="2.6174%" y="335.50">m..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (24 samples, 2.27%)</title><rect x="8.1439%" y="261" width="2.2727%" height="15" fill="rgb(206,96,30)" fg:x="86" fg:w="24"/><text x="8.3939%" y="271.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (24 samples, 2.27%)</title><rect x="8.1439%" y="245" width="2.2727%" height="15" fill="rgb(218,138,4)" fg:x="86" fg:w="24"/><text x="8.3939%" y="255.50">a..</text></g><g><title>__libc_realloc (24 samples, 2.27%)</title><rect x="8.1439%" y="229" width="2.2727%" height="15" fill="rgb(250,191,14)" fg:x="86" fg:w="24"/><text x="8.3939%" y="239.50">_..</text></g><g><title>arrow_csv::reader::Decoder::decode (116 samples, 10.98%)</title><rect x="5.6818%" y="293" width="10.9848%" height="15" fill="rgb(239,60,40)" fg:x="60" fg:w="116"/><text x="5.9318%" y="303.50">arrow_csv::reade..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (115 samples, 10.89%)</title><rect x="5.7765%" y="277" width="10.8902%" height="15" fill="rgb(206,27,48)" fg:x="61" fg:w="115"/><text x="6.0265%" y="287.50">arrow_csv::reade..</text></g><g><title>csv_core::reader::Reader::read_record (66 samples, 6.25%)</title><rect x="10.4167%" y="261" width="6.2500%" height="15" fill="rgb(225,35,8)" fg:x="110" fg:w="66"/><text x="10.6667%" y="271.50">csv_core..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (12 samples, 1.14%)</title><rect x="16.6667%" y="277" width="1.1364%" height="15" fill="rgb(250,213,24)" fg:x="176" fg:w="12"/><text x="16.9167%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (6 samples, 0.57%)</title><rect x="17.2348%" y="261" width="0.5682%" height="15" fill="rgb(247,123,22)" fg:x="182" fg:w="6"/><text x="17.4848%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (59 samples, 5.59%)</title><rect x="19.4129%" y="213" width="5.5871%" height="15" fill="rgb(231,138,38)" fg:x="205" fg:w="59"/><text x="19.6629%" y="223.50">arrow_a..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (5 samples, 0.47%)</title><rect x="24.5265%" y="197" width="0.4735%" height="15" fill="rgb(231,145,46)" fg:x="259" fg:w="5"/><text x="24.7765%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.47%)</title><rect x="24.5265%" y="181" width="0.4735%" height="15" fill="rgb(251,118,11)" fg:x="259" fg:w="5"/><text x="24.7765%" y="191.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (210 samples, 19.89%)</title><rect x="5.2083%" y="309" width="19.8864%" height="15" fill="rgb(217,147,25)" fg:x="55" fg:w="210"/><text x="5.4583%" y="319.50">arrow_csv::reader::BufReader&lt;R&gt;..</text></g><g><title>arrow_csv::reader::Decoder::flush (89 samples, 8.43%)</title><rect x="16.6667%" y="293" width="8.4280%" height="15" fill="rgb(247,81,37)" fg:x="176" fg:w="89"/><text x="16.9167%" y="303.50">arrow_csv::r..</text></g><g><title>core::iter::adapters::try_process (77 samples, 7.29%)</title><rect x="17.8030%" y="277" width="7.2917%" height="15" fill="rgb(209,12,38)" fg:x="188" fg:w="77"/><text x="18.0530%" y="287.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (77 samples, 7.29%)</title><rect x="17.8030%" y="261" width="7.2917%" height="15" fill="rgb(227,1,9)" fg:x="188" fg:w="77"/><text x="18.0530%" y="271.50">&lt;alloc::ve..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (77 samples, 7.29%)</title><rect x="17.8030%" y="245" width="7.2917%" height="15" fill="rgb(248,47,43)" fg:x="188" fg:w="77"/><text x="18.0530%" y="255.50">&lt;core::ite..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (77 samples, 7.29%)</title><rect x="17.8030%" y="229" width="7.2917%" height="15" fill="rgb(221,10,30)" fg:x="188" fg:w="77"/><text x="18.0530%" y="239.50">&lt;arrow_arr..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (1 samples, 0.09%)</title><rect x="25.0000%" y="213" width="0.0947%" height="15" fill="rgb(210,229,1)" fg:x="264" fg:w="1"/><text x="25.2500%" y="223.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="25.0000%" y="197" width="0.0947%" height="15" fill="rgb(222,148,37)" fg:x="264" fg:w="1"/><text x="25.2500%" y="207.50"></text></g><g><title>cfree (17 samples, 1.61%)</title><rect x="25.0947%" y="309" width="1.6098%" height="15" fill="rgb(234,67,33)" fg:x="265" fg:w="17"/><text x="25.3447%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (1 samples, 0.09%)</title><rect x="26.7045%" y="309" width="0.0947%" height="15" fill="rgb(247,98,35)" fg:x="282" fg:w="1"/><text x="26.9545%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="26.7045%" y="293" width="0.0947%" height="15" fill="rgb(247,138,52)" fg:x="282" fg:w="1"/><text x="26.9545%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (1 samples, 0.09%)</title><rect x="26.7045%" y="277" width="0.0947%" height="15" fill="rgb(213,79,30)" fg:x="282" fg:w="1"/><text x="26.9545%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="26.7045%" y="261" width="0.0947%" height="15" fill="rgb(246,177,23)" fg:x="282" fg:w="1"/><text x="26.9545%" y="271.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="26.7045%" y="245" width="0.0947%" height="15" fill="rgb(230,62,27)" fg:x="282" fg:w="1"/><text x="26.9545%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (2 samples, 0.19%)</title><rect x="26.7992%" y="309" width="0.1894%" height="15" fill="rgb(216,154,8)" fg:x="283" fg:w="2"/><text x="27.0492%" y="319.50"></text></g><g><title>cfree (2 samples, 0.19%)</title><rect x="26.7992%" y="293" width="0.1894%" height="15" fill="rgb(244,35,45)" fg:x="283" fg:w="2"/><text x="27.0492%" y="303.50"></text></g><g><title>__default_morecore (2 samples, 0.19%)</title><rect x="26.7992%" y="277" width="0.1894%" height="15" fill="rgb(251,115,12)" fg:x="283" fg:w="2"/><text x="27.0492%" y="287.50"></text></g><g><title>__sbrk (2 samples, 0.19%)</title><rect x="26.7992%" y="261" width="0.1894%" height="15" fill="rgb(240,54,50)" fg:x="283" fg:w="2"/><text x="27.0492%" y="271.50"></text></g><g><title>brk (2 samples, 0.19%)</title><rect x="26.7992%" y="245" width="0.1894%" height="15" fill="rgb(233,84,52)" fg:x="283" fg:w="2"/><text x="27.0492%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.19%)</title><rect x="28.5038%" y="293" width="0.1894%" height="15" fill="rgb(207,117,47)" fg:x="301" fg:w="2"/><text x="28.7538%" y="303.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.19%)</title><rect x="28.5038%" y="277" width="0.1894%" height="15" fill="rgb(249,43,39)" fg:x="301" fg:w="2"/><text x="28.7538%" y="287.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="28.5985%" y="261" width="0.0947%" height="15" fill="rgb(209,38,44)" fg:x="302" fg:w="1"/><text x="28.8485%" y="271.50"></text></g><g><title>cfree (13 samples, 1.23%)</title><rect x="28.6932%" y="293" width="1.2311%" height="15" fill="rgb(236,212,23)" fg:x="303" fg:w="13"/><text x="28.9432%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (39 samples, 3.69%)</title><rect x="29.9242%" y="293" width="3.6932%" height="15" fill="rgb(242,79,21)" fg:x="316" fg:w="39"/><text x="30.1742%" y="303.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 1.80%)</title><rect x="31.8182%" y="277" width="1.7992%" height="15" fill="rgb(211,96,35)" fg:x="336" fg:w="19"/><text x="32.0682%" y="287.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (6 samples, 0.57%)</title><rect x="34.7538%" y="277" width="0.5682%" height="15" fill="rgb(253,215,40)" fg:x="367" fg:w="6"/><text x="35.0038%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (1 samples, 0.09%)</title><rect x="35.7955%" y="261" width="0.0947%" height="15" fill="rgb(211,81,21)" fg:x="378" fg:w="1"/><text x="36.0455%" y="271.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (7 samples, 0.66%)</title><rect x="35.3220%" y="277" width="0.6629%" height="15" fill="rgb(208,190,38)" fg:x="373" fg:w="7"/><text x="35.5720%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.09%)</title><rect x="35.8902%" y="261" width="0.0947%" height="15" fill="rgb(235,213,38)" fg:x="379" fg:w="1"/><text x="36.1402%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (26 samples, 2.46%)</title><rect x="33.6174%" y="293" width="2.4621%" height="15" fill="rgb(237,122,38)" fg:x="355" fg:w="26"/><text x="33.8674%" y="303.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="35.9848%" y="277" width="0.0947%" height="15" fill="rgb(244,218,35)" fg:x="380" fg:w="1"/><text x="36.2348%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.19%)</title><rect x="37.7841%" y="277" width="0.1894%" height="15" fill="rgb(240,68,47)" fg:x="399" fg:w="2"/><text x="38.0341%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (9 samples, 0.85%)</title><rect x="37.9735%" y="277" width="0.8523%" height="15" fill="rgb(210,16,53)" fg:x="401" fg:w="9"/><text x="38.2235%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (140 samples, 13.26%)</title><rect x="26.9886%" y="309" width="13.2576%" height="15" fill="rgb(235,124,12)" fg:x="285" fg:w="140"/><text x="27.2386%" y="319.50">nemscraper::process:..</text></g><g><title>nemscraper::process::utils::clean_str (44 samples, 4.17%)</title><rect x="36.0795%" y="293" width="4.1667%" height="15" fill="rgb(224,169,11)" fg:x="381" fg:w="44"/><text x="36.3295%" y="303.50">nemsc..</text></g><g><title>malloc (15 samples, 1.42%)</title><rect x="38.8258%" y="277" width="1.4205%" height="15" fill="rgb(250,166,2)" fg:x="410" fg:w="15"/><text x="39.0758%" y="287.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.28%)</title><rect x="40.2462%" y="133" width="0.2841%" height="15" fill="rgb(242,216,29)" fg:x="425" fg:w="3"/><text x="40.4962%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (3 samples, 0.28%)</title><rect x="40.2462%" y="117" width="0.2841%" height="15" fill="rgb(230,116,27)" fg:x="425" fg:w="3"/><text x="40.4962%" y="127.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="40.4356%" y="101" width="0.0947%" height="15" fill="rgb(228,99,48)" fg:x="427" fg:w="1"/><text x="40.6856%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="40.5303%" y="133" width="0.0947%" height="15" fill="rgb(253,11,6)" fg:x="428" fg:w="1"/><text x="40.7803%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="40.5303%" y="117" width="0.0947%" height="15" fill="rgb(247,143,39)" fg:x="428" fg:w="1"/><text x="40.7803%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="40.5303%" y="101" width="0.0947%" height="15" fill="rgb(236,97,10)" fg:x="428" fg:w="1"/><text x="40.7803%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="40.5303%" y="85" width="0.0947%" height="15" fill="rgb(233,208,19)" fg:x="428" fg:w="1"/><text x="40.7803%" y="95.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::inject_flush_or_push_output (1 samples, 0.09%)</title><rect x="40.6250%" y="133" width="0.0947%" height="15" fill="rgb(216,164,2)" fg:x="429" fg:w="1"/><text x="40.8750%" y="143.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (6 samples, 0.57%)</title><rect x="40.2462%" y="181" width="0.5682%" height="15" fill="rgb(220,129,5)" fg:x="425" fg:w="6"/><text x="40.4962%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.57%)</title><rect x="40.2462%" y="165" width="0.5682%" height="15" fill="rgb(242,17,10)" fg:x="425" fg:w="6"/><text x="40.4962%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (6 samples, 0.57%)</title><rect x="40.2462%" y="149" width="0.5682%" height="15" fill="rgb(242,107,0)" fg:x="425" fg:w="6"/><text x="40.4962%" y="159.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="40.7197%" y="133" width="0.0947%" height="15" fill="rgb(251,28,31)" fg:x="430" fg:w="1"/><text x="40.9697%" y="143.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="40.8144%" y="181" width="0.0947%" height="15" fill="rgb(233,223,10)" fg:x="431" fg:w="1"/><text x="41.0644%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="40.8144%" y="165" width="0.0947%" height="15" fill="rgb(215,21,27)" fg:x="431" fg:w="1"/><text x="41.0644%" y="175.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="40.8144%" y="149" width="0.0947%" height="15" fill="rgb(232,23,21)" fg:x="431" fg:w="1"/><text x="41.0644%" y="159.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="40.8144%" y="133" width="0.0947%" height="15" fill="rgb(244,5,23)" fg:x="431" fg:w="1"/><text x="41.0644%" y="143.50"></text></g><g><title>&lt;parquet::format::Statistics as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="40.8144%" y="117" width="0.0947%" height="15" fill="rgb(226,81,46)" fg:x="431" fg:w="1"/><text x="41.0644%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="49.7159%" y="117" width="0.0947%" height="15" fill="rgb(247,70,30)" fg:x="525" fg:w="1"/><text x="49.9659%" y="127.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="49.8106%" y="117" width="0.0947%" height="15" fill="rgb(212,68,19)" fg:x="526" fg:w="1"/><text x="50.0606%" y="127.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (81 samples, 7.67%)</title><rect x="42.4242%" y="133" width="7.6705%" height="15" fill="rgb(240,187,13)" fg:x="448" fg:w="81"/><text x="42.6742%" y="143.50">&lt;brotli::en..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.19%)</title><rect x="49.9053%" y="117" width="0.1894%" height="15" fill="rgb(223,113,26)" fg:x="527" fg:w="2"/><text x="50.1553%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (95 samples, 9.00%)</title><rect x="41.1932%" y="149" width="8.9962%" height="15" fill="rgb(206,192,2)" fg:x="435" fg:w="95"/><text x="41.4432%" y="159.50">brotli::enc::..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="50.0947%" y="133" width="0.0947%" height="15" fill="rgb(241,108,4)" fg:x="529" fg:w="1"/><text x="50.3447%" y="143.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (16 samples, 1.52%)</title><rect x="50.1894%" y="149" width="1.5152%" height="15" fill="rgb(247,173,49)" fg:x="530" fg:w="16"/><text x="50.4394%" y="159.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (16 samples, 1.52%)</title><rect x="50.1894%" y="133" width="1.5152%" height="15" fill="rgb(224,114,35)" fg:x="530" fg:w="16"/><text x="50.4394%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (22 samples, 2.08%)</title><rect x="51.7045%" y="133" width="2.0833%" height="15" fill="rgb(245,159,27)" fg:x="546" fg:w="22"/><text x="51.9545%" y="143.50">b..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (19 samples, 1.80%)</title><rect x="51.9886%" y="117" width="1.7992%" height="15" fill="rgb(245,172,44)" fg:x="549" fg:w="19"/><text x="52.2386%" y="127.50">&lt;..</text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="54.1667%" y="85" width="0.0947%" height="15" fill="rgb(236,23,11)" fg:x="572" fg:w="1"/><text x="54.4167%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.09%)</title><rect x="54.1667%" y="69" width="0.0947%" height="15" fill="rgb(205,117,38)" fg:x="572" fg:w="1"/><text x="54.4167%" y="79.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (4 samples, 0.38%)</title><rect x="54.1667%" y="117" width="0.3788%" height="15" fill="rgb(237,72,25)" fg:x="572" fg:w="4"/><text x="54.4167%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (4 samples, 0.38%)</title><rect x="54.1667%" y="101" width="0.3788%" height="15" fill="rgb(244,70,9)" fg:x="572" fg:w="4"/><text x="54.4167%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (3 samples, 0.28%)</title><rect x="54.2614%" y="85" width="0.2841%" height="15" fill="rgb(217,125,39)" fg:x="573" fg:w="3"/><text x="54.5114%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (3 samples, 0.28%)</title><rect x="54.5455%" y="117" width="0.2841%" height="15" fill="rgb(235,36,10)" fg:x="576" fg:w="3"/><text x="54.7955%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (11 samples, 1.04%)</title><rect x="54.8295%" y="117" width="1.0417%" height="15" fill="rgb(251,123,47)" fg:x="579" fg:w="11"/><text x="55.0795%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreBlockSplitCode (1 samples, 0.09%)</title><rect x="55.8712%" y="117" width="0.0947%" height="15" fill="rgb(221,13,13)" fg:x="590" fg:w="1"/><text x="56.1212%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="55.8712%" y="101" width="0.0947%" height="15" fill="rgb(238,131,9)" fg:x="590" fg:w="1"/><text x="56.1212%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (2 samples, 0.19%)</title><rect x="55.9659%" y="117" width="0.1894%" height="15" fill="rgb(211,50,8)" fg:x="591" fg:w="2"/><text x="56.2159%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (27 samples, 2.56%)</title><rect x="53.7879%" y="133" width="2.5568%" height="15" fill="rgb(245,182,24)" fg:x="568" fg:w="27"/><text x="54.0379%" y="143.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (2 samples, 0.19%)</title><rect x="56.1553%" y="117" width="0.1894%" height="15" fill="rgb(242,14,37)" fg:x="593" fg:w="2"/><text x="56.4053%" y="127.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="56.3447%" y="133" width="0.0947%" height="15" fill="rgb(246,228,12)" fg:x="595" fg:w="1"/><text x="56.5947%" y="143.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (60 samples, 5.68%)</title><rect x="51.7045%" y="149" width="5.6818%" height="15" fill="rgb(213,55,15)" fg:x="546" fg:w="60"/><text x="51.9545%" y="159.50">brotli:..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (10 samples, 0.95%)</title><rect x="56.4394%" y="133" width="0.9470%" height="15" fill="rgb(209,9,3)" fg:x="596" fg:w="10"/><text x="56.6894%" y="143.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (3 samples, 0.28%)</title><rect x="57.1023%" y="117" width="0.2841%" height="15" fill="rgb(230,59,30)" fg:x="603" fg:w="3"/><text x="57.3523%" y="127.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.19%)</title><rect x="57.1970%" y="101" width="0.1894%" height="15" fill="rgb(209,121,21)" fg:x="604" fg:w="2"/><text x="57.4470%" y="111.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (182 samples, 17.23%)</title><rect x="40.2462%" y="197" width="17.2348%" height="15" fill="rgb(220,109,13)" fg:x="425" fg:w="182"/><text x="40.4962%" y="207.50">parquet::column::writer::Co..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (175 samples, 16.57%)</title><rect x="40.9091%" y="181" width="16.5720%" height="15" fill="rgb(232,18,1)" fg:x="432" fg:w="175"/><text x="41.1591%" y="191.50">parquet::column::writer::G..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (175 samples, 16.57%)</title><rect x="40.9091%" y="165" width="16.5720%" height="15" fill="rgb(215,41,42)" fg:x="432" fg:w="175"/><text x="41.1591%" y="175.50">&lt;parquet::compression::bro..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="57.3864%" y="149" width="0.0947%" height="15" fill="rgb(224,123,36)" fg:x="606" fg:w="1"/><text x="57.6364%" y="159.50"></text></g><g><title>brotli::enc::backward_references::UnionHasher&lt;Alloc&gt;::free (1 samples, 0.09%)</title><rect x="57.3864%" y="133" width="0.0947%" height="15" fill="rgb(240,125,3)" fg:x="606" fg:w="1"/><text x="57.6364%" y="143.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="57.3864%" y="117" width="0.0947%" height="15" fill="rgb(205,98,50)" fg:x="606" fg:w="1"/><text x="57.6364%" y="127.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="57.4811%" y="181" width="0.0947%" height="15" fill="rgb(205,185,37)" fg:x="607" fg:w="1"/><text x="57.7311%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="57.4811%" y="165" width="0.0947%" height="15" fill="rgb(238,207,15)" fg:x="607" fg:w="1"/><text x="57.7311%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="57.4811%" y="149" width="0.0947%" height="15" fill="rgb(213,199,42)" fg:x="607" fg:w="1"/><text x="57.7311%" y="159.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="57.4811%" y="133" width="0.0947%" height="15" fill="rgb(235,201,11)" fg:x="607" fg:w="1"/><text x="57.7311%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.19%)</title><rect x="57.5758%" y="133" width="0.1894%" height="15" fill="rgb(207,46,11)" fg:x="608" fg:w="2"/><text x="57.8258%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.19%)</title><rect x="57.5758%" y="117" width="0.1894%" height="15" fill="rgb(241,35,35)" fg:x="608" fg:w="2"/><text x="57.8258%" y="127.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (186 samples, 17.61%)</title><rect x="40.2462%" y="277" width="17.6136%" height="15" fill="rgb(243,32,47)" fg:x="425" fg:w="186"/><text x="40.4962%" y="287.50">parquet::arrow::arrow_write..</text></g><g><title>core::iter::adapters::try_process (186 samples, 17.61%)</title><rect x="40.2462%" y="261" width="17.6136%" height="15" fill="rgb(247,202,23)" fg:x="425" fg:w="186"/><text x="40.4962%" y="271.50">core::iter::adapters::try_p..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (186 samples, 17.61%)</title><rect x="40.2462%" y="245" width="17.6136%" height="15" fill="rgb(219,102,11)" fg:x="425" fg:w="186"/><text x="40.4962%" y="255.50">alloc::vec::in_place_collec..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (186 samples, 17.61%)</title><rect x="40.2462%" y="229" width="17.6136%" height="15" fill="rgb(243,110,44)" fg:x="425" fg:w="186"/><text x="40.4962%" y="239.50">&lt;alloc::vec::into_iter::Int..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (186 samples, 17.61%)</title><rect x="40.2462%" y="213" width="17.6136%" height="15" fill="rgb(222,74,54)" fg:x="425" fg:w="186"/><text x="40.4962%" y="223.50">parquet::arrow::arrow_write..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (4 samples, 0.38%)</title><rect x="57.4811%" y="197" width="0.3788%" height="15" fill="rgb(216,99,12)" fg:x="607" fg:w="4"/><text x="57.7311%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (3 samples, 0.28%)</title><rect x="57.5758%" y="181" width="0.2841%" height="15" fill="rgb(226,22,26)" fg:x="608" fg:w="3"/><text x="57.8258%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.28%)</title><rect x="57.5758%" y="165" width="0.2841%" height="15" fill="rgb(217,163,10)" fg:x="608" fg:w="3"/><text x="57.8258%" y="175.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.28%)</title><rect x="57.5758%" y="149" width="0.2841%" height="15" fill="rgb(213,25,53)" fg:x="608" fg:w="3"/><text x="57.8258%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="57.7652%" y="133" width="0.0947%" height="15" fill="rgb(252,105,26)" fg:x="610" fg:w="1"/><text x="58.0152%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="57.7652%" y="117" width="0.0947%" height="15" fill="rgb(220,39,43)" fg:x="610" fg:w="1"/><text x="58.0152%" y="127.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="57.7652%" y="101" width="0.0947%" height="15" fill="rgb(229,68,48)" fg:x="610" fg:w="1"/><text x="58.0152%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="57.7652%" y="85" width="0.0947%" height="15" fill="rgb(252,8,32)" fg:x="610" fg:w="1"/><text x="58.0152%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.09%)</title><rect x="57.7652%" y="69" width="0.0947%" height="15" fill="rgb(223,20,43)" fg:x="610" fg:w="1"/><text x="58.0152%" y="79.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (3 samples, 0.28%)</title><rect x="57.9545%" y="229" width="0.2841%" height="15" fill="rgb(229,81,49)" fg:x="612" fg:w="3"/><text x="58.2045%" y="239.50"></text></g><g><title>write (3 samples, 0.28%)</title><rect x="57.9545%" y="213" width="0.2841%" height="15" fill="rgb(236,28,36)" fg:x="612" fg:w="3"/><text x="58.2045%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (192 samples, 18.18%)</title><rect x="40.2462%" y="293" width="18.1818%" height="15" fill="rgb(249,185,26)" fg:x="425" fg:w="192"/><text x="40.4962%" y="303.50">parquet::arrow::arrow_writer..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (6 samples, 0.57%)</title><rect x="57.8598%" y="277" width="0.5682%" height="15" fill="rgb(249,174,33)" fg:x="611" fg:w="6"/><text x="58.1098%" y="287.50"></text></g><g><title>std::io::copy::stack_buffer_copy (6 samples, 0.57%)</title><rect x="57.8598%" y="261" width="0.5682%" height="15" fill="rgb(233,201,37)" fg:x="611" fg:w="6"/><text x="58.1098%" y="271.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (6 samples, 0.57%)</title><rect x="57.8598%" y="245" width="0.5682%" height="15" fill="rgb(221,78,26)" fg:x="611" fg:w="6"/><text x="58.1098%" y="255.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.19%)</title><rect x="58.2386%" y="229" width="0.1894%" height="15" fill="rgb(250,127,30)" fg:x="615" fg:w="2"/><text x="58.4886%" y="239.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (2 samples, 0.19%)</title><rect x="58.2386%" y="213" width="0.1894%" height="15" fill="rgb(230,49,44)" fg:x="615" fg:w="2"/><text x="58.4886%" y="223.50"></text></g><g><title>write (2 samples, 0.19%)</title><rect x="58.2386%" y="197" width="0.1894%" height="15" fill="rgb(229,67,23)" fg:x="615" fg:w="2"/><text x="58.4886%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::close (193 samples, 18.28%)</title><rect x="40.2462%" y="309" width="18.2765%" height="15" fill="rgb(249,83,47)" fg:x="425" fg:w="193"/><text x="40.4962%" y="319.50">parquet::arrow::arrow_writer..</text></g><g><title>parquet::file::writer::SerializedFileWriter&lt;W&gt;::finish (1 samples, 0.09%)</title><rect x="58.4280%" y="293" width="0.0947%" height="15" fill="rgb(215,43,3)" fg:x="617" fg:w="1"/><text x="58.6780%" y="303.50"></text></g><g><title>&lt;parquet::format::FileMetaData as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="58.4280%" y="277" width="0.0947%" height="15" fill="rgb(238,154,13)" fg:x="617" fg:w="1"/><text x="58.6780%" y="287.50"></text></g><g><title>&lt;parquet::format::KeyValue as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="58.4280%" y="261" width="0.0947%" height="15" fill="rgb(219,56,2)" fg:x="617" fg:w="1"/><text x="58.6780%" y="271.50"></text></g><g><title>&lt;thrift::protocol::compact::TCompactOutputProtocol&lt;T&gt; as thrift::protocol::TOutputProtocol&gt;::write_string (1 samples, 0.09%)</title><rect x="58.4280%" y="245" width="0.0947%" height="15" fill="rgb(233,0,4)" fg:x="617" fg:w="1"/><text x="58.6780%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="58.9962%" y="197" width="0.0947%" height="15" fill="rgb(235,30,7)" fg:x="623" fg:w="1"/><text x="59.2462%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="58.9962%" y="181" width="0.0947%" height="15" fill="rgb(250,79,13)" fg:x="623" fg:w="1"/><text x="59.2462%" y="191.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="58.9962%" y="165" width="0.0947%" height="15" fill="rgb(211,146,34)" fg:x="623" fg:w="1"/><text x="59.2462%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (6 samples, 0.57%)</title><rect x="58.8068%" y="229" width="0.5682%" height="15" fill="rgb(228,22,38)" fg:x="621" fg:w="6"/><text x="59.0568%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (5 samples, 0.47%)</title><rect x="58.9015%" y="213" width="0.4735%" height="15" fill="rgb(235,168,5)" fg:x="622" fg:w="5"/><text x="59.1515%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (3 samples, 0.28%)</title><rect x="59.0909%" y="197" width="0.2841%" height="15" fill="rgb(221,155,16)" fg:x="624" fg:w="3"/><text x="59.3409%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="59.3750%" y="229" width="0.0947%" height="15" fill="rgb(215,215,53)" fg:x="627" fg:w="1"/><text x="59.6250%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="59.3750%" y="213" width="0.0947%" height="15" fill="rgb(223,4,10)" fg:x="627" fg:w="1"/><text x="59.6250%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="59.3750%" y="197" width="0.0947%" height="15" fill="rgb(234,103,6)" fg:x="627" fg:w="1"/><text x="59.6250%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.19%)</title><rect x="59.4697%" y="213" width="0.1894%" height="15" fill="rgb(227,97,0)" fg:x="628" fg:w="2"/><text x="59.7197%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.19%)</title><rect x="59.4697%" y="197" width="0.1894%" height="15" fill="rgb(234,150,53)" fg:x="628" fg:w="2"/><text x="59.7197%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="59.5644%" y="181" width="0.0947%" height="15" fill="rgb(228,201,54)" fg:x="629" fg:w="1"/><text x="59.8144%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.19%)</title><rect x="59.6591%" y="181" width="0.1894%" height="15" fill="rgb(222,22,37)" fg:x="630" fg:w="2"/><text x="59.9091%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.19%)</title><rect x="59.6591%" y="165" width="0.1894%" height="15" fill="rgb(237,53,32)" fg:x="630" fg:w="2"/><text x="59.9091%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.19%)</title><rect x="59.6591%" y="149" width="0.1894%" height="15" fill="rgb(233,25,53)" fg:x="630" fg:w="2"/><text x="59.9091%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="59.7538%" y="133" width="0.0947%" height="15" fill="rgb(210,40,34)" fg:x="631" fg:w="1"/><text x="60.0038%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.09%)</title><rect x="59.7538%" y="117" width="0.0947%" height="15" fill="rgb(241,220,44)" fg:x="631" fg:w="1"/><text x="60.0038%" y="127.50"></text></g><g><title>brotli::enc::encode::hasher_setup (4 samples, 0.38%)</title><rect x="59.8485%" y="181" width="0.3788%" height="15" fill="rgb(235,28,35)" fg:x="632" fg:w="4"/><text x="60.0985%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.66%)</title><rect x="59.6591%" y="213" width="0.6629%" height="15" fill="rgb(210,56,17)" fg:x="630" fg:w="7"/><text x="59.9091%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 0.66%)</title><rect x="59.6591%" y="197" width="0.6629%" height="15" fill="rgb(224,130,29)" fg:x="630" fg:w="7"/><text x="59.9091%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="60.2273%" y="181" width="0.0947%" height="15" fill="rgb(235,212,8)" fg:x="636" fg:w="1"/><text x="60.4773%" y="191.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="60.2273%" y="165" width="0.0947%" height="15" fill="rgb(223,33,50)" fg:x="636" fg:w="1"/><text x="60.4773%" y="175.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (20 samples, 1.89%)</title><rect x="58.5227%" y="261" width="1.8939%" height="15" fill="rgb(219,149,13)" fg:x="618" fg:w="20"/><text x="58.7727%" y="271.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (20 samples, 1.89%)</title><rect x="58.5227%" y="245" width="1.8939%" height="15" fill="rgb(250,156,29)" fg:x="618" fg:w="20"/><text x="58.7727%" y="255.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (10 samples, 0.95%)</title><rect x="59.4697%" y="229" width="0.9470%" height="15" fill="rgb(216,193,19)" fg:x="628" fg:w="10"/><text x="59.7197%" y="239.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="60.3220%" y="213" width="0.0947%" height="15" fill="rgb(216,135,14)" fg:x="637" fg:w="1"/><text x="60.5720%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="62.6894%" y="229" width="0.0947%" height="15" fill="rgb(241,47,5)" fg:x="662" fg:w="1"/><text x="62.9394%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="62.6894%" y="213" width="0.0947%" height="15" fill="rgb(233,42,35)" fg:x="662" fg:w="1"/><text x="62.9394%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="62.6894%" y="197" width="0.0947%" height="15" fill="rgb(231,13,6)" fg:x="662" fg:w="1"/><text x="62.9394%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (23 samples, 2.18%)</title><rect x="61.6477%" y="245" width="2.1780%" height="15" fill="rgb(207,181,40)" fg:x="651" fg:w="23"/><text x="61.8977%" y="255.50">&lt;..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (11 samples, 1.04%)</title><rect x="62.7841%" y="229" width="1.0417%" height="15" fill="rgb(254,173,49)" fg:x="663" fg:w="11"/><text x="63.0341%" y="239.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (3 samples, 0.28%)</title><rect x="63.5417%" y="213" width="0.2841%" height="15" fill="rgb(221,1,38)" fg:x="671" fg:w="3"/><text x="63.7917%" y="223.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="64.1098%" y="229" width="0.0947%" height="15" fill="rgb(206,124,46)" fg:x="677" fg:w="1"/><text x="64.3598%" y="239.50"></text></g><g><title>parquet::column::writer::compare_greater (4 samples, 0.38%)</title><rect x="65.5303%" y="213" width="0.3788%" height="15" fill="rgb(249,21,11)" fg:x="692" fg:w="4"/><text x="65.7803%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (47 samples, 4.45%)</title><rect x="63.8258%" y="245" width="4.4508%" height="15" fill="rgb(222,201,40)" fg:x="674" fg:w="47"/><text x="64.0758%" y="255.50">&lt;parq..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (43 samples, 4.07%)</title><rect x="64.2045%" y="229" width="4.0720%" height="15" fill="rgb(235,61,29)" fg:x="678" fg:w="43"/><text x="64.4545%" y="239.50">parq..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (25 samples, 2.37%)</title><rect x="65.9091%" y="213" width="2.3674%" height="15" fill="rgb(219,207,3)" fg:x="696" fg:w="25"/><text x="66.1591%" y="223.50">pa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.47%)</title><rect x="67.8030%" y="197" width="0.4735%" height="15" fill="rgb(222,56,46)" fg:x="716" fg:w="5"/><text x="68.0530%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (4 samples, 0.38%)</title><rect x="68.5606%" y="229" width="0.3788%" height="15" fill="rgb(239,76,54)" fg:x="724" fg:w="4"/><text x="68.8106%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (4 samples, 0.38%)</title><rect x="68.5606%" y="213" width="0.3788%" height="15" fill="rgb(231,124,27)" fg:x="724" fg:w="4"/><text x="68.8106%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (4 samples, 0.38%)</title><rect x="68.5606%" y="197" width="0.3788%" height="15" fill="rgb(249,195,6)" fg:x="724" fg:w="4"/><text x="68.8106%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (5 samples, 0.47%)</title><rect x="69.0341%" y="197" width="0.4735%" height="15" fill="rgb(237,174,47)" fg:x="729" fg:w="5"/><text x="69.2841%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (4 samples, 0.38%)</title><rect x="69.1288%" y="181" width="0.3788%" height="15" fill="rgb(206,201,31)" fg:x="730" fg:w="4"/><text x="69.3788%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (11 samples, 1.04%)</title><rect x="68.9394%" y="229" width="1.0417%" height="15" fill="rgb(231,57,52)" fg:x="728" fg:w="11"/><text x="69.1894%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (11 samples, 1.04%)</title><rect x="68.9394%" y="213" width="1.0417%" height="15" fill="rgb(248,177,22)" fg:x="728" fg:w="11"/><text x="69.1894%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (5 samples, 0.47%)</title><rect x="69.5076%" y="197" width="0.4735%" height="15" fill="rgb(215,211,37)" fg:x="734" fg:w="5"/><text x="69.7576%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.09%)</title><rect x="69.8864%" y="181" width="0.0947%" height="15" fill="rgb(241,128,51)" fg:x="738" fg:w="1"/><text x="70.1364%" y="191.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="69.9811%" y="213" width="0.0947%" height="15" fill="rgb(227,165,31)" fg:x="739" fg:w="1"/><text x="70.2311%" y="223.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (10 samples, 0.95%)</title><rect x="77.4621%" y="165" width="0.9470%" height="15" fill="rgb(228,167,24)" fg:x="818" fg:w="10"/><text x="77.7121%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (74 samples, 7.01%)</title><rect x="71.4962%" y="181" width="7.0076%" height="15" fill="rgb(228,143,12)" fg:x="755" fg:w="74"/><text x="71.7462%" y="191.50">&lt;brotli::..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="78.4091%" y="165" width="0.0947%" height="15" fill="rgb(249,149,8)" fg:x="828" fg:w="1"/><text x="78.6591%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (87 samples, 8.24%)</title><rect x="70.4545%" y="197" width="8.2386%" height="15" fill="rgb(243,35,44)" fg:x="744" fg:w="87"/><text x="70.7045%" y="207.50">brotli::enc..</text></g><g><title>brotli::enc::command::Command::init (2 samples, 0.19%)</title><rect x="78.5038%" y="181" width="0.1894%" height="15" fill="rgb(246,89,9)" fg:x="829" fg:w="2"/><text x="78.7538%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::MetaBlockSplit&lt;Alloc&gt;::destroy (1 samples, 0.09%)</title><rect x="78.6932%" y="197" width="0.0947%" height="15" fill="rgb(233,213,13)" fg:x="831" fg:w="1"/><text x="78.9432%" y="207.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="78.6932%" y="181" width="0.0947%" height="15" fill="rgb(233,141,41)" fg:x="831" fg:w="1"/><text x="78.9432%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (3 samples, 0.28%)</title><rect x="79.3561%" y="149" width="0.2841%" height="15" fill="rgb(239,167,4)" fg:x="838" fg:w="3"/><text x="79.6061%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (3 samples, 0.28%)</title><rect x="79.3561%" y="133" width="0.2841%" height="15" fill="rgb(209,217,16)" fg:x="838" fg:w="3"/><text x="79.6061%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (12 samples, 1.14%)</title><rect x="79.2614%" y="165" width="1.1364%" height="15" fill="rgb(219,88,35)" fg:x="837" fg:w="12"/><text x="79.5114%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (8 samples, 0.76%)</title><rect x="79.6402%" y="149" width="0.7576%" height="15" fill="rgb(220,193,23)" fg:x="841" fg:w="8"/><text x="79.8902%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="80.3030%" y="133" width="0.0947%" height="15" fill="rgb(230,90,52)" fg:x="848" fg:w="1"/><text x="80.5530%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (14 samples, 1.33%)</title><rect x="79.1667%" y="181" width="1.3258%" height="15" fill="rgb(252,106,19)" fg:x="836" fg:w="14"/><text x="79.4167%" y="191.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="80.3977%" y="165" width="0.0947%" height="15" fill="rgb(206,74,20)" fg:x="849" fg:w="1"/><text x="80.6477%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="80.4924%" y="181" width="0.0947%" height="15" fill="rgb(230,138,44)" fg:x="850" fg:w="1"/><text x="80.7424%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.66%)</title><rect x="80.5871%" y="181" width="0.6629%" height="15" fill="rgb(235,182,43)" fg:x="851" fg:w="7"/><text x="80.8371%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (28 samples, 2.65%)</title><rect x="78.7879%" y="197" width="2.6515%" height="15" fill="rgb(242,16,51)" fg:x="832" fg:w="28"/><text x="79.0379%" y="207.50">br..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreTrivialContextMap (2 samples, 0.19%)</title><rect x="81.2500%" y="181" width="0.1894%" height="15" fill="rgb(248,9,4)" fg:x="858" fg:w="2"/><text x="81.5000%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="81.3447%" y="165" width="0.0947%" height="15" fill="rgb(210,31,22)" fg:x="859" fg:w="1"/><text x="81.5947%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="81.3447%" y="149" width="0.0947%" height="15" fill="rgb(239,54,39)" fg:x="859" fg:w="1"/><text x="81.5947%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="81.3447%" y="133" width="0.0947%" height="15" fill="rgb(230,99,41)" fg:x="859" fg:w="1"/><text x="81.5947%" y="143.50"></text></g><g><title>brotli::enc::encode::hasher_setup (9 samples, 0.85%)</title><rect x="81.4394%" y="197" width="0.8523%" height="15" fill="rgb(253,106,12)" fg:x="860" fg:w="9"/><text x="81.6894%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (4 samples, 0.38%)</title><rect x="82.2917%" y="197" width="0.3788%" height="15" fill="rgb(213,46,41)" fg:x="869" fg:w="4"/><text x="82.5417%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (262 samples, 24.81%)</title><rect x="58.5227%" y="277" width="24.8106%" height="15" fill="rgb(215,133,35)" fg:x="618" fg:w="262"/><text x="58.7727%" y="287.50">parquet::arrow::arrow_writer::ArrowColum..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (242 samples, 22.92%)</title><rect x="60.4167%" y="261" width="22.9167%" height="15" fill="rgb(213,28,5)" fg:x="638" fg:w="242"/><text x="60.6667%" y="271.50">parquet::column::writer::GenericColu..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (159 samples, 15.06%)</title><rect x="68.2765%" y="245" width="15.0568%" height="15" fill="rgb(215,77,49)" fg:x="721" fg:w="159"/><text x="68.5265%" y="255.50">parquet::column::writer..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (141 samples, 13.35%)</title><rect x="69.9811%" y="229" width="13.3523%" height="15" fill="rgb(248,100,22)" fg:x="739" fg:w="141"/><text x="70.2311%" y="239.50">&lt;parquet::compressio..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (140 samples, 13.26%)</title><rect x="70.0758%" y="213" width="13.2576%" height="15" fill="rgb(208,67,9)" fg:x="740" fg:w="140"/><text x="70.3258%" y="223.50">brotli::enc::writer:..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (7 samples, 0.66%)</title><rect x="82.6705%" y="197" width="0.6629%" height="15" fill="rgb(219,133,21)" fg:x="873" fg:w="7"/><text x="82.9205%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (7 samples, 0.66%)</title><rect x="82.6705%" y="181" width="0.6629%" height="15" fill="rgb(246,46,29)" fg:x="873" fg:w="7"/><text x="82.9205%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (264 samples, 25.00%)</title><rect x="58.5227%" y="309" width="25.0000%" height="15" fill="rgb(246,185,52)" fg:x="618" fg:w="264"/><text x="58.7727%" y="319.50">parquet::arrow::arrow_writer::ArrowWrite..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (264 samples, 25.00%)</title><rect x="58.5227%" y="293" width="25.0000%" height="15" fill="rgb(252,136,11)" fg:x="618" fg:w="264"/><text x="58.7727%" y="303.50">parquet::arrow::arrow_writer::ArrowRowGr..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (2 samples, 0.19%)</title><rect x="83.3333%" y="277" width="0.1894%" height="15" fill="rgb(219,138,53)" fg:x="880" fg:w="2"/><text x="83.5833%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (2 samples, 0.19%)</title><rect x="83.3333%" y="261" width="0.1894%" height="15" fill="rgb(211,51,23)" fg:x="880" fg:w="2"/><text x="83.5833%" y="271.50"></text></g><g><title>&lt;std::path::Components as core::cmp::PartialEq&gt;::eq (1 samples, 0.09%)</title><rect x="83.5227%" y="293" width="0.0947%" height="15" fill="rgb(247,221,28)" fg:x="882" fg:w="1"/><text x="83.7727%" y="303.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.09%)</title><rect x="83.5227%" y="277" width="0.0947%" height="15" fill="rgb(251,222,45)" fg:x="882" fg:w="1"/><text x="83.7727%" y="287.50"></text></g><g><title>std::fs::DirBuilder::create_dir_all (2 samples, 0.19%)</title><rect x="83.5227%" y="309" width="0.1894%" height="15" fill="rgb(217,162,53)" fg:x="882" fg:w="2"/><text x="83.7727%" y="319.50"></text></g><g><title>std::path::Path::is_dir (1 samples, 0.09%)</title><rect x="83.6174%" y="293" width="0.0947%" height="15" fill="rgb(229,93,14)" fg:x="883" fg:w="1"/><text x="83.8674%" y="303.50"></text></g><g><title>std::sys::fs::unix::stat (1 samples, 0.09%)</title><rect x="83.6174%" y="277" width="0.0947%" height="15" fill="rgb(209,67,49)" fg:x="883" fg:w="1"/><text x="83.8674%" y="287.50"></text></g><g><title>std::sys::fs::unix::try_statx (1 samples, 0.09%)</title><rect x="83.6174%" y="261" width="0.0947%" height="15" fill="rgb(213,87,29)" fg:x="883" fg:w="1"/><text x="83.8674%" y="271.50"></text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line (861 samples, 81.53%)</title><rect x="2.2727%" y="341" width="81.5341%" height="15" fill="rgb(205,151,52)" fg:x="24" fg:w="861"/><text x="2.5227%" y="351.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk (839 samples, 79.45%)</title><rect x="4.3561%" y="325" width="79.4508%" height="15" fill="rgb(253,215,39)" fg:x="46" fg:w="839"/><text x="4.6061%" y="335.50">nemscraper::process2::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="83.7121%" y="309" width="0.0947%" height="15" fill="rgb(221,220,41)" fg:x="884" fg:w="1"/><text x="83.9621%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="83.7121%" y="293" width="0.0947%" height="15" fill="rgb(218,133,21)" fg:x="884" fg:w="1"/><text x="83.9621%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="83.7121%" y="277" width="0.0947%" height="15" fill="rgb(221,193,43)" fg:x="884" fg:w="1"/><text x="83.9621%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="83.7121%" y="261" width="0.0947%" height="15" fill="rgb(240,128,52)" fg:x="884" fg:w="1"/><text x="83.9621%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="83.7121%" y="245" width="0.0947%" height="15" fill="rgb(253,114,12)" fg:x="884" fg:w="1"/><text x="83.9621%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="83.7121%" y="229" width="0.0947%" height="15" fill="rgb(215,223,47)" fg:x="884" fg:w="1"/><text x="83.9621%" y="239.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="83.7121%" y="213" width="0.0947%" height="15" fill="rgb(248,225,23)" fg:x="884" fg:w="1"/><text x="83.9621%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (7 samples, 0.66%)</title><rect x="84.3750%" y="325" width="0.6629%" height="15" fill="rgb(250,108,0)" fg:x="891" fg:w="7"/><text x="84.6250%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.66%)</title><rect x="85.0379%" y="325" width="0.6629%" height="15" fill="rgb(228,208,7)" fg:x="898" fg:w="7"/><text x="85.2879%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (3 samples, 0.28%)</title><rect x="85.7008%" y="261" width="0.2841%" height="15" fill="rgb(244,45,10)" fg:x="905" fg:w="3"/><text x="85.9508%" y="271.50"></text></g><g><title>crc32fast::Hasher::update (7 samples, 0.66%)</title><rect x="85.7008%" y="293" width="0.6629%" height="15" fill="rgb(207,125,25)" fg:x="905" fg:w="7"/><text x="85.9508%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (7 samples, 0.66%)</title><rect x="85.7008%" y="277" width="0.6629%" height="15" fill="rgb(210,195,18)" fg:x="905" fg:w="7"/><text x="85.9508%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (4 samples, 0.38%)</title><rect x="85.9848%" y="261" width="0.3788%" height="15" fill="rgb(249,80,12)" fg:x="908" fg:w="4"/><text x="86.2348%" y="271.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (80 samples, 7.58%)</title><rect x="87.0265%" y="229" width="7.5758%" height="15" fill="rgb(221,65,9)" fg:x="919" fg:w="80"/><text x="87.2765%" y="239.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.09%)</title><rect x="94.6023%" y="229" width="0.0947%" height="15" fill="rgb(235,49,36)" fg:x="999" fg:w="1"/><text x="94.8523%" y="239.50"></text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.09%)</title><rect x="94.6970%" y="229" width="0.0947%" height="15" fill="rgb(225,32,20)" fg:x="1000" fg:w="1"/><text x="94.9470%" y="239.50"></text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (2 samples, 0.19%)</title><rect x="94.7917%" y="229" width="0.1894%" height="15" fill="rgb(215,141,46)" fg:x="1001" fg:w="2"/><text x="95.0417%" y="239.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (92 samples, 8.71%)</title><rect x="86.3636%" y="277" width="8.7121%" height="15" fill="rgb(250,160,47)" fg:x="912" fg:w="92"/><text x="86.6136%" y="287.50">&lt;flate2::mem..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (92 samples, 8.71%)</title><rect x="86.3636%" y="261" width="8.7121%" height="15" fill="rgb(216,222,40)" fg:x="912" fg:w="92"/><text x="86.6136%" y="271.50">&lt;flate2::ffi..</text></g><g><title>zlib_rs::inflate::inflate (92 samples, 8.71%)</title><rect x="86.3636%" y="245" width="8.7121%" height="15" fill="rgb(234,217,39)" fg:x="912" fg:w="92"/><text x="86.6136%" y="255.50">zlib_rs::inf..</text></g><g><title>zlib_rs::inflate::writer::Writer::extend_from_window_runtime_dispatch (1 samples, 0.09%)</title><rect x="94.9811%" y="229" width="0.0947%" height="15" fill="rgb(207,178,40)" fg:x="1003" fg:w="1"/><text x="95.2311%" y="239.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 95.17%)</title><rect x="0.0000%" y="373" width="95.1705%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="1005"/><text x="0.2500%" y="383.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process2::csv_processor::process_csv_entry_unified (986 samples, 93.37%)</title><rect x="1.7992%" y="357" width="93.3712%" height="15" fill="rgb(249,199,10)" fg:x="19" fg:w="986"/><text x="2.0492%" y="367.50">nemscraper::process2::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (120 samples, 11.36%)</title><rect x="83.8068%" y="341" width="11.3636%" height="15" fill="rgb(249,222,13)" fg:x="885" fg:w="120"/><text x="84.0568%" y="351.50">std::io::append_t..</text></g><g><title>std::io::default_read_buf (100 samples, 9.47%)</title><rect x="85.7008%" y="325" width="9.4697%" height="15" fill="rgb(244,185,38)" fg:x="905" fg:w="100"/><text x="85.9508%" y="335.50">std::io::defau..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (100 samples, 9.47%)</title><rect x="85.7008%" y="309" width="9.4697%" height="15" fill="rgb(236,202,9)" fg:x="905" fg:w="100"/><text x="85.9508%" y="319.50">&lt;zip::crc32::C..</text></g><g><title>flate2::zio::read (93 samples, 8.81%)</title><rect x="86.3636%" y="293" width="8.8068%" height="15" fill="rgb(250,229,37)" fg:x="912" fg:w="93"/><text x="86.6136%" y="303.50">flate2::zio:..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="95.0758%" y="277" width="0.0947%" height="15" fill="rgb(206,174,23)" fg:x="1004" fg:w="1"/><text x="95.3258%" y="287.50"></text></g><g><title>bench_zip_to_pa (1,009 samples, 95.55%)</title><rect x="0.0000%" y="533" width="95.5492%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="543.50">bench_zip_to_pa</text></g><g><title>_start (1,009 samples, 95.55%)</title><rect x="0.0000%" y="517" width="95.5492%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="527.50">_start</text></g><g><title>__libc_start_main (1,009 samples, 95.55%)</title><rect x="0.0000%" y="501" width="95.5492%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="511.50">__libc_start_main</text></g><g><title>main (1,009 samples, 95.55%)</title><rect x="0.0000%" y="485" width="95.5492%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="495.50">main</text></g><g><title>std::rt::lang_start_internal (1,009 samples, 95.55%)</title><rect x="0.0000%" y="469" width="95.5492%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="479.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,009 samples, 95.55%)</title><rect x="0.0000%" y="453" width="95.5492%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="463.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,009 samples, 95.55%)</title><rect x="0.0000%" y="437" width="95.5492%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="447.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,009 samples, 95.55%)</title><rect x="0.0000%" y="421" width="95.5492%" height="15" fill="rgb(226,2,50)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="431.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,009 samples, 95.55%)</title><rect x="0.0000%" y="405" width="95.5492%" height="15" fill="rgb(234,177,6)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="415.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,009 samples, 95.55%)</title><rect x="0.0000%" y="389" width="95.5492%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="1009"/><text x="0.2500%" y="399.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 0.38%)</title><rect x="95.1705%" y="373" width="0.3788%" height="15" fill="rgb(220,13,46)" fg:x="1005" fg:w="4"/><text x="95.4205%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.38%)</title><rect x="95.1705%" y="357" width="0.3788%" height="15" fill="rgb(239,221,27)" fg:x="1005" fg:w="4"/><text x="95.4205%" y="367.50"></text></g><g><title>syscall (3 samples, 0.28%)</title><rect x="95.2652%" y="341" width="0.2841%" height="15" fill="rgb(222,198,25)" fg:x="1006" fg:w="3"/><text x="95.5152%" y="351.50"></text></g><g><title>powf64 (1 samples, 0.09%)</title><rect x="95.8333%" y="341" width="0.0947%" height="15" fill="rgb(211,99,13)" fg:x="1012" fg:w="1"/><text x="96.0833%" y="351.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.19%)</title><rect x="95.9280%" y="309" width="0.1894%" height="15" fill="rgb(232,111,31)" fg:x="1013" fg:w="2"/><text x="96.1780%" y="319.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="96.0227%" y="293" width="0.0947%" height="15" fill="rgb(245,82,37)" fg:x="1014" fg:w="1"/><text x="96.2727%" y="303.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.09%)</title><rect x="96.1174%" y="293" width="0.0947%" height="15" fill="rgb(227,149,46)" fg:x="1015" fg:w="1"/><text x="96.3674%" y="303.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="96.1174%" y="277" width="0.0947%" height="15" fill="rgb(218,36,50)" fg:x="1015" fg:w="1"/><text x="96.3674%" y="287.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.38%)</title><rect x="96.3068%" y="277" width="0.3788%" height="15" fill="rgb(226,80,48)" fg:x="1017" fg:w="4"/><text x="96.5568%" y="287.50"></text></g><g><title>epoll_wait (2 samples, 0.19%)</title><rect x="96.4962%" y="261" width="0.1894%" height="15" fill="rgb(238,224,15)" fg:x="1019" fg:w="2"/><text x="96.7462%" y="271.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (6 samples, 0.57%)</title><rect x="96.2121%" y="293" width="0.5682%" height="15" fill="rgb(241,136,10)" fg:x="1016" fg:w="6"/><text x="96.4621%" y="303.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (1 samples, 0.09%)</title><rect x="96.6856%" y="277" width="0.0947%" height="15" fill="rgb(208,32,45)" fg:x="1021" fg:w="1"/><text x="96.9356%" y="287.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.09%)</title><rect x="96.6856%" y="261" width="0.0947%" height="15" fill="rgb(207,135,9)" fg:x="1021" fg:w="1"/><text x="96.9356%" y="271.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (10 samples, 0.95%)</title><rect x="95.9280%" y="341" width="0.9470%" height="15" fill="rgb(206,86,44)" fg:x="1013" fg:w="10"/><text x="96.1780%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (10 samples, 0.95%)</title><rect x="95.9280%" y="325" width="0.9470%" height="15" fill="rgb(245,177,15)" fg:x="1013" fg:w="10"/><text x="96.1780%" y="335.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (8 samples, 0.76%)</title><rect x="96.1174%" y="309" width="0.7576%" height="15" fill="rgb(206,64,50)" fg:x="1015" fg:w="8"/><text x="96.3674%" y="319.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.09%)</title><rect x="96.7803%" y="293" width="0.0947%" height="15" fill="rgb(234,36,40)" fg:x="1022" fg:w="1"/><text x="97.0303%" y="303.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (12 samples, 1.14%)</title><rect x="97.0644%" y="325" width="1.1364%" height="15" fill="rgb(213,64,8)" fg:x="1025" fg:w="12"/><text x="97.3144%" y="335.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (12 samples, 1.14%)</title><rect x="97.0644%" y="309" width="1.1364%" height="15" fill="rgb(210,75,36)" fg:x="1025" fg:w="12"/><text x="97.3144%" y="319.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (12 samples, 1.14%)</title><rect x="97.0644%" y="293" width="1.1364%" height="15" fill="rgb(229,88,21)" fg:x="1025" fg:w="12"/><text x="97.3144%" y="303.50"></text></g><g><title>write (12 samples, 1.14%)</title><rect x="97.0644%" y="277" width="1.1364%" height="15" fill="rgb(252,204,47)" fg:x="1025" fg:w="12"/><text x="97.3144%" y="287.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (10 samples, 0.95%)</title><rect x="98.2008%" y="245" width="0.9470%" height="15" fill="rgb(208,77,27)" fg:x="1037" fg:w="10"/><text x="98.4508%" y="255.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (10 samples, 0.95%)</title><rect x="98.2008%" y="229" width="0.9470%" height="15" fill="rgb(221,76,26)" fg:x="1037" fg:w="10"/><text x="98.4508%" y="239.50"></text></g><g><title>tokio::runtime::park::wake (9 samples, 0.85%)</title><rect x="98.2955%" y="213" width="0.8523%" height="15" fill="rgb(225,139,18)" fg:x="1038" fg:w="9"/><text x="98.5455%" y="223.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (9 samples, 0.85%)</title><rect x="98.2955%" y="197" width="0.8523%" height="15" fill="rgb(230,137,11)" fg:x="1038" fg:w="9"/><text x="98.5455%" y="207.50"></text></g><g><title>syscall (9 samples, 0.85%)</title><rect x="98.2955%" y="181" width="0.8523%" height="15" fill="rgb(212,28,1)" fg:x="1038" fg:w="9"/><text x="98.5455%" y="191.50"></text></g><g><title>&lt;rustls::client::tls12::ExpectTraffic as rustls::common_state::State&lt;rustls::client::client_conn::ClientConnectionData&gt;&gt;::handle (1 samples, 0.09%)</title><rect x="99.1477%" y="117" width="0.0947%" height="15" fill="rgb(248,164,17)" fg:x="1047" fg:w="1"/><text x="99.3977%" y="127.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (2 samples, 0.19%)</title><rect x="99.2424%" y="101" width="0.1894%" height="15" fill="rgb(222,171,42)" fg:x="1048" fg:w="2"/><text x="99.4924%" y="111.50"></text></g><g><title>rustls::msgs::base::Payload::read (2 samples, 0.19%)</title><rect x="99.2424%" y="85" width="0.1894%" height="15" fill="rgb(243,84,45)" fg:x="1048" fg:w="2"/><text x="99.4924%" y="95.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (4 samples, 0.38%)</title><rect x="99.1477%" y="133" width="0.3788%" height="15" fill="rgb(252,49,23)" fg:x="1047" fg:w="4"/><text x="99.3977%" y="143.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (3 samples, 0.28%)</title><rect x="99.2424%" y="117" width="0.2841%" height="15" fill="rgb(215,19,7)" fg:x="1048" fg:w="3"/><text x="99.4924%" y="127.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.09%)</title><rect x="99.4318%" y="101" width="0.0947%" height="15" fill="rgb(238,81,41)" fg:x="1050" fg:w="1"/><text x="99.6818%" y="111.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.09%)</title><rect x="99.4318%" y="85" width="0.0947%" height="15" fill="rgb(210,199,37)" fg:x="1050" fg:w="1"/><text x="99.6818%" y="95.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.09%)</title><rect x="99.4318%" y="69" width="0.0947%" height="15" fill="rgb(244,192,49)" fg:x="1050" fg:w="1"/><text x="99.6818%" y="79.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.09%)</title><rect x="99.4318%" y="53" width="0.0947%" height="15" fill="rgb(226,211,11)" fg:x="1050" fg:w="1"/><text x="99.6818%" y="63.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.09%)</title><rect x="99.4318%" y="37" width="0.0947%" height="15" fill="rgb(236,162,54)" fg:x="1050" fg:w="1"/><text x="99.6818%" y="47.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (7 samples, 0.66%)</title><rect x="99.1477%" y="245" width="0.6629%" height="15" fill="rgb(220,229,9)" fg:x="1047" fg:w="7"/><text x="99.3977%" y="255.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (7 samples, 0.66%)</title><rect x="99.1477%" y="229" width="0.6629%" height="15" fill="rgb(250,87,22)" fg:x="1047" fg:w="7"/><text x="99.3977%" y="239.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (7 samples, 0.66%)</title><rect x="99.1477%" y="213" width="0.6629%" height="15" fill="rgb(239,43,17)" fg:x="1047" fg:w="7"/><text x="99.3977%" y="223.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (7 samples, 0.66%)</title><rect x="99.1477%" y="197" width="0.6629%" height="15" fill="rgb(231,177,25)" fg:x="1047" fg:w="7"/><text x="99.3977%" y="207.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.66%)</title><rect x="99.1477%" y="181" width="0.6629%" height="15" fill="rgb(219,179,1)" fg:x="1047" fg:w="7"/><text x="99.3977%" y="191.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (7 samples, 0.66%)</title><rect x="99.1477%" y="165" width="0.6629%" height="15" fill="rgb(238,219,53)" fg:x="1047" fg:w="7"/><text x="99.3977%" y="175.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (7 samples, 0.66%)</title><rect x="99.1477%" y="149" width="0.6629%" height="15" fill="rgb(232,167,36)" fg:x="1047" fg:w="7"/><text x="99.3977%" y="159.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (3 samples, 0.28%)</title><rect x="99.5265%" y="133" width="0.2841%" height="15" fill="rgb(244,19,51)" fg:x="1051" fg:w="3"/><text x="99.7765%" y="143.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (3 samples, 0.28%)</title><rect x="99.5265%" y="117" width="0.2841%" height="15" fill="rgb(224,6,22)" fg:x="1051" fg:w="3"/><text x="99.7765%" y="127.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (3 samples, 0.28%)</title><rect x="99.5265%" y="101" width="0.2841%" height="15" fill="rgb(224,145,5)" fg:x="1051" fg:w="3"/><text x="99.7765%" y="111.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 0.28%)</title><rect x="99.5265%" y="85" width="0.2841%" height="15" fill="rgb(234,130,49)" fg:x="1051" fg:w="3"/><text x="99.7765%" y="95.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (3 samples, 0.28%)</title><rect x="99.5265%" y="69" width="0.2841%" height="15" fill="rgb(254,6,2)" fg:x="1051" fg:w="3"/><text x="99.7765%" y="79.50"></text></g><g><title>recv (3 samples, 0.28%)</title><rect x="99.5265%" y="53" width="0.2841%" height="15" fill="rgb(208,96,46)" fg:x="1051" fg:w="3"/><text x="99.7765%" y="63.50"></text></g><g><title>all (1,056 samples, 100%)</title><rect x="0.0000%" y="549" width="100.0000%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="1056"/><text x="0.2500%" y="559.50"></text></g><g><title>tokio-runtime-w (47 samples, 4.45%)</title><rect x="95.5492%" y="533" width="4.4508%" height="15" fill="rgb(233,210,1)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="543.50">tokio..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (47 samples, 4.45%)</title><rect x="95.5492%" y="517" width="4.4508%" height="15" fill="rgb(244,137,37)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="527.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (47 samples, 4.45%)</title><rect x="95.5492%" y="501" width="4.4508%" height="15" fill="rgb(240,136,2)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="511.50">core:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (47 samples, 4.45%)</title><rect x="95.5492%" y="485" width="4.4508%" height="15" fill="rgb(239,18,37)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="495.50">std::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (47 samples, 4.45%)</title><rect x="95.5492%" y="469" width="4.4508%" height="15" fill="rgb(218,185,22)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="479.50">tokio..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (47 samples, 4.45%)</title><rect x="95.5492%" y="453" width="4.4508%" height="15" fill="rgb(225,218,4)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="463.50">tokio..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (47 samples, 4.45%)</title><rect x="95.5492%" y="437" width="4.4508%" height="15" fill="rgb(230,182,32)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="447.50">tokio..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 4.45%)</title><rect x="95.5492%" y="421" width="4.4508%" height="15" fill="rgb(242,56,43)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="431.50">&lt;toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (47 samples, 4.45%)</title><rect x="95.5492%" y="405" width="4.4508%" height="15" fill="rgb(233,99,24)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="415.50">tokio..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (47 samples, 4.45%)</title><rect x="95.5492%" y="389" width="4.4508%" height="15" fill="rgb(234,209,42)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="399.50">tokio..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (47 samples, 4.45%)</title><rect x="95.5492%" y="373" width="4.4508%" height="15" fill="rgb(227,7,12)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="383.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (47 samples, 4.45%)</title><rect x="95.5492%" y="357" width="4.4508%" height="15" fill="rgb(245,203,43)" fg:x="1009" fg:w="47"/><text x="95.7992%" y="367.50">tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (33 samples, 3.12%)</title><rect x="96.8750%" y="341" width="3.1250%" height="15" fill="rgb(238,205,33)" fg:x="1023" fg:w="33"/><text x="97.1250%" y="351.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (19 samples, 1.80%)</title><rect x="98.2008%" y="325" width="1.7992%" height="15" fill="rgb(231,56,7)" fg:x="1037" fg:w="19"/><text x="98.4508%" y="335.50">t..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (19 samples, 1.80%)</title><rect x="98.2008%" y="309" width="1.7992%" height="15" fill="rgb(244,186,29)" fg:x="1037" fg:w="19"/><text x="98.4508%" y="319.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (19 samples, 1.80%)</title><rect x="98.2008%" y="293" width="1.7992%" height="15" fill="rgb(234,111,31)" fg:x="1037" fg:w="19"/><text x="98.4508%" y="303.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (19 samples, 1.80%)</title><rect x="98.2008%" y="277" width="1.7992%" height="15" fill="rgb(241,149,10)" fg:x="1037" fg:w="19"/><text x="98.4508%" y="287.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (19 samples, 1.80%)</title><rect x="98.2008%" y="261" width="1.7992%" height="15" fill="rgb(249,206,44)" fg:x="1037" fg:w="19"/><text x="98.4508%" y="271.50">h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (2 samples, 0.19%)</title><rect x="99.8106%" y="245" width="0.1894%" height="15" fill="rgb(251,153,30)" fg:x="1054" fg:w="2"/><text x="100.0606%" y="255.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (2 samples, 0.19%)</title><rect x="99.8106%" y="229" width="0.1894%" height="15" fill="rgb(239,152,38)" fg:x="1054" fg:w="2"/><text x="100.0606%" y="239.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (1 samples, 0.09%)</title><rect x="99.9053%" y="213" width="0.0947%" height="15" fill="rgb(249,139,47)" fg:x="1055" fg:w="1"/><text x="100.1553%" y="223.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.09%)</title><rect x="99.9053%" y="197" width="0.0947%" height="15" fill="rgb(244,64,35)" fg:x="1055" fg:w="1"/><text x="100.1553%" y="207.50"></text></g><g><title>&lt;rustls::conn::Writer as std::io::Write&gt;::flush (1 samples, 0.09%)</title><rect x="99.9053%" y="181" width="0.0947%" height="15" fill="rgb(216,46,15)" fg:x="1055" fg:w="1"/><text x="100.1553%" y="191.50"></text></g></svg></svg>