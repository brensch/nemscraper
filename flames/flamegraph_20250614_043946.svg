<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="674"><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 1.04%)</title><rect x="1.1869%" y="229" width="1.0386%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="7"/><text x="1.4369%" y="239.50"></text></g><g><title>syscall (7 samples, 1.04%)</title><rect x="1.1869%" y="213" width="1.0386%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="7"/><text x="1.4369%" y="223.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (11 samples, 1.63%)</title><rect x="1.1869%" y="261" width="1.6320%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="11"/><text x="1.4369%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (11 samples, 1.63%)</title><rect x="1.1869%" y="245" width="1.6320%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="11"/><text x="1.4369%" y="255.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (4 samples, 0.59%)</title><rect x="2.2255%" y="229" width="0.5935%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="4"/><text x="2.4755%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.59%)</title><rect x="2.2255%" y="213" width="0.5935%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="4"/><text x="2.4755%" y="223.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (4 samples, 0.59%)</title><rect x="2.2255%" y="197" width="0.5935%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="4"/><text x="2.4755%" y="207.50"></text></g><g><title>write (4 samples, 0.59%)</title><rect x="2.2255%" y="181" width="0.5935%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="4"/><text x="2.4755%" y="191.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (14 samples, 2.08%)</title><rect x="0.8902%" y="389" width="2.0772%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="14"/><text x="1.1402%" y="399.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (14 samples, 2.08%)</title><rect x="0.8902%" y="373" width="2.0772%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="14"/><text x="1.1402%" y="383.50">&lt;..</text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (13 samples, 1.93%)</title><rect x="1.0386%" y="357" width="1.9288%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="13"/><text x="1.2886%" y="367.50">&lt;..</text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (13 samples, 1.93%)</title><rect x="1.0386%" y="341" width="1.9288%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="13"/><text x="1.2886%" y="351.50">&lt;..</text></g><g><title>hyper::body::body::Body::poll_inner (13 samples, 1.93%)</title><rect x="1.0386%" y="325" width="1.9288%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="13"/><text x="1.2886%" y="335.50">h..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 1.93%)</title><rect x="1.0386%" y="309" width="1.9288%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="13"/><text x="1.2886%" y="319.50">&lt;..</text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (13 samples, 1.93%)</title><rect x="1.0386%" y="293" width="1.9288%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="13"/><text x="1.2886%" y="303.50">f..</text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 1.78%)</title><rect x="1.1869%" y="277" width="1.7804%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="12"/><text x="1.4369%" y="287.50">t..</text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (1 samples, 0.15%)</title><rect x="2.8190%" y="261" width="0.1484%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="1"/><text x="3.0690%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="3.7092%" y="293" width="0.1484%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="1"/><text x="3.9592%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="3.7092%" y="277" width="0.1484%" height="15" fill="rgb(221,200,47)" fg:x="25" fg:w="1"/><text x="3.9592%" y="287.50"></text></g><g><title>__libc_realloc (1 samples, 0.15%)</title><rect x="3.7092%" y="261" width="0.1484%" height="15" fill="rgb(226,26,5)" fg:x="25" fg:w="1"/><text x="3.9592%" y="271.50"></text></g><g><title>mremap (1 samples, 0.15%)</title><rect x="3.7092%" y="245" width="0.1484%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="1"/><text x="3.9592%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (5 samples, 0.74%)</title><rect x="3.5608%" y="325" width="0.7418%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="5"/><text x="3.8108%" y="335.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (5 samples, 0.74%)</title><rect x="3.5608%" y="309" width="0.7418%" height="15" fill="rgb(221,5,38)" fg:x="24" fg:w="5"/><text x="3.8108%" y="319.50"></text></g><g><title>csv_core::reader::Reader::read_record (3 samples, 0.45%)</title><rect x="3.8576%" y="293" width="0.4451%" height="15" fill="rgb(247,18,42)" fg:x="26" fg:w="3"/><text x="4.1076%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (8 samples, 1.19%)</title><rect x="3.5608%" y="341" width="1.1869%" height="15" fill="rgb(241,131,45)" fg:x="24" fg:w="8"/><text x="3.8108%" y="351.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (3 samples, 0.45%)</title><rect x="4.3027%" y="325" width="0.4451%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="3"/><text x="4.5527%" y="335.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.45%)</title><rect x="4.3027%" y="309" width="0.4451%" height="15" fill="rgb(225,111,53)" fg:x="29" fg:w="3"/><text x="4.5527%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.45%)</title><rect x="4.3027%" y="293" width="0.4451%" height="15" fill="rgb(238,160,17)" fg:x="29" fg:w="3"/><text x="4.5527%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.45%)</title><rect x="4.3027%" y="277" width="0.4451%" height="15" fill="rgb(214,148,48)" fg:x="29" fg:w="3"/><text x="4.5527%" y="287.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (3 samples, 0.45%)</title><rect x="4.3027%" y="261" width="0.4451%" height="15" fill="rgb(232,36,49)" fg:x="29" fg:w="3"/><text x="4.5527%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (3 samples, 0.45%)</title><rect x="4.3027%" y="245" width="0.4451%" height="15" fill="rgb(209,103,24)" fg:x="29" fg:w="3"/><text x="4.5527%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.15%)</title><rect x="4.5994%" y="229" width="0.1484%" height="15" fill="rgb(229,88,8)" fg:x="31" fg:w="1"/><text x="4.8494%" y="239.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.15%)</title><rect x="4.5994%" y="213" width="0.1484%" height="15" fill="rgb(213,181,19)" fg:x="31" fg:w="1"/><text x="4.8494%" y="223.50"></text></g><g><title>arrow_ipc::writer::FileWriter&lt;W&gt;::write (1 samples, 0.15%)</title><rect x="4.7478%" y="341" width="0.1484%" height="15" fill="rgb(254,191,54)" fg:x="32" fg:w="1"/><text x="4.9978%" y="351.50"></text></g><g><title>arrow_ipc::writer::write_message (1 samples, 0.15%)</title><rect x="4.7478%" y="325" width="0.1484%" height="15" fill="rgb(241,83,37)" fg:x="32" fg:w="1"/><text x="4.9978%" y="335.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.15%)</title><rect x="4.7478%" y="309" width="0.1484%" height="15" fill="rgb(233,36,39)" fg:x="32" fg:w="1"/><text x="4.9978%" y="319.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (1 samples, 0.15%)</title><rect x="4.7478%" y="293" width="0.1484%" height="15" fill="rgb(226,3,54)" fg:x="32" fg:w="1"/><text x="4.9978%" y="303.50"></text></g><g><title>write (1 samples, 0.15%)</title><rect x="4.7478%" y="277" width="0.1484%" height="15" fill="rgb(245,192,40)" fg:x="32" fg:w="1"/><text x="4.9978%" y="287.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="4.8961%" y="341" width="0.1484%" height="15" fill="rgb(238,167,29)" fg:x="33" fg:w="1"/><text x="5.1461%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (1 samples, 0.15%)</title><rect x="5.0445%" y="341" width="0.1484%" height="15" fill="rgb(232,182,51)" fg:x="34" fg:w="1"/><text x="5.2945%" y="351.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="5.0445%" y="325" width="0.1484%" height="15" fill="rgb(231,60,39)" fg:x="34" fg:w="1"/><text x="5.2945%" y="335.50"></text></g><g><title>__munmap (1 samples, 0.15%)</title><rect x="5.0445%" y="309" width="0.1484%" height="15" fill="rgb(208,69,12)" fg:x="34" fg:w="1"/><text x="5.2945%" y="319.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="5.1929%" y="341" width="0.1484%" height="15" fill="rgb(235,93,37)" fg:x="35" fg:w="1"/><text x="5.4429%" y="351.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="5.3412%" y="325" width="0.1484%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="1"/><text x="5.5912%" y="335.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.30%)</title><rect x="5.4896%" y="325" width="0.2967%" height="15" fill="rgb(222,207,29)" fg:x="37" fg:w="2"/><text x="5.7396%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (2 samples, 0.30%)</title><rect x="5.4896%" y="309" width="0.2967%" height="15" fill="rgb(206,96,30)" fg:x="37" fg:w="2"/><text x="5.7396%" y="319.50"></text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::finalize (18 samples, 2.67%)</title><rect x="3.4125%" y="373" width="2.6706%" height="15" fill="rgb(218,138,4)" fg:x="23" fg:w="18"/><text x="3.6625%" y="383.50">ne..</text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::flush_current_chunk (18 samples, 2.67%)</title><rect x="3.4125%" y="357" width="2.6706%" height="15" fill="rgb(250,191,14)" fg:x="23" fg:w="18"/><text x="3.6625%" y="367.50">ne..</text></g><g><title>nemscraper::process::convert::convert_to_final_types (5 samples, 0.74%)</title><rect x="5.3412%" y="341" width="0.7418%" height="15" fill="rgb(239,60,40)" fg:x="36" fg:w="5"/><text x="5.5912%" y="351.50"></text></g><g><title>nemscraper::process::utils::clean_str (2 samples, 0.30%)</title><rect x="5.7864%" y="325" width="0.2967%" height="15" fill="rgb(206,27,48)" fg:x="39" fg:w="2"/><text x="6.0364%" y="335.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="5.9347%" y="309" width="0.1484%" height="15" fill="rgb(225,35,8)" fg:x="40" fg:w="1"/><text x="6.1847%" y="319.50"></text></g><g><title>malloc (25 samples, 3.71%)</title><rect x="6.2315%" y="357" width="3.7092%" height="15" fill="rgb(250,213,24)" fg:x="42" fg:w="25"/><text x="6.4815%" y="367.50">mall..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.15%)</title><rect x="17.0623%" y="293" width="0.1484%" height="15" fill="rgb(247,123,22)" fg:x="115" fg:w="1"/><text x="17.3123%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.15%)</title><rect x="17.0623%" y="277" width="0.1484%" height="15" fill="rgb(231,138,38)" fg:x="115" fg:w="1"/><text x="17.3123%" y="287.50"></text></g><g><title>__libc_realloc (1 samples, 0.15%)</title><rect x="17.0623%" y="261" width="0.1484%" height="15" fill="rgb(231,145,46)" fg:x="115" fg:w="1"/><text x="17.3123%" y="271.50"></text></g><g><title>mmap64 (1 samples, 0.15%)</title><rect x="17.0623%" y="245" width="0.1484%" height="15" fill="rgb(251,118,11)" fg:x="115" fg:w="1"/><text x="17.3123%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (96 samples, 14.24%)</title><rect x="13.9466%" y="325" width="14.2433%" height="15" fill="rgb(217,147,25)" fg:x="94" fg:w="96"/><text x="14.1966%" y="335.50">arrow_csv::reader::Dec..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (96 samples, 14.24%)</title><rect x="13.9466%" y="309" width="14.2433%" height="15" fill="rgb(247,81,37)" fg:x="94" fg:w="96"/><text x="14.1966%" y="319.50">arrow_csv::reader::rec..</text></g><g><title>csv_core::reader::Reader::read_record (74 samples, 10.98%)</title><rect x="17.2107%" y="293" width="10.9792%" height="15" fill="rgb(209,12,38)" fg:x="116" fg:w="74"/><text x="17.4607%" y="303.50">csv_core::reader..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (11 samples, 1.63%)</title><rect x="28.1899%" y="309" width="1.6320%" height="15" fill="rgb(227,1,9)" fg:x="190" fg:w="11"/><text x="28.4399%" y="319.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.59%)</title><rect x="29.2285%" y="293" width="0.5935%" height="15" fill="rgb(248,47,43)" fg:x="197" fg:w="4"/><text x="29.4785%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (238 samples, 35.31%)</title><rect x="12.9080%" y="341" width="35.3116%" height="15" fill="rgb(221,10,30)" fg:x="87" fg:w="238"/><text x="13.1580%" y="351.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (135 samples, 20.03%)</title><rect x="28.1899%" y="325" width="20.0297%" height="15" fill="rgb(210,229,1)" fg:x="190" fg:w="135"/><text x="28.4399%" y="335.50">arrow_csv::reader::Decoder::flu..</text></g><g><title>core::iter::adapters::try_process (124 samples, 18.40%)</title><rect x="29.8220%" y="309" width="18.3976%" height="15" fill="rgb(222,148,37)" fg:x="201" fg:w="124"/><text x="30.0720%" y="319.50">core::iter::adapters::try_pro..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (124 samples, 18.40%)</title><rect x="29.8220%" y="293" width="18.3976%" height="15" fill="rgb(234,67,33)" fg:x="201" fg:w="124"/><text x="30.0720%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (124 samples, 18.40%)</title><rect x="29.8220%" y="277" width="18.3976%" height="15" fill="rgb(247,98,35)" fg:x="201" fg:w="124"/><text x="30.0720%" y="287.50">&lt;core::iter::adapters::map::M..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (124 samples, 18.40%)</title><rect x="29.8220%" y="261" width="18.3976%" height="15" fill="rgb(247,138,52)" fg:x="201" fg:w="124"/><text x="30.0720%" y="271.50">&lt;arrow_array::array::byte_arr..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (96 samples, 14.24%)</title><rect x="33.9763%" y="245" width="14.2433%" height="15" fill="rgb(213,79,30)" fg:x="229" fg:w="96"/><text x="34.2263%" y="255.50">arrow_array::builder::..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (23 samples, 3.41%)</title><rect x="44.8071%" y="229" width="3.4125%" height="15" fill="rgb(246,177,23)" fg:x="302" fg:w="23"/><text x="45.0571%" y="239.50">arr..</text></g><g><title>__rustc::__rdl_realloc (23 samples, 3.41%)</title><rect x="44.8071%" y="213" width="3.4125%" height="15" fill="rgb(230,62,27)" fg:x="302" fg:w="23"/><text x="45.0571%" y="223.50">__r..</text></g><g><title>posix_memalign (1 samples, 0.15%)</title><rect x="48.0712%" y="197" width="0.1484%" height="15" fill="rgb(216,154,8)" fg:x="324" fg:w="1"/><text x="48.3212%" y="207.50"></text></g><g><title>arrow_ipc::writer::IpcDataGenerator::encoded_batch (20 samples, 2.97%)</title><rect x="48.2196%" y="325" width="2.9674%" height="15" fill="rgb(244,35,45)" fg:x="325" fg:w="20"/><text x="48.4696%" y="335.50">arr..</text></g><g><title>arrow_ipc::writer::write_array_data (20 samples, 2.97%)</title><rect x="48.2196%" y="309" width="2.9674%" height="15" fill="rgb(251,115,12)" fg:x="325" fg:w="20"/><text x="48.4696%" y="319.50">arr..</text></g><g><title>arrow_ipc::writer::write_buffer (20 samples, 2.97%)</title><rect x="48.2196%" y="293" width="2.9674%" height="15" fill="rgb(240,54,50)" fg:x="325" fg:w="20"/><text x="48.4696%" y="303.50">arr..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.74%)</title><rect x="50.4451%" y="277" width="0.7418%" height="15" fill="rgb(233,84,52)" fg:x="340" fg:w="5"/><text x="50.6951%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.74%)</title><rect x="50.4451%" y="261" width="0.7418%" height="15" fill="rgb(207,117,47)" fg:x="340" fg:w="5"/><text x="50.6951%" y="271.50"></text></g><g><title>__libc_realloc (5 samples, 0.74%)</title><rect x="50.4451%" y="245" width="0.7418%" height="15" fill="rgb(249,43,39)" fg:x="340" fg:w="5"/><text x="50.6951%" y="255.50"></text></g><g><title>arrow_ipc::writer::FileWriter&lt;W&gt;::write (29 samples, 4.30%)</title><rect x="48.2196%" y="341" width="4.3027%" height="15" fill="rgb(209,38,44)" fg:x="325" fg:w="29"/><text x="48.4696%" y="351.50">arrow..</text></g><g><title>arrow_ipc::writer::write_message (9 samples, 1.34%)</title><rect x="51.1869%" y="325" width="1.3353%" height="15" fill="rgb(236,212,23)" fg:x="345" fg:w="9"/><text x="51.4369%" y="335.50"></text></g><g><title>std::io::Write::write_all (9 samples, 1.34%)</title><rect x="51.1869%" y="309" width="1.3353%" height="15" fill="rgb(242,79,21)" fg:x="345" fg:w="9"/><text x="51.4369%" y="319.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (9 samples, 1.34%)</title><rect x="51.1869%" y="293" width="1.3353%" height="15" fill="rgb(211,96,35)" fg:x="345" fg:w="9"/><text x="51.4369%" y="303.50"></text></g><g><title>write (9 samples, 1.34%)</title><rect x="51.1869%" y="277" width="1.3353%" height="15" fill="rgb(253,215,40)" fg:x="345" fg:w="9"/><text x="51.4369%" y="287.50"></text></g><g><title>cfree (11 samples, 1.63%)</title><rect x="52.5223%" y="341" width="1.6320%" height="15" fill="rgb(211,81,21)" fg:x="354" fg:w="11"/><text x="52.7723%" y="351.50"></text></g><g><title>__munmap (1 samples, 0.15%)</title><rect x="54.0059%" y="325" width="0.1484%" height="15" fill="rgb(208,190,38)" fg:x="364" fg:w="1"/><text x="54.2559%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (1 samples, 0.15%)</title><rect x="54.1543%" y="341" width="0.1484%" height="15" fill="rgb(235,213,38)" fg:x="365" fg:w="1"/><text x="54.4043%" y="351.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (7 samples, 1.04%)</title><rect x="56.8249%" y="325" width="1.0386%" height="15" fill="rgb(237,122,38)" fg:x="383" fg:w="7"/><text x="57.0749%" y="335.50"></text></g><g><title>__rustc::__rdl_realloc (7 samples, 1.04%)</title><rect x="56.8249%" y="309" width="1.0386%" height="15" fill="rgb(244,218,35)" fg:x="383" fg:w="7"/><text x="57.0749%" y="319.50"></text></g><g><title>cfree (14 samples, 2.08%)</title><rect x="57.8635%" y="325" width="2.0772%" height="15" fill="rgb(240,68,47)" fg:x="390" fg:w="14"/><text x="58.1135%" y="335.50">c..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (40 samples, 5.93%)</title><rect x="59.9407%" y="325" width="5.9347%" height="15" fill="rgb(210,16,53)" fg:x="404" fg:w="40"/><text x="60.1907%" y="335.50">core::nu..</text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 2.82%)</title><rect x="63.0564%" y="309" width="2.8190%" height="15" fill="rgb(235,124,12)" fg:x="425" fg:w="19"/><text x="63.3064%" y="319.50">co..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (5 samples, 0.74%)</title><rect x="67.3591%" y="309" width="0.7418%" height="15" fill="rgb(224,169,11)" fg:x="454" fg:w="5"/><text x="67.6091%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (17 samples, 2.52%)</title><rect x="68.1009%" y="309" width="2.5223%" height="15" fill="rgb(250,166,2)" fg:x="459" fg:w="17"/><text x="68.3509%" y="319.50">ch..</text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (3 samples, 0.45%)</title><rect x="70.1780%" y="293" width="0.4451%" height="15" fill="rgb(242,216,29)" fg:x="473" fg:w="3"/><text x="70.4280%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (34 samples, 5.04%)</title><rect x="65.8754%" y="325" width="5.0445%" height="15" fill="rgb(230,116,27)" fg:x="444" fg:w="34"/><text x="66.1254%" y="335.50">nemscr..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.30%)</title><rect x="70.6231%" y="309" width="0.2967%" height="15" fill="rgb(228,99,48)" fg:x="476" fg:w="2"/><text x="70.8731%" y="319.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.15%)</title><rect x="72.2552%" y="309" width="0.1484%" height="15" fill="rgb(253,11,6)" fg:x="487" fg:w="1"/><text x="72.5052%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.15%)</title><rect x="72.4036%" y="309" width="0.1484%" height="15" fill="rgb(247,143,39)" fg:x="488" fg:w="1"/><text x="72.6536%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (7 samples, 1.04%)</title><rect x="72.5519%" y="309" width="1.0386%" height="15" fill="rgb(236,97,10)" fg:x="489" fg:w="7"/><text x="72.8019%" y="319.50"></text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::process_line (467 samples, 69.29%)</title><rect x="6.0831%" y="373" width="69.2878%" height="15" fill="rgb(233,208,19)" fg:x="41" fg:w="467"/><text x="6.3331%" y="383.50">nemscraper::process::csv_processor::UnifiedCsvProcessor::process_line</text></g><g><title>nemscraper::process::csv_processor::UnifiedCsvProcessor::flush_current_chunk (441 samples, 65.43%)</title><rect x="9.9407%" y="357" width="65.4303%" height="15" fill="rgb(216,164,2)" fg:x="67" fg:w="441"/><text x="10.1907%" y="367.50">nemscraper::process::csv_processor::UnifiedCsvProcessor::flush_current_chunk</text></g><g><title>nemscraper::process::convert::convert_to_final_types (142 samples, 21.07%)</title><rect x="54.3027%" y="341" width="21.0682%" height="15" fill="rgb(220,129,5)" fg:x="366" fg:w="142"/><text x="54.5527%" y="351.50">nemscraper::process::convert::con..</text></g><g><title>nemscraper::process::utils::clean_str (30 samples, 4.45%)</title><rect x="70.9199%" y="325" width="4.4510%" height="15" fill="rgb(242,17,10)" fg:x="478" fg:w="30"/><text x="71.1699%" y="335.50">nemsc..</text></g><g><title>malloc (12 samples, 1.78%)</title><rect x="73.5905%" y="309" width="1.7804%" height="15" fill="rgb(242,107,0)" fg:x="496" fg:w="12"/><text x="73.8405%" y="319.50">m..</text></g><g><title>core::slice::memchr::memchr_aligned (13 samples, 1.93%)</title><rect x="76.2611%" y="357" width="1.9288%" height="15" fill="rgb(251,28,31)" fg:x="514" fg:w="13"/><text x="76.5111%" y="367.50">c..</text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.74%)</title><rect x="78.1899%" y="357" width="0.7418%" height="15" fill="rgb(233,223,10)" fg:x="527" fg:w="5"/><text x="78.4399%" y="367.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (1 samples, 0.15%)</title><rect x="78.9318%" y="309" width="0.1484%" height="15" fill="rgb(215,21,27)" fg:x="532" fg:w="1"/><text x="79.1818%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.30%)</title><rect x="79.2285%" y="293" width="0.2967%" height="15" fill="rgb(232,23,21)" fg:x="534" fg:w="2"/><text x="79.4785%" y="303.50"></text></g><g><title>crc32fast::Hasher::update (10 samples, 1.48%)</title><rect x="78.9318%" y="325" width="1.4837%" height="15" fill="rgb(244,5,23)" fg:x="532" fg:w="10"/><text x="79.1818%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (9 samples, 1.34%)</title><rect x="79.0801%" y="309" width="1.3353%" height="15" fill="rgb(226,81,46)" fg:x="533" fg:w="9"/><text x="79.3301%" y="319.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (6 samples, 0.89%)</title><rect x="79.5252%" y="293" width="0.8902%" height="15" fill="rgb(247,70,30)" fg:x="536" fg:w="6"/><text x="79.7752%" y="303.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.15%)</title><rect x="80.2671%" y="277" width="0.1484%" height="15" fill="rgb(212,68,19)" fg:x="541" fg:w="1"/><text x="80.5171%" y="287.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (71 samples, 10.53%)</title><rect x="81.0089%" y="261" width="10.5341%" height="15" fill="rgb(240,187,13)" fg:x="546" fg:w="71"/><text x="81.2589%" y="271.50">zlib_rs::inflat..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (2 samples, 0.30%)</title><rect x="91.5430%" y="261" width="0.2967%" height="15" fill="rgb(223,113,26)" fg:x="617" fg:w="2"/><text x="91.7930%" y="271.50"></text></g><g><title>zlib_rs::inflate::window::Window::extend (2 samples, 0.30%)</title><rect x="91.8398%" y="261" width="0.2967%" height="15" fill="rgb(206,192,2)" fg:x="619" fg:w="2"/><text x="92.0898%" y="271.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (81 samples, 12.02%)</title><rect x="80.4154%" y="309" width="12.0178%" height="15" fill="rgb(241,108,4)" fg:x="542" fg:w="81"/><text x="80.6654%" y="319.50">&lt;flate2::mem::Deco..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (81 samples, 12.02%)</title><rect x="80.4154%" y="293" width="12.0178%" height="15" fill="rgb(247,173,49)" fg:x="542" fg:w="81"/><text x="80.6654%" y="303.50">&lt;flate2::ffi::c::I..</text></g><g><title>zlib_rs::inflate::inflate (81 samples, 12.02%)</title><rect x="80.4154%" y="277" width="12.0178%" height="15" fill="rgb(224,114,35)" fg:x="542" fg:w="81"/><text x="80.6654%" y="287.50">zlib_rs::inflate::..</text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (2 samples, 0.30%)</title><rect x="92.1365%" y="261" width="0.2967%" height="15" fill="rgb(245,159,27)" fg:x="621" fg:w="2"/><text x="92.3865%" y="271.50"></text></g><g><title>bench_zip_to_pa (625 samples, 92.73%)</title><rect x="0.0000%" y="565" width="92.7300%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="625"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (625 samples, 92.73%)</title><rect x="0.0000%" y="549" width="92.7300%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="625"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (625 samples, 92.73%)</title><rect x="0.0000%" y="533" width="92.7300%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="625"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (625 samples, 92.73%)</title><rect x="0.0000%" y="517" width="92.7300%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="625"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (625 samples, 92.73%)</title><rect x="0.0000%" y="501" width="92.7300%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="625"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (625 samples, 92.73%)</title><rect x="0.0000%" y="485" width="92.7300%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="625"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (625 samples, 92.73%)</title><rect x="0.0000%" y="469" width="92.7300%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="625"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (625 samples, 92.73%)</title><rect x="0.0000%" y="453" width="92.7300%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="625"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (625 samples, 92.73%)</title><rect x="0.0000%" y="437" width="92.7300%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="625"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (625 samples, 92.73%)</title><rect x="0.0000%" y="421" width="92.7300%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="625"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (625 samples, 92.73%)</title><rect x="0.0000%" y="405" width="92.7300%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="625"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::csv_processor::process_csv_entry_unified (605 samples, 89.76%)</title><rect x="2.9674%" y="389" width="89.7626%" height="15" fill="rgb(245,182,24)" fg:x="20" fg:w="605"/><text x="3.2174%" y="399.50">nemscraper::process::csv_processor::process_csv_entry_unified</text></g><g><title>std::io::append_to_string (117 samples, 17.36%)</title><rect x="75.3709%" y="373" width="17.3591%" height="15" fill="rgb(242,14,37)" fg:x="508" fg:w="117"/><text x="75.6209%" y="383.50">std::io::append_to_string</text></g><g><title>std::io::default_read_buf (93 samples, 13.80%)</title><rect x="78.9318%" y="357" width="13.7982%" height="15" fill="rgb(246,228,12)" fg:x="532" fg:w="93"/><text x="79.1818%" y="367.50">std::io::default_read..</text></g><g><title>&lt;zip::crc32::Crc32Reader&lt;R&gt; as std::io::Read&gt;::read (93 samples, 13.80%)</title><rect x="78.9318%" y="341" width="13.7982%" height="15" fill="rgb(213,55,15)" fg:x="532" fg:w="93"/><text x="79.1818%" y="351.50">&lt;zip::crc32::Crc32Rea..</text></g><g><title>flate2::zio::read (83 samples, 12.31%)</title><rect x="80.4154%" y="325" width="12.3145%" height="15" fill="rgb(209,9,3)" fg:x="542" fg:w="83"/><text x="80.6654%" y="335.50">flate2::zio::read</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.30%)</title><rect x="92.4332%" y="309" width="0.2967%" height="15" fill="rgb(230,59,30)" fg:x="623" fg:w="2"/><text x="92.6832%" y="319.50"></text></g><g><title>powf64 (1 samples, 0.15%)</title><rect x="92.7300%" y="373" width="0.1484%" height="15" fill="rgb(209,121,21)" fg:x="625" fg:w="1"/><text x="92.9800%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.59%)</title><rect x="92.8783%" y="341" width="0.5935%" height="15" fill="rgb(220,109,13)" fg:x="626" fg:w="4"/><text x="93.1283%" y="351.50"></text></g><g><title>syscall (4 samples, 0.59%)</title><rect x="92.8783%" y="325" width="0.5935%" height="15" fill="rgb(232,18,1)" fg:x="626" fg:w="4"/><text x="93.1283%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.15%)</title><rect x="93.4718%" y="341" width="0.1484%" height="15" fill="rgb(215,41,42)" fg:x="630" fg:w="1"/><text x="93.7218%" y="351.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (1 samples, 0.15%)</title><rect x="93.4718%" y="325" width="0.1484%" height="15" fill="rgb(224,123,36)" fg:x="630" fg:w="1"/><text x="93.7218%" y="335.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.15%)</title><rect x="93.4718%" y="309" width="0.1484%" height="15" fill="rgb(240,125,3)" fg:x="630" fg:w="1"/><text x="93.7218%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (8 samples, 1.19%)</title><rect x="92.8783%" y="373" width="1.1869%" height="15" fill="rgb(205,98,50)" fg:x="626" fg:w="8"/><text x="93.1283%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (8 samples, 1.19%)</title><rect x="92.8783%" y="357" width="1.1869%" height="15" fill="rgb(205,185,37)" fg:x="626" fg:w="8"/><text x="93.1283%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (3 samples, 0.45%)</title><rect x="93.6202%" y="341" width="0.4451%" height="15" fill="rgb(238,207,15)" fg:x="631" fg:w="3"/><text x="93.8702%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (2 samples, 0.30%)</title><rect x="93.7685%" y="325" width="0.2967%" height="15" fill="rgb(213,199,42)" fg:x="632" fg:w="2"/><text x="94.0185%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.15%)</title><rect x="93.9169%" y="309" width="0.1484%" height="15" fill="rgb(235,201,11)" fg:x="633" fg:w="1"/><text x="94.1669%" y="319.50"></text></g><g><title>epoll_wait (1 samples, 0.15%)</title><rect x="93.9169%" y="293" width="0.1484%" height="15" fill="rgb(207,46,11)" fg:x="633" fg:w="1"/><text x="94.1669%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.74%)</title><rect x="94.0653%" y="357" width="0.7418%" height="15" fill="rgb(241,35,35)" fg:x="634" fg:w="5"/><text x="94.3153%" y="367.50"></text></g><g><title>syscall (5 samples, 0.74%)</title><rect x="94.0653%" y="341" width="0.7418%" height="15" fill="rgb(243,32,47)" fg:x="634" fg:w="5"/><text x="94.3153%" y="351.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (8 samples, 1.19%)</title><rect x="94.8071%" y="357" width="1.1869%" height="15" fill="rgb(247,202,23)" fg:x="639" fg:w="8"/><text x="95.0571%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (8 samples, 1.19%)</title><rect x="94.8071%" y="341" width="1.1869%" height="15" fill="rgb(219,102,11)" fg:x="639" fg:w="8"/><text x="95.0571%" y="351.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (8 samples, 1.19%)</title><rect x="94.8071%" y="325" width="1.1869%" height="15" fill="rgb(243,110,44)" fg:x="639" fg:w="8"/><text x="95.0571%" y="335.50"></text></g><g><title>write (8 samples, 1.19%)</title><rect x="94.8071%" y="309" width="1.1869%" height="15" fill="rgb(222,74,54)" fg:x="639" fg:w="8"/><text x="95.0571%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1 samples, 0.15%)</title><rect x="95.9941%" y="357" width="0.1484%" height="15" fill="rgb(216,99,12)" fg:x="647" fg:w="1"/><text x="96.2441%" y="367.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (15 samples, 2.23%)</title><rect x="96.1424%" y="277" width="2.2255%" height="15" fill="rgb(226,22,26)" fg:x="648" fg:w="15"/><text x="96.3924%" y="287.50">h..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (15 samples, 2.23%)</title><rect x="96.1424%" y="261" width="2.2255%" height="15" fill="rgb(217,163,10)" fg:x="648" fg:w="15"/><text x="96.3924%" y="271.50">f..</text></g><g><title>tokio::runtime::park::wake (14 samples, 2.08%)</title><rect x="96.2908%" y="245" width="2.0772%" height="15" fill="rgb(213,25,53)" fg:x="649" fg:w="14"/><text x="96.5408%" y="255.50">t..</text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (14 samples, 2.08%)</title><rect x="96.2908%" y="229" width="2.0772%" height="15" fill="rgb(252,105,26)" fg:x="649" fg:w="14"/><text x="96.5408%" y="239.50">p..</text></g><g><title>syscall (14 samples, 2.08%)</title><rect x="96.2908%" y="213" width="2.0772%" height="15" fill="rgb(220,39,43)" fg:x="649" fg:w="14"/><text x="96.5408%" y="223.50">s..</text></g><g><title>rustls::msgs::message::OpaqueMessage::read (1 samples, 0.15%)</title><rect x="98.9614%" y="133" width="0.1484%" height="15" fill="rgb(229,68,48)" fg:x="667" fg:w="1"/><text x="99.2114%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (1 samples, 0.15%)</title><rect x="98.9614%" y="117" width="0.1484%" height="15" fill="rgb(252,8,32)" fg:x="667" fg:w="1"/><text x="99.2114%" y="127.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="98.9614%" y="101" width="0.1484%" height="15" fill="rgb(223,20,43)" fg:x="667" fg:w="1"/><text x="99.2114%" y="111.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (2 samples, 0.30%)</title><rect x="98.9614%" y="165" width="0.2967%" height="15" fill="rgb(229,81,49)" fg:x="667" fg:w="2"/><text x="99.2114%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (2 samples, 0.30%)</title><rect x="98.9614%" y="149" width="0.2967%" height="15" fill="rgb(236,28,36)" fg:x="667" fg:w="2"/><text x="99.2114%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (1 samples, 0.15%)</title><rect x="99.1098%" y="133" width="0.1484%" height="15" fill="rgb(249,185,26)" fg:x="668" fg:w="1"/><text x="99.3598%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (1 samples, 0.15%)</title><rect x="99.1098%" y="117" width="0.1484%" height="15" fill="rgb(249,174,33)" fg:x="668" fg:w="1"/><text x="99.3598%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (1 samples, 0.15%)</title><rect x="99.1098%" y="101" width="0.1484%" height="15" fill="rgb(233,201,37)" fg:x="668" fg:w="1"/><text x="99.3598%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (1 samples, 0.15%)</title><rect x="99.1098%" y="85" width="0.1484%" height="15" fill="rgb(221,78,26)" fg:x="668" fg:w="1"/><text x="99.3598%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.15%)</title><rect x="99.1098%" y="69" width="0.1484%" height="15" fill="rgb(250,127,30)" fg:x="668" fg:w="1"/><text x="99.3598%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.15%)</title><rect x="99.1098%" y="53" width="0.1484%" height="15" fill="rgb(230,49,44)" fg:x="668" fg:w="1"/><text x="99.3598%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.15%)</title><rect x="99.1098%" y="37" width="0.1484%" height="15" fill="rgb(229,67,23)" fg:x="668" fg:w="1"/><text x="99.3598%" y="47.50"></text></g><g><title>all (674 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="674"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (49 samples, 7.27%)</title><rect x="92.7300%" y="565" width="7.2700%" height="15" fill="rgb(215,43,3)" fg:x="625" fg:w="49"/><text x="92.9800%" y="575.50">tokio-runt..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (49 samples, 7.27%)</title><rect x="92.7300%" y="549" width="7.2700%" height="15" fill="rgb(238,154,13)" fg:x="625" fg:w="49"/><text x="92.9800%" y="559.50">std::sys::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (49 samples, 7.27%)</title><rect x="92.7300%" y="533" width="7.2700%" height="15" fill="rgb(219,56,2)" fg:x="625" fg:w="49"/><text x="92.9800%" y="543.50">core::ops:..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (49 samples, 7.27%)</title><rect x="92.7300%" y="517" width="7.2700%" height="15" fill="rgb(233,0,4)" fg:x="625" fg:w="49"/><text x="92.9800%" y="527.50">std::sys::..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (49 samples, 7.27%)</title><rect x="92.7300%" y="501" width="7.2700%" height="15" fill="rgb(235,30,7)" fg:x="625" fg:w="49"/><text x="92.9800%" y="511.50">tokio::run..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (49 samples, 7.27%)</title><rect x="92.7300%" y="485" width="7.2700%" height="15" fill="rgb(250,79,13)" fg:x="625" fg:w="49"/><text x="92.9800%" y="495.50">tokio::run..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (49 samples, 7.27%)</title><rect x="92.7300%" y="469" width="7.2700%" height="15" fill="rgb(211,146,34)" fg:x="625" fg:w="49"/><text x="92.9800%" y="479.50">tokio::run..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (49 samples, 7.27%)</title><rect x="92.7300%" y="453" width="7.2700%" height="15" fill="rgb(228,22,38)" fg:x="625" fg:w="49"/><text x="92.9800%" y="463.50">&lt;tokio::ru..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (49 samples, 7.27%)</title><rect x="92.7300%" y="437" width="7.2700%" height="15" fill="rgb(235,168,5)" fg:x="625" fg:w="49"/><text x="92.9800%" y="447.50">tokio::run..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (49 samples, 7.27%)</title><rect x="92.7300%" y="421" width="7.2700%" height="15" fill="rgb(221,155,16)" fg:x="625" fg:w="49"/><text x="92.9800%" y="431.50">tokio::run..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (49 samples, 7.27%)</title><rect x="92.7300%" y="405" width="7.2700%" height="15" fill="rgb(215,215,53)" fg:x="625" fg:w="49"/><text x="92.9800%" y="415.50">tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (49 samples, 7.27%)</title><rect x="92.7300%" y="389" width="7.2700%" height="15" fill="rgb(223,4,10)" fg:x="625" fg:w="49"/><text x="92.9800%" y="399.50">tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (40 samples, 5.93%)</title><rect x="94.0653%" y="373" width="5.9347%" height="15" fill="rgb(234,103,6)" fg:x="634" fg:w="40"/><text x="94.3153%" y="383.50">tokio::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (26 samples, 3.86%)</title><rect x="96.1424%" y="357" width="3.8576%" height="15" fill="rgb(227,97,0)" fg:x="648" fg:w="26"/><text x="96.3924%" y="367.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (26 samples, 3.86%)</title><rect x="96.1424%" y="341" width="3.8576%" height="15" fill="rgb(234,150,53)" fg:x="648" fg:w="26"/><text x="96.3924%" y="351.50">toki..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (26 samples, 3.86%)</title><rect x="96.1424%" y="325" width="3.8576%" height="15" fill="rgb(228,201,54)" fg:x="648" fg:w="26"/><text x="96.3924%" y="335.50">&lt;fut..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (26 samples, 3.86%)</title><rect x="96.1424%" y="309" width="3.8576%" height="15" fill="rgb(222,22,37)" fg:x="648" fg:w="26"/><text x="96.3924%" y="319.50">&lt;hyp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (26 samples, 3.86%)</title><rect x="96.1424%" y="293" width="3.8576%" height="15" fill="rgb(237,53,32)" fg:x="648" fg:w="26"/><text x="96.3924%" y="303.50">hype..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (11 samples, 1.63%)</title><rect x="98.3680%" y="277" width="1.6320%" height="15" fill="rgb(233,25,53)" fg:x="663" fg:w="11"/><text x="98.6180%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (10 samples, 1.48%)</title><rect x="98.5163%" y="261" width="1.4837%" height="15" fill="rgb(210,40,34)" fg:x="664" fg:w="10"/><text x="98.7663%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (10 samples, 1.48%)</title><rect x="98.5163%" y="245" width="1.4837%" height="15" fill="rgb(241,220,44)" fg:x="664" fg:w="10"/><text x="98.7663%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (10 samples, 1.48%)</title><rect x="98.5163%" y="229" width="1.4837%" height="15" fill="rgb(235,28,35)" fg:x="664" fg:w="10"/><text x="98.7663%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (10 samples, 1.48%)</title><rect x="98.5163%" y="213" width="1.4837%" height="15" fill="rgb(210,56,17)" fg:x="664" fg:w="10"/><text x="98.7663%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (9 samples, 1.34%)</title><rect x="98.6647%" y="197" width="1.3353%" height="15" fill="rgb(224,130,29)" fg:x="665" fg:w="9"/><text x="98.9147%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (8 samples, 1.19%)</title><rect x="98.8131%" y="181" width="1.1869%" height="15" fill="rgb(235,212,8)" fg:x="666" fg:w="8"/><text x="99.0631%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (5 samples, 0.74%)</title><rect x="99.2582%" y="165" width="0.7418%" height="15" fill="rgb(223,33,50)" fg:x="669" fg:w="5"/><text x="99.5082%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (4 samples, 0.59%)</title><rect x="99.4065%" y="149" width="0.5935%" height="15" fill="rgb(219,149,13)" fg:x="670" fg:w="4"/><text x="99.6565%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.59%)</title><rect x="99.4065%" y="133" width="0.5935%" height="15" fill="rgb(250,156,29)" fg:x="670" fg:w="4"/><text x="99.6565%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.59%)</title><rect x="99.4065%" y="117" width="0.5935%" height="15" fill="rgb(216,193,19)" fg:x="670" fg:w="4"/><text x="99.6565%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (4 samples, 0.59%)</title><rect x="99.4065%" y="101" width="0.5935%" height="15" fill="rgb(216,135,14)" fg:x="670" fg:w="4"/><text x="99.6565%" y="111.50"></text></g><g><title>recv (4 samples, 0.59%)</title><rect x="99.4065%" y="85" width="0.5935%" height="15" fill="rgb(241,47,5)" fg:x="670" fg:w="4"/><text x="99.6565%" y="95.50"></text></g></svg></svg>