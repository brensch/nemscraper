<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1169"><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.43%)</title><rect x="0.5988%" y="229" width="0.4277%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="5"/><text x="0.8488%" y="239.50"></text></g><g><title>syscall (5 samples, 0.43%)</title><rect x="0.5988%" y="213" width="0.4277%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="5"/><text x="0.8488%" y="223.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (11 samples, 0.94%)</title><rect x="0.5133%" y="389" width="0.9410%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="11"/><text x="0.7633%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (11 samples, 0.94%)</title><rect x="0.5133%" y="373" width="0.9410%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="11"/><text x="0.7633%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (11 samples, 0.94%)</title><rect x="0.5133%" y="357" width="0.9410%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="11"/><text x="0.7633%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (11 samples, 0.94%)</title><rect x="0.5133%" y="341" width="0.9410%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="11"/><text x="0.7633%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (11 samples, 0.94%)</title><rect x="0.5133%" y="325" width="0.9410%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="11"/><text x="0.7633%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (11 samples, 0.94%)</title><rect x="0.5133%" y="309" width="0.9410%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="11"/><text x="0.7633%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (11 samples, 0.94%)</title><rect x="0.5133%" y="293" width="0.9410%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="11"/><text x="0.7633%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (11 samples, 0.94%)</title><rect x="0.5133%" y="277" width="0.9410%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="11"/><text x="0.7633%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 0.86%)</title><rect x="0.5988%" y="261" width="0.8554%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="10"/><text x="0.8488%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 0.86%)</title><rect x="0.5988%" y="245" width="0.8554%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="10"/><text x="0.8488%" y="255.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (5 samples, 0.43%)</title><rect x="1.0265%" y="229" width="0.4277%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="5"/><text x="1.2765%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (5 samples, 0.43%)</title><rect x="1.0265%" y="213" width="0.4277%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="5"/><text x="1.2765%" y="223.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (5 samples, 0.43%)</title><rect x="1.0265%" y="197" width="0.4277%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="5"/><text x="1.2765%" y="207.50"></text></g><g><title>write (5 samples, 0.43%)</title><rect x="1.0265%" y="181" width="0.4277%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="5"/><text x="1.2765%" y="191.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::exit (2 samples, 0.17%)</title><rect x="1.4542%" y="389" width="0.1711%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="2"/><text x="1.7042%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::exit (2 samples, 0.17%)</title><rect x="1.4542%" y="373" width="0.1711%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="2"/><text x="1.7042%" y="383.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::exit (2 samples, 0.17%)</title><rect x="1.4542%" y="357" width="0.1711%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="2"/><text x="1.7042%" y="367.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (2 samples, 0.17%)</title><rect x="1.4542%" y="341" width="0.1711%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="2"/><text x="1.7042%" y="351.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::try_close (2 samples, 0.17%)</title><rect x="1.4542%" y="325" width="0.1711%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="2"/><text x="1.7042%" y="335.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::try_close (2 samples, 0.17%)</title><rect x="1.4542%" y="309" width="0.1711%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="2"/><text x="1.7042%" y="319.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (1 samples, 0.09%)</title><rect x="1.5398%" y="293" width="0.0855%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="1"/><text x="1.7898%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="2.3952%" y="357" width="0.0855%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="1"/><text x="2.6452%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="2.3952%" y="341" width="0.0855%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="1"/><text x="2.6452%" y="351.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="2.3952%" y="325" width="0.0855%" height="15" fill="rgb(249,31,29)" fg:x="28" fg:w="1"/><text x="2.6452%" y="335.50"></text></g><g><title>mremap (1 samples, 0.09%)</title><rect x="2.3952%" y="309" width="0.0855%" height="15" fill="rgb(225,111,53)" fg:x="28" fg:w="1"/><text x="2.6452%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;nemscraper::process::chunk::StreamingCsvProcessor&gt; (1 samples, 0.09%)</title><rect x="2.7374%" y="325" width="0.0855%" height="15" fill="rgb(238,160,17)" fg:x="32" fg:w="1"/><text x="2.9874%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;nemscraper::process::schema::SchemaInfo&gt;&gt; (1 samples, 0.09%)</title><rect x="2.7374%" y="309" width="0.0855%" height="15" fill="rgb(214,148,48)" fg:x="32" fg:w="1"/><text x="2.9874%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="2.7374%" y="293" width="0.0855%" height="15" fill="rgb(232,36,49)" fg:x="32" fg:w="1"/><text x="2.9874%" y="303.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="2.7374%" y="277" width="0.0855%" height="15" fill="rgb(209,103,24)" fg:x="32" fg:w="1"/><text x="2.9874%" y="287.50"></text></g><g><title>__default_morecore (1 samples, 0.09%)</title><rect x="2.7374%" y="261" width="0.0855%" height="15" fill="rgb(229,88,8)" fg:x="32" fg:w="1"/><text x="2.9874%" y="271.50"></text></g><g><title>__sbrk (1 samples, 0.09%)</title><rect x="2.7374%" y="245" width="0.0855%" height="15" fill="rgb(213,181,19)" fg:x="32" fg:w="1"/><text x="2.9874%" y="255.50"></text></g><g><title>brk (1 samples, 0.09%)</title><rect x="2.7374%" y="229" width="0.0855%" height="15" fill="rgb(254,191,54)" fg:x="32" fg:w="1"/><text x="2.9874%" y="239.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (20 samples, 1.71%)</title><rect x="2.8229%" y="325" width="1.7109%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="20"/><text x="3.0729%" y="335.50"></text></g><g><title>malloc (15 samples, 1.28%)</title><rect x="3.2506%" y="309" width="1.2831%" height="15" fill="rgb(233,36,39)" fg:x="38" fg:w="15"/><text x="3.5006%" y="319.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.09%)</title><rect x="4.5338%" y="293" width="0.0855%" height="15" fill="rgb(226,3,54)" fg:x="53" fg:w="1"/><text x="4.7838%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.09%)</title><rect x="4.5338%" y="277" width="0.0855%" height="15" fill="rgb(245,192,40)" fg:x="53" fg:w="1"/><text x="4.7838%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.09%)</title><rect x="4.5338%" y="261" width="0.0855%" height="15" fill="rgb(238,167,29)" fg:x="53" fg:w="1"/><text x="4.7838%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.09%)</title><rect x="4.5338%" y="245" width="0.0855%" height="15" fill="rgb(232,182,51)" fg:x="53" fg:w="1"/><text x="4.7838%" y="255.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.17%)</title><rect x="4.6193%" y="197" width="0.1711%" height="15" fill="rgb(231,60,39)" fg:x="54" fg:w="2"/><text x="4.8693%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.17%)</title><rect x="4.6193%" y="181" width="0.1711%" height="15" fill="rgb(208,69,12)" fg:x="54" fg:w="2"/><text x="4.8693%" y="191.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (4 samples, 0.34%)</title><rect x="4.5338%" y="309" width="0.3422%" height="15" fill="rgb(235,93,37)" fg:x="53" fg:w="4"/><text x="4.7838%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (3 samples, 0.26%)</title><rect x="4.6193%" y="293" width="0.2566%" height="15" fill="rgb(213,116,39)" fg:x="54" fg:w="3"/><text x="4.8693%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (3 samples, 0.26%)</title><rect x="4.6193%" y="277" width="0.2566%" height="15" fill="rgb(222,207,29)" fg:x="54" fg:w="3"/><text x="4.8693%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (3 samples, 0.26%)</title><rect x="4.6193%" y="261" width="0.2566%" height="15" fill="rgb(206,96,30)" fg:x="54" fg:w="3"/><text x="4.8693%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (3 samples, 0.26%)</title><rect x="4.6193%" y="245" width="0.2566%" height="15" fill="rgb(218,138,4)" fg:x="54" fg:w="3"/><text x="4.8693%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.26%)</title><rect x="4.6193%" y="229" width="0.2566%" height="15" fill="rgb(250,191,14)" fg:x="54" fg:w="3"/><text x="4.8693%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="4.6193%" y="213" width="0.2566%" height="15" fill="rgb(239,60,40)" fg:x="54" fg:w="3"/><text x="4.8693%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="4.7904%" y="197" width="0.0855%" height="15" fill="rgb(206,27,48)" fg:x="56" fg:w="1"/><text x="5.0404%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="4.7904%" y="181" width="0.0855%" height="15" fill="rgb(225,35,8)" fg:x="56" fg:w="1"/><text x="5.0404%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="4.7904%" y="165" width="0.0855%" height="15" fill="rgb(250,213,24)" fg:x="56" fg:w="1"/><text x="5.0404%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="4.8760%" y="165" width="0.0855%" height="15" fill="rgb(247,123,22)" fg:x="57" fg:w="1"/><text x="5.1260%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="4.8760%" y="149" width="0.0855%" height="15" fill="rgb(231,138,38)" fg:x="57" fg:w="1"/><text x="5.1260%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="4.9615%" y="149" width="0.0855%" height="15" fill="rgb(231,145,46)" fg:x="58" fg:w="1"/><text x="5.2115%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="4.9615%" y="133" width="0.0855%" height="15" fill="rgb(251,118,11)" fg:x="58" fg:w="1"/><text x="5.2115%" y="143.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.26%)</title><rect x="4.8760%" y="197" width="0.2566%" height="15" fill="rgb(217,147,25)" fg:x="57" fg:w="3"/><text x="5.1260%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="4.8760%" y="181" width="0.2566%" height="15" fill="rgb(247,81,37)" fg:x="57" fg:w="3"/><text x="5.1260%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.17%)</title><rect x="4.9615%" y="165" width="0.1711%" height="15" fill="rgb(209,12,38)" fg:x="58" fg:w="2"/><text x="5.2115%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="5.0470%" y="149" width="0.0855%" height="15" fill="rgb(227,1,9)" fg:x="59" fg:w="1"/><text x="5.2970%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="5.0470%" y="133" width="0.0855%" height="15" fill="rgb(248,47,43)" fg:x="59" fg:w="1"/><text x="5.2970%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="5.0470%" y="117" width="0.0855%" height="15" fill="rgb(221,10,30)" fg:x="59" fg:w="1"/><text x="5.2970%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="5.0470%" y="101" width="0.0855%" height="15" fill="rgb(210,229,1)" fg:x="59" fg:w="1"/><text x="5.2970%" y="111.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (7 samples, 0.60%)</title><rect x="5.3037%" y="165" width="0.5988%" height="15" fill="rgb(222,148,37)" fg:x="62" fg:w="7"/><text x="5.5537%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (5 samples, 0.43%)</title><rect x="5.4748%" y="149" width="0.4277%" height="15" fill="rgb(234,67,33)" fg:x="64" fg:w="5"/><text x="5.7248%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="5.9025%" y="133" width="0.0855%" height="15" fill="rgb(247,98,35)" fg:x="69" fg:w="1"/><text x="6.1525%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.17%)</title><rect x="5.9025%" y="149" width="0.1711%" height="15" fill="rgb(247,138,52)" fg:x="69" fg:w="2"/><text x="6.1525%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="5.9880%" y="133" width="0.0855%" height="15" fill="rgb(213,79,30)" fg:x="70" fg:w="1"/><text x="6.2380%" y="143.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (15 samples, 1.28%)</title><rect x="4.8760%" y="213" width="1.2831%" height="15" fill="rgb(246,177,23)" fg:x="57" fg:w="15"/><text x="5.1260%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (12 samples, 1.03%)</title><rect x="5.1326%" y="197" width="1.0265%" height="15" fill="rgb(230,62,27)" fg:x="60" fg:w="12"/><text x="5.3826%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (12 samples, 1.03%)</title><rect x="5.1326%" y="181" width="1.0265%" height="15" fill="rgb(216,154,8)" fg:x="60" fg:w="12"/><text x="5.3826%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.26%)</title><rect x="5.9025%" y="165" width="0.2566%" height="15" fill="rgb(244,35,45)" fg:x="69" fg:w="3"/><text x="6.1525%" y="175.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="6.0736%" y="149" width="0.0855%" height="15" fill="rgb(251,115,12)" fg:x="71" fg:w="1"/><text x="6.3236%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="6.1591%" y="197" width="0.0855%" height="15" fill="rgb(240,54,50)" fg:x="72" fg:w="1"/><text x="6.4091%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="6.1591%" y="181" width="0.0855%" height="15" fill="rgb(233,84,52)" fg:x="72" fg:w="1"/><text x="6.4091%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (17 samples, 1.45%)</title><rect x="4.8760%" y="293" width="1.4542%" height="15" fill="rgb(207,117,47)" fg:x="57" fg:w="17"/><text x="5.1260%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.45%)</title><rect x="4.8760%" y="277" width="1.4542%" height="15" fill="rgb(249,43,39)" fg:x="57" fg:w="17"/><text x="5.1260%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (17 samples, 1.45%)</title><rect x="4.8760%" y="261" width="1.4542%" height="15" fill="rgb(209,38,44)" fg:x="57" fg:w="17"/><text x="5.1260%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.45%)</title><rect x="4.8760%" y="245" width="1.4542%" height="15" fill="rgb(236,212,23)" fg:x="57" fg:w="17"/><text x="5.1260%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (17 samples, 1.45%)</title><rect x="4.8760%" y="229" width="1.4542%" height="15" fill="rgb(242,79,21)" fg:x="57" fg:w="17"/><text x="5.1260%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (2 samples, 0.17%)</title><rect x="6.1591%" y="213" width="0.1711%" height="15" fill="rgb(211,96,35)" fg:x="72" fg:w="2"/><text x="6.4091%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="6.2447%" y="197" width="0.0855%" height="15" fill="rgb(253,215,40)" fg:x="73" fg:w="1"/><text x="6.4947%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="6.2447%" y="181" width="0.0855%" height="15" fill="rgb(211,81,21)" fg:x="73" fg:w="1"/><text x="6.4947%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="6.2447%" y="165" width="0.0855%" height="15" fill="rgb(208,190,38)" fg:x="73" fg:w="1"/><text x="6.4947%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="6.2447%" y="149" width="0.0855%" height="15" fill="rgb(235,213,38)" fg:x="73" fg:w="1"/><text x="6.4947%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="6.2447%" y="133" width="0.0855%" height="15" fill="rgb(237,122,38)" fg:x="73" fg:w="1"/><text x="6.4947%" y="143.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (22 samples, 1.88%)</title><rect x="4.5338%" y="325" width="1.8820%" height="15" fill="rgb(244,218,35)" fg:x="53" fg:w="22"/><text x="4.7838%" y="335.50">n..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (18 samples, 1.54%)</title><rect x="4.8760%" y="309" width="1.5398%" height="15" fill="rgb(240,68,47)" fg:x="57" fg:w="18"/><text x="5.1260%" y="319.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.09%)</title><rect x="6.3302%" y="293" width="0.0855%" height="15" fill="rgb(210,16,53)" fg:x="74" fg:w="1"/><text x="6.5802%" y="303.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.09%)</title><rect x="6.3302%" y="277" width="0.0855%" height="15" fill="rgb(235,124,12)" fg:x="74" fg:w="1"/><text x="6.5802%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.09%)</title><rect x="6.3302%" y="261" width="0.0855%" height="15" fill="rgb(224,169,11)" fg:x="74" fg:w="1"/><text x="6.5802%" y="271.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="6.3302%" y="245" width="0.0855%" height="15" fill="rgb(250,166,2)" fg:x="74" fg:w="1"/><text x="6.5802%" y="255.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="6.3302%" y="229" width="0.0855%" height="15" fill="rgb(242,216,29)" fg:x="74" fg:w="1"/><text x="6.5802%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (9 samples, 0.77%)</title><rect x="6.8435%" y="309" width="0.7699%" height="15" fill="rgb(230,116,27)" fg:x="80" fg:w="9"/><text x="7.0935%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.77%)</title><rect x="6.8435%" y="293" width="0.7699%" height="15" fill="rgb(228,99,48)" fg:x="80" fg:w="9"/><text x="7.0935%" y="303.50"></text></g><g><title>__libc_realloc (9 samples, 0.77%)</title><rect x="6.8435%" y="277" width="0.7699%" height="15" fill="rgb(253,11,6)" fg:x="80" fg:w="9"/><text x="7.0935%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (8 samples, 0.68%)</title><rect x="9.0676%" y="261" width="0.6843%" height="15" fill="rgb(247,143,39)" fg:x="106" fg:w="8"/><text x="9.3176%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.68%)</title><rect x="9.0676%" y="245" width="0.6843%" height="15" fill="rgb(236,97,10)" fg:x="106" fg:w="8"/><text x="9.3176%" y="255.50"></text></g><g><title>__libc_realloc (8 samples, 0.68%)</title><rect x="9.0676%" y="229" width="0.6843%" height="15" fill="rgb(233,208,19)" fg:x="106" fg:w="8"/><text x="9.3176%" y="239.50"></text></g><g><title>__default_morecore (1 samples, 0.09%)</title><rect x="9.6664%" y="213" width="0.0855%" height="15" fill="rgb(216,164,2)" fg:x="113" fg:w="1"/><text x="9.9164%" y="223.50"></text></g><g><title>__sbrk (1 samples, 0.09%)</title><rect x="9.6664%" y="197" width="0.0855%" height="15" fill="rgb(220,129,5)" fg:x="113" fg:w="1"/><text x="9.9164%" y="207.50"></text></g><g><title>brk (1 samples, 0.09%)</title><rect x="9.6664%" y="181" width="0.0855%" height="15" fill="rgb(242,17,10)" fg:x="113" fg:w="1"/><text x="9.9164%" y="191.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (97 samples, 8.30%)</title><rect x="7.9555%" y="293" width="8.2977%" height="15" fill="rgb(242,107,0)" fg:x="93" fg:w="97"/><text x="8.2055%" y="303.50">arrow_csv::r..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (97 samples, 8.30%)</title><rect x="7.9555%" y="277" width="8.2977%" height="15" fill="rgb(251,28,31)" fg:x="93" fg:w="97"/><text x="8.2055%" y="287.50">arrow_csv::r..</text></g><g><title>csv_core::reader::Reader::read_record (76 samples, 6.50%)</title><rect x="9.7519%" y="261" width="6.5013%" height="15" fill="rgb(233,223,10)" fg:x="114" fg:w="76"/><text x="10.0019%" y="271.50">csv_core:..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (4 samples, 0.34%)</title><rect x="16.3388%" y="277" width="0.3422%" height="15" fill="rgb(215,21,27)" fg:x="191" fg:w="4"/><text x="16.5888%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.26%)</title><rect x="16.4243%" y="261" width="0.2566%" height="15" fill="rgb(232,23,21)" fg:x="192" fg:w="3"/><text x="16.6743%" y="271.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (36 samples, 3.08%)</title><rect x="17.6219%" y="213" width="3.0796%" height="15" fill="rgb(244,5,23)" fg:x="206" fg:w="36"/><text x="17.8719%" y="223.50">arr..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (4 samples, 0.34%)</title><rect x="20.3593%" y="197" width="0.3422%" height="15" fill="rgb(226,81,46)" fg:x="238" fg:w="4"/><text x="20.6093%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (4 samples, 0.34%)</title><rect x="20.3593%" y="181" width="0.3422%" height="15" fill="rgb(247,70,30)" fg:x="238" fg:w="4"/><text x="20.6093%" y="191.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="20.6159%" y="165" width="0.0855%" height="15" fill="rgb(212,68,19)" fg:x="241" fg:w="1"/><text x="20.8659%" y="175.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (1 samples, 0.09%)</title><rect x="20.7015%" y="213" width="0.0855%" height="15" fill="rgb(240,187,13)" fg:x="242" fg:w="1"/><text x="20.9515%" y="223.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (49 samples, 4.19%)</title><rect x="16.6809%" y="229" width="4.1916%" height="15" fill="rgb(223,113,26)" fg:x="195" fg:w="49"/><text x="16.9309%" y="239.50">&lt;arro..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::with_capacity (1 samples, 0.09%)</title><rect x="20.7870%" y="213" width="0.0855%" height="15" fill="rgb(206,192,2)" fg:x="243" fg:w="1"/><text x="21.0370%" y="223.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="20.7870%" y="197" width="0.0855%" height="15" fill="rgb(241,108,4)" fg:x="243" fg:w="1"/><text x="21.0370%" y="207.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="20.7870%" y="181" width="0.0855%" height="15" fill="rgb(247,173,49)" fg:x="243" fg:w="1"/><text x="21.0370%" y="191.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (156 samples, 13.34%)</title><rect x="7.6133%" y="309" width="13.3447%" height="15" fill="rgb(224,114,35)" fg:x="89" fg:w="156"/><text x="7.8633%" y="319.50">arrow_csv::reader::B..</text></g><g><title>arrow_csv::reader::Decoder::flush (55 samples, 4.70%)</title><rect x="16.2532%" y="293" width="4.7049%" height="15" fill="rgb(245,159,27)" fg:x="190" fg:w="55"/><text x="16.5032%" y="303.50">arrow..</text></g><g><title>core::iter::adapters::try_process (50 samples, 4.28%)</title><rect x="16.6809%" y="277" width="4.2772%" height="15" fill="rgb(245,172,44)" fg:x="195" fg:w="50"/><text x="16.9309%" y="287.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 4.28%)</title><rect x="16.6809%" y="261" width="4.2772%" height="15" fill="rgb(236,23,11)" fg:x="195" fg:w="50"/><text x="16.9309%" y="271.50">&lt;allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 4.28%)</title><rect x="16.6809%" y="245" width="4.2772%" height="15" fill="rgb(205,117,38)" fg:x="195" fg:w="50"/><text x="16.9309%" y="255.50">&lt;core..</text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="20.8725%" y="229" width="0.0855%" height="15" fill="rgb(237,72,25)" fg:x="244" fg:w="1"/><text x="21.1225%" y="239.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build (3 samples, 0.26%)</title><rect x="20.9581%" y="309" width="0.2566%" height="15" fill="rgb(244,70,9)" fg:x="245" fg:w="3"/><text x="21.2081%" y="319.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build_decoder (3 samples, 0.26%)</title><rect x="20.9581%" y="293" width="0.2566%" height="15" fill="rgb(217,125,39)" fg:x="245" fg:w="3"/><text x="21.2081%" y="303.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (3 samples, 0.26%)</title><rect x="20.9581%" y="277" width="0.2566%" height="15" fill="rgb(235,36,10)" fg:x="245" fg:w="3"/><text x="21.2081%" y="287.50"></text></g><g><title>cfree (7 samples, 0.60%)</title><rect x="21.2147%" y="309" width="0.5988%" height="15" fill="rgb(251,123,47)" fg:x="248" fg:w="7"/><text x="21.4647%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;dyn arrow_array::array::Array&gt;&gt;&gt; (1 samples, 0.09%)</title><rect x="21.8135%" y="277" width="0.0855%" height="15" fill="rgb(221,13,13)" fg:x="255" fg:w="1"/><text x="22.0635%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (8 samples, 0.68%)</title><rect x="21.8135%" y="309" width="0.6843%" height="15" fill="rgb(238,131,9)" fg:x="255" fg:w="8"/><text x="22.0635%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.68%)</title><rect x="21.8135%" y="293" width="0.6843%" height="15" fill="rgb(211,50,8)" fg:x="255" fg:w="8"/><text x="22.0635%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (7 samples, 0.60%)</title><rect x="21.8991%" y="277" width="0.5988%" height="15" fill="rgb(245,182,24)" fg:x="256" fg:w="7"/><text x="22.1491%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.60%)</title><rect x="21.8991%" y="261" width="0.5988%" height="15" fill="rgb(242,14,37)" fg:x="256" fg:w="7"/><text x="22.1491%" y="271.50"></text></g><g><title>cfree (7 samples, 0.60%)</title><rect x="21.8991%" y="245" width="0.5988%" height="15" fill="rgb(246,228,12)" fg:x="256" fg:w="7"/><text x="22.1491%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.51%)</title><rect x="23.6955%" y="293" width="0.5133%" height="15" fill="rgb(213,55,15)" fg:x="277" fg:w="6"/><text x="23.9455%" y="303.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="24.2087%" y="293" width="0.0855%" height="15" fill="rgb(209,9,3)" fg:x="283" fg:w="1"/><text x="24.4587%" y="303.50"></text></g><g><title>posix_memalign (1 samples, 0.09%)</title><rect x="24.2087%" y="277" width="0.0855%" height="15" fill="rgb(230,59,30)" fg:x="283" fg:w="1"/><text x="24.4587%" y="287.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.17%)</title><rect x="24.2943%" y="293" width="0.1711%" height="15" fill="rgb(209,121,21)" fg:x="284" fg:w="2"/><text x="24.5443%" y="303.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.17%)</title><rect x="24.2943%" y="277" width="0.1711%" height="15" fill="rgb(220,109,13)" fg:x="284" fg:w="2"/><text x="24.5443%" y="287.50"></text></g><g><title>cfree (19 samples, 1.63%)</title><rect x="24.4654%" y="293" width="1.6253%" height="15" fill="rgb(232,18,1)" fg:x="286" fg:w="19"/><text x="24.7154%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (36 samples, 3.08%)</title><rect x="26.0907%" y="293" width="3.0796%" height="15" fill="rgb(215,41,42)" fg:x="305" fg:w="36"/><text x="26.3407%" y="303.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 1.63%)</title><rect x="27.5449%" y="277" width="1.6253%" height="15" fill="rgb(224,123,36)" fg:x="322" fg:w="19"/><text x="27.7949%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (8 samples, 0.68%)</title><rect x="30.3678%" y="277" width="0.6843%" height="15" fill="rgb(240,125,3)" fg:x="355" fg:w="8"/><text x="30.6178%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (2 samples, 0.17%)</title><rect x="31.0522%" y="277" width="0.1711%" height="15" fill="rgb(205,98,50)" fg:x="363" fg:w="2"/><text x="31.3022%" y="287.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (4 samples, 0.34%)</title><rect x="31.2233%" y="277" width="0.3422%" height="15" fill="rgb(205,185,37)" fg:x="365" fg:w="4"/><text x="31.4733%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (2 samples, 0.17%)</title><rect x="31.3944%" y="261" width="0.1711%" height="15" fill="rgb(238,207,15)" fg:x="367" fg:w="2"/><text x="31.6444%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (29 samples, 2.48%)</title><rect x="29.1702%" y="293" width="2.4808%" height="15" fill="rgb(213,199,42)" fg:x="341" fg:w="29"/><text x="29.4202%" y="303.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="31.5654%" y="277" width="0.0855%" height="15" fill="rgb(235,201,11)" fg:x="369" fg:w="1"/><text x="31.8154%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (3 samples, 0.26%)</title><rect x="32.5920%" y="277" width="0.2566%" height="15" fill="rgb(207,46,11)" fg:x="381" fg:w="3"/><text x="32.8420%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (8 samples, 0.68%)</title><rect x="32.8486%" y="277" width="0.6843%" height="15" fill="rgb(241,35,35)" fg:x="384" fg:w="8"/><text x="33.0986%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (142 samples, 12.15%)</title><rect x="22.4979%" y="309" width="12.1471%" height="15" fill="rgb(243,32,47)" fg:x="263" fg:w="142"/><text x="22.7479%" y="319.50">nemscraper::proces..</text></g><g><title>nemscraper::process::utils::clean_str (35 samples, 2.99%)</title><rect x="31.6510%" y="293" width="2.9940%" height="15" fill="rgb(247,202,23)" fg:x="370" fg:w="35"/><text x="31.9010%" y="303.50">nem..</text></g><g><title>malloc (13 samples, 1.11%)</title><rect x="33.5329%" y="277" width="1.1121%" height="15" fill="rgb(219,102,11)" fg:x="392" fg:w="13"/><text x="33.7829%" y="287.50"></text></g><g><title>arrow_cast::cast::cast (1 samples, 0.09%)</title><rect x="34.6450%" y="261" width="0.0855%" height="15" fill="rgb(243,110,44)" fg:x="405" fg:w="1"/><text x="34.8950%" y="271.50"></text></g><g><title>arrow_cast::cast::cast_with_options (1 samples, 0.09%)</title><rect x="34.6450%" y="245" width="0.0855%" height="15" fill="rgb(222,74,54)" fg:x="405" fg:w="1"/><text x="34.8950%" y="255.50"></text></g><g><title>arrow_cast::cast::cast_with_options (1 samples, 0.09%)</title><rect x="34.6450%" y="229" width="0.0855%" height="15" fill="rgb(216,99,12)" fg:x="405" fg:w="1"/><text x="34.8950%" y="239.50"></text></g><g><title>arrow_array::array::make_array (1 samples, 0.09%)</title><rect x="34.6450%" y="213" width="0.0855%" height="15" fill="rgb(226,22,26)" fg:x="405" fg:w="1"/><text x="34.8950%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (10 samples, 0.86%)</title><rect x="34.9872%" y="229" width="0.8554%" height="15" fill="rgb(217,163,10)" fg:x="409" fg:w="10"/><text x="35.2372%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (9 samples, 0.77%)</title><rect x="35.0727%" y="213" width="0.7699%" height="15" fill="rgb(213,25,53)" fg:x="410" fg:w="9"/><text x="35.3227%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (5 samples, 0.43%)</title><rect x="35.4149%" y="197" width="0.4277%" height="15" fill="rgb(252,105,26)" fg:x="414" fg:w="5"/><text x="35.6649%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.17%)</title><rect x="35.9281%" y="213" width="0.1711%" height="15" fill="rgb(220,39,43)" fg:x="420" fg:w="2"/><text x="36.1781%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.17%)</title><rect x="35.9281%" y="197" width="0.1711%" height="15" fill="rgb(229,68,48)" fg:x="420" fg:w="2"/><text x="36.1781%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="36.0992%" y="181" width="0.0855%" height="15" fill="rgb(252,8,32)" fg:x="422" fg:w="1"/><text x="36.3492%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="36.1848%" y="181" width="0.0855%" height="15" fill="rgb(223,20,43)" fg:x="423" fg:w="1"/><text x="36.4348%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="36.1848%" y="165" width="0.0855%" height="15" fill="rgb(229,81,49)" fg:x="423" fg:w="1"/><text x="36.4348%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="36.1848%" y="149" width="0.0855%" height="15" fill="rgb(236,28,36)" fg:x="423" fg:w="1"/><text x="36.4348%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="36.1848%" y="133" width="0.0855%" height="15" fill="rgb(249,185,26)" fg:x="423" fg:w="1"/><text x="36.4348%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (1 samples, 0.09%)</title><rect x="36.1848%" y="117" width="0.0855%" height="15" fill="rgb(249,174,33)" fg:x="423" fg:w="1"/><text x="36.4348%" y="127.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="36.0992%" y="213" width="0.2566%" height="15" fill="rgb(233,201,37)" fg:x="422" fg:w="3"/><text x="36.3492%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.26%)</title><rect x="36.0992%" y="197" width="0.2566%" height="15" fill="rgb(221,78,26)" fg:x="422" fg:w="3"/><text x="36.3492%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="36.2703%" y="181" width="0.0855%" height="15" fill="rgb(250,127,30)" fg:x="424" fg:w="1"/><text x="36.5203%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (20 samples, 1.71%)</title><rect x="34.7305%" y="261" width="1.7109%" height="15" fill="rgb(230,49,44)" fg:x="406" fg:w="20"/><text x="34.9805%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (20 samples, 1.71%)</title><rect x="34.7305%" y="245" width="1.7109%" height="15" fill="rgb(229,67,23)" fg:x="406" fg:w="20"/><text x="34.9805%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (7 samples, 0.60%)</title><rect x="35.8426%" y="229" width="0.5988%" height="15" fill="rgb(249,83,47)" fg:x="419" fg:w="7"/><text x="36.0926%" y="239.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="36.3559%" y="213" width="0.0855%" height="15" fill="rgb(215,43,3)" fg:x="425" fg:w="1"/><text x="36.6059%" y="223.50"></text></g><g><title>malloc (2 samples, 0.17%)</title><rect x="40.8041%" y="229" width="0.1711%" height="15" fill="rgb(238,154,13)" fg:x="477" fg:w="2"/><text x="41.0541%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (63 samples, 5.39%)</title><rect x="38.2378%" y="245" width="5.3892%" height="15" fill="rgb(219,56,2)" fg:x="447" fg:w="63"/><text x="38.4878%" y="255.50">&lt;parque..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (31 samples, 2.65%)</title><rect x="40.9752%" y="229" width="2.6518%" height="15" fill="rgb(233,0,4)" fg:x="479" fg:w="31"/><text x="41.2252%" y="239.50">pa..</text></g><g><title>ahash::random_state::RandomState::hash_one (3 samples, 0.26%)</title><rect x="43.3704%" y="213" width="0.2566%" height="15" fill="rgb(235,30,7)" fg:x="507" fg:w="3"/><text x="43.6204%" y="223.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="43.9692%" y="229" width="0.0855%" height="15" fill="rgb(250,79,13)" fg:x="514" fg:w="1"/><text x="44.2192%" y="239.50"></text></g><g><title>malloc (2 samples, 0.17%)</title><rect x="44.0547%" y="229" width="0.1711%" height="15" fill="rgb(211,146,34)" fg:x="515" fg:w="2"/><text x="44.3047%" y="239.50"></text></g><g><title>&lt;parquet::encodings::encoding::PlainEncoder&lt;T&gt; as parquet::encodings::encoding::Encoder&lt;T&gt;&gt;::put (1 samples, 0.09%)</title><rect x="45.0813%" y="213" width="0.0855%" height="15" fill="rgb(228,22,38)" fg:x="527" fg:w="1"/><text x="45.3313%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="45.0813%" y="197" width="0.0855%" height="15" fill="rgb(235,168,5)" fg:x="527" fg:w="1"/><text x="45.3313%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="45.0813%" y="181" width="0.0855%" height="15" fill="rgb(221,155,16)" fg:x="527" fg:w="1"/><text x="45.3313%" y="191.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="45.0813%" y="165" width="0.0855%" height="15" fill="rgb(215,215,53)" fg:x="527" fg:w="1"/><text x="45.3313%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="45.1668%" y="213" width="0.0855%" height="15" fill="rgb(223,4,10)" fg:x="528" fg:w="1"/><text x="45.4168%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="45.1668%" y="197" width="0.0855%" height="15" fill="rgb(234,103,6)" fg:x="528" fg:w="1"/><text x="45.4168%" y="207.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="45.1668%" y="181" width="0.0855%" height="15" fill="rgb(227,97,0)" fg:x="528" fg:w="1"/><text x="45.4168%" y="191.50"></text></g><g><title>parquet::column::writer::compare_greater (12 samples, 1.03%)</title><rect x="45.2524%" y="213" width="1.0265%" height="15" fill="rgb(234,150,53)" fg:x="529" fg:w="12"/><text x="45.5024%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.17%)</title><rect x="49.8717%" y="197" width="0.1711%" height="15" fill="rgb(228,201,54)" fg:x="583" fg:w="2"/><text x="50.1217%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="49.8717%" y="181" width="0.1711%" height="15" fill="rgb(222,22,37)" fg:x="583" fg:w="2"/><text x="50.1217%" y="191.50"></text></g><g><title>__libc_realloc (2 samples, 0.17%)</title><rect x="49.8717%" y="165" width="0.1711%" height="15" fill="rgb(237,53,32)" fg:x="583" fg:w="2"/><text x="50.1217%" y="175.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (83 samples, 7.10%)</title><rect x="43.6270%" y="245" width="7.1001%" height="15" fill="rgb(233,25,53)" fg:x="510" fg:w="83"/><text x="43.8770%" y="255.50">&lt;parquet::..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (76 samples, 6.50%)</title><rect x="44.2258%" y="229" width="6.5013%" height="15" fill="rgb(210,40,34)" fg:x="517" fg:w="76"/><text x="44.4758%" y="239.50">parquet::..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (52 samples, 4.45%)</title><rect x="46.2789%" y="213" width="4.4482%" height="15" fill="rgb(241,220,44)" fg:x="541" fg:w="52"/><text x="46.5289%" y="223.50">parqu..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.68%)</title><rect x="50.0428%" y="197" width="0.6843%" height="15" fill="rgb(235,28,35)" fg:x="585" fg:w="8"/><text x="50.2928%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.17%)</title><rect x="50.8127%" y="229" width="0.1711%" height="15" fill="rgb(210,56,17)" fg:x="594" fg:w="2"/><text x="51.0627%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.26%)</title><rect x="50.9837%" y="197" width="0.2566%" height="15" fill="rgb(224,130,29)" fg:x="596" fg:w="3"/><text x="51.2337%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.26%)</title><rect x="50.9837%" y="181" width="0.2566%" height="15" fill="rgb(235,212,8)" fg:x="596" fg:w="3"/><text x="51.2337%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (4 samples, 0.34%)</title><rect x="50.9837%" y="229" width="0.3422%" height="15" fill="rgb(223,33,50)" fg:x="596" fg:w="4"/><text x="51.2337%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (4 samples, 0.34%)</title><rect x="50.9837%" y="213" width="0.3422%" height="15" fill="rgb(219,149,13)" fg:x="596" fg:w="4"/><text x="51.2337%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="51.2404%" y="197" width="0.0855%" height="15" fill="rgb(250,156,29)" fg:x="599" fg:w="1"/><text x="51.4904%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="56.2019%" y="181" width="0.0855%" height="15" fill="rgb(216,193,19)" fg:x="657" fg:w="1"/><text x="56.4519%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="56.2874%" y="181" width="0.0855%" height="15" fill="rgb(216,135,14)" fg:x="658" fg:w="1"/><text x="56.5374%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (45 samples, 3.85%)</title><rect x="52.8657%" y="197" width="3.8494%" height="15" fill="rgb(241,47,5)" fg:x="618" fg:w="45"/><text x="53.1157%" y="207.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (4 samples, 0.34%)</title><rect x="56.3730%" y="181" width="0.3422%" height="15" fill="rgb(233,42,35)" fg:x="659" fg:w="4"/><text x="56.6230%" y="191.50"></text></g><g><title>brotli::enc::backward_references::adv_prepare_distance_cache (1 samples, 0.09%)</title><rect x="56.7151%" y="197" width="0.0855%" height="15" fill="rgb(231,13,6)" fg:x="663" fg:w="1"/><text x="56.9651%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (61 samples, 5.22%)</title><rect x="51.9247%" y="213" width="5.2181%" height="15" fill="rgb(207,181,40)" fg:x="607" fg:w="61"/><text x="52.1747%" y="223.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (4 samples, 0.34%)</title><rect x="56.8007%" y="197" width="0.3422%" height="15" fill="rgb(254,173,49)" fg:x="664" fg:w="4"/><text x="57.0507%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (6 samples, 0.51%)</title><rect x="57.1429%" y="213" width="0.5133%" height="15" fill="rgb(221,1,38)" fg:x="668" fg:w="6"/><text x="57.3929%" y="223.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (6 samples, 0.51%)</title><rect x="57.1429%" y="197" width="0.5133%" height="15" fill="rgb(206,124,46)" fg:x="668" fg:w="6"/><text x="57.3929%" y="207.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="57.5706%" y="181" width="0.0855%" height="15" fill="rgb(249,21,11)" fg:x="673" fg:w="1"/><text x="57.8206%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="57.6561%" y="213" width="0.0855%" height="15" fill="rgb(222,201,40)" fg:x="674" fg:w="1"/><text x="57.9061%" y="223.50"></text></g><g><title>brotli::enc::backward_references::TestStaticDictionaryItem (2 samples, 0.17%)</title><rect x="63.8152%" y="165" width="0.1711%" height="15" fill="rgb(235,61,29)" fg:x="746" fg:w="2"/><text x="64.0652%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (8 samples, 0.68%)</title><rect x="63.9863%" y="165" width="0.6843%" height="15" fill="rgb(219,207,3)" fg:x="748" fg:w="8"/><text x="64.2363%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (80 samples, 6.84%)</title><rect x="57.9127%" y="197" width="6.8435%" height="15" fill="rgb(222,56,46)" fg:x="677" fg:w="80"/><text x="58.1627%" y="207.50">brotli::e..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (59 samples, 5.05%)</title><rect x="59.7092%" y="181" width="5.0470%" height="15" fill="rgb(239,76,54)" fg:x="698" fg:w="59"/><text x="59.9592%" y="191.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="64.6707%" y="165" width="0.0855%" height="15" fill="rgb(231,124,27)" fg:x="756" fg:w="1"/><text x="64.9207%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.09%)</title><rect x="65.4405%" y="133" width="0.0855%" height="15" fill="rgb(249,195,6)" fg:x="765" fg:w="1"/><text x="65.6905%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.17%)</title><rect x="65.4405%" y="149" width="0.1711%" height="15" fill="rgb(237,174,47)" fg:x="765" fg:w="2"/><text x="65.6905%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="65.5261%" y="133" width="0.0855%" height="15" fill="rgb(206,201,31)" fg:x="766" fg:w="1"/><text x="65.7761%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.09%)</title><rect x="65.6116%" y="149" width="0.0855%" height="15" fill="rgb(231,57,52)" fg:x="767" fg:w="1"/><text x="65.8616%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (9 samples, 0.77%)</title><rect x="65.3550%" y="165" width="0.7699%" height="15" fill="rgb(248,177,22)" fg:x="764" fg:w="9"/><text x="65.6050%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (5 samples, 0.43%)</title><rect x="65.6972%" y="149" width="0.4277%" height="15" fill="rgb(215,211,37)" fg:x="768" fg:w="5"/><text x="65.9472%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (10 samples, 0.86%)</title><rect x="65.3550%" y="181" width="0.8554%" height="15" fill="rgb(241,128,51)" fg:x="764" fg:w="10"/><text x="65.6050%" y="191.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="66.1249%" y="165" width="0.0855%" height="15" fill="rgb(227,165,31)" fg:x="773" fg:w="1"/><text x="66.3749%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="66.2104%" y="181" width="0.0855%" height="15" fill="rgb(228,167,24)" fg:x="774" fg:w="1"/><text x="66.4604%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (12 samples, 1.03%)</title><rect x="66.2960%" y="181" width="1.0265%" height="15" fill="rgb(228,143,12)" fg:x="775" fg:w="12"/><text x="66.5460%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (31 samples, 2.65%)</title><rect x="64.7562%" y="197" width="2.6518%" height="15" fill="rgb(249,149,8)" fg:x="757" fg:w="31"/><text x="65.0062%" y="207.50">br..</text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="67.3225%" y="181" width="0.0855%" height="15" fill="rgb(243,35,44)" fg:x="787" fg:w="1"/><text x="67.5725%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (12 samples, 1.03%)</title><rect x="67.4080%" y="197" width="1.0265%" height="15" fill="rgb(246,89,9)" fg:x="788" fg:w="12"/><text x="67.6580%" y="207.50"></text></g><g><title>brotli::enc::encode::ChooseHasher (1 samples, 0.09%)</title><rect x="68.3490%" y="181" width="0.0855%" height="15" fill="rgb(233,213,13)" fg:x="799" fg:w="1"/><text x="68.5990%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (11 samples, 0.94%)</title><rect x="68.4346%" y="197" width="0.9410%" height="15" fill="rgb(233,141,41)" fg:x="800" fg:w="11"/><text x="68.6846%" y="207.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="69.2900%" y="181" width="0.0855%" height="15" fill="rgb(239,167,4)" fg:x="810" fg:w="1"/><text x="69.5400%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (138 samples, 11.80%)</title><rect x="57.7417%" y="213" width="11.8050%" height="15" fill="rgb(209,217,16)" fg:x="675" fg:w="138"/><text x="57.9917%" y="223.50">brotli::enc::write..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (2 samples, 0.17%)</title><rect x="69.3755%" y="197" width="0.1711%" height="15" fill="rgb(219,88,35)" fg:x="811" fg:w="2"/><text x="69.6255%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (2 samples, 0.17%)</title><rect x="69.3755%" y="181" width="0.1711%" height="15" fill="rgb(220,193,23)" fg:x="811" fg:w="2"/><text x="69.6255%" y="191.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (214 samples, 18.31%)</title><rect x="51.3259%" y="229" width="18.3062%" height="15" fill="rgb(230,90,52)" fg:x="600" fg:w="214"/><text x="51.5759%" y="239.50">&lt;parquet::compression::brotli..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="69.5466%" y="213" width="0.0855%" height="15" fill="rgb(252,106,19)" fg:x="813" fg:w="1"/><text x="69.7966%" y="223.50"></text></g><g><title>brotli::enc::backward_references::UnionHasher&lt;Alloc&gt;::free (1 samples, 0.09%)</title><rect x="69.5466%" y="197" width="0.0855%" height="15" fill="rgb(206,74,20)" fg:x="813" fg:w="1"/><text x="69.7966%" y="207.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.09%)</title><rect x="69.6322%" y="229" width="0.0855%" height="15" fill="rgb(230,138,44)" fg:x="814" fg:w="1"/><text x="69.8822%" y="239.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="69.7177%" y="229" width="0.0855%" height="15" fill="rgb(235,182,43)" fg:x="815" fg:w="1"/><text x="69.9677%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (226 samples, 19.33%)</title><rect x="50.7271%" y="245" width="19.3328%" height="15" fill="rgb(242,16,51)" fg:x="593" fg:w="226"/><text x="50.9771%" y="255.50">parquet::column::writer::Gener..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (3 samples, 0.26%)</title><rect x="69.8033%" y="229" width="0.2566%" height="15" fill="rgb(248,9,4)" fg:x="816" fg:w="3"/><text x="70.0533%" y="239.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="75.0214%" y="181" width="0.0855%" height="15" fill="rgb(210,31,22)" fg:x="877" fg:w="1"/><text x="75.2714%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (60 samples, 5.13%)</title><rect x="70.3165%" y="213" width="5.1326%" height="15" fill="rgb(239,54,39)" fg:x="822" fg:w="60"/><text x="70.5665%" y="223.50">brotli..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (50 samples, 4.28%)</title><rect x="71.1719%" y="197" width="4.2772%" height="15" fill="rgb(230,99,41)" fg:x="832" fg:w="50"/><text x="71.4219%" y="207.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (4 samples, 0.34%)</title><rect x="75.1069%" y="181" width="0.3422%" height="15" fill="rgb(253,106,12)" fg:x="878" fg:w="4"/><text x="75.3569%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="75.4491%" y="213" width="0.0855%" height="15" fill="rgb(213,46,41)" fg:x="882" fg:w="1"/><text x="75.6991%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (4 samples, 0.34%)</title><rect x="75.5346%" y="197" width="0.3422%" height="15" fill="rgb(215,133,35)" fg:x="883" fg:w="4"/><text x="75.7846%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (2 samples, 0.17%)</title><rect x="75.7057%" y="181" width="0.1711%" height="15" fill="rgb(213,28,5)" fg:x="885" fg:w="2"/><text x="75.9557%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (485 samples, 41.49%)</title><rect x="34.6450%" y="277" width="41.4885%" height="15" fill="rgb(215,77,49)" fg:x="405" fg:w="485"/><text x="34.8950%" y="287.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (464 samples, 39.69%)</title><rect x="36.4414%" y="261" width="39.6920%" height="15" fill="rgb(248,100,22)" fg:x="426" fg:w="464"/><text x="36.6914%" y="271.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_inte..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (71 samples, 6.07%)</title><rect x="70.0599%" y="245" width="6.0736%" height="15" fill="rgb(208,67,9)" fg:x="819" fg:w="71"/><text x="70.3099%" y="255.50">parquet:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (71 samples, 6.07%)</title><rect x="70.0599%" y="229" width="6.0736%" height="15" fill="rgb(219,133,21)" fg:x="819" fg:w="71"/><text x="70.3099%" y="239.50">&lt;parquet..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 0.60%)</title><rect x="75.5346%" y="213" width="0.5988%" height="15" fill="rgb(246,46,29)" fg:x="883" fg:w="7"/><text x="75.7846%" y="223.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (3 samples, 0.26%)</title><rect x="75.8768%" y="197" width="0.2566%" height="15" fill="rgb(246,185,52)" fg:x="887" fg:w="3"/><text x="76.1268%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::try_new (1 samples, 0.09%)</title><rect x="76.1334%" y="261" width="0.0855%" height="15" fill="rgb(252,136,11)" fg:x="890" fg:w="1"/><text x="76.3834%" y="271.50"></text></g><g><title>&lt;arrow_schema::datatype::DataType as core::cmp::PartialEq&gt;::eq (1 samples, 0.09%)</title><rect x="76.1334%" y="245" width="0.0855%" height="15" fill="rgb(219,138,53)" fg:x="890" fg:w="1"/><text x="76.3834%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (493 samples, 42.17%)</title><rect x="34.6450%" y="309" width="42.1728%" height="15" fill="rgb(211,51,23)" fg:x="405" fg:w="493"/><text x="34.8950%" y="319.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (493 samples, 42.17%)</title><rect x="34.6450%" y="293" width="42.1728%" height="15" fill="rgb(247,221,28)" fg:x="405" fg:w="493"/><text x="34.8950%" y="303.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (8 samples, 0.68%)</title><rect x="76.1334%" y="277" width="0.6843%" height="15" fill="rgb(251,222,45)" fg:x="890" fg:w="8"/><text x="76.3834%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (7 samples, 0.60%)</title><rect x="76.2190%" y="261" width="0.5988%" height="15" fill="rgb(217,162,53)" fg:x="891" fg:w="7"/><text x="76.4690%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.17%)</title><rect x="76.6467%" y="245" width="0.1711%" height="15" fill="rgb(229,93,14)" fg:x="896" fg:w="2"/><text x="76.8967%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.17%)</title><rect x="76.6467%" y="229" width="0.1711%" height="15" fill="rgb(209,67,49)" fg:x="896" fg:w="2"/><text x="76.8967%" y="239.50"></text></g><g><title>malloc (2 samples, 0.17%)</title><rect x="76.6467%" y="213" width="0.1711%" height="15" fill="rgb(213,87,29)" fg:x="896" fg:w="2"/><text x="76.8967%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.60%)</title><rect x="76.9033%" y="261" width="0.5988%" height="15" fill="rgb(205,151,52)" fg:x="899" fg:w="7"/><text x="77.1533%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (7 samples, 0.60%)</title><rect x="76.9033%" y="245" width="0.5988%" height="15" fill="rgb(253,215,39)" fg:x="899" fg:w="7"/><text x="77.1533%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.60%)</title><rect x="76.9033%" y="229" width="0.5988%" height="15" fill="rgb(221,220,41)" fg:x="899" fg:w="7"/><text x="77.1533%" y="239.50"></text></g><g><title>write (7 samples, 0.60%)</title><rect x="76.9033%" y="213" width="0.5988%" height="15" fill="rgb(218,133,21)" fg:x="899" fg:w="7"/><text x="77.1533%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.5021%" y="245" width="0.0855%" height="15" fill="rgb(221,193,43)" fg:x="906" fg:w="1"/><text x="77.7521%" y="255.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (833 samples, 71.26%)</title><rect x="6.4157%" y="325" width="71.2575%" height="15" fill="rgb(240,128,52)" fg:x="75" fg:w="833"/><text x="6.6657%" y="335.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (10 samples, 0.86%)</title><rect x="76.8178%" y="309" width="0.8554%" height="15" fill="rgb(253,114,12)" fg:x="898" fg:w="10"/><text x="77.0678%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (10 samples, 0.86%)</title><rect x="76.8178%" y="293" width="0.8554%" height="15" fill="rgb(215,223,47)" fg:x="898" fg:w="10"/><text x="77.0678%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.86%)</title><rect x="76.8178%" y="277" width="0.8554%" height="15" fill="rgb(248,225,23)" fg:x="898" fg:w="10"/><text x="77.0678%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.17%)</title><rect x="77.5021%" y="261" width="0.1711%" height="15" fill="rgb(250,108,0)" fg:x="906" fg:w="2"/><text x="77.7521%" y="271.50"></text></g><g><title>tracing_core::field::ValueSet::record (1 samples, 0.09%)</title><rect x="77.5877%" y="245" width="0.0855%" height="15" fill="rgb(228,208,7)" fg:x="907" fg:w="1"/><text x="77.8377%" y="255.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_core::field::Visit&gt;::record_debug (1 samples, 0.09%)</title><rect x="77.5877%" y="229" width="0.0855%" height="15" fill="rgb(244,45,10)" fg:x="907" fg:w="1"/><text x="77.8377%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.5877%" y="213" width="0.0855%" height="15" fill="rgb(207,125,25)" fg:x="907" fg:w="1"/><text x="77.8377%" y="223.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 0.77%)</title><rect x="78.8708%" y="309" width="0.7699%" height="15" fill="rgb(210,195,18)" fg:x="922" fg:w="9"/><text x="79.1208%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (918 samples, 78.53%)</title><rect x="1.8820%" y="373" width="78.5287%" height="15" fill="rgb(249,80,12)" fg:x="22" fg:w="918"/><text x="2.1320%" y="383.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (911 samples, 77.93%)</title><rect x="2.4808%" y="357" width="77.9299%" height="15" fill="rgb(221,65,9)" fg:x="29" fg:w="911"/><text x="2.7308%" y="367.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (911 samples, 77.93%)</title><rect x="2.4808%" y="341" width="77.9299%" height="15" fill="rgb(235,49,36)" fg:x="29" fg:w="911"/><text x="2.7308%" y="351.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (32 samples, 2.74%)</title><rect x="77.6732%" y="325" width="2.7374%" height="15" fill="rgb(225,32,20)" fg:x="908" fg:w="32"/><text x="77.9232%" y="335.50">st..</text></g><g><title>core::str::converts::from_utf8 (9 samples, 0.77%)</title><rect x="79.6407%" y="309" width="0.7699%" height="15" fill="rgb(215,141,46)" fg:x="931" fg:w="9"/><text x="79.8907%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (1 samples, 0.09%)</title><rect x="80.4106%" y="341" width="0.0855%" height="15" fill="rgb(250,160,47)" fg:x="940" fg:w="1"/><text x="80.6606%" y="351.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="80.4106%" y="325" width="0.0855%" height="15" fill="rgb(216,222,40)" fg:x="940" fg:w="1"/><text x="80.6606%" y="335.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="80.4962%" y="181" width="0.0855%" height="15" fill="rgb(234,217,39)" fg:x="941" fg:w="1"/><text x="80.7462%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="80.4962%" y="165" width="0.0855%" height="15" fill="rgb(207,178,40)" fg:x="941" fg:w="1"/><text x="80.7462%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (2 samples, 0.17%)</title><rect x="80.4962%" y="341" width="0.1711%" height="15" fill="rgb(221,136,13)" fg:x="941" fg:w="2"/><text x="80.7462%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.17%)</title><rect x="80.4962%" y="325" width="0.1711%" height="15" fill="rgb(249,199,10)" fg:x="941" fg:w="2"/><text x="80.7462%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.17%)</title><rect x="80.4962%" y="309" width="0.1711%" height="15" fill="rgb(249,222,13)" fg:x="941" fg:w="2"/><text x="80.7462%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.17%)</title><rect x="80.4962%" y="293" width="0.1711%" height="15" fill="rgb(244,185,38)" fg:x="941" fg:w="2"/><text x="80.7462%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.17%)</title><rect x="80.4962%" y="277" width="0.1711%" height="15" fill="rgb(236,202,9)" fg:x="941" fg:w="2"/><text x="80.7462%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.17%)</title><rect x="80.4962%" y="261" width="0.1711%" height="15" fill="rgb(250,229,37)" fg:x="941" fg:w="2"/><text x="80.7462%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.17%)</title><rect x="80.4962%" y="245" width="0.1711%" height="15" fill="rgb(206,174,23)" fg:x="941" fg:w="2"/><text x="80.7462%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.17%)</title><rect x="80.4962%" y="229" width="0.1711%" height="15" fill="rgb(211,33,43)" fg:x="941" fg:w="2"/><text x="80.7462%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.17%)</title><rect x="80.4962%" y="213" width="0.1711%" height="15" fill="rgb(245,58,50)" fg:x="941" fg:w="2"/><text x="80.7462%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="80.4962%" y="197" width="0.1711%" height="15" fill="rgb(244,68,36)" fg:x="941" fg:w="2"/><text x="80.7462%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="80.5817%" y="181" width="0.0855%" height="15" fill="rgb(232,229,15)" fg:x="942" fg:w="1"/><text x="80.8317%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="80.5817%" y="165" width="0.0855%" height="15" fill="rgb(254,30,23)" fg:x="942" fg:w="1"/><text x="80.8317%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="80.5817%" y="149" width="0.0855%" height="15" fill="rgb(235,160,14)" fg:x="942" fg:w="1"/><text x="80.8317%" y="159.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (8 samples, 0.68%)</title><rect x="80.7528%" y="309" width="0.6843%" height="15" fill="rgb(212,155,44)" fg:x="944" fg:w="8"/><text x="81.0028%" y="319.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (8 samples, 0.68%)</title><rect x="80.7528%" y="293" width="0.6843%" height="15" fill="rgb(226,2,50)" fg:x="944" fg:w="8"/><text x="81.0028%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record (7 samples, 0.60%)</title><rect x="80.8383%" y="277" width="0.5988%" height="15" fill="rgb(234,177,6)" fg:x="945" fg:w="7"/><text x="81.0883%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.09%)</title><rect x="81.4371%" y="293" width="0.0855%" height="15" fill="rgb(217,24,9)" fg:x="952" fg:w="1"/><text x="81.6871%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (15 samples, 1.28%)</title><rect x="80.7528%" y="325" width="1.2831%" height="15" fill="rgb(220,13,46)" fg:x="944" fg:w="15"/><text x="81.0028%" y="335.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (7 samples, 0.60%)</title><rect x="81.4371%" y="309" width="0.5988%" height="15" fill="rgb(239,221,27)" fg:x="952" fg:w="7"/><text x="81.6871%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.51%)</title><rect x="81.5227%" y="293" width="0.5133%" height="15" fill="rgb(222,198,25)" fg:x="953" fg:w="6"/><text x="81.7727%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.51%)</title><rect x="81.5227%" y="277" width="0.5133%" height="15" fill="rgb(211,99,13)" fg:x="953" fg:w="6"/><text x="81.7727%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.51%)</title><rect x="81.5227%" y="261" width="0.5133%" height="15" fill="rgb(232,111,31)" fg:x="953" fg:w="6"/><text x="81.7727%" y="271.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (6 samples, 0.51%)</title><rect x="81.5227%" y="245" width="0.5133%" height="15" fill="rgb(245,82,37)" fg:x="953" fg:w="6"/><text x="81.7727%" y="255.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (4 samples, 0.34%)</title><rect x="81.6938%" y="229" width="0.3422%" height="15" fill="rgb(227,149,46)" fg:x="955" fg:w="4"/><text x="81.9438%" y="239.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.17%)</title><rect x="81.8648%" y="213" width="0.1711%" height="15" fill="rgb(218,36,50)" fg:x="957" fg:w="2"/><text x="82.1148%" y="223.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.17%)</title><rect x="81.8648%" y="197" width="0.1711%" height="15" fill="rgb(226,80,48)" fg:x="957" fg:w="2"/><text x="82.1148%" y="207.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 0.26%)</title><rect x="82.0359%" y="309" width="0.2566%" height="15" fill="rgb(238,224,15)" fg:x="959" fg:w="3"/><text x="82.2859%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.09%)</title><rect x="82.2070%" y="293" width="0.0855%" height="15" fill="rgb(241,136,10)" fg:x="961" fg:w="1"/><text x="82.4570%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (2 samples, 0.17%)</title><rect x="82.2926%" y="309" width="0.1711%" height="15" fill="rgb(208,32,45)" fg:x="962" fg:w="2"/><text x="82.5426%" y="319.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (1 samples, 0.09%)</title><rect x="82.3781%" y="293" width="0.0855%" height="15" fill="rgb(207,135,9)" fg:x="963" fg:w="1"/><text x="82.6281%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (8 samples, 0.68%)</title><rect x="82.0359%" y="325" width="0.6843%" height="15" fill="rgb(206,86,44)" fg:x="959" fg:w="8"/><text x="82.2859%" y="335.50"></text></g><g><title>nemscraper::process::utils::clean_str (3 samples, 0.26%)</title><rect x="82.4636%" y="309" width="0.2566%" height="15" fill="rgb(245,177,15)" fg:x="964" fg:w="3"/><text x="82.7136%" y="319.50"></text></g><g><title>malloc (2 samples, 0.17%)</title><rect x="82.5492%" y="293" width="0.1711%" height="15" fill="rgb(206,64,50)" fg:x="965" fg:w="2"/><text x="82.7992%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.09%)</title><rect x="82.7203%" y="277" width="0.0855%" height="15" fill="rgb(234,36,40)" fg:x="967" fg:w="1"/><text x="82.9703%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.09%)</title><rect x="82.7203%" y="261" width="0.0855%" height="15" fill="rgb(213,64,8)" fg:x="967" fg:w="1"/><text x="82.9703%" y="271.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.09%)</title><rect x="82.7203%" y="245" width="0.0855%" height="15" fill="rgb(210,75,36)" fg:x="967" fg:w="1"/><text x="82.9703%" y="255.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.09%)</title><rect x="82.7203%" y="229" width="0.0855%" height="15" fill="rgb(229,88,21)" fg:x="967" fg:w="1"/><text x="82.9703%" y="239.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="82.7203%" y="213" width="0.0855%" height="15" fill="rgb(252,204,47)" fg:x="967" fg:w="1"/><text x="82.9703%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (6 samples, 0.51%)</title><rect x="82.8058%" y="261" width="0.5133%" height="15" fill="rgb(208,77,27)" fg:x="968" fg:w="6"/><text x="83.0558%" y="271.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.17%)</title><rect x="83.1480%" y="245" width="0.1711%" height="15" fill="rgb(221,76,26)" fg:x="972" fg:w="2"/><text x="83.3980%" y="255.50"></text></g><g><title>parquet::column::writer::compare_greater (3 samples, 0.26%)</title><rect x="83.4046%" y="229" width="0.2566%" height="15" fill="rgb(225,139,18)" fg:x="975" fg:w="3"/><text x="83.6546%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (9 samples, 0.77%)</title><rect x="83.3191%" y="261" width="0.7699%" height="15" fill="rgb(230,137,11)" fg:x="974" fg:w="9"/><text x="83.5691%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (9 samples, 0.77%)</title><rect x="83.3191%" y="245" width="0.7699%" height="15" fill="rgb(212,28,1)" fg:x="974" fg:w="9"/><text x="83.5691%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (5 samples, 0.43%)</title><rect x="83.6612%" y="229" width="0.4277%" height="15" fill="rgb(248,164,17)" fg:x="978" fg:w="5"/><text x="83.9112%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="84.0890%" y="245" width="0.0855%" height="15" fill="rgb(222,171,42)" fg:x="983" fg:w="1"/><text x="84.3390%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="84.0890%" y="229" width="0.0855%" height="15" fill="rgb(243,84,45)" fg:x="983" fg:w="1"/><text x="84.3390%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="84.0890%" y="213" width="0.0855%" height="15" fill="rgb(252,49,23)" fg:x="983" fg:w="1"/><text x="84.3390%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.09%)</title><rect x="84.0890%" y="197" width="0.0855%" height="15" fill="rgb(215,19,7)" fg:x="983" fg:w="1"/><text x="84.3390%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="84.1745%" y="229" width="0.0855%" height="15" fill="rgb(238,81,41)" fg:x="984" fg:w="1"/><text x="84.4245%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="84.1745%" y="213" width="0.0855%" height="15" fill="rgb(210,199,37)" fg:x="984" fg:w="1"/><text x="84.4245%" y="223.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="84.1745%" y="197" width="0.0855%" height="15" fill="rgb(244,192,49)" fg:x="984" fg:w="1"/><text x="84.4245%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (6 samples, 0.51%)</title><rect x="84.2601%" y="213" width="0.5133%" height="15" fill="rgb(226,211,11)" fg:x="985" fg:w="6"/><text x="84.5101%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (5 samples, 0.43%)</title><rect x="84.3456%" y="197" width="0.4277%" height="15" fill="rgb(236,162,54)" fg:x="986" fg:w="5"/><text x="84.5956%" y="207.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="84.6022%" y="181" width="0.1711%" height="15" fill="rgb(220,229,9)" fg:x="989" fg:w="2"/><text x="84.8522%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="84.7733%" y="213" width="0.0855%" height="15" fill="rgb(250,87,22)" fg:x="991" fg:w="1"/><text x="85.0233%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="84.7733%" y="197" width="0.0855%" height="15" fill="rgb(239,43,17)" fg:x="991" fg:w="1"/><text x="85.0233%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="84.7733%" y="181" width="0.0855%" height="15" fill="rgb(231,177,25)" fg:x="991" fg:w="1"/><text x="85.0233%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="84.7733%" y="165" width="0.0855%" height="15" fill="rgb(219,179,1)" fg:x="991" fg:w="1"/><text x="85.0233%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (10 samples, 0.86%)</title><rect x="84.0890%" y="261" width="0.8554%" height="15" fill="rgb(238,219,53)" fg:x="983" fg:w="10"/><text x="84.3390%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (9 samples, 0.77%)</title><rect x="84.1745%" y="245" width="0.7699%" height="15" fill="rgb(232,167,36)" fg:x="984" fg:w="9"/><text x="84.4245%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (8 samples, 0.68%)</title><rect x="84.2601%" y="229" width="0.6843%" height="15" fill="rgb(244,19,51)" fg:x="985" fg:w="8"/><text x="84.5101%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="84.8589%" y="213" width="0.0855%" height="15" fill="rgb(224,6,22)" fg:x="992" fg:w="1"/><text x="85.1089%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (32 samples, 2.74%)</title><rect x="82.7203%" y="325" width="2.7374%" height="15" fill="rgb(224,145,5)" fg:x="967" fg:w="32"/><text x="82.9703%" y="335.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (32 samples, 2.74%)</title><rect x="82.7203%" y="309" width="2.7374%" height="15" fill="rgb(234,130,49)" fg:x="967" fg:w="32"/><text x="82.9703%" y="319.50">pa..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (32 samples, 2.74%)</title><rect x="82.7203%" y="293" width="2.7374%" height="15" fill="rgb(254,6,2)" fg:x="967" fg:w="32"/><text x="82.9703%" y="303.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (31 samples, 2.65%)</title><rect x="82.8058%" y="277" width="2.6518%" height="15" fill="rgb(208,96,46)" fg:x="968" fg:w="31"/><text x="83.0558%" y="287.50">pa..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (6 samples, 0.51%)</title><rect x="84.9444%" y="261" width="0.5133%" height="15" fill="rgb(239,3,39)" fg:x="993" fg:w="6"/><text x="85.1944%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (6 samples, 0.51%)</title><rect x="84.9444%" y="245" width="0.5133%" height="15" fill="rgb(233,210,1)" fg:x="993" fg:w="6"/><text x="85.1944%" y="255.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (6 samples, 0.51%)</title><rect x="84.9444%" y="229" width="0.5133%" height="15" fill="rgb(244,137,37)" fg:x="993" fg:w="6"/><text x="85.1944%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (6 samples, 0.51%)</title><rect x="84.9444%" y="213" width="0.5133%" height="15" fill="rgb(240,136,2)" fg:x="993" fg:w="6"/><text x="85.1944%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (57 samples, 4.88%)</title><rect x="80.6672%" y="341" width="4.8760%" height="15" fill="rgb(239,18,37)" fg:x="943" fg:w="57"/><text x="80.9172%" y="351.50">nemscr..</text></g><g><title>std::sys::pal::unix::time::Timespec::now (1 samples, 0.09%)</title><rect x="85.4577%" y="325" width="0.0855%" height="15" fill="rgb(218,185,22)" fg:x="999" fg:w="1"/><text x="85.7077%" y="335.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="85.4577%" y="309" width="0.0855%" height="15" fill="rgb(225,218,4)" fg:x="999" fg:w="1"/><text x="85.7077%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (64 samples, 5.47%)</title><rect x="80.4106%" y="373" width="5.4748%" height="15" fill="rgb(230,182,32)" fg:x="940" fg:w="64"/><text x="80.6606%" y="383.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (64 samples, 5.47%)</title><rect x="80.4106%" y="357" width="5.4748%" height="15" fill="rgb(242,56,43)" fg:x="940" fg:w="64"/><text x="80.6606%" y="367.50">nemscra..</text></g><g><title>std::io::append_to_string (4 samples, 0.34%)</title><rect x="85.5432%" y="341" width="0.3422%" height="15" fill="rgb(233,99,24)" fg:x="1000" fg:w="4"/><text x="85.7932%" y="351.50"></text></g><g><title>core::slice::memchr::memchr_aligned (2 samples, 0.17%)</title><rect x="85.7143%" y="325" width="0.1711%" height="15" fill="rgb(234,209,42)" fg:x="1002" fg:w="2"/><text x="85.9643%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.09%)</title><rect x="86.5697%" y="309" width="0.0855%" height="15" fill="rgb(227,7,12)" fg:x="1012" fg:w="1"/><text x="86.8197%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (4 samples, 0.34%)</title><rect x="86.5697%" y="341" width="0.3422%" height="15" fill="rgb(245,203,43)" fg:x="1012" fg:w="4"/><text x="86.8197%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (4 samples, 0.34%)</title><rect x="86.5697%" y="325" width="0.3422%" height="15" fill="rgb(238,205,33)" fg:x="1012" fg:w="4"/><text x="86.8197%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (3 samples, 0.26%)</title><rect x="86.6553%" y="309" width="0.2566%" height="15" fill="rgb(231,56,7)" fg:x="1013" fg:w="3"/><text x="86.9053%" y="319.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.09%)</title><rect x="86.8263%" y="293" width="0.0855%" height="15" fill="rgb(244,186,29)" fg:x="1015" fg:w="1"/><text x="87.0763%" y="303.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (73 samples, 6.24%)</title><rect x="87.2541%" y="277" width="6.2447%" height="15" fill="rgb(234,111,31)" fg:x="1020" fg:w="73"/><text x="87.5041%" y="287.50">zlib_rs:..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (2 samples, 0.17%)</title><rect x="93.4987%" y="277" width="0.1711%" height="15" fill="rgb(241,149,10)" fg:x="1093" fg:w="2"/><text x="93.7487%" y="287.50"></text></g><g><title>zlib_rs::inflate::window::Window::extend (1 samples, 0.09%)</title><rect x="93.6698%" y="277" width="0.0855%" height="15" fill="rgb(249,206,44)" fg:x="1095" fg:w="1"/><text x="93.9198%" y="287.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (80 samples, 6.84%)</title><rect x="86.9974%" y="325" width="6.8435%" height="15" fill="rgb(251,153,30)" fg:x="1017" fg:w="80"/><text x="87.2474%" y="335.50">&lt;flate2::..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (80 samples, 6.84%)</title><rect x="86.9974%" y="309" width="6.8435%" height="15" fill="rgb(239,152,38)" fg:x="1017" fg:w="80"/><text x="87.2474%" y="319.50">&lt;flate2::..</text></g><g><title>zlib_rs::inflate::inflate (80 samples, 6.84%)</title><rect x="86.9974%" y="293" width="6.8435%" height="15" fill="rgb(249,139,47)" fg:x="1017" fg:w="80"/><text x="87.2474%" y="303.50">zlib_rs::..</text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (1 samples, 0.09%)</title><rect x="93.7553%" y="277" width="0.0855%" height="15" fill="rgb(244,64,35)" fg:x="1096" fg:w="1"/><text x="94.0053%" y="287.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (86 samples, 7.36%)</title><rect x="86.5697%" y="357" width="7.3567%" height="15" fill="rgb(216,46,15)" fg:x="1012" fg:w="86"/><text x="86.8197%" y="367.50">&lt;zip::read..</text></g><g><title>flate2::zio::read (82 samples, 7.01%)</title><rect x="86.9119%" y="341" width="7.0145%" height="15" fill="rgb(250,74,19)" fg:x="1016" fg:w="82"/><text x="87.1619%" y="351.50">flate2::z..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="93.8409%" y="325" width="0.0855%" height="15" fill="rgb(249,42,33)" fg:x="1097" fg:w="1"/><text x="94.0909%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (18 samples, 1.54%)</title><rect x="93.9264%" y="357" width="1.5398%" height="15" fill="rgb(242,149,17)" fg:x="1098" fg:w="18"/><text x="94.1764%" y="367.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,120 samples, 95.81%)</title><rect x="0.0855%" y="405" width="95.8084%" height="15" fill="rgb(244,29,21)" fg:x="1" fg:w="1120"/><text x="0.3355%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (1,102 samples, 94.27%)</title><rect x="1.6253%" y="389" width="94.2686%" height="15" fill="rgb(220,130,37)" fg:x="19" fg:w="1102"/><text x="1.8753%" y="399.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (117 samples, 10.01%)</title><rect x="85.8854%" y="373" width="10.0086%" height="15" fill="rgb(211,67,2)" fg:x="1004" fg:w="117"/><text x="86.1354%" y="383.50">std::io::appen..</text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.43%)</title><rect x="95.4662%" y="357" width="0.4277%" height="15" fill="rgb(235,68,52)" fg:x="1116" fg:w="5"/><text x="95.7162%" y="367.50"></text></g><g><title>bench_zip_to_pa (1,126 samples, 96.32%)</title><rect x="0.0000%" y="565" width="96.3216%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,126 samples, 96.32%)</title><rect x="0.0000%" y="549" width="96.3216%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,126 samples, 96.32%)</title><rect x="0.0000%" y="533" width="96.3216%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,126 samples, 96.32%)</title><rect x="0.0000%" y="517" width="96.3216%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,126 samples, 96.32%)</title><rect x="0.0000%" y="501" width="96.3216%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,126 samples, 96.32%)</title><rect x="0.0000%" y="485" width="96.3216%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,126 samples, 96.32%)</title><rect x="0.0000%" y="469" width="96.3216%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,126 samples, 96.32%)</title><rect x="0.0000%" y="453" width="96.3216%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,126 samples, 96.32%)</title><rect x="0.0000%" y="437" width="96.3216%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,126 samples, 96.32%)</title><rect x="0.0000%" y="421" width="96.3216%" height="15" fill="rgb(243,201,19)" fg:x="0" fg:w="1126"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (5 samples, 0.43%)</title><rect x="95.8939%" y="405" width="0.4277%" height="15" fill="rgb(236,59,4)" fg:x="1121" fg:w="5"/><text x="96.1439%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.34%)</title><rect x="95.9795%" y="389" width="0.3422%" height="15" fill="rgb(254,179,45)" fg:x="1122" fg:w="4"/><text x="96.2295%" y="399.50"></text></g><g><title>syscall (4 samples, 0.34%)</title><rect x="95.9795%" y="373" width="0.3422%" height="15" fill="rgb(226,14,10)" fg:x="1122" fg:w="4"/><text x="96.2295%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (1 samples, 0.09%)</title><rect x="96.3216%" y="373" width="0.0855%" height="15" fill="rgb(244,27,41)" fg:x="1126" fg:w="1"/><text x="96.5716%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.09%)</title><rect x="96.4072%" y="341" width="0.0855%" height="15" fill="rgb(235,35,32)" fg:x="1127" fg:w="1"/><text x="96.6572%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (7 samples, 0.60%)</title><rect x="96.4072%" y="373" width="0.5988%" height="15" fill="rgb(218,68,31)" fg:x="1127" fg:w="7"/><text x="96.6572%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (7 samples, 0.60%)</title><rect x="96.4072%" y="357" width="0.5988%" height="15" fill="rgb(207,120,37)" fg:x="1127" fg:w="7"/><text x="96.6572%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 0.51%)</title><rect x="96.4927%" y="341" width="0.5133%" height="15" fill="rgb(227,98,0)" fg:x="1128" fg:w="6"/><text x="96.7427%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (6 samples, 0.51%)</title><rect x="96.4927%" y="325" width="0.5133%" height="15" fill="rgb(207,7,3)" fg:x="1128" fg:w="6"/><text x="96.7427%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (6 samples, 0.51%)</title><rect x="96.4927%" y="309" width="0.5133%" height="15" fill="rgb(206,98,19)" fg:x="1128" fg:w="6"/><text x="96.7427%" y="319.50"></text></g><g><title>epoll_wait (6 samples, 0.51%)</title><rect x="96.4927%" y="293" width="0.5133%" height="15" fill="rgb(217,5,26)" fg:x="1128" fg:w="6"/><text x="96.7427%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.26%)</title><rect x="97.0060%" y="357" width="0.2566%" height="15" fill="rgb(235,190,38)" fg:x="1134" fg:w="3"/><text x="97.2560%" y="367.50"></text></g><g><title>syscall (3 samples, 0.26%)</title><rect x="97.0060%" y="341" width="0.2566%" height="15" fill="rgb(247,86,24)" fg:x="1134" fg:w="3"/><text x="97.2560%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.34%)</title><rect x="97.2626%" y="357" width="0.3422%" height="15" fill="rgb(205,101,16)" fg:x="1137" fg:w="4"/><text x="97.5126%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.34%)</title><rect x="97.2626%" y="341" width="0.3422%" height="15" fill="rgb(246,168,33)" fg:x="1137" fg:w="4"/><text x="97.5126%" y="351.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (4 samples, 0.34%)</title><rect x="97.2626%" y="325" width="0.3422%" height="15" fill="rgb(231,114,1)" fg:x="1137" fg:w="4"/><text x="97.5126%" y="335.50"></text></g><g><title>write (4 samples, 0.34%)</title><rect x="97.2626%" y="309" width="0.3422%" height="15" fill="rgb(207,184,53)" fg:x="1137" fg:w="4"/><text x="97.5126%" y="319.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.09%)</title><rect x="97.6903%" y="213" width="0.0855%" height="15" fill="rgb(224,95,51)" fg:x="1142" fg:w="1"/><text x="97.9403%" y="223.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (10 samples, 0.86%)</title><rect x="97.6903%" y="277" width="0.8554%" height="15" fill="rgb(212,188,45)" fg:x="1142" fg:w="10"/><text x="97.9403%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (10 samples, 0.86%)</title><rect x="97.6903%" y="261" width="0.8554%" height="15" fill="rgb(223,154,38)" fg:x="1142" fg:w="10"/><text x="97.9403%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (10 samples, 0.86%)</title><rect x="97.6903%" y="245" width="0.8554%" height="15" fill="rgb(251,22,52)" fg:x="1142" fg:w="10"/><text x="97.9403%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (10 samples, 0.86%)</title><rect x="97.6903%" y="229" width="0.8554%" height="15" fill="rgb(229,209,22)" fg:x="1142" fg:w="10"/><text x="97.9403%" y="239.50"></text></g><g><title>syscall (9 samples, 0.77%)</title><rect x="97.7759%" y="213" width="0.7699%" height="15" fill="rgb(234,138,34)" fg:x="1143" fg:w="9"/><text x="98.0259%" y="223.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (2 samples, 0.17%)</title><rect x="98.5458%" y="181" width="0.1711%" height="15" fill="rgb(212,95,11)" fg:x="1152" fg:w="2"/><text x="98.7958%" y="191.50"></text></g><g><title>rustls::vecbuf::ChunkVecBuffer::consume (1 samples, 0.09%)</title><rect x="98.6313%" y="165" width="0.0855%" height="15" fill="rgb(240,179,47)" fg:x="1153" fg:w="1"/><text x="98.8813%" y="175.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="98.6313%" y="149" width="0.0855%" height="15" fill="rgb(240,163,11)" fg:x="1153" fg:w="1"/><text x="98.8813%" y="159.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (2 samples, 0.17%)</title><rect x="98.8024%" y="133" width="0.1711%" height="15" fill="rgb(236,37,12)" fg:x="1155" fg:w="2"/><text x="99.0524%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (2 samples, 0.17%)</title><rect x="98.8024%" y="117" width="0.1711%" height="15" fill="rgb(232,164,16)" fg:x="1155" fg:w="2"/><text x="99.0524%" y="127.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="98.8879%" y="101" width="0.0855%" height="15" fill="rgb(244,205,15)" fg:x="1156" fg:w="1"/><text x="99.1379%" y="111.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (6 samples, 0.51%)</title><rect x="98.7169%" y="165" width="0.5133%" height="15" fill="rgb(223,117,47)" fg:x="1154" fg:w="6"/><text x="98.9669%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (5 samples, 0.43%)</title><rect x="98.8024%" y="149" width="0.4277%" height="15" fill="rgb(244,107,35)" fg:x="1155" fg:w="5"/><text x="99.0524%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (3 samples, 0.26%)</title><rect x="98.9735%" y="133" width="0.2566%" height="15" fill="rgb(205,140,8)" fg:x="1157" fg:w="3"/><text x="99.2235%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (3 samples, 0.26%)</title><rect x="98.9735%" y="117" width="0.2566%" height="15" fill="rgb(228,84,46)" fg:x="1157" fg:w="3"/><text x="99.2235%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (3 samples, 0.26%)</title><rect x="98.9735%" y="101" width="0.2566%" height="15" fill="rgb(254,188,9)" fg:x="1157" fg:w="3"/><text x="99.2235%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (2 samples, 0.17%)</title><rect x="99.0590%" y="85" width="0.1711%" height="15" fill="rgb(206,112,54)" fg:x="1158" fg:w="2"/><text x="99.3090%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (1 samples, 0.09%)</title><rect x="99.1446%" y="69" width="0.0855%" height="15" fill="rgb(216,84,49)" fg:x="1159" fg:w="1"/><text x="99.3946%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.09%)</title><rect x="99.1446%" y="53" width="0.0855%" height="15" fill="rgb(214,194,35)" fg:x="1159" fg:w="1"/><text x="99.3946%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.09%)</title><rect x="99.1446%" y="37" width="0.0855%" height="15" fill="rgb(249,28,3)" fg:x="1159" fg:w="1"/><text x="99.3946%" y="47.50"></text></g><g><title>all (1,169 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(222,56,52)" fg:x="0" fg:w="1169"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (43 samples, 3.68%)</title><rect x="96.3216%" y="565" width="3.6784%" height="15" fill="rgb(245,217,50)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="575.50">toki..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (43 samples, 3.68%)</title><rect x="96.3216%" y="549" width="3.6784%" height="15" fill="rgb(213,201,24)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="559.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (43 samples, 3.68%)</title><rect x="96.3216%" y="533" width="3.6784%" height="15" fill="rgb(248,116,28)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="543.50">core..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (43 samples, 3.68%)</title><rect x="96.3216%" y="517" width="3.6784%" height="15" fill="rgb(219,72,43)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="527.50">std:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (43 samples, 3.68%)</title><rect x="96.3216%" y="501" width="3.6784%" height="15" fill="rgb(209,138,14)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="511.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (43 samples, 3.68%)</title><rect x="96.3216%" y="485" width="3.6784%" height="15" fill="rgb(222,18,33)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="495.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (43 samples, 3.68%)</title><rect x="96.3216%" y="469" width="3.6784%" height="15" fill="rgb(213,199,7)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="479.50">toki..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 3.68%)</title><rect x="96.3216%" y="453" width="3.6784%" height="15" fill="rgb(250,110,10)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="463.50">&lt;tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (43 samples, 3.68%)</title><rect x="96.3216%" y="437" width="3.6784%" height="15" fill="rgb(248,123,6)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="447.50">toki..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (43 samples, 3.68%)</title><rect x="96.3216%" y="421" width="3.6784%" height="15" fill="rgb(206,91,31)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="431.50">toki..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (43 samples, 3.68%)</title><rect x="96.3216%" y="405" width="3.6784%" height="15" fill="rgb(211,154,13)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="415.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (43 samples, 3.68%)</title><rect x="96.3216%" y="389" width="3.6784%" height="15" fill="rgb(225,148,7)" fg:x="1126" fg:w="43"/><text x="96.5716%" y="399.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (35 samples, 2.99%)</title><rect x="97.0060%" y="373" width="2.9940%" height="15" fill="rgb(220,160,43)" fg:x="1134" fg:w="35"/><text x="97.2560%" y="383.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (28 samples, 2.40%)</title><rect x="97.6048%" y="357" width="2.3952%" height="15" fill="rgb(213,52,39)" fg:x="1141" fg:w="28"/><text x="97.8548%" y="367.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (28 samples, 2.40%)</title><rect x="97.6048%" y="341" width="2.3952%" height="15" fill="rgb(243,137,7)" fg:x="1141" fg:w="28"/><text x="97.8548%" y="351.50">to..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (28 samples, 2.40%)</title><rect x="97.6048%" y="325" width="2.3952%" height="15" fill="rgb(230,79,13)" fg:x="1141" fg:w="28"/><text x="97.8548%" y="335.50">&lt;f..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (28 samples, 2.40%)</title><rect x="97.6048%" y="309" width="2.3952%" height="15" fill="rgb(247,105,23)" fg:x="1141" fg:w="28"/><text x="97.8548%" y="319.50">&lt;h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (27 samples, 2.31%)</title><rect x="97.6903%" y="293" width="2.3097%" height="15" fill="rgb(223,179,41)" fg:x="1142" fg:w="27"/><text x="97.9403%" y="303.50">h..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (17 samples, 1.45%)</title><rect x="98.5458%" y="277" width="1.4542%" height="15" fill="rgb(218,9,34)" fg:x="1152" fg:w="17"/><text x="98.7958%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (17 samples, 1.45%)</title><rect x="98.5458%" y="261" width="1.4542%" height="15" fill="rgb(222,106,8)" fg:x="1152" fg:w="17"/><text x="98.7958%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (17 samples, 1.45%)</title><rect x="98.5458%" y="245" width="1.4542%" height="15" fill="rgb(211,220,0)" fg:x="1152" fg:w="17"/><text x="98.7958%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (17 samples, 1.45%)</title><rect x="98.5458%" y="229" width="1.4542%" height="15" fill="rgb(229,52,16)" fg:x="1152" fg:w="17"/><text x="98.7958%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (17 samples, 1.45%)</title><rect x="98.5458%" y="213" width="1.4542%" height="15" fill="rgb(212,155,18)" fg:x="1152" fg:w="17"/><text x="98.7958%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (17 samples, 1.45%)</title><rect x="98.5458%" y="197" width="1.4542%" height="15" fill="rgb(242,21,14)" fg:x="1152" fg:w="17"/><text x="98.7958%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (15 samples, 1.28%)</title><rect x="98.7169%" y="181" width="1.2831%" height="15" fill="rgb(222,19,48)" fg:x="1154" fg:w="15"/><text x="98.9669%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (9 samples, 0.77%)</title><rect x="99.2301%" y="165" width="0.7699%" height="15" fill="rgb(232,45,27)" fg:x="1160" fg:w="9"/><text x="99.4801%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (8 samples, 0.68%)</title><rect x="99.3157%" y="149" width="0.6843%" height="15" fill="rgb(249,103,42)" fg:x="1161" fg:w="8"/><text x="99.5657%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.68%)</title><rect x="99.3157%" y="133" width="0.6843%" height="15" fill="rgb(246,81,33)" fg:x="1161" fg:w="8"/><text x="99.5657%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (8 samples, 0.68%)</title><rect x="99.3157%" y="117" width="0.6843%" height="15" fill="rgb(252,33,42)" fg:x="1161" fg:w="8"/><text x="99.5657%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (8 samples, 0.68%)</title><rect x="99.3157%" y="101" width="0.6843%" height="15" fill="rgb(209,212,41)" fg:x="1161" fg:w="8"/><text x="99.5657%" y="111.50"></text></g><g><title>recv (8 samples, 0.68%)</title><rect x="99.3157%" y="85" width="0.6843%" height="15" fill="rgb(207,154,6)" fg:x="1161" fg:w="8"/><text x="99.5657%" y="95.50"></text></g></svg></svg>