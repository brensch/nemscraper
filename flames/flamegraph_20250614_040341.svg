<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1152"><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.61%)</title><rect x="0.7812%" y="229" width="0.6076%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="7"/><text x="1.0312%" y="239.50"></text></g><g><title>syscall (7 samples, 0.61%)</title><rect x="0.7812%" y="213" width="0.6076%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="7"/><text x="1.0312%" y="223.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="1.3889%" y="229" width="0.0868%" height="15" fill="rgb(221,193,54)" fg:x="16" fg:w="1"/><text x="1.6389%" y="239.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::push_remote_task (1 samples, 0.09%)</title><rect x="1.3889%" y="213" width="0.0868%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="1"/><text x="1.6389%" y="223.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1 samples, 0.09%)</title><rect x="1.4757%" y="229" width="0.0868%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="1"/><text x="1.7257%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (1 samples, 0.09%)</title><rect x="1.4757%" y="213" width="0.0868%" height="15" fill="rgb(232,128,0)" fg:x="17" fg:w="1"/><text x="1.7257%" y="223.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="1.4757%" y="197" width="0.0868%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="1"/><text x="1.7257%" y="207.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="1.4757%" y="181" width="0.0868%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="1"/><text x="1.7257%" y="191.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (13 samples, 1.13%)</title><rect x="0.5208%" y="389" width="1.1285%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="13"/><text x="0.7708%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (13 samples, 1.13%)</title><rect x="0.5208%" y="373" width="1.1285%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="13"/><text x="0.7708%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (13 samples, 1.13%)</title><rect x="0.5208%" y="357" width="1.1285%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="13"/><text x="0.7708%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (13 samples, 1.13%)</title><rect x="0.5208%" y="341" width="1.1285%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="13"/><text x="0.7708%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (13 samples, 1.13%)</title><rect x="0.5208%" y="325" width="1.1285%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="13"/><text x="0.7708%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 1.13%)</title><rect x="0.5208%" y="309" width="1.1285%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="13"/><text x="0.7708%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (13 samples, 1.13%)</title><rect x="0.5208%" y="293" width="1.1285%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="13"/><text x="0.7708%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (13 samples, 1.13%)</title><rect x="0.5208%" y="277" width="1.1285%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="13"/><text x="0.7708%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 0.87%)</title><rect x="0.7812%" y="261" width="0.8681%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="10"/><text x="1.0312%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 0.87%)</title><rect x="0.7812%" y="245" width="0.8681%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="10"/><text x="1.0312%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (1 samples, 0.09%)</title><rect x="1.5625%" y="229" width="0.0868%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="1.8125%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.09%)</title><rect x="1.6493%" y="389" width="0.0868%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="1"/><text x="1.8993%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.09%)</title><rect x="1.6493%" y="373" width="0.0868%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="1"/><text x="1.8993%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="2.5174%" y="357" width="0.0868%" height="15" fill="rgb(235,183,28)" fg:x="29" fg:w="1"/><text x="2.7674%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="2.5174%" y="341" width="0.0868%" height="15" fill="rgb(221,5,38)" fg:x="29" fg:w="1"/><text x="2.7674%" y="351.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="2.5174%" y="325" width="0.0868%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="1"/><text x="2.7674%" y="335.50"></text></g><g><title>mremap (1 samples, 0.09%)</title><rect x="2.5174%" y="309" width="0.0868%" height="15" fill="rgb(241,131,45)" fg:x="29" fg:w="1"/><text x="2.7674%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (2 samples, 0.17%)</title><rect x="2.7778%" y="325" width="0.1736%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="2"/><text x="3.0278%" y="335.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (16 samples, 1.39%)</title><rect x="2.9514%" y="325" width="1.3889%" height="15" fill="rgb(225,111,53)" fg:x="34" fg:w="16"/><text x="3.2014%" y="335.50"></text></g><g><title>malloc (15 samples, 1.30%)</title><rect x="3.0382%" y="309" width="1.3021%" height="15" fill="rgb(238,160,17)" fg:x="35" fg:w="15"/><text x="3.2882%" y="319.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.09%)</title><rect x="4.3403%" y="293" width="0.0868%" height="15" fill="rgb(214,148,48)" fg:x="50" fg:w="1"/><text x="4.5903%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.09%)</title><rect x="4.3403%" y="277" width="0.0868%" height="15" fill="rgb(232,36,49)" fg:x="50" fg:w="1"/><text x="4.5903%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.09%)</title><rect x="4.3403%" y="261" width="0.0868%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="1"/><text x="4.5903%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.09%)</title><rect x="4.3403%" y="245" width="0.0868%" height="15" fill="rgb(229,88,8)" fg:x="50" fg:w="1"/><text x="4.5903%" y="255.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.09%)</title><rect x="4.4271%" y="293" width="0.0868%" height="15" fill="rgb(213,181,19)" fg:x="51" fg:w="1"/><text x="4.6771%" y="303.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.09%)</title><rect x="4.4271%" y="277" width="0.0868%" height="15" fill="rgb(254,191,54)" fg:x="51" fg:w="1"/><text x="4.6771%" y="287.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.17%)</title><rect x="4.5139%" y="197" width="0.1736%" height="15" fill="rgb(241,83,37)" fg:x="52" fg:w="2"/><text x="4.7639%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="4.6007%" y="181" width="0.0868%" height="15" fill="rgb(233,36,39)" fg:x="53" fg:w="1"/><text x="4.8507%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="4.6007%" y="165" width="0.0868%" height="15" fill="rgb(226,3,54)" fg:x="53" fg:w="1"/><text x="4.8507%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (5 samples, 0.43%)</title><rect x="4.3403%" y="309" width="0.4340%" height="15" fill="rgb(245,192,40)" fg:x="50" fg:w="5"/><text x="4.5903%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (3 samples, 0.26%)</title><rect x="4.5139%" y="293" width="0.2604%" height="15" fill="rgb(238,167,29)" fg:x="52" fg:w="3"/><text x="4.7639%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (3 samples, 0.26%)</title><rect x="4.5139%" y="277" width="0.2604%" height="15" fill="rgb(232,182,51)" fg:x="52" fg:w="3"/><text x="4.7639%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (3 samples, 0.26%)</title><rect x="4.5139%" y="261" width="0.2604%" height="15" fill="rgb(231,60,39)" fg:x="52" fg:w="3"/><text x="4.7639%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (3 samples, 0.26%)</title><rect x="4.5139%" y="245" width="0.2604%" height="15" fill="rgb(208,69,12)" fg:x="52" fg:w="3"/><text x="4.7639%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.26%)</title><rect x="4.5139%" y="229" width="0.2604%" height="15" fill="rgb(235,93,37)" fg:x="52" fg:w="3"/><text x="4.7639%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="4.5139%" y="213" width="0.2604%" height="15" fill="rgb(213,116,39)" fg:x="52" fg:w="3"/><text x="4.7639%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="4.6875%" y="197" width="0.0868%" height="15" fill="rgb(222,207,29)" fg:x="54" fg:w="1"/><text x="4.9375%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="4.6875%" y="181" width="0.0868%" height="15" fill="rgb(206,96,30)" fg:x="54" fg:w="1"/><text x="4.9375%" y="191.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.09%)</title><rect x="4.6875%" y="165" width="0.0868%" height="15" fill="rgb(218,138,4)" fg:x="54" fg:w="1"/><text x="4.9375%" y="175.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="4.6875%" y="149" width="0.0868%" height="15" fill="rgb(250,191,14)" fg:x="54" fg:w="1"/><text x="4.9375%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.17%)</title><rect x="4.7743%" y="165" width="0.1736%" height="15" fill="rgb(239,60,40)" fg:x="55" fg:w="2"/><text x="5.0243%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.17%)</title><rect x="4.7743%" y="149" width="0.1736%" height="15" fill="rgb(206,27,48)" fg:x="55" fg:w="2"/><text x="5.0243%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="4.8611%" y="133" width="0.0868%" height="15" fill="rgb(225,35,8)" fg:x="56" fg:w="1"/><text x="5.1111%" y="143.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="4.9479%" y="165" width="0.0868%" height="15" fill="rgb(250,213,24)" fg:x="57" fg:w="1"/><text x="5.1979%" y="175.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="4.9479%" y="149" width="0.0868%" height="15" fill="rgb(247,123,22)" fg:x="57" fg:w="1"/><text x="5.1979%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.35%)</title><rect x="4.7743%" y="197" width="0.3472%" height="15" fill="rgb(231,138,38)" fg:x="55" fg:w="4"/><text x="5.0243%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.35%)</title><rect x="4.7743%" y="181" width="0.3472%" height="15" fill="rgb(231,145,46)" fg:x="55" fg:w="4"/><text x="5.0243%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="5.0347%" y="165" width="0.0868%" height="15" fill="rgb(251,118,11)" fg:x="58" fg:w="1"/><text x="5.2847%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.0347%" y="149" width="0.0868%" height="15" fill="rgb(217,147,25)" fg:x="58" fg:w="1"/><text x="5.2847%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.0347%" y="133" width="0.0868%" height="15" fill="rgb(247,81,37)" fg:x="58" fg:w="1"/><text x="5.2847%" y="143.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (5 samples, 0.43%)</title><rect x="5.2951%" y="149" width="0.4340%" height="15" fill="rgb(209,12,38)" fg:x="61" fg:w="5"/><text x="5.5451%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="5.6424%" y="133" width="0.0868%" height="15" fill="rgb(227,1,9)" fg:x="65" fg:w="1"/><text x="5.8924%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (7 samples, 0.61%)</title><rect x="5.2083%" y="165" width="0.6076%" height="15" fill="rgb(248,47,43)" fg:x="60" fg:w="7"/><text x="5.4583%" y="175.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="5.7292%" y="149" width="0.0868%" height="15" fill="rgb(221,10,30)" fg:x="66" fg:w="1"/><text x="5.9792%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.9028%" y="149" width="0.0868%" height="15" fill="rgb(210,229,1)" fg:x="68" fg:w="1"/><text x="6.1528%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.9028%" y="133" width="0.0868%" height="15" fill="rgb(222,148,37)" fg:x="68" fg:w="1"/><text x="6.1528%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="5.9896%" y="133" width="0.0868%" height="15" fill="rgb(234,67,33)" fg:x="69" fg:w="1"/><text x="6.2396%" y="143.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (16 samples, 1.39%)</title><rect x="4.7743%" y="213" width="1.3889%" height="15" fill="rgb(247,98,35)" fg:x="55" fg:w="16"/><text x="5.0243%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (12 samples, 1.04%)</title><rect x="5.1215%" y="197" width="1.0417%" height="15" fill="rgb(247,138,52)" fg:x="59" fg:w="12"/><text x="5.3715%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (12 samples, 1.04%)</title><rect x="5.1215%" y="181" width="1.0417%" height="15" fill="rgb(213,79,30)" fg:x="59" fg:w="12"/><text x="5.3715%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (4 samples, 0.35%)</title><rect x="5.8160%" y="165" width="0.3472%" height="15" fill="rgb(246,177,23)" fg:x="67" fg:w="4"/><text x="6.0660%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.17%)</title><rect x="5.9896%" y="149" width="0.1736%" height="15" fill="rgb(230,62,27)" fg:x="69" fg:w="2"/><text x="6.2396%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="6.0764%" y="133" width="0.0868%" height="15" fill="rgb(216,154,8)" fg:x="70" fg:w="1"/><text x="6.3264%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (17 samples, 1.48%)</title><rect x="4.7743%" y="293" width="1.4757%" height="15" fill="rgb(244,35,45)" fg:x="55" fg:w="17"/><text x="5.0243%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.48%)</title><rect x="4.7743%" y="277" width="1.4757%" height="15" fill="rgb(251,115,12)" fg:x="55" fg:w="17"/><text x="5.0243%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (17 samples, 1.48%)</title><rect x="4.7743%" y="261" width="1.4757%" height="15" fill="rgb(240,54,50)" fg:x="55" fg:w="17"/><text x="5.0243%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.48%)</title><rect x="4.7743%" y="245" width="1.4757%" height="15" fill="rgb(233,84,52)" fg:x="55" fg:w="17"/><text x="5.0243%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (17 samples, 1.48%)</title><rect x="4.7743%" y="229" width="1.4757%" height="15" fill="rgb(207,117,47)" fg:x="55" fg:w="17"/><text x="5.0243%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (1 samples, 0.09%)</title><rect x="6.1632%" y="213" width="0.0868%" height="15" fill="rgb(249,43,39)" fg:x="71" fg:w="1"/><text x="6.4132%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="6.1632%" y="197" width="0.0868%" height="15" fill="rgb(209,38,44)" fg:x="71" fg:w="1"/><text x="6.4132%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="6.1632%" y="181" width="0.0868%" height="15" fill="rgb(236,212,23)" fg:x="71" fg:w="1"/><text x="6.4132%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="6.1632%" y="165" width="0.0868%" height="15" fill="rgb(242,79,21)" fg:x="71" fg:w="1"/><text x="6.4132%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="6.1632%" y="149" width="0.0868%" height="15" fill="rgb(211,96,35)" fg:x="71" fg:w="1"/><text x="6.4132%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (18 samples, 1.56%)</title><rect x="4.7743%" y="309" width="1.5625%" height="15" fill="rgb(253,215,40)" fg:x="55" fg:w="18"/><text x="5.0243%" y="319.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.09%)</title><rect x="6.2500%" y="293" width="0.0868%" height="15" fill="rgb(211,81,21)" fg:x="72" fg:w="1"/><text x="6.5000%" y="303.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.09%)</title><rect x="6.2500%" y="277" width="0.0868%" height="15" fill="rgb(208,190,38)" fg:x="72" fg:w="1"/><text x="6.5000%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.09%)</title><rect x="6.2500%" y="261" width="0.0868%" height="15" fill="rgb(235,213,38)" fg:x="72" fg:w="1"/><text x="6.5000%" y="271.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="6.2500%" y="245" width="0.0868%" height="15" fill="rgb(237,122,38)" fg:x="72" fg:w="1"/><text x="6.5000%" y="255.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="6.2500%" y="229" width="0.0868%" height="15" fill="rgb(244,218,35)" fg:x="72" fg:w="1"/><text x="6.5000%" y="239.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (25 samples, 2.17%)</title><rect x="4.3403%" y="325" width="2.1701%" height="15" fill="rgb(240,68,47)" fg:x="50" fg:w="25"/><text x="4.5903%" y="335.50">n..</text></g><g><title>std::sys::fs::unix::rename (2 samples, 0.17%)</title><rect x="6.3368%" y="309" width="0.1736%" height="15" fill="rgb(210,16,53)" fg:x="73" fg:w="2"/><text x="6.5868%" y="319.50"></text></g><g><title>rename (2 samples, 0.17%)</title><rect x="6.3368%" y="293" width="0.1736%" height="15" fill="rgb(235,124,12)" fg:x="73" fg:w="2"/><text x="6.5868%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (6 samples, 0.52%)</title><rect x="7.5521%" y="309" width="0.5208%" height="15" fill="rgb(224,169,11)" fg:x="87" fg:w="6"/><text x="7.8021%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.52%)</title><rect x="7.5521%" y="293" width="0.5208%" height="15" fill="rgb(250,166,2)" fg:x="87" fg:w="6"/><text x="7.8021%" y="303.50"></text></g><g><title>__libc_realloc (6 samples, 0.52%)</title><rect x="7.5521%" y="277" width="0.5208%" height="15" fill="rgb(242,216,29)" fg:x="87" fg:w="6"/><text x="7.8021%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.35%)</title><rect x="9.2882%" y="261" width="0.3472%" height="15" fill="rgb(230,116,27)" fg:x="107" fg:w="4"/><text x="9.5382%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.35%)</title><rect x="9.2882%" y="245" width="0.3472%" height="15" fill="rgb(228,99,48)" fg:x="107" fg:w="4"/><text x="9.5382%" y="255.50"></text></g><g><title>__libc_realloc (3 samples, 0.26%)</title><rect x="9.3750%" y="229" width="0.2604%" height="15" fill="rgb(253,11,6)" fg:x="108" fg:w="3"/><text x="9.6250%" y="239.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (75 samples, 6.51%)</title><rect x="8.5938%" y="293" width="6.5104%" height="15" fill="rgb(247,143,39)" fg:x="99" fg:w="75"/><text x="8.8438%" y="303.50">arrow_csv..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (75 samples, 6.51%)</title><rect x="8.5938%" y="277" width="6.5104%" height="15" fill="rgb(236,97,10)" fg:x="99" fg:w="75"/><text x="8.8438%" y="287.50">arrow_csv..</text></g><g><title>csv_core::reader::Reader::read_record (63 samples, 5.47%)</title><rect x="9.6354%" y="261" width="5.4688%" height="15" fill="rgb(233,208,19)" fg:x="111" fg:w="63"/><text x="9.8854%" y="271.50">csv_cor..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.09%)</title><rect x="15.1042%" y="277" width="0.0868%" height="15" fill="rgb(216,164,2)" fg:x="174" fg:w="1"/><text x="15.3542%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (5 samples, 0.43%)</title><rect x="15.1910%" y="277" width="0.4340%" height="15" fill="rgb(220,129,5)" fg:x="175" fg:w="5"/><text x="15.4410%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="15.5382%" y="261" width="0.0868%" height="15" fill="rgb(242,17,10)" fg:x="179" fg:w="1"/><text x="15.7882%" y="271.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (145 samples, 12.59%)</title><rect x="8.0729%" y="309" width="12.5868%" height="15" fill="rgb(242,107,0)" fg:x="93" fg:w="145"/><text x="8.3229%" y="319.50">arrow_csv::reader::..</text></g><g><title>arrow_csv::reader::Decoder::flush (64 samples, 5.56%)</title><rect x="15.1042%" y="293" width="5.5556%" height="15" fill="rgb(251,28,31)" fg:x="174" fg:w="64"/><text x="15.3542%" y="303.50">arrow_c..</text></g><g><title>core::iter::adapters::try_process (58 samples, 5.03%)</title><rect x="15.6250%" y="277" width="5.0347%" height="15" fill="rgb(233,223,10)" fg:x="180" fg:w="58"/><text x="15.8750%" y="287.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (58 samples, 5.03%)</title><rect x="15.6250%" y="261" width="5.0347%" height="15" fill="rgb(215,21,27)" fg:x="180" fg:w="58"/><text x="15.8750%" y="271.50">&lt;alloc..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (58 samples, 5.03%)</title><rect x="15.6250%" y="245" width="5.0347%" height="15" fill="rgb(232,23,21)" fg:x="180" fg:w="58"/><text x="15.8750%" y="255.50">&lt;core:..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (58 samples, 5.03%)</title><rect x="15.6250%" y="229" width="5.0347%" height="15" fill="rgb(244,5,23)" fg:x="180" fg:w="58"/><text x="15.8750%" y="239.50">&lt;arrow..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (44 samples, 3.82%)</title><rect x="16.8403%" y="213" width="3.8194%" height="15" fill="rgb(226,81,46)" fg:x="194" fg:w="44"/><text x="17.0903%" y="223.50">arro..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (3 samples, 0.26%)</title><rect x="20.3993%" y="197" width="0.2604%" height="15" fill="rgb(247,70,30)" fg:x="235" fg:w="3"/><text x="20.6493%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (3 samples, 0.26%)</title><rect x="20.3993%" y="181" width="0.2604%" height="15" fill="rgb(212,68,19)" fg:x="235" fg:w="3"/><text x="20.6493%" y="191.50"></text></g><g><title>cfree (2 samples, 0.17%)</title><rect x="20.4861%" y="165" width="0.1736%" height="15" fill="rgb(240,187,13)" fg:x="236" fg:w="2"/><text x="20.7361%" y="175.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build (2 samples, 0.17%)</title><rect x="20.6597%" y="309" width="0.1736%" height="15" fill="rgb(223,113,26)" fg:x="238" fg:w="2"/><text x="20.9097%" y="319.50"></text></g><g><title>arrow_csv::reader::ReaderBuilder::build_decoder (2 samples, 0.17%)</title><rect x="20.6597%" y="293" width="0.1736%" height="15" fill="rgb(206,192,2)" fg:x="238" fg:w="2"/><text x="20.9097%" y="303.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (2 samples, 0.17%)</title><rect x="20.6597%" y="277" width="0.1736%" height="15" fill="rgb(241,108,4)" fg:x="238" fg:w="2"/><text x="20.9097%" y="287.50"></text></g><g><title>cfree (6 samples, 0.52%)</title><rect x="20.8333%" y="309" width="0.5208%" height="15" fill="rgb(247,173,49)" fg:x="240" fg:w="6"/><text x="21.0833%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (8 samples, 0.69%)</title><rect x="21.3542%" y="309" width="0.6944%" height="15" fill="rgb(224,114,35)" fg:x="246" fg:w="8"/><text x="21.6042%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.69%)</title><rect x="21.3542%" y="293" width="0.6944%" height="15" fill="rgb(245,159,27)" fg:x="246" fg:w="8"/><text x="21.6042%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (7 samples, 0.61%)</title><rect x="21.4410%" y="277" width="0.6076%" height="15" fill="rgb(245,172,44)" fg:x="247" fg:w="7"/><text x="21.6910%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.61%)</title><rect x="21.4410%" y="261" width="0.6076%" height="15" fill="rgb(236,23,11)" fg:x="247" fg:w="7"/><text x="21.6910%" y="271.50"></text></g><g><title>cfree (7 samples, 0.61%)</title><rect x="21.4410%" y="245" width="0.6076%" height="15" fill="rgb(205,117,38)" fg:x="247" fg:w="7"/><text x="21.6910%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.17%)</title><rect x="24.2188%" y="293" width="0.1736%" height="15" fill="rgb(237,72,25)" fg:x="279" fg:w="2"/><text x="24.4688%" y="303.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.17%)</title><rect x="24.2188%" y="277" width="0.1736%" height="15" fill="rgb(244,70,9)" fg:x="279" fg:w="2"/><text x="24.4688%" y="287.50"></text></g><g><title>posix_memalign (2 samples, 0.17%)</title><rect x="24.2188%" y="261" width="0.1736%" height="15" fill="rgb(217,125,39)" fg:x="279" fg:w="2"/><text x="24.4688%" y="271.50"></text></g><g><title>cfree (17 samples, 1.48%)</title><rect x="24.3924%" y="293" width="1.4757%" height="15" fill="rgb(235,36,10)" fg:x="281" fg:w="17"/><text x="24.6424%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (37 samples, 3.21%)</title><rect x="25.8681%" y="293" width="3.2118%" height="15" fill="rgb(251,123,47)" fg:x="298" fg:w="37"/><text x="26.1181%" y="303.50">cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (20 samples, 1.74%)</title><rect x="27.3438%" y="277" width="1.7361%" height="15" fill="rgb(221,13,13)" fg:x="315" fg:w="20"/><text x="27.5938%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (8 samples, 0.69%)</title><rect x="29.8611%" y="277" width="0.6944%" height="15" fill="rgb(238,131,9)" fg:x="344" fg:w="8"/><text x="30.1111%" y="287.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (11 samples, 0.95%)</title><rect x="30.5556%" y="277" width="0.9549%" height="15" fill="rgb(211,50,8)" fg:x="352" fg:w="11"/><text x="30.8056%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_add_offset (2 samples, 0.17%)</title><rect x="31.3368%" y="261" width="0.1736%" height="15" fill="rgb(245,182,24)" fg:x="361" fg:w="2"/><text x="31.5868%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (29 samples, 2.52%)</title><rect x="29.0799%" y="293" width="2.5174%" height="15" fill="rgb(242,14,37)" fg:x="335" fg:w="29"/><text x="29.3299%" y="303.50">ne..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="31.5104%" y="277" width="0.0868%" height="15" fill="rgb(246,228,12)" fg:x="363" fg:w="1"/><text x="31.7604%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (5 samples, 0.43%)</title><rect x="32.7257%" y="277" width="0.4340%" height="15" fill="rgb(213,55,15)" fg:x="377" fg:w="5"/><text x="32.9757%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (143 samples, 12.41%)</title><rect x="22.0486%" y="309" width="12.4132%" height="15" fill="rgb(209,9,3)" fg:x="254" fg:w="143"/><text x="22.2986%" y="319.50">nemscraper::process..</text></g><g><title>nemscraper::process::utils::clean_str (33 samples, 2.86%)</title><rect x="31.5972%" y="293" width="2.8646%" height="15" fill="rgb(230,59,30)" fg:x="364" fg:w="33"/><text x="31.8472%" y="303.50">ne..</text></g><g><title>malloc (15 samples, 1.30%)</title><rect x="33.1597%" y="277" width="1.3021%" height="15" fill="rgb(209,121,21)" fg:x="382" fg:w="15"/><text x="33.4097%" y="287.50"></text></g><g><title>arrow_cast::cast::cast (1 samples, 0.09%)</title><rect x="34.5486%" y="261" width="0.0868%" height="15" fill="rgb(220,109,13)" fg:x="398" fg:w="1"/><text x="34.7986%" y="271.50"></text></g><g><title>arrow_cast::cast::cast_with_options (1 samples, 0.09%)</title><rect x="34.5486%" y="245" width="0.0868%" height="15" fill="rgb(232,18,1)" fg:x="398" fg:w="1"/><text x="34.7986%" y="255.50"></text></g><g><title>arrow_cast::cast::cast_with_options (1 samples, 0.09%)</title><rect x="34.5486%" y="229" width="0.0868%" height="15" fill="rgb(215,41,42)" fg:x="398" fg:w="1"/><text x="34.7986%" y="239.50"></text></g><g><title>arrow_array::array::make_array (1 samples, 0.09%)</title><rect x="34.5486%" y="213" width="0.0868%" height="15" fill="rgb(224,123,36)" fg:x="398" fg:w="1"/><text x="34.7986%" y="223.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="35.0694%" y="213" width="0.0868%" height="15" fill="rgb(240,125,3)" fg:x="404" fg:w="1"/><text x="35.3194%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (6 samples, 0.52%)</title><rect x="35.0694%" y="229" width="0.5208%" height="15" fill="rgb(205,98,50)" fg:x="404" fg:w="6"/><text x="35.3194%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (5 samples, 0.43%)</title><rect x="35.1562%" y="213" width="0.4340%" height="15" fill="rgb(205,185,37)" fg:x="405" fg:w="5"/><text x="35.4062%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.17%)</title><rect x="35.4167%" y="197" width="0.1736%" height="15" fill="rgb(238,207,15)" fg:x="408" fg:w="2"/><text x="35.6667%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="35.6771%" y="213" width="0.1736%" height="15" fill="rgb(213,199,42)" fg:x="411" fg:w="2"/><text x="35.9271%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.17%)</title><rect x="35.6771%" y="197" width="0.1736%" height="15" fill="rgb(235,201,11)" fg:x="411" fg:w="2"/><text x="35.9271%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.17%)</title><rect x="35.6771%" y="181" width="0.1736%" height="15" fill="rgb(207,46,11)" fg:x="411" fg:w="2"/><text x="35.9271%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (15 samples, 1.30%)</title><rect x="34.6354%" y="261" width="1.3021%" height="15" fill="rgb(241,35,35)" fg:x="399" fg:w="15"/><text x="34.8854%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (15 samples, 1.30%)</title><rect x="34.6354%" y="245" width="1.3021%" height="15" fill="rgb(243,32,47)" fg:x="399" fg:w="15"/><text x="34.8854%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.35%)</title><rect x="35.5903%" y="229" width="0.3472%" height="15" fill="rgb(247,202,23)" fg:x="410" fg:w="4"/><text x="35.8403%" y="239.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="35.8507%" y="213" width="0.0868%" height="15" fill="rgb(219,102,11)" fg:x="413" fg:w="1"/><text x="36.1007%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (63 samples, 5.47%)</title><rect x="37.4132%" y="245" width="5.4688%" height="15" fill="rgb(243,110,44)" fg:x="431" fg:w="63"/><text x="37.6632%" y="255.50">&lt;parque..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (31 samples, 2.69%)</title><rect x="40.1910%" y="229" width="2.6910%" height="15" fill="rgb(222,74,54)" fg:x="463" fg:w="31"/><text x="40.4410%" y="239.50">pa..</text></g><g><title>ahash::random_state::RandomState::hash_one (5 samples, 0.43%)</title><rect x="42.4479%" y="213" width="0.4340%" height="15" fill="rgb(216,99,12)" fg:x="489" fg:w="5"/><text x="42.6979%" y="223.50"></text></g><g><title>parquet::column::writer::compare_greater (6 samples, 0.52%)</title><rect x="43.9236%" y="213" width="0.5208%" height="15" fill="rgb(226,22,26)" fg:x="506" fg:w="6"/><text x="44.1736%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (54 samples, 4.69%)</title><rect x="42.8819%" y="245" width="4.6875%" height="15" fill="rgb(217,163,10)" fg:x="494" fg:w="54"/><text x="43.1319%" y="255.50">&lt;parq..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (49 samples, 4.25%)</title><rect x="43.3160%" y="229" width="4.2535%" height="15" fill="rgb(213,25,53)" fg:x="499" fg:w="49"/><text x="43.5660%" y="239.50">parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (36 samples, 3.12%)</title><rect x="44.4444%" y="213" width="3.1250%" height="15" fill="rgb(252,105,26)" fg:x="512" fg:w="36"/><text x="44.6944%" y="223.50">par..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.43%)</title><rect x="47.1354%" y="197" width="0.4340%" height="15" fill="rgb(220,39,43)" fg:x="543" fg:w="5"/><text x="47.3854%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (10 samples, 0.87%)</title><rect x="47.7431%" y="229" width="0.8681%" height="15" fill="rgb(229,68,48)" fg:x="550" fg:w="10"/><text x="47.9931%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (6 samples, 0.52%)</title><rect x="48.0903%" y="213" width="0.5208%" height="15" fill="rgb(252,8,32)" fg:x="554" fg:w="6"/><text x="48.3403%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (4 samples, 0.35%)</title><rect x="48.2639%" y="197" width="0.3472%" height="15" fill="rgb(223,20,43)" fg:x="556" fg:w="4"/><text x="48.5139%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (7 samples, 0.61%)</title><rect x="48.6111%" y="229" width="0.6076%" height="15" fill="rgb(229,81,49)" fg:x="560" fg:w="7"/><text x="48.8611%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (7 samples, 0.61%)</title><rect x="48.6111%" y="213" width="0.6076%" height="15" fill="rgb(236,28,36)" fg:x="560" fg:w="7"/><text x="48.8611%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (6 samples, 0.52%)</title><rect x="48.6979%" y="197" width="0.5208%" height="15" fill="rgb(249,185,26)" fg:x="561" fg:w="6"/><text x="48.9479%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (5 samples, 0.43%)</title><rect x="48.7847%" y="181" width="0.4340%" height="15" fill="rgb(249,174,33)" fg:x="562" fg:w="5"/><text x="49.0347%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (3 samples, 0.26%)</title><rect x="54.1667%" y="181" width="0.2604%" height="15" fill="rgb(233,201,37)" fg:x="624" fg:w="3"/><text x="54.4167%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (48 samples, 4.17%)</title><rect x="50.4340%" y="197" width="4.1667%" height="15" fill="rgb(221,78,26)" fg:x="581" fg:w="48"/><text x="50.6840%" y="207.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="54.4271%" y="181" width="0.1736%" height="15" fill="rgb(250,127,30)" fg:x="627" fg:w="2"/><text x="54.6771%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (55 samples, 4.77%)</title><rect x="49.9132%" y="213" width="4.7743%" height="15" fill="rgb(230,49,44)" fg:x="575" fg:w="55"/><text x="50.1632%" y="223.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="54.6007%" y="197" width="0.0868%" height="15" fill="rgb(229,67,23)" fg:x="629" fg:w="1"/><text x="54.8507%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (21 samples, 1.82%)</title><rect x="54.6875%" y="213" width="1.8229%" height="15" fill="rgb(249,83,47)" fg:x="630" fg:w="21"/><text x="54.9375%" y="223.50">b..</text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (20 samples, 1.74%)</title><rect x="54.7743%" y="197" width="1.7361%" height="15" fill="rgb(215,43,3)" fg:x="631" fg:w="20"/><text x="55.0243%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.17%)</title><rect x="56.5104%" y="213" width="0.1736%" height="15" fill="rgb(238,154,13)" fg:x="651" fg:w="2"/><text x="56.7604%" y="223.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (9 samples, 0.78%)</title><rect x="63.9757%" y="165" width="0.7812%" height="15" fill="rgb(219,56,2)" fg:x="737" fg:w="9"/><text x="64.2257%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (75 samples, 6.51%)</title><rect x="58.4201%" y="181" width="6.5104%" height="15" fill="rgb(233,0,4)" fg:x="673" fg:w="75"/><text x="58.6701%" y="191.50">&lt;brotli::..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="64.7569%" y="165" width="0.1736%" height="15" fill="rgb(235,30,7)" fg:x="746" fg:w="2"/><text x="65.0069%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (90 samples, 7.81%)</title><rect x="57.3785%" y="197" width="7.8125%" height="15" fill="rgb(250,79,13)" fg:x="661" fg:w="90"/><text x="57.6285%" y="207.50">brotli::enc..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.26%)</title><rect x="64.9306%" y="181" width="0.2604%" height="15" fill="rgb(211,146,34)" fg:x="748" fg:w="3"/><text x="65.1806%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="66.1458%" y="133" width="0.0868%" height="15" fill="rgb(228,22,38)" fg:x="762" fg:w="1"/><text x="66.3958%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (7 samples, 0.61%)</title><rect x="65.9722%" y="149" width="0.6076%" height="15" fill="rgb(235,168,5)" fg:x="760" fg:w="7"/><text x="66.2222%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (4 samples, 0.35%)</title><rect x="66.2326%" y="133" width="0.3472%" height="15" fill="rgb(221,155,16)" fg:x="763" fg:w="4"/><text x="66.4826%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (13 samples, 1.13%)</title><rect x="65.9722%" y="181" width="1.1285%" height="15" fill="rgb(215,215,53)" fg:x="760" fg:w="13"/><text x="66.2222%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (13 samples, 1.13%)</title><rect x="65.9722%" y="165" width="1.1285%" height="15" fill="rgb(223,4,10)" fg:x="760" fg:w="13"/><text x="66.2222%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (6 samples, 0.52%)</title><rect x="66.5799%" y="149" width="0.5208%" height="15" fill="rgb(234,103,6)" fg:x="767" fg:w="6"/><text x="66.8299%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="67.0139%" y="133" width="0.0868%" height="15" fill="rgb(227,97,0)" fg:x="772" fg:w="1"/><text x="67.2639%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (3 samples, 0.26%)</title><rect x="67.1007%" y="181" width="0.2604%" height="15" fill="rgb(234,150,53)" fg:x="773" fg:w="3"/><text x="67.3507%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.61%)</title><rect x="67.3611%" y="181" width="0.6076%" height="15" fill="rgb(228,201,54)" fg:x="776" fg:w="7"/><text x="67.6111%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreBlockSplitCode (1 samples, 0.09%)</title><rect x="67.9688%" y="181" width="0.0868%" height="15" fill="rgb(222,22,37)" fg:x="783" fg:w="1"/><text x="68.2188%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (34 samples, 2.95%)</title><rect x="65.1910%" y="197" width="2.9514%" height="15" fill="rgb(237,53,32)" fg:x="751" fg:w="34"/><text x="65.4410%" y="207.50">bro..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.09%)</title><rect x="68.0556%" y="181" width="0.0868%" height="15" fill="rgb(233,25,53)" fg:x="784" fg:w="1"/><text x="68.3056%" y="191.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="68.8368%" y="181" width="0.0868%" height="15" fill="rgb(210,40,34)" fg:x="793" fg:w="1"/><text x="69.0868%" y="191.50"></text></g><g><title>brotli::enc::encode::hasher_setup (10 samples, 0.87%)</title><rect x="68.1424%" y="197" width="0.8681%" height="15" fill="rgb(241,220,44)" fg:x="785" fg:w="10"/><text x="68.3924%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::backward_references::UnionHasher&lt;alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="68.9236%" y="181" width="0.0868%" height="15" fill="rgb(235,28,35)" fg:x="794" fg:w="1"/><text x="69.1736%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (9 samples, 0.78%)</title><rect x="69.0104%" y="197" width="0.7812%" height="15" fill="rgb(210,56,17)" fg:x="795" fg:w="9"/><text x="69.2604%" y="207.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (3 samples, 0.26%)</title><rect x="69.5312%" y="181" width="0.2604%" height="15" fill="rgb(224,130,29)" fg:x="801" fg:w="3"/><text x="69.7812%" y="191.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="69.7049%" y="165" width="0.0868%" height="15" fill="rgb(235,212,8)" fg:x="803" fg:w="1"/><text x="69.9549%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (238 samples, 20.66%)</title><rect x="49.2188%" y="229" width="20.6597%" height="15" fill="rgb(223,33,50)" fg:x="567" fg:w="238"/><text x="49.4688%" y="239.50">&lt;parquet::compression::brotli_cod..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (152 samples, 13.19%)</title><rect x="56.6840%" y="213" width="13.1944%" height="15" fill="rgb(219,149,13)" fg:x="653" fg:w="152"/><text x="56.9340%" y="223.50">brotli::enc::writer:..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.09%)</title><rect x="69.7917%" y="197" width="0.0868%" height="15" fill="rgb(250,156,29)" fg:x="804" fg:w="1"/><text x="70.0417%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.09%)</title><rect x="69.7917%" y="181" width="0.0868%" height="15" fill="rgb(216,193,19)" fg:x="804" fg:w="1"/><text x="70.0417%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (261 samples, 22.66%)</title><rect x="47.5694%" y="245" width="22.6562%" height="15" fill="rgb(216,135,14)" fg:x="548" fg:w="261"/><text x="47.8194%" y="255.50">parquet::column::writer::GenericColu..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (4 samples, 0.35%)</title><rect x="69.8785%" y="229" width="0.3472%" height="15" fill="rgb(241,47,5)" fg:x="805" fg:w="4"/><text x="70.1285%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.09%)</title><rect x="70.2257%" y="245" width="0.0868%" height="15" fill="rgb(233,42,35)" fg:x="809" fg:w="1"/><text x="70.4757%" y="255.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.09%)</title><rect x="70.2257%" y="229" width="0.0868%" height="15" fill="rgb(231,13,6)" fg:x="809" fg:w="1"/><text x="70.4757%" y="239.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.09%)</title><rect x="70.2257%" y="213" width="0.0868%" height="15" fill="rgb(207,181,40)" fg:x="809" fg:w="1"/><text x="70.4757%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.09%)</title><rect x="70.2257%" y="197" width="0.0868%" height="15" fill="rgb(254,173,49)" fg:x="809" fg:w="1"/><text x="70.4757%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="70.2257%" y="181" width="0.0868%" height="15" fill="rgb(221,1,38)" fg:x="809" fg:w="1"/><text x="70.4757%" y="191.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="70.2257%" y="165" width="0.0868%" height="15" fill="rgb(206,124,46)" fg:x="809" fg:w="1"/><text x="70.4757%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="74.7396%" y="181" width="0.0868%" height="15" fill="rgb(249,21,11)" fg:x="861" fg:w="1"/><text x="74.9896%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (3 samples, 0.26%)</title><rect x="74.8264%" y="181" width="0.2604%" height="15" fill="rgb(222,201,40)" fg:x="862" fg:w="3"/><text x="75.0764%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (50 samples, 4.34%)</title><rect x="71.3542%" y="197" width="4.3403%" height="15" fill="rgb(235,61,29)" fg:x="822" fg:w="50"/><text x="71.6042%" y="207.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (7 samples, 0.61%)</title><rect x="75.0868%" y="181" width="0.6076%" height="15" fill="rgb(219,207,3)" fg:x="865" fg:w="7"/><text x="75.3368%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (54 samples, 4.69%)</title><rect x="71.0938%" y="213" width="4.6875%" height="15" fill="rgb(222,56,46)" fg:x="819" fg:w="54"/><text x="71.3438%" y="223.50">brotl..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="75.6944%" y="197" width="0.0868%" height="15" fill="rgb(239,76,54)" fg:x="872" fg:w="1"/><text x="75.9444%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="75.7812%" y="213" width="0.0868%" height="15" fill="rgb(231,124,27)" fg:x="873" fg:w="1"/><text x="76.0312%" y="223.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="75.7812%" y="197" width="0.0868%" height="15" fill="rgb(249,195,6)" fg:x="873" fg:w="1"/><text x="76.0312%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.17%)</title><rect x="76.0417%" y="181" width="0.1736%" height="15" fill="rgb(237,174,47)" fg:x="876" fg:w="2"/><text x="76.2917%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.17%)</title><rect x="76.0417%" y="165" width="0.1736%" height="15" fill="rgb(206,201,31)" fg:x="876" fg:w="2"/><text x="76.2917%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (2 samples, 0.17%)</title><rect x="76.0417%" y="149" width="0.1736%" height="15" fill="rgb(231,57,52)" fg:x="876" fg:w="2"/><text x="76.2917%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (4 samples, 0.35%)</title><rect x="75.9549%" y="197" width="0.3472%" height="15" fill="rgb(248,177,22)" fg:x="875" fg:w="4"/><text x="76.2049%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="76.2153%" y="181" width="0.0868%" height="15" fill="rgb(215,211,37)" fg:x="878" fg:w="1"/><text x="76.4653%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (6 samples, 0.52%)</title><rect x="75.8681%" y="213" width="0.5208%" height="15" fill="rgb(241,128,51)" fg:x="874" fg:w="6"/><text x="76.1181%" y="223.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="76.3021%" y="197" width="0.0868%" height="15" fill="rgb(227,165,31)" fg:x="879" fg:w="1"/><text x="76.5521%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (484 samples, 42.01%)</title><rect x="34.4618%" y="277" width="42.0139%" height="15" fill="rgb(228,167,24)" fg:x="397" fg:w="484"/><text x="34.7118%" y="287.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (467 samples, 40.54%)</title><rect x="35.9375%" y="261" width="40.5382%" height="15" fill="rgb(228,143,12)" fg:x="414" fg:w="467"/><text x="36.1875%" y="271.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_inter..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (71 samples, 6.16%)</title><rect x="70.3125%" y="245" width="6.1632%" height="15" fill="rgb(249,149,8)" fg:x="810" fg:w="71"/><text x="70.5625%" y="255.50">parquet:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (71 samples, 6.16%)</title><rect x="70.3125%" y="229" width="6.1632%" height="15" fill="rgb(243,35,44)" fg:x="810" fg:w="71"/><text x="70.5625%" y="239.50">&lt;parquet..</text></g><g><title>core::ptr::drop_in_place&lt;brotli::enc::writer::CompressorWriterCustomIo&lt;std::io::error::Error,brotli_decompressor::io_wrappers::IntoIoWriter&lt;&amp;mut alloc::vec::Vec&lt;u8&gt;&gt;,alloc_stdlib::heap_alloc::WrapBox&lt;u8&gt;,alloc_stdlib::std_alloc::StandardAlloc&gt;&gt; (1 samples, 0.09%)</title><rect x="76.3889%" y="213" width="0.0868%" height="15" fill="rgb(246,89,9)" fg:x="880" fg:w="1"/><text x="76.6389%" y="223.50"></text></g><g><title>brotli::enc::backward_references::UnionHasher&lt;Alloc&gt;::free (1 samples, 0.09%)</title><rect x="76.3889%" y="197" width="0.0868%" height="15" fill="rgb(233,213,13)" fg:x="880" fg:w="1"/><text x="76.6389%" y="207.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="76.3889%" y="181" width="0.0868%" height="15" fill="rgb(233,141,41)" fg:x="880" fg:w="1"/><text x="76.6389%" y="191.50"></text></g><g><title>__default_morecore (1 samples, 0.09%)</title><rect x="76.3889%" y="165" width="0.0868%" height="15" fill="rgb(239,167,4)" fg:x="880" fg:w="1"/><text x="76.6389%" y="175.50"></text></g><g><title>__sbrk (1 samples, 0.09%)</title><rect x="76.3889%" y="149" width="0.0868%" height="15" fill="rgb(209,217,16)" fg:x="880" fg:w="1"/><text x="76.6389%" y="159.50"></text></g><g><title>brk (1 samples, 0.09%)</title><rect x="76.3889%" y="133" width="0.0868%" height="15" fill="rgb(219,88,35)" fg:x="880" fg:w="1"/><text x="76.6389%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::try_new (1 samples, 0.09%)</title><rect x="76.4757%" y="261" width="0.0868%" height="15" fill="rgb(220,193,23)" fg:x="881" fg:w="1"/><text x="76.7257%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (486 samples, 42.19%)</title><rect x="34.4618%" y="309" width="42.1875%" height="15" fill="rgb(230,90,52)" fg:x="397" fg:w="486"/><text x="34.7118%" y="319.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (486 samples, 42.19%)</title><rect x="34.4618%" y="293" width="42.1875%" height="15" fill="rgb(252,106,19)" fg:x="397" fg:w="486"/><text x="34.7118%" y="303.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (2 samples, 0.17%)</title><rect x="76.4757%" y="277" width="0.1736%" height="15" fill="rgb(206,74,20)" fg:x="881" fg:w="2"/><text x="76.7257%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (1 samples, 0.09%)</title><rect x="76.5625%" y="261" width="0.0868%" height="15" fill="rgb(230,138,44)" fg:x="882" fg:w="1"/><text x="76.8125%" y="271.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.17%)</title><rect x="76.6493%" y="309" width="0.1736%" height="15" fill="rgb(235,182,43)" fg:x="883" fg:w="2"/><text x="76.8993%" y="319.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="76.7361%" y="293" width="0.0868%" height="15" fill="rgb(242,16,51)" fg:x="884" fg:w="1"/><text x="76.9861%" y="303.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (8 samples, 0.69%)</title><rect x="76.8229%" y="261" width="0.6944%" height="15" fill="rgb(248,9,4)" fg:x="885" fg:w="8"/><text x="77.0729%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (8 samples, 0.69%)</title><rect x="76.8229%" y="245" width="0.6944%" height="15" fill="rgb(210,31,22)" fg:x="885" fg:w="8"/><text x="77.0729%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (8 samples, 0.69%)</title><rect x="76.8229%" y="229" width="0.6944%" height="15" fill="rgb(239,54,39)" fg:x="885" fg:w="8"/><text x="77.0729%" y="239.50"></text></g><g><title>write (8 samples, 0.69%)</title><rect x="76.8229%" y="213" width="0.6944%" height="15" fill="rgb(230,99,41)" fg:x="885" fg:w="8"/><text x="77.0729%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (819 samples, 71.09%)</title><rect x="6.5104%" y="325" width="71.0937%" height="15" fill="rgb(253,106,12)" fg:x="75" fg:w="819"/><text x="6.7604%" y="335.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (9 samples, 0.78%)</title><rect x="76.8229%" y="309" width="0.7812%" height="15" fill="rgb(213,46,41)" fg:x="885" fg:w="9"/><text x="77.0729%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (9 samples, 0.78%)</title><rect x="76.8229%" y="293" width="0.7812%" height="15" fill="rgb(215,133,35)" fg:x="885" fg:w="9"/><text x="77.0729%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.78%)</title><rect x="76.8229%" y="277" width="0.7812%" height="15" fill="rgb(213,28,5)" fg:x="885" fg:w="9"/><text x="77.0729%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.09%)</title><rect x="77.5174%" y="261" width="0.0868%" height="15" fill="rgb(215,77,49)" fg:x="893" fg:w="1"/><text x="77.7674%" y="271.50"></text></g><g><title>tracing_core::field::ValueSet::record (1 samples, 0.09%)</title><rect x="77.5174%" y="245" width="0.0868%" height="15" fill="rgb(248,100,22)" fg:x="893" fg:w="1"/><text x="77.7674%" y="255.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::DefaultVisitor as tracing_core::field::Visit&gt;::record_debug (1 samples, 0.09%)</title><rect x="77.5174%" y="229" width="0.0868%" height="15" fill="rgb(208,67,9)" fg:x="893" fg:w="1"/><text x="77.7674%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.5174%" y="213" width="0.0868%" height="15" fill="rgb(219,133,21)" fg:x="893" fg:w="1"/><text x="77.7674%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="77.5174%" y="197" width="0.0868%" height="15" fill="rgb(246,46,29)" fg:x="893" fg:w="1"/><text x="77.7674%" y="207.50"></text></g><g><title>core::slice::memchr::memchr_aligned (14 samples, 1.22%)</title><rect x="78.2118%" y="309" width="1.2153%" height="15" fill="rgb(246,185,52)" fg:x="901" fg:w="14"/><text x="78.4618%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (898 samples, 77.95%)</title><rect x="1.9097%" y="373" width="77.9514%" height="15" fill="rgb(252,136,11)" fg:x="22" fg:w="898"/><text x="2.1597%" y="383.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (890 samples, 77.26%)</title><rect x="2.6042%" y="357" width="77.2569%" height="15" fill="rgb(219,138,53)" fg:x="30" fg:w="890"/><text x="2.8542%" y="367.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (890 samples, 77.26%)</title><rect x="2.6042%" y="341" width="77.2569%" height="15" fill="rgb(211,51,23)" fg:x="30" fg:w="890"/><text x="2.8542%" y="351.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (26 samples, 2.26%)</title><rect x="77.6042%" y="325" width="2.2569%" height="15" fill="rgb(247,221,28)" fg:x="894" fg:w="26"/><text x="77.8542%" y="335.50">s..</text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.43%)</title><rect x="79.4271%" y="309" width="0.4340%" height="15" fill="rgb(251,222,45)" fg:x="915" fg:w="5"/><text x="79.6771%" y="319.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.17%)</title><rect x="79.8611%" y="229" width="0.1736%" height="15" fill="rgb(217,162,53)" fg:x="920" fg:w="2"/><text x="80.1111%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.17%)</title><rect x="79.8611%" y="213" width="0.1736%" height="15" fill="rgb(229,93,14)" fg:x="920" fg:w="2"/><text x="80.1111%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="79.8611%" y="197" width="0.1736%" height="15" fill="rgb(209,67,49)" fg:x="920" fg:w="2"/><text x="80.1111%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="79.9479%" y="181" width="0.0868%" height="15" fill="rgb(213,87,29)" fg:x="921" fg:w="1"/><text x="80.1979%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="79.9479%" y="165" width="0.0868%" height="15" fill="rgb(205,151,52)" fg:x="921" fg:w="1"/><text x="80.1979%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (3 samples, 0.26%)</title><rect x="79.8611%" y="341" width="0.2604%" height="15" fill="rgb(253,215,39)" fg:x="920" fg:w="3"/><text x="80.1111%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (3 samples, 0.26%)</title><rect x="79.8611%" y="325" width="0.2604%" height="15" fill="rgb(221,220,41)" fg:x="920" fg:w="3"/><text x="80.1111%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (3 samples, 0.26%)</title><rect x="79.8611%" y="309" width="0.2604%" height="15" fill="rgb(218,133,21)" fg:x="920" fg:w="3"/><text x="80.1111%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.26%)</title><rect x="79.8611%" y="293" width="0.2604%" height="15" fill="rgb(221,193,43)" fg:x="920" fg:w="3"/><text x="80.1111%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (3 samples, 0.26%)</title><rect x="79.8611%" y="277" width="0.2604%" height="15" fill="rgb(240,128,52)" fg:x="920" fg:w="3"/><text x="80.1111%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.26%)</title><rect x="79.8611%" y="261" width="0.2604%" height="15" fill="rgb(253,114,12)" fg:x="920" fg:w="3"/><text x="80.1111%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (3 samples, 0.26%)</title><rect x="79.8611%" y="245" width="0.2604%" height="15" fill="rgb(215,223,47)" fg:x="920" fg:w="3"/><text x="80.1111%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (1 samples, 0.09%)</title><rect x="80.0347%" y="229" width="0.0868%" height="15" fill="rgb(248,225,23)" fg:x="922" fg:w="1"/><text x="80.2847%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="80.0347%" y="213" width="0.0868%" height="15" fill="rgb(250,108,0)" fg:x="922" fg:w="1"/><text x="80.2847%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="80.0347%" y="197" width="0.0868%" height="15" fill="rgb(228,208,7)" fg:x="922" fg:w="1"/><text x="80.2847%" y="207.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="80.0347%" y="181" width="0.0868%" height="15" fill="rgb(244,45,10)" fg:x="922" fg:w="1"/><text x="80.2847%" y="191.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="80.0347%" y="165" width="0.0868%" height="15" fill="rgb(207,125,25)" fg:x="922" fg:w="1"/><text x="80.2847%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="80.2083%" y="277" width="0.0868%" height="15" fill="rgb(210,195,18)" fg:x="924" fg:w="1"/><text x="80.4583%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="80.2083%" y="261" width="0.0868%" height="15" fill="rgb(249,80,12)" fg:x="924" fg:w="1"/><text x="80.4583%" y="271.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="80.2083%" y="245" width="0.0868%" height="15" fill="rgb(221,65,9)" fg:x="924" fg:w="1"/><text x="80.4583%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (9 samples, 0.78%)</title><rect x="80.1215%" y="309" width="0.7812%" height="15" fill="rgb(235,49,36)" fg:x="923" fg:w="9"/><text x="80.3715%" y="319.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (9 samples, 0.78%)</title><rect x="80.1215%" y="293" width="0.7812%" height="15" fill="rgb(225,32,20)" fg:x="923" fg:w="9"/><text x="80.3715%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record (7 samples, 0.61%)</title><rect x="80.2951%" y="277" width="0.6076%" height="15" fill="rgb(215,141,46)" fg:x="925" fg:w="7"/><text x="80.5451%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.09%)</title><rect x="80.9028%" y="293" width="0.0868%" height="15" fill="rgb(250,160,47)" fg:x="932" fg:w="1"/><text x="81.1528%" y="303.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (15 samples, 1.30%)</title><rect x="80.1215%" y="325" width="1.3021%" height="15" fill="rgb(216,222,40)" fg:x="923" fg:w="15"/><text x="80.3715%" y="335.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (6 samples, 0.52%)</title><rect x="80.9028%" y="309" width="0.5208%" height="15" fill="rgb(234,217,39)" fg:x="932" fg:w="6"/><text x="81.1528%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.43%)</title><rect x="80.9896%" y="293" width="0.4340%" height="15" fill="rgb(207,178,40)" fg:x="933" fg:w="5"/><text x="81.2396%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.43%)</title><rect x="80.9896%" y="277" width="0.4340%" height="15" fill="rgb(221,136,13)" fg:x="933" fg:w="5"/><text x="81.2396%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (5 samples, 0.43%)</title><rect x="80.9896%" y="261" width="0.4340%" height="15" fill="rgb(249,199,10)" fg:x="933" fg:w="5"/><text x="81.2396%" y="271.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (5 samples, 0.43%)</title><rect x="80.9896%" y="245" width="0.4340%" height="15" fill="rgb(249,222,13)" fg:x="933" fg:w="5"/><text x="81.2396%" y="255.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (3 samples, 0.26%)</title><rect x="81.1632%" y="229" width="0.2604%" height="15" fill="rgb(244,185,38)" fg:x="935" fg:w="3"/><text x="81.4132%" y="239.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.09%)</title><rect x="81.5104%" y="309" width="0.0868%" height="15" fill="rgb(236,202,9)" fg:x="939" fg:w="1"/><text x="81.7604%" y="319.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.09%)</title><rect x="81.5972%" y="309" width="0.0868%" height="15" fill="rgb(250,229,37)" fg:x="940" fg:w="1"/><text x="81.8472%" y="319.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (1 samples, 0.09%)</title><rect x="81.5972%" y="293" width="0.0868%" height="15" fill="rgb(206,174,23)" fg:x="940" fg:w="1"/><text x="81.8472%" y="303.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (9 samples, 0.78%)</title><rect x="81.4236%" y="325" width="0.7812%" height="15" fill="rgb(211,33,43)" fg:x="938" fg:w="9"/><text x="81.6736%" y="335.50"></text></g><g><title>nemscraper::process::utils::clean_str (6 samples, 0.52%)</title><rect x="81.6840%" y="309" width="0.5208%" height="15" fill="rgb(245,58,50)" fg:x="941" fg:w="6"/><text x="81.9340%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="82.1181%" y="293" width="0.0868%" height="15" fill="rgb(244,68,36)" fg:x="946" fg:w="1"/><text x="82.3681%" y="303.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.35%)</title><rect x="82.3785%" y="261" width="0.3472%" height="15" fill="rgb(232,229,15)" fg:x="949" fg:w="4"/><text x="82.6285%" y="271.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="82.6389%" y="245" width="0.0868%" height="15" fill="rgb(254,30,23)" fg:x="952" fg:w="1"/><text x="82.8889%" y="255.50"></text></g><g><title>parquet::column::writer::compare_greater (2 samples, 0.17%)</title><rect x="82.7257%" y="229" width="0.1736%" height="15" fill="rgb(235,160,14)" fg:x="953" fg:w="2"/><text x="82.9757%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (12 samples, 1.04%)</title><rect x="82.7257%" y="261" width="1.0417%" height="15" fill="rgb(212,155,44)" fg:x="953" fg:w="12"/><text x="82.9757%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (12 samples, 1.04%)</title><rect x="82.7257%" y="245" width="1.0417%" height="15" fill="rgb(226,2,50)" fg:x="953" fg:w="12"/><text x="82.9757%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (10 samples, 0.87%)</title><rect x="82.8993%" y="229" width="0.8681%" height="15" fill="rgb(234,177,6)" fg:x="955" fg:w="10"/><text x="83.1493%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.09%)</title><rect x="83.6806%" y="213" width="0.0868%" height="15" fill="rgb(217,24,9)" fg:x="964" fg:w="1"/><text x="83.9306%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.17%)</title><rect x="83.7674%" y="245" width="0.1736%" height="15" fill="rgb(220,13,46)" fg:x="965" fg:w="2"/><text x="84.0174%" y="255.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.09%)</title><rect x="83.8542%" y="229" width="0.0868%" height="15" fill="rgb(239,221,27)" fg:x="966" fg:w="1"/><text x="84.1042%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (1 samples, 0.09%)</title><rect x="83.8542%" y="213" width="0.0868%" height="15" fill="rgb(222,198,25)" fg:x="966" fg:w="1"/><text x="84.1042%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="83.9410%" y="245" width="0.0868%" height="15" fill="rgb(211,99,13)" fg:x="967" fg:w="1"/><text x="84.1910%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="83.9410%" y="229" width="0.0868%" height="15" fill="rgb(232,111,31)" fg:x="967" fg:w="1"/><text x="84.1910%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="83.9410%" y="213" width="0.0868%" height="15" fill="rgb(245,82,37)" fg:x="967" fg:w="1"/><text x="84.1910%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (4 samples, 0.35%)</title><rect x="84.0278%" y="213" width="0.3472%" height="15" fill="rgb(227,149,46)" fg:x="968" fg:w="4"/><text x="84.2778%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.35%)</title><rect x="84.0278%" y="197" width="0.3472%" height="15" fill="rgb(218,36,50)" fg:x="968" fg:w="4"/><text x="84.2778%" y="207.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (2 samples, 0.17%)</title><rect x="84.2014%" y="181" width="0.1736%" height="15" fill="rgb(226,80,48)" fg:x="970" fg:w="2"/><text x="84.4514%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="84.3750%" y="213" width="0.0868%" height="15" fill="rgb(238,224,15)" fg:x="972" fg:w="1"/><text x="84.6250%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="84.3750%" y="197" width="0.0868%" height="15" fill="rgb(241,136,10)" fg:x="972" fg:w="1"/><text x="84.6250%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="84.3750%" y="181" width="0.0868%" height="15" fill="rgb(208,32,45)" fg:x="972" fg:w="1"/><text x="84.6250%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="84.3750%" y="165" width="0.0868%" height="15" fill="rgb(207,135,9)" fg:x="972" fg:w="1"/><text x="84.6250%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.17%)</title><rect x="84.4618%" y="213" width="0.1736%" height="15" fill="rgb(206,86,44)" fg:x="973" fg:w="2"/><text x="84.7118%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (11 samples, 0.95%)</title><rect x="83.7674%" y="261" width="0.9549%" height="15" fill="rgb(245,177,15)" fg:x="965" fg:w="11"/><text x="84.0174%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (8 samples, 0.69%)</title><rect x="84.0278%" y="245" width="0.6944%" height="15" fill="rgb(206,64,50)" fg:x="968" fg:w="8"/><text x="84.2778%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (8 samples, 0.69%)</title><rect x="84.0278%" y="229" width="0.6944%" height="15" fill="rgb(234,36,40)" fg:x="968" fg:w="8"/><text x="84.2778%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="84.6354%" y="213" width="0.0868%" height="15" fill="rgb(213,64,8)" fg:x="975" fg:w="1"/><text x="84.8854%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.35%)</title><rect x="84.8090%" y="213" width="0.3472%" height="15" fill="rgb(210,75,36)" fg:x="977" fg:w="4"/><text x="85.0590%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 0.43%)</title><rect x="84.8090%" y="229" width="0.4340%" height="15" fill="rgb(229,88,21)" fg:x="977" fg:w="5"/><text x="85.0590%" y="239.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="85.1562%" y="213" width="0.0868%" height="15" fill="rgb(252,204,47)" fg:x="981" fg:w="1"/><text x="85.4062%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (60 samples, 5.21%)</title><rect x="80.1215%" y="341" width="5.2083%" height="15" fill="rgb(208,77,27)" fg:x="923" fg:w="60"/><text x="80.3715%" y="351.50">nemscr..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (36 samples, 3.12%)</title><rect x="82.2049%" y="325" width="3.1250%" height="15" fill="rgb(221,76,26)" fg:x="947" fg:w="36"/><text x="82.4549%" y="335.50">par..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (36 samples, 3.12%)</title><rect x="82.2049%" y="309" width="3.1250%" height="15" fill="rgb(225,139,18)" fg:x="947" fg:w="36"/><text x="82.4549%" y="319.50">par..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (36 samples, 3.12%)</title><rect x="82.2049%" y="293" width="3.1250%" height="15" fill="rgb(230,137,11)" fg:x="947" fg:w="36"/><text x="82.4549%" y="303.50">par..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (36 samples, 3.12%)</title><rect x="82.2049%" y="277" width="3.1250%" height="15" fill="rgb(212,28,1)" fg:x="947" fg:w="36"/><text x="82.4549%" y="287.50">par..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (7 samples, 0.61%)</title><rect x="84.7222%" y="261" width="0.6076%" height="15" fill="rgb(248,164,17)" fg:x="976" fg:w="7"/><text x="84.9722%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.61%)</title><rect x="84.7222%" y="245" width="0.6076%" height="15" fill="rgb(222,171,42)" fg:x="976" fg:w="7"/><text x="84.9722%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="85.2431%" y="229" width="0.0868%" height="15" fill="rgb(243,84,45)" fg:x="982" fg:w="1"/><text x="85.4931%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="85.2431%" y="213" width="0.0868%" height="15" fill="rgb(252,49,23)" fg:x="982" fg:w="1"/><text x="85.4931%" y="223.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (66 samples, 5.73%)</title><rect x="79.8611%" y="373" width="5.7292%" height="15" fill="rgb(215,19,7)" fg:x="920" fg:w="66"/><text x="80.1111%" y="383.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (66 samples, 5.73%)</title><rect x="79.8611%" y="357" width="5.7292%" height="15" fill="rgb(238,81,41)" fg:x="920" fg:w="66"/><text x="80.1111%" y="367.50">nemscra..</text></g><g><title>std::io::append_to_string (3 samples, 0.26%)</title><rect x="85.3299%" y="341" width="0.2604%" height="15" fill="rgb(210,199,37)" fg:x="983" fg:w="3"/><text x="85.5799%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (2 samples, 0.17%)</title><rect x="86.1111%" y="309" width="0.1736%" height="15" fill="rgb(244,192,49)" fg:x="992" fg:w="2"/><text x="86.3611%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (7 samples, 0.61%)</title><rect x="86.0243%" y="341" width="0.6076%" height="15" fill="rgb(226,211,11)" fg:x="991" fg:w="7"/><text x="86.2743%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (7 samples, 0.61%)</title><rect x="86.0243%" y="325" width="0.6076%" height="15" fill="rgb(236,162,54)" fg:x="991" fg:w="7"/><text x="86.2743%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (4 samples, 0.35%)</title><rect x="86.2847%" y="309" width="0.3472%" height="15" fill="rgb(220,229,9)" fg:x="994" fg:w="4"/><text x="86.5347%" y="319.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.09%)</title><rect x="86.5451%" y="293" width="0.0868%" height="15" fill="rgb(250,87,22)" fg:x="997" fg:w="1"/><text x="86.7951%" y="303.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (74 samples, 6.42%)</title><rect x="87.4132%" y="277" width="6.4236%" height="15" fill="rgb(239,43,17)" fg:x="1007" fg:w="74"/><text x="87.6632%" y="287.50">zlib_rs:..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (1 samples, 0.09%)</title><rect x="93.8368%" y="277" width="0.0868%" height="15" fill="rgb(231,177,25)" fg:x="1081" fg:w="1"/><text x="94.0868%" y="287.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (85 samples, 7.38%)</title><rect x="86.6319%" y="325" width="7.3785%" height="15" fill="rgb(219,179,1)" fg:x="998" fg:w="85"/><text x="86.8819%" y="335.50">&lt;flate2::m..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (85 samples, 7.38%)</title><rect x="86.6319%" y="309" width="7.3785%" height="15" fill="rgb(238,219,53)" fg:x="998" fg:w="85"/><text x="86.8819%" y="319.50">&lt;flate2::f..</text></g><g><title>zlib_rs::inflate::inflate (85 samples, 7.38%)</title><rect x="86.6319%" y="293" width="7.3785%" height="15" fill="rgb(232,167,36)" fg:x="998" fg:w="85"/><text x="86.8819%" y="303.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (1 samples, 0.09%)</title><rect x="93.9236%" y="277" width="0.0868%" height="15" fill="rgb(244,19,51)" fg:x="1082" fg:w="1"/><text x="94.1736%" y="287.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (94 samples, 8.16%)</title><rect x="86.0243%" y="357" width="8.1597%" height="15" fill="rgb(224,6,22)" fg:x="991" fg:w="94"/><text x="86.2743%" y="367.50">&lt;zip::read:..</text></g><g><title>flate2::zio::read (87 samples, 7.55%)</title><rect x="86.6319%" y="341" width="7.5521%" height="15" fill="rgb(224,145,5)" fg:x="998" fg:w="87"/><text x="86.8819%" y="351.50">flate2::zi..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.17%)</title><rect x="94.0104%" y="325" width="0.1736%" height="15" fill="rgb(234,130,49)" fg:x="1083" fg:w="2"/><text x="94.2604%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (11 samples, 0.95%)</title><rect x="94.1840%" y="357" width="0.9549%" height="15" fill="rgb(254,6,2)" fg:x="1085" fg:w="11"/><text x="94.4340%" y="367.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,102 samples, 95.66%)</title><rect x="0.0868%" y="405" width="95.6597%" height="15" fill="rgb(208,96,46)" fg:x="1" fg:w="1102"/><text x="0.3368%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (1,083 samples, 94.01%)</title><rect x="1.7361%" y="389" width="94.0104%" height="15" fill="rgb(239,3,39)" fg:x="20" fg:w="1083"/><text x="1.9861%" y="399.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (117 samples, 10.16%)</title><rect x="85.5903%" y="373" width="10.1562%" height="15" fill="rgb(233,210,1)" fg:x="986" fg:w="117"/><text x="85.8403%" y="383.50">std::io::append..</text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.61%)</title><rect x="95.1389%" y="357" width="0.6076%" height="15" fill="rgb(244,137,37)" fg:x="1096" fg:w="7"/><text x="95.3889%" y="367.50"></text></g><g><title>bench_zip_to_pa (1,105 samples, 95.92%)</title><rect x="0.0000%" y="565" width="95.9201%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,105 samples, 95.92%)</title><rect x="0.0000%" y="549" width="95.9201%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,105 samples, 95.92%)</title><rect x="0.0000%" y="533" width="95.9201%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,105 samples, 95.92%)</title><rect x="0.0000%" y="517" width="95.9201%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,105 samples, 95.92%)</title><rect x="0.0000%" y="501" width="95.9201%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,105 samples, 95.92%)</title><rect x="0.0000%" y="485" width="95.9201%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,105 samples, 95.92%)</title><rect x="0.0000%" y="469" width="95.9201%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,105 samples, 95.92%)</title><rect x="0.0000%" y="453" width="95.9201%" height="15" fill="rgb(234,209,42)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,105 samples, 95.92%)</title><rect x="0.0000%" y="437" width="95.9201%" height="15" fill="rgb(227,7,12)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,105 samples, 95.92%)</title><rect x="0.0000%" y="421" width="95.9201%" height="15" fill="rgb(245,203,43)" fg:x="0" fg:w="1105"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (2 samples, 0.17%)</title><rect x="95.7465%" y="405" width="0.1736%" height="15" fill="rgb(238,205,33)" fg:x="1103" fg:w="2"/><text x="95.9965%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.17%)</title><rect x="95.7465%" y="389" width="0.1736%" height="15" fill="rgb(231,56,7)" fg:x="1103" fg:w="2"/><text x="95.9965%" y="399.50"></text></g><g><title>syscall (2 samples, 0.17%)</title><rect x="95.7465%" y="373" width="0.1736%" height="15" fill="rgb(244,186,29)" fg:x="1103" fg:w="2"/><text x="95.9965%" y="383.50"></text></g><g><title>__floattidf (1 samples, 0.09%)</title><rect x="95.9201%" y="373" width="0.0868%" height="15" fill="rgb(234,111,31)" fg:x="1105" fg:w="1"/><text x="96.1701%" y="383.50"></text></g><g><title>powf64 (1 samples, 0.09%)</title><rect x="96.0069%" y="373" width="0.0868%" height="15" fill="rgb(241,149,10)" fg:x="1106" fg:w="1"/><text x="96.2569%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (1 samples, 0.09%)</title><rect x="96.0938%" y="373" width="0.0868%" height="15" fill="rgb(249,206,44)" fg:x="1107" fg:w="1"/><text x="96.3438%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.26%)</title><rect x="96.1806%" y="341" width="0.2604%" height="15" fill="rgb(251,153,30)" fg:x="1108" fg:w="3"/><text x="96.4306%" y="351.50"></text></g><g><title>syscall (3 samples, 0.26%)</title><rect x="96.1806%" y="325" width="0.2604%" height="15" fill="rgb(239,152,38)" fg:x="1108" fg:w="3"/><text x="96.4306%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (8 samples, 0.69%)</title><rect x="96.1806%" y="373" width="0.6944%" height="15" fill="rgb(249,139,47)" fg:x="1108" fg:w="8"/><text x="96.4306%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (8 samples, 0.69%)</title><rect x="96.1806%" y="357" width="0.6944%" height="15" fill="rgb(244,64,35)" fg:x="1108" fg:w="8"/><text x="96.4306%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.43%)</title><rect x="96.4410%" y="341" width="0.4340%" height="15" fill="rgb(216,46,15)" fg:x="1111" fg:w="5"/><text x="96.6910%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (4 samples, 0.35%)</title><rect x="96.5278%" y="325" width="0.3472%" height="15" fill="rgb(250,74,19)" fg:x="1112" fg:w="4"/><text x="96.7778%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (4 samples, 0.35%)</title><rect x="96.5278%" y="309" width="0.3472%" height="15" fill="rgb(249,42,33)" fg:x="1112" fg:w="4"/><text x="96.7778%" y="319.50"></text></g><g><title>epoll_wait (3 samples, 0.26%)</title><rect x="96.6146%" y="293" width="0.2604%" height="15" fill="rgb(242,149,17)" fg:x="1113" fg:w="3"/><text x="96.8646%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.35%)</title><rect x="96.9618%" y="357" width="0.3472%" height="15" fill="rgb(244,29,21)" fg:x="1117" fg:w="4"/><text x="97.2118%" y="367.50"></text></g><g><title>syscall (4 samples, 0.35%)</title><rect x="96.9618%" y="341" width="0.3472%" height="15" fill="rgb(220,130,37)" fg:x="1117" fg:w="4"/><text x="97.2118%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (7 samples, 0.61%)</title><rect x="97.3090%" y="357" width="0.6076%" height="15" fill="rgb(211,67,2)" fg:x="1121" fg:w="7"/><text x="97.5590%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (7 samples, 0.61%)</title><rect x="97.3090%" y="341" width="0.6076%" height="15" fill="rgb(235,68,52)" fg:x="1121" fg:w="7"/><text x="97.5590%" y="351.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (7 samples, 0.61%)</title><rect x="97.3090%" y="325" width="0.6076%" height="15" fill="rgb(246,142,3)" fg:x="1121" fg:w="7"/><text x="97.5590%" y="335.50"></text></g><g><title>write (7 samples, 0.61%)</title><rect x="97.3090%" y="309" width="0.6076%" height="15" fill="rgb(241,25,7)" fg:x="1121" fg:w="7"/><text x="97.5590%" y="319.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (5 samples, 0.43%)</title><rect x="98.0903%" y="277" width="0.4340%" height="15" fill="rgb(242,119,39)" fg:x="1130" fg:w="5"/><text x="98.3403%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (5 samples, 0.43%)</title><rect x="98.0903%" y="261" width="0.4340%" height="15" fill="rgb(241,98,45)" fg:x="1130" fg:w="5"/><text x="98.3403%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (5 samples, 0.43%)</title><rect x="98.0903%" y="245" width="0.4340%" height="15" fill="rgb(254,28,30)" fg:x="1130" fg:w="5"/><text x="98.3403%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.43%)</title><rect x="98.0903%" y="229" width="0.4340%" height="15" fill="rgb(241,142,54)" fg:x="1130" fg:w="5"/><text x="98.3403%" y="239.50"></text></g><g><title>syscall (5 samples, 0.43%)</title><rect x="98.0903%" y="213" width="0.4340%" height="15" fill="rgb(222,85,15)" fg:x="1130" fg:w="5"/><text x="98.3403%" y="223.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="98.5243%" y="181" width="0.0868%" height="15" fill="rgb(210,85,47)" fg:x="1135" fg:w="1"/><text x="98.7743%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_within (1 samples, 0.09%)</title><rect x="98.6111%" y="133" width="0.0868%" height="15" fill="rgb(224,206,25)" fg:x="1136" fg:w="1"/><text x="98.8611%" y="143.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (4 samples, 0.35%)</title><rect x="98.6111%" y="165" width="0.3472%" height="15" fill="rgb(243,201,19)" fg:x="1136" fg:w="4"/><text x="98.8611%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (4 samples, 0.35%)</title><rect x="98.6111%" y="149" width="0.3472%" height="15" fill="rgb(236,59,4)" fg:x="1136" fg:w="4"/><text x="98.8611%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (3 samples, 0.26%)</title><rect x="98.6979%" y="133" width="0.2604%" height="15" fill="rgb(254,179,45)" fg:x="1137" fg:w="3"/><text x="98.9479%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (3 samples, 0.26%)</title><rect x="98.6979%" y="117" width="0.2604%" height="15" fill="rgb(226,14,10)" fg:x="1137" fg:w="3"/><text x="98.9479%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (2 samples, 0.17%)</title><rect x="98.7847%" y="101" width="0.1736%" height="15" fill="rgb(244,27,41)" fg:x="1138" fg:w="2"/><text x="99.0347%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (2 samples, 0.17%)</title><rect x="98.7847%" y="85" width="0.1736%" height="15" fill="rgb(235,35,32)" fg:x="1138" fg:w="2"/><text x="99.0347%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (2 samples, 0.17%)</title><rect x="98.7847%" y="69" width="0.1736%" height="15" fill="rgb(218,68,31)" fg:x="1138" fg:w="2"/><text x="99.0347%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (2 samples, 0.17%)</title><rect x="98.7847%" y="53" width="0.1736%" height="15" fill="rgb(207,120,37)" fg:x="1138" fg:w="2"/><text x="99.0347%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (2 samples, 0.17%)</title><rect x="98.7847%" y="37" width="0.1736%" height="15" fill="rgb(227,98,0)" fg:x="1138" fg:w="2"/><text x="99.0347%" y="47.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (15 samples, 1.30%)</title><rect x="98.5243%" y="277" width="1.3021%" height="15" fill="rgb(207,7,3)" fg:x="1135" fg:w="15"/><text x="98.7743%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (15 samples, 1.30%)</title><rect x="98.5243%" y="261" width="1.3021%" height="15" fill="rgb(206,98,19)" fg:x="1135" fg:w="15"/><text x="98.7743%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (15 samples, 1.30%)</title><rect x="98.5243%" y="245" width="1.3021%" height="15" fill="rgb(217,5,26)" fg:x="1135" fg:w="15"/><text x="98.7743%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (15 samples, 1.30%)</title><rect x="98.5243%" y="229" width="1.3021%" height="15" fill="rgb(235,190,38)" fg:x="1135" fg:w="15"/><text x="98.7743%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 1.30%)</title><rect x="98.5243%" y="213" width="1.3021%" height="15" fill="rgb(247,86,24)" fg:x="1135" fg:w="15"/><text x="98.7743%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (15 samples, 1.30%)</title><rect x="98.5243%" y="197" width="1.3021%" height="15" fill="rgb(205,101,16)" fg:x="1135" fg:w="15"/><text x="98.7743%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (14 samples, 1.22%)</title><rect x="98.6111%" y="181" width="1.2153%" height="15" fill="rgb(246,168,33)" fg:x="1136" fg:w="14"/><text x="98.8611%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (10 samples, 0.87%)</title><rect x="98.9583%" y="165" width="0.8681%" height="15" fill="rgb(231,114,1)" fg:x="1140" fg:w="10"/><text x="99.2083%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (10 samples, 0.87%)</title><rect x="98.9583%" y="149" width="0.8681%" height="15" fill="rgb(207,184,53)" fg:x="1140" fg:w="10"/><text x="99.2083%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (10 samples, 0.87%)</title><rect x="98.9583%" y="133" width="0.8681%" height="15" fill="rgb(224,95,51)" fg:x="1140" fg:w="10"/><text x="99.2083%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (10 samples, 0.87%)</title><rect x="98.9583%" y="117" width="0.8681%" height="15" fill="rgb(212,188,45)" fg:x="1140" fg:w="10"/><text x="99.2083%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (10 samples, 0.87%)</title><rect x="98.9583%" y="101" width="0.8681%" height="15" fill="rgb(223,154,38)" fg:x="1140" fg:w="10"/><text x="99.2083%" y="111.50"></text></g><g><title>recv (10 samples, 0.87%)</title><rect x="98.9583%" y="85" width="0.8681%" height="15" fill="rgb(251,22,52)" fg:x="1140" fg:w="10"/><text x="99.2083%" y="95.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (23 samples, 2.00%)</title><rect x="97.9167%" y="341" width="1.9965%" height="15" fill="rgb(229,209,22)" fg:x="1128" fg:w="23"/><text x="98.1667%" y="351.50">t..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (23 samples, 2.00%)</title><rect x="97.9167%" y="325" width="1.9965%" height="15" fill="rgb(234,138,34)" fg:x="1128" fg:w="23"/><text x="98.1667%" y="335.50">&lt;..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (23 samples, 2.00%)</title><rect x="97.9167%" y="309" width="1.9965%" height="15" fill="rgb(212,95,11)" fg:x="1128" fg:w="23"/><text x="98.1667%" y="319.50">&lt;..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (23 samples, 2.00%)</title><rect x="97.9167%" y="293" width="1.9965%" height="15" fill="rgb(240,179,47)" fg:x="1128" fg:w="23"/><text x="98.1667%" y="303.50">h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (1 samples, 0.09%)</title><rect x="99.8264%" y="277" width="0.0868%" height="15" fill="rgb(240,163,11)" fg:x="1150" fg:w="1"/><text x="100.0764%" y="287.50"></text></g><g><title>all (1,152 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(236,37,12)" fg:x="0" fg:w="1152"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (47 samples, 4.08%)</title><rect x="95.9201%" y="565" width="4.0799%" height="15" fill="rgb(232,164,16)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="575.50">toki..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (47 samples, 4.08%)</title><rect x="95.9201%" y="549" width="4.0799%" height="15" fill="rgb(244,205,15)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="559.50">std:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (47 samples, 4.08%)</title><rect x="95.9201%" y="533" width="4.0799%" height="15" fill="rgb(223,117,47)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="543.50">core..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (47 samples, 4.08%)</title><rect x="95.9201%" y="517" width="4.0799%" height="15" fill="rgb(244,107,35)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="527.50">std:..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (47 samples, 4.08%)</title><rect x="95.9201%" y="501" width="4.0799%" height="15" fill="rgb(205,140,8)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="511.50">toki..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (47 samples, 4.08%)</title><rect x="95.9201%" y="485" width="4.0799%" height="15" fill="rgb(228,84,46)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="495.50">toki..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (47 samples, 4.08%)</title><rect x="95.9201%" y="469" width="4.0799%" height="15" fill="rgb(254,188,9)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="479.50">toki..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 4.08%)</title><rect x="95.9201%" y="453" width="4.0799%" height="15" fill="rgb(206,112,54)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="463.50">&lt;tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (47 samples, 4.08%)</title><rect x="95.9201%" y="437" width="4.0799%" height="15" fill="rgb(216,84,49)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="447.50">toki..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (47 samples, 4.08%)</title><rect x="95.9201%" y="421" width="4.0799%" height="15" fill="rgb(214,194,35)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="431.50">toki..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (47 samples, 4.08%)</title><rect x="95.9201%" y="405" width="4.0799%" height="15" fill="rgb(249,28,3)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="415.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (47 samples, 4.08%)</title><rect x="95.9201%" y="389" width="4.0799%" height="15" fill="rgb(222,56,52)" fg:x="1105" fg:w="47"/><text x="96.1701%" y="399.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (36 samples, 3.12%)</title><rect x="96.8750%" y="373" width="3.1250%" height="15" fill="rgb(245,217,50)" fg:x="1116" fg:w="36"/><text x="97.1250%" y="383.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (24 samples, 2.08%)</title><rect x="97.9167%" y="357" width="2.0833%" height="15" fill="rgb(213,201,24)" fg:x="1128" fg:w="24"/><text x="98.1667%" y="367.50">t..</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (1 samples, 0.09%)</title><rect x="99.9132%" y="341" width="0.0868%" height="15" fill="rgb(248,116,28)" fg:x="1151" fg:w="1"/><text x="100.1632%" y="351.50"></text></g></svg></svg>