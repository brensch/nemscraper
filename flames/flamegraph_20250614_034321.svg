<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1147"><g><title>parking_lot::condvar::Condvar::notify_one_slow (6 samples, 0.52%)</title><rect x="0.6975%" y="229" width="0.5231%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="6"/><text x="0.9475%" y="239.50"></text></g><g><title>syscall (5 samples, 0.44%)</title><rect x="0.7847%" y="213" width="0.4359%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="5"/><text x="1.0347%" y="223.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (4 samples, 0.35%)</title><rect x="1.2206%" y="229" width="0.3487%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="4"/><text x="1.4706%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (4 samples, 0.35%)</title><rect x="1.2206%" y="213" width="0.3487%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="4"/><text x="1.4706%" y="223.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (4 samples, 0.35%)</title><rect x="1.2206%" y="197" width="0.3487%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="4"/><text x="1.4706%" y="207.50"></text></g><g><title>write (4 samples, 0.35%)</title><rect x="1.2206%" y="181" width="0.3487%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="4"/><text x="1.4706%" y="191.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (14 samples, 1.22%)</title><rect x="0.4359%" y="389" width="1.2206%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="14"/><text x="0.6859%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (14 samples, 1.22%)</title><rect x="0.4359%" y="373" width="1.2206%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="14"/><text x="0.6859%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (14 samples, 1.22%)</title><rect x="0.4359%" y="357" width="1.2206%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="14"/><text x="0.6859%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (14 samples, 1.22%)</title><rect x="0.4359%" y="341" width="1.2206%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="14"/><text x="0.6859%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (14 samples, 1.22%)</title><rect x="0.4359%" y="325" width="1.2206%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="14"/><text x="0.6859%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 1.13%)</title><rect x="0.5231%" y="309" width="1.1334%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="13"/><text x="0.7731%" y="319.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (13 samples, 1.13%)</title><rect x="0.5231%" y="293" width="1.1334%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="13"/><text x="0.7731%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (12 samples, 1.05%)</title><rect x="0.6103%" y="277" width="1.0462%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="12"/><text x="0.8603%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (11 samples, 0.96%)</title><rect x="0.6975%" y="261" width="0.9590%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="11"/><text x="0.9475%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (11 samples, 0.96%)</title><rect x="0.6975%" y="245" width="0.9590%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="11"/><text x="0.9475%" y="255.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_remote (1 samples, 0.09%)</title><rect x="1.5693%" y="229" width="0.0872%" height="15" fill="rgb(225,20,46)" fg:x="18" fg:w="1"/><text x="1.8193%" y="239.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.09%)</title><rect x="2.3540%" y="357" width="0.0872%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="1"/><text x="2.6040%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (3 samples, 0.26%)</title><rect x="2.7027%" y="325" width="0.2616%" height="15" fill="rgb(221,200,47)" fg:x="31" fg:w="3"/><text x="2.9527%" y="335.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (16 samples, 1.39%)</title><rect x="2.9643%" y="325" width="1.3949%" height="15" fill="rgb(226,26,5)" fg:x="34" fg:w="16"/><text x="3.2143%" y="335.50"></text></g><g><title>malloc (13 samples, 1.13%)</title><rect x="3.2258%" y="309" width="1.1334%" height="15" fill="rgb(249,33,26)" fg:x="37" fg:w="13"/><text x="3.4758%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="4.3592%" y="245" width="0.0872%" height="15" fill="rgb(235,183,28)" fg:x="50" fg:w="1"/><text x="4.6092%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="4.3592%" y="229" width="0.0872%" height="15" fill="rgb(221,5,38)" fg:x="50" fg:w="1"/><text x="4.6092%" y="239.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="4.3592%" y="213" width="0.0872%" height="15" fill="rgb(247,18,42)" fg:x="50" fg:w="1"/><text x="4.6092%" y="223.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (2 samples, 0.17%)</title><rect x="4.3592%" y="293" width="0.1744%" height="15" fill="rgb(241,131,45)" fg:x="50" fg:w="2"/><text x="4.6092%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (2 samples, 0.17%)</title><rect x="4.3592%" y="277" width="0.1744%" height="15" fill="rgb(249,31,29)" fg:x="50" fg:w="2"/><text x="4.6092%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (2 samples, 0.17%)</title><rect x="4.3592%" y="261" width="0.1744%" height="15" fill="rgb(225,111,53)" fg:x="50" fg:w="2"/><text x="4.6092%" y="271.50"></text></g><g><title>csv_core::reader::Reader::read_record (1 samples, 0.09%)</title><rect x="4.4464%" y="245" width="0.0872%" height="15" fill="rgb(238,160,17)" fg:x="51" fg:w="1"/><text x="4.6964%" y="255.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.09%)</title><rect x="4.5336%" y="293" width="0.0872%" height="15" fill="rgb(214,148,48)" fg:x="52" fg:w="1"/><text x="4.7836%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.09%)</title><rect x="4.5336%" y="277" width="0.0872%" height="15" fill="rgb(232,36,49)" fg:x="52" fg:w="1"/><text x="4.7836%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (1 samples, 0.09%)</title><rect x="4.5336%" y="261" width="0.0872%" height="15" fill="rgb(209,103,24)" fg:x="52" fg:w="1"/><text x="4.7836%" y="271.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="4.6207%" y="197" width="0.0872%" height="15" fill="rgb(229,88,8)" fg:x="53" fg:w="1"/><text x="4.8707%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (2 samples, 0.17%)</title><rect x="4.6207%" y="293" width="0.1744%" height="15" fill="rgb(213,181,19)" fg:x="53" fg:w="2"/><text x="4.8707%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (2 samples, 0.17%)</title><rect x="4.6207%" y="277" width="0.1744%" height="15" fill="rgb(254,191,54)" fg:x="53" fg:w="2"/><text x="4.8707%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (2 samples, 0.17%)</title><rect x="4.6207%" y="261" width="0.1744%" height="15" fill="rgb(241,83,37)" fg:x="53" fg:w="2"/><text x="4.8707%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.17%)</title><rect x="4.6207%" y="245" width="0.1744%" height="15" fill="rgb(233,36,39)" fg:x="53" fg:w="2"/><text x="4.8707%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.17%)</title><rect x="4.6207%" y="229" width="0.1744%" height="15" fill="rgb(226,3,54)" fg:x="53" fg:w="2"/><text x="4.8707%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.17%)</title><rect x="4.6207%" y="213" width="0.1744%" height="15" fill="rgb(245,192,40)" fg:x="53" fg:w="2"/><text x="4.8707%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="4.7079%" y="197" width="0.0872%" height="15" fill="rgb(238,167,29)" fg:x="54" fg:w="1"/><text x="4.9579%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="4.7079%" y="181" width="0.0872%" height="15" fill="rgb(232,182,51)" fg:x="54" fg:w="1"/><text x="4.9579%" y="191.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.09%)</title><rect x="4.7079%" y="165" width="0.0872%" height="15" fill="rgb(231,60,39)" fg:x="54" fg:w="1"/><text x="4.9579%" y="175.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="4.7079%" y="149" width="0.0872%" height="15" fill="rgb(208,69,12)" fg:x="54" fg:w="1"/><text x="4.9579%" y="159.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (6 samples, 0.52%)</title><rect x="4.3592%" y="309" width="0.5231%" height="15" fill="rgb(235,93,37)" fg:x="50" fg:w="6"/><text x="4.6092%" y="319.50"></text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="4.7951%" y="293" width="0.0872%" height="15" fill="rgb(213,116,39)" fg:x="55" fg:w="1"/><text x="5.0451%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="4.7951%" y="277" width="0.0872%" height="15" fill="rgb(222,207,29)" fg:x="55" fg:w="1"/><text x="5.0451%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="4.7951%" y="261" width="0.0872%" height="15" fill="rgb(206,96,30)" fg:x="55" fg:w="1"/><text x="5.0451%" y="271.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.09%)</title><rect x="4.7951%" y="245" width="0.0872%" height="15" fill="rgb(218,138,4)" fg:x="55" fg:w="1"/><text x="5.0451%" y="255.50"></text></g><g><title>&lt;tracing_subscriber::fmt::time::SystemTime as tracing_subscriber::fmt::time::FormatTime&gt;::format_time (1 samples, 0.09%)</title><rect x="4.7951%" y="229" width="0.0872%" height="15" fill="rgb(250,191,14)" fg:x="55" fg:w="1"/><text x="5.0451%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="4.7951%" y="213" width="0.0872%" height="15" fill="rgb(239,60,40)" fg:x="55" fg:w="1"/><text x="5.0451%" y="223.50"></text></g><g><title>&lt;tracing_subscriber::fmt::time::datetime::DateTime as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="4.7951%" y="197" width="0.0872%" height="15" fill="rgb(206,27,48)" fg:x="55" fg:w="1"/><text x="5.0451%" y="207.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="4.7951%" y="181" width="0.0872%" height="15" fill="rgb(225,35,8)" fg:x="55" fg:w="1"/><text x="5.0451%" y="191.50"></text></g><g><title>core::fmt::num::imp::&lt;impl u32&gt;::_fmt (1 samples, 0.09%)</title><rect x="4.7951%" y="165" width="0.0872%" height="15" fill="rgb(250,213,24)" fg:x="55" fg:w="1"/><text x="5.0451%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.09%)</title><rect x="4.7951%" y="149" width="0.0872%" height="15" fill="rgb(247,123,22)" fg:x="55" fg:w="1"/><text x="5.0451%" y="159.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.09%)</title><rect x="4.8823%" y="293" width="0.0872%" height="15" fill="rgb(231,138,38)" fg:x="56" fg:w="1"/><text x="5.1323%" y="303.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="4.8823%" y="277" width="0.0872%" height="15" fill="rgb(231,145,46)" fg:x="56" fg:w="1"/><text x="5.1323%" y="287.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="4.9695%" y="165" width="0.0872%" height="15" fill="rgb(251,118,11)" fg:x="57" fg:w="1"/><text x="5.2195%" y="175.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="5.0567%" y="165" width="0.0872%" height="15" fill="rgb(217,147,25)" fg:x="58" fg:w="1"/><text x="5.3067%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (3 samples, 0.26%)</title><rect x="4.9695%" y="197" width="0.2616%" height="15" fill="rgb(247,81,37)" fg:x="57" fg:w="3"/><text x="5.2195%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.26%)</title><rect x="4.9695%" y="181" width="0.2616%" height="15" fill="rgb(209,12,38)" fg:x="57" fg:w="3"/><text x="5.2195%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="5.1439%" y="165" width="0.0872%" height="15" fill="rgb(227,1,9)" fg:x="59" fg:w="1"/><text x="5.3939%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.1439%" y="149" width="0.0872%" height="15" fill="rgb(248,47,43)" fg:x="59" fg:w="1"/><text x="5.3939%" y="159.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (9 samples, 0.78%)</title><rect x="5.3182%" y="165" width="0.7847%" height="15" fill="rgb(221,10,30)" fg:x="61" fg:w="9"/><text x="5.5682%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (7 samples, 0.61%)</title><rect x="5.4926%" y="149" width="0.6103%" height="15" fill="rgb(210,229,1)" fg:x="63" fg:w="7"/><text x="5.7426%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="6.0157%" y="133" width="0.0872%" height="15" fill="rgb(222,148,37)" fg:x="69" fg:w="1"/><text x="6.2657%" y="143.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (14 samples, 1.22%)</title><rect x="4.9695%" y="293" width="1.2206%" height="15" fill="rgb(234,67,33)" fg:x="57" fg:w="14"/><text x="5.2195%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.22%)</title><rect x="4.9695%" y="277" width="1.2206%" height="15" fill="rgb(247,98,35)" fg:x="57" fg:w="14"/><text x="5.2195%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (14 samples, 1.22%)</title><rect x="4.9695%" y="261" width="1.2206%" height="15" fill="rgb(247,138,52)" fg:x="57" fg:w="14"/><text x="5.2195%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.22%)</title><rect x="4.9695%" y="245" width="1.2206%" height="15" fill="rgb(213,79,30)" fg:x="57" fg:w="14"/><text x="5.2195%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (14 samples, 1.22%)</title><rect x="4.9695%" y="229" width="1.2206%" height="15" fill="rgb(246,177,23)" fg:x="57" fg:w="14"/><text x="5.2195%" y="239.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (14 samples, 1.22%)</title><rect x="4.9695%" y="213" width="1.2206%" height="15" fill="rgb(230,62,27)" fg:x="57" fg:w="14"/><text x="5.2195%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (11 samples, 0.96%)</title><rect x="5.2310%" y="197" width="0.9590%" height="15" fill="rgb(216,154,8)" fg:x="60" fg:w="11"/><text x="5.4810%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (11 samples, 0.96%)</title><rect x="5.2310%" y="181" width="0.9590%" height="15" fill="rgb(244,35,45)" fg:x="60" fg:w="11"/><text x="5.4810%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="6.1029%" y="165" width="0.0872%" height="15" fill="rgb(251,115,12)" fg:x="70" fg:w="1"/><text x="6.3529%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="6.1029%" y="149" width="0.0872%" height="15" fill="rgb(240,54,50)" fg:x="70" fg:w="1"/><text x="6.3529%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="6.1029%" y="133" width="0.0872%" height="15" fill="rgb(233,84,52)" fg:x="70" fg:w="1"/><text x="6.3529%" y="143.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.09%)</title><rect x="6.1901%" y="261" width="0.0872%" height="15" fill="rgb(207,117,47)" fg:x="71" fg:w="1"/><text x="6.4401%" y="271.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="6.1901%" y="245" width="0.0872%" height="15" fill="rgb(249,43,39)" fg:x="71" fg:w="1"/><text x="6.4401%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (18 samples, 1.57%)</title><rect x="4.8823%" y="309" width="1.5693%" height="15" fill="rgb(209,38,44)" fg:x="56" fg:w="18"/><text x="5.1323%" y="319.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (3 samples, 0.26%)</title><rect x="6.1901%" y="293" width="0.2616%" height="15" fill="rgb(236,212,23)" fg:x="71" fg:w="3"/><text x="6.4401%" y="303.50"></text></g><g><title>std::io::copy::stack_buffer_copy (3 samples, 0.26%)</title><rect x="6.1901%" y="277" width="0.2616%" height="15" fill="rgb(242,79,21)" fg:x="71" fg:w="3"/><text x="6.4401%" y="287.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (2 samples, 0.17%)</title><rect x="6.2772%" y="261" width="0.1744%" height="15" fill="rgb(211,96,35)" fg:x="72" fg:w="2"/><text x="6.5272%" y="271.50"></text></g><g><title>&lt;std::fs::File as std::io::Write&gt;::write (2 samples, 0.17%)</title><rect x="6.2772%" y="245" width="0.1744%" height="15" fill="rgb(253,215,40)" fg:x="72" fg:w="2"/><text x="6.5272%" y="255.50"></text></g><g><title>write (2 samples, 0.17%)</title><rect x="6.2772%" y="229" width="0.1744%" height="15" fill="rgb(211,81,21)" fg:x="72" fg:w="2"/><text x="6.5272%" y="239.50"></text></g><g><title>std::sys::fs::unix::rename (1 samples, 0.09%)</title><rect x="6.4516%" y="309" width="0.0872%" height="15" fill="rgb(208,190,38)" fg:x="74" fg:w="1"/><text x="6.7016%" y="319.50"></text></g><g><title>rename (1 samples, 0.09%)</title><rect x="6.4516%" y="293" width="0.0872%" height="15" fill="rgb(235,213,38)" fg:x="74" fg:w="1"/><text x="6.7016%" y="303.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (26 samples, 2.27%)</title><rect x="4.3592%" y="325" width="2.2668%" height="15" fill="rgb(237,122,38)" fg:x="50" fg:w="26"/><text x="4.6092%" y="335.50">n..</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.09%)</title><rect x="6.5388%" y="309" width="0.0872%" height="15" fill="rgb(244,218,35)" fg:x="75" fg:w="1"/><text x="6.7888%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.09%)</title><rect x="6.5388%" y="293" width="0.0872%" height="15" fill="rgb(240,68,47)" fg:x="75" fg:w="1"/><text x="6.7888%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.09%)</title><rect x="6.5388%" y="277" width="0.0872%" height="15" fill="rgb(210,16,53)" fg:x="75" fg:w="1"/><text x="6.7888%" y="287.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="6.5388%" y="261" width="0.0872%" height="15" fill="rgb(235,124,12)" fg:x="75" fg:w="1"/><text x="6.7888%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="6.5388%" y="245" width="0.0872%" height="15" fill="rgb(224,169,11)" fg:x="75" fg:w="1"/><text x="6.7888%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.09%)</title><rect x="6.5388%" y="229" width="0.0872%" height="15" fill="rgb(250,166,2)" fg:x="75" fg:w="1"/><text x="6.7888%" y="239.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="6.5388%" y="213" width="0.0872%" height="15" fill="rgb(242,216,29)" fg:x="75" fg:w="1"/><text x="6.7888%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.26%)</title><rect x="7.2363%" y="309" width="0.2616%" height="15" fill="rgb(230,116,27)" fg:x="83" fg:w="3"/><text x="7.4863%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.26%)</title><rect x="7.2363%" y="293" width="0.2616%" height="15" fill="rgb(228,99,48)" fg:x="83" fg:w="3"/><text x="7.4863%" y="303.50"></text></g><g><title>__libc_realloc (3 samples, 0.26%)</title><rect x="7.2363%" y="277" width="0.2616%" height="15" fill="rgb(253,11,6)" fg:x="83" fg:w="3"/><text x="7.4863%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.44%)</title><rect x="8.3697%" y="261" width="0.4359%" height="15" fill="rgb(247,143,39)" fg:x="96" fg:w="5"/><text x="8.6197%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.44%)</title><rect x="8.3697%" y="245" width="0.4359%" height="15" fill="rgb(236,97,10)" fg:x="96" fg:w="5"/><text x="8.6197%" y="255.50"></text></g><g><title>__libc_realloc (5 samples, 0.44%)</title><rect x="8.3697%" y="229" width="0.4359%" height="15" fill="rgb(233,208,19)" fg:x="96" fg:w="5"/><text x="8.6197%" y="239.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (81 samples, 7.06%)</title><rect x="7.6722%" y="293" width="7.0619%" height="15" fill="rgb(216,164,2)" fg:x="88" fg:w="81"/><text x="7.9222%" y="303.50">arrow_csv..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (81 samples, 7.06%)</title><rect x="7.6722%" y="277" width="7.0619%" height="15" fill="rgb(220,129,5)" fg:x="88" fg:w="81"/><text x="7.9222%" y="287.50">arrow_csv..</text></g><g><title>csv_core::reader::Reader::read_record (68 samples, 5.93%)</title><rect x="8.8056%" y="261" width="5.9285%" height="15" fill="rgb(242,17,10)" fg:x="101" fg:w="68"/><text x="9.0556%" y="271.50">csv_core..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (3 samples, 0.26%)</title><rect x="14.7341%" y="277" width="0.2616%" height="15" fill="rgb(242,107,0)" fg:x="169" fg:w="3"/><text x="14.9841%" y="287.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (140 samples, 12.21%)</title><rect x="7.4978%" y="309" width="12.2058%" height="15" fill="rgb(251,28,31)" fg:x="86" fg:w="140"/><text x="7.7478%" y="319.50">arrow_csv::reader:..</text></g><g><title>arrow_csv::reader::Decoder::flush (57 samples, 4.97%)</title><rect x="14.7341%" y="293" width="4.9695%" height="15" fill="rgb(233,223,10)" fg:x="169" fg:w="57"/><text x="14.9841%" y="303.50">arrow_..</text></g><g><title>core::iter::adapters::try_process (54 samples, 4.71%)</title><rect x="14.9956%" y="277" width="4.7079%" height="15" fill="rgb(215,21,27)" fg:x="172" fg:w="54"/><text x="15.2456%" y="287.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (54 samples, 4.71%)</title><rect x="14.9956%" y="261" width="4.7079%" height="15" fill="rgb(232,23,21)" fg:x="172" fg:w="54"/><text x="15.2456%" y="271.50">&lt;allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (54 samples, 4.71%)</title><rect x="14.9956%" y="245" width="4.7079%" height="15" fill="rgb(244,5,23)" fg:x="172" fg:w="54"/><text x="15.2456%" y="255.50">&lt;core..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (54 samples, 4.71%)</title><rect x="14.9956%" y="229" width="4.7079%" height="15" fill="rgb(226,81,46)" fg:x="172" fg:w="54"/><text x="15.2456%" y="239.50">&lt;arro..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (38 samples, 3.31%)</title><rect x="16.3906%" y="213" width="3.3130%" height="15" fill="rgb(247,70,30)" fg:x="188" fg:w="38"/><text x="16.6406%" y="223.50">arr..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (5 samples, 0.44%)</title><rect x="19.2677%" y="197" width="0.4359%" height="15" fill="rgb(212,68,19)" fg:x="221" fg:w="5"/><text x="19.5177%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.44%)</title><rect x="19.2677%" y="181" width="0.4359%" height="15" fill="rgb(240,187,13)" fg:x="221" fg:w="5"/><text x="19.5177%" y="191.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="19.6164%" y="165" width="0.0872%" height="15" fill="rgb(223,113,26)" fg:x="225" fg:w="1"/><text x="19.8664%" y="175.50"></text></g><g><title>arrow_schema::schema::Schema::new (1 samples, 0.09%)</title><rect x="19.7036%" y="309" width="0.0872%" height="15" fill="rgb(206,192,2)" fg:x="226" fg:w="1"/><text x="19.9536%" y="319.50"></text></g><g><title>cfree (11 samples, 0.96%)</title><rect x="19.7908%" y="309" width="0.9590%" height="15" fill="rgb(241,108,4)" fg:x="227" fg:w="11"/><text x="20.0408%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (6 samples, 0.52%)</title><rect x="20.7498%" y="309" width="0.5231%" height="15" fill="rgb(247,173,49)" fg:x="238" fg:w="6"/><text x="20.9998%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.52%)</title><rect x="20.7498%" y="293" width="0.5231%" height="15" fill="rgb(224,114,35)" fg:x="238" fg:w="6"/><text x="20.9998%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (6 samples, 0.52%)</title><rect x="20.7498%" y="277" width="0.5231%" height="15" fill="rgb(245,159,27)" fg:x="238" fg:w="6"/><text x="20.9998%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.52%)</title><rect x="20.7498%" y="261" width="0.5231%" height="15" fill="rgb(245,172,44)" fg:x="238" fg:w="6"/><text x="20.9998%" y="271.50"></text></g><g><title>cfree (6 samples, 0.52%)</title><rect x="20.7498%" y="245" width="0.5231%" height="15" fill="rgb(236,23,11)" fg:x="238" fg:w="6"/><text x="20.9998%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="21.2729%" y="293" width="0.0872%" height="15" fill="rgb(205,117,38)" fg:x="244" fg:w="1"/><text x="21.5229%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="21.2729%" y="277" width="0.0872%" height="15" fill="rgb(237,72,25)" fg:x="244" fg:w="1"/><text x="21.5229%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="21.2729%" y="261" width="0.0872%" height="15" fill="rgb(244,70,9)" fg:x="244" fg:w="1"/><text x="21.5229%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_schema::datatype::DataType&gt; (1 samples, 0.09%)</title><rect x="21.2729%" y="245" width="0.0872%" height="15" fill="rgb(217,125,39)" fg:x="244" fg:w="1"/><text x="21.5229%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (2 samples, 0.17%)</title><rect x="21.2729%" y="309" width="0.1744%" height="15" fill="rgb(235,36,10)" fg:x="244" fg:w="2"/><text x="21.5229%" y="319.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="21.3601%" y="293" width="0.0872%" height="15" fill="rgb(251,123,47)" fg:x="245" fg:w="1"/><text x="21.6101%" y="303.50"></text></g><g><title>__default_morecore (1 samples, 0.09%)</title><rect x="21.3601%" y="277" width="0.0872%" height="15" fill="rgb(221,13,13)" fg:x="245" fg:w="1"/><text x="21.6101%" y="287.50"></text></g><g><title>__sbrk (1 samples, 0.09%)</title><rect x="21.3601%" y="261" width="0.0872%" height="15" fill="rgb(238,131,9)" fg:x="245" fg:w="1"/><text x="21.6101%" y="271.50"></text></g><g><title>brk (1 samples, 0.09%)</title><rect x="21.3601%" y="245" width="0.0872%" height="15" fill="rgb(211,50,8)" fg:x="245" fg:w="1"/><text x="21.6101%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.17%)</title><rect x="23.0166%" y="293" width="0.1744%" height="15" fill="rgb(245,182,24)" fg:x="264" fg:w="2"/><text x="23.2666%" y="303.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.17%)</title><rect x="23.0166%" y="277" width="0.1744%" height="15" fill="rgb(242,14,37)" fg:x="264" fg:w="2"/><text x="23.2666%" y="287.50"></text></g><g><title>cfree (17 samples, 1.48%)</title><rect x="23.1909%" y="293" width="1.4821%" height="15" fill="rgb(246,228,12)" fg:x="266" fg:w="17"/><text x="23.4409%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (41 samples, 3.57%)</title><rect x="24.6731%" y="293" width="3.5745%" height="15" fill="rgb(213,55,15)" fg:x="283" fg:w="41"/><text x="24.9231%" y="303.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (20 samples, 1.74%)</title><rect x="26.5039%" y="277" width="1.7437%" height="15" fill="rgb(209,9,3)" fg:x="304" fg:w="20"/><text x="26.7539%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (10 samples, 0.87%)</title><rect x="29.8169%" y="277" width="0.8718%" height="15" fill="rgb(230,59,30)" fg:x="342" fg:w="10"/><text x="30.0669%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.09%)</title><rect x="30.6888%" y="277" width="0.0872%" height="15" fill="rgb(209,121,21)" fg:x="352" fg:w="1"/><text x="30.9388%" y="287.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (12 samples, 1.05%)</title><rect x="30.7759%" y="277" width="1.0462%" height="15" fill="rgb(220,109,13)" fg:x="353" fg:w="12"/><text x="31.0259%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.09%)</title><rect x="31.7350%" y="261" width="0.0872%" height="15" fill="rgb(232,18,1)" fg:x="364" fg:w="1"/><text x="31.9850%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (42 samples, 3.66%)</title><rect x="28.2476%" y="293" width="3.6617%" height="15" fill="rgb(215,41,42)" fg:x="324" fg:w="42"/><text x="28.4976%" y="303.50">nems..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="31.8221%" y="277" width="0.0872%" height="15" fill="rgb(224,123,36)" fg:x="365" fg:w="1"/><text x="32.0721%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="33.3043%" y="277" width="0.0872%" height="15" fill="rgb(240,125,3)" fg:x="382" fg:w="1"/><text x="33.5543%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (4 samples, 0.35%)</title><rect x="33.3915%" y="277" width="0.3487%" height="15" fill="rgb(205,98,50)" fg:x="383" fg:w="4"/><text x="33.6415%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (156 samples, 13.60%)</title><rect x="21.4473%" y="309" width="13.6007%" height="15" fill="rgb(205,185,37)" fg:x="246" fg:w="156"/><text x="21.6973%" y="319.50">nemscraper::process::..</text></g><g><title>nemscraper::process::utils::clean_str (36 samples, 3.14%)</title><rect x="31.9093%" y="293" width="3.1386%" height="15" fill="rgb(238,207,15)" fg:x="366" fg:w="36"/><text x="32.1593%" y="303.50">nem..</text></g><g><title>malloc (15 samples, 1.31%)</title><rect x="33.7402%" y="277" width="1.3078%" height="15" fill="rgb(213,199,42)" fg:x="387" fg:w="15"/><text x="33.9902%" y="287.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (6 samples, 0.52%)</title><rect x="35.4839%" y="229" width="0.5231%" height="15" fill="rgb(235,201,11)" fg:x="407" fg:w="6"/><text x="35.7339%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (4 samples, 0.35%)</title><rect x="35.6582%" y="213" width="0.3487%" height="15" fill="rgb(207,46,11)" fg:x="409" fg:w="4"/><text x="35.9082%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (3 samples, 0.26%)</title><rect x="35.7454%" y="197" width="0.2616%" height="15" fill="rgb(241,35,35)" fg:x="410" fg:w="3"/><text x="35.9954%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="36.0070%" y="165" width="0.0872%" height="15" fill="rgb(243,32,47)" fg:x="413" fg:w="1"/><text x="36.2570%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="36.0070%" y="149" width="0.0872%" height="15" fill="rgb(247,202,23)" fg:x="413" fg:w="1"/><text x="36.2570%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="36.0070%" y="133" width="0.0872%" height="15" fill="rgb(219,102,11)" fg:x="413" fg:w="1"/><text x="36.2570%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (2 samples, 0.17%)</title><rect x="36.0070%" y="181" width="0.1744%" height="15" fill="rgb(243,110,44)" fg:x="413" fg:w="2"/><text x="36.2570%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="36.0942%" y="165" width="0.0872%" height="15" fill="rgb(222,74,54)" fg:x="414" fg:w="1"/><text x="36.3442%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.35%)</title><rect x="36.0070%" y="213" width="0.3487%" height="15" fill="rgb(216,99,12)" fg:x="413" fg:w="4"/><text x="36.2570%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (4 samples, 0.35%)</title><rect x="36.0070%" y="197" width="0.3487%" height="15" fill="rgb(226,22,26)" fg:x="413" fg:w="4"/><text x="36.2570%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.17%)</title><rect x="36.1813%" y="181" width="0.1744%" height="15" fill="rgb(217,163,10)" fg:x="415" fg:w="2"/><text x="36.4313%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (15 samples, 1.31%)</title><rect x="35.1351%" y="261" width="1.3078%" height="15" fill="rgb(213,25,53)" fg:x="403" fg:w="15"/><text x="35.3851%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (15 samples, 1.31%)</title><rect x="35.1351%" y="245" width="1.3078%" height="15" fill="rgb(252,105,26)" fg:x="403" fg:w="15"/><text x="35.3851%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (5 samples, 0.44%)</title><rect x="36.0070%" y="229" width="0.4359%" height="15" fill="rgb(220,39,43)" fg:x="413" fg:w="5"/><text x="36.2570%" y="239.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="36.3557%" y="213" width="0.0872%" height="15" fill="rgb(229,68,48)" fg:x="417" fg:w="1"/><text x="36.6057%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (55 samples, 4.80%)</title><rect x="38.0122%" y="245" width="4.7951%" height="15" fill="rgb(252,8,32)" fg:x="436" fg:w="55"/><text x="38.2622%" y="255.50">&lt;parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (30 samples, 2.62%)</title><rect x="40.1918%" y="229" width="2.6155%" height="15" fill="rgb(223,20,43)" fg:x="461" fg:w="30"/><text x="40.4418%" y="239.50">pa..</text></g><g><title>ahash::random_state::RandomState::hash_one (3 samples, 0.26%)</title><rect x="42.5458%" y="213" width="0.2616%" height="15" fill="rgb(229,81,49)" fg:x="488" fg:w="3"/><text x="42.7958%" y="223.50"></text></g><g><title>malloc (2 samples, 0.17%)</title><rect x="43.1561%" y="229" width="0.1744%" height="15" fill="rgb(236,28,36)" fg:x="495" fg:w="2"/><text x="43.4061%" y="239.50"></text></g><g><title>parquet::column::writer::compare_greater (13 samples, 1.13%)</title><rect x="44.0279%" y="213" width="1.1334%" height="15" fill="rgb(249,185,26)" fg:x="505" fg:w="13"/><text x="44.2779%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (66 samples, 5.75%)</title><rect x="42.8073%" y="245" width="5.7541%" height="15" fill="rgb(249,174,33)" fg:x="491" fg:w="66"/><text x="43.0573%" y="255.50">&lt;parque..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (60 samples, 5.23%)</title><rect x="43.3304%" y="229" width="5.2310%" height="15" fill="rgb(233,201,37)" fg:x="497" fg:w="60"/><text x="43.5804%" y="239.50">parque..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (39 samples, 3.40%)</title><rect x="45.1613%" y="213" width="3.4002%" height="15" fill="rgb(221,78,26)" fg:x="518" fg:w="39"/><text x="45.4113%" y="223.50">par..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.26%)</title><rect x="48.2999%" y="197" width="0.2616%" height="15" fill="rgb(250,127,30)" fg:x="554" fg:w="3"/><text x="48.5499%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (6 samples, 0.52%)</title><rect x="48.7358%" y="229" width="0.5231%" height="15" fill="rgb(230,49,44)" fg:x="559" fg:w="6"/><text x="48.9858%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.26%)</title><rect x="48.9974%" y="213" width="0.2616%" height="15" fill="rgb(229,67,23)" fg:x="562" fg:w="3"/><text x="49.2474%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.26%)</title><rect x="48.9974%" y="197" width="0.2616%" height="15" fill="rgb(249,83,47)" fg:x="562" fg:w="3"/><text x="49.2474%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (3 samples, 0.26%)</title><rect x="49.6949%" y="197" width="0.2616%" height="15" fill="rgb(215,43,3)" fg:x="570" fg:w="3"/><text x="49.9449%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (3 samples, 0.26%)</title><rect x="49.6949%" y="181" width="0.2616%" height="15" fill="rgb(238,154,13)" fg:x="570" fg:w="3"/><text x="49.9449%" y="191.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (14 samples, 1.22%)</title><rect x="49.2589%" y="229" width="1.2206%" height="15" fill="rgb(219,56,2)" fg:x="565" fg:w="14"/><text x="49.5089%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (14 samples, 1.22%)</title><rect x="49.2589%" y="213" width="1.2206%" height="15" fill="rgb(233,0,4)" fg:x="565" fg:w="14"/><text x="49.5089%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (6 samples, 0.52%)</title><rect x="49.9564%" y="197" width="0.5231%" height="15" fill="rgb(235,30,7)" fg:x="573" fg:w="6"/><text x="50.2064%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (46 samples, 4.01%)</title><rect x="51.5257%" y="197" width="4.0105%" height="15" fill="rgb(250,79,13)" fg:x="591" fg:w="46"/><text x="51.7757%" y="207.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (5 samples, 0.44%)</title><rect x="55.1003%" y="181" width="0.4359%" height="15" fill="rgb(211,146,34)" fg:x="632" fg:w="5"/><text x="55.3503%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (58 samples, 5.06%)</title><rect x="50.7411%" y="213" width="5.0567%" height="15" fill="rgb(228,22,38)" fg:x="582" fg:w="58"/><text x="50.9911%" y="223.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.26%)</title><rect x="55.5362%" y="197" width="0.2616%" height="15" fill="rgb(235,168,5)" fg:x="637" fg:w="3"/><text x="55.7862%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (19 samples, 1.66%)</title><rect x="55.7977%" y="213" width="1.6565%" height="15" fill="rgb(221,155,16)" fg:x="640" fg:w="19"/><text x="56.0477%" y="223.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (19 samples, 1.66%)</title><rect x="55.7977%" y="197" width="1.6565%" height="15" fill="rgb(215,215,53)" fg:x="640" fg:w="19"/><text x="56.0477%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="57.4542%" y="213" width="0.0872%" height="15" fill="rgb(223,4,10)" fg:x="659" fg:w="1"/><text x="57.7042%" y="223.50"></text></g><g><title>brotli::enc::backward_references::TestStaticDictionaryItem (1 samples, 0.09%)</title><rect x="63.2084%" y="165" width="0.0872%" height="15" fill="rgb(234,103,6)" fg:x="725" fg:w="1"/><text x="63.4584%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (3 samples, 0.26%)</title><rect x="63.2956%" y="165" width="0.2616%" height="15" fill="rgb(227,97,0)" fg:x="726" fg:w="3"/><text x="63.5456%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (55 samples, 4.80%)</title><rect x="58.9364%" y="181" width="4.7951%" height="15" fill="rgb(234,150,53)" fg:x="676" fg:w="55"/><text x="59.1864%" y="191.50">&lt;brotl..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="63.5571%" y="165" width="0.1744%" height="15" fill="rgb(228,201,54)" fg:x="729" fg:w="2"/><text x="63.8071%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (71 samples, 6.19%)</title><rect x="57.6286%" y="197" width="6.1901%" height="15" fill="rgb(222,22,37)" fg:x="661" fg:w="71"/><text x="57.8786%" y="207.50">brotli::..</text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="63.7315%" y="181" width="0.0872%" height="15" fill="rgb(237,53,32)" fg:x="731" fg:w="1"/><text x="63.9815%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (2 samples, 0.17%)</title><rect x="64.6905%" y="149" width="0.1744%" height="15" fill="rgb(233,25,53)" fg:x="742" fg:w="2"/><text x="64.9405%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliWriteHuffmanTree (2 samples, 0.17%)</title><rect x="64.6905%" y="133" width="0.1744%" height="15" fill="rgb(210,40,34)" fg:x="742" fg:w="2"/><text x="64.9405%" y="143.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (2 samples, 0.17%)</title><rect x="64.8649%" y="149" width="0.1744%" height="15" fill="rgb(241,220,44)" fg:x="744" fg:w="2"/><text x="65.1149%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (10 samples, 0.87%)</title><rect x="64.6905%" y="181" width="0.8718%" height="15" fill="rgb(235,28,35)" fg:x="742" fg:w="10"/><text x="64.9405%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (10 samples, 0.87%)</title><rect x="64.6905%" y="165" width="0.8718%" height="15" fill="rgb(210,56,17)" fg:x="742" fg:w="10"/><text x="64.9405%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (6 samples, 0.52%)</title><rect x="65.0392%" y="149" width="0.5231%" height="15" fill="rgb(224,130,29)" fg:x="746" fg:w="6"/><text x="65.2892%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (2 samples, 0.17%)</title><rect x="65.5623%" y="181" width="0.1744%" height="15" fill="rgb(235,212,8)" fg:x="752" fg:w="2"/><text x="65.8123%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.61%)</title><rect x="65.7367%" y="181" width="0.6103%" height="15" fill="rgb(223,33,50)" fg:x="754" fg:w="7"/><text x="65.9867%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (3 samples, 0.26%)</title><rect x="66.3470%" y="181" width="0.2616%" height="15" fill="rgb(219,149,13)" fg:x="761" fg:w="3"/><text x="66.5970%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (34 samples, 2.96%)</title><rect x="63.8187%" y="197" width="2.9643%" height="15" fill="rgb(250,156,29)" fg:x="732" fg:w="34"/><text x="64.0687%" y="207.50">bro..</text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (2 samples, 0.17%)</title><rect x="66.6085%" y="181" width="0.1744%" height="15" fill="rgb(216,193,19)" fg:x="764" fg:w="2"/><text x="66.8585%" y="191.50"></text></g><g><title>brotli::enc::encode::DecideOverLiteralContextModeling (1 samples, 0.09%)</title><rect x="66.7829%" y="197" width="0.0872%" height="15" fill="rgb(216,135,14)" fg:x="766" fg:w="1"/><text x="67.0329%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (15 samples, 1.31%)</title><rect x="66.8701%" y="197" width="1.3078%" height="15" fill="rgb(241,47,5)" fg:x="767" fg:w="15"/><text x="67.1201%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (10 samples, 0.87%)</title><rect x="68.1779%" y="197" width="0.8718%" height="15" fill="rgb(233,42,35)" fg:x="782" fg:w="10"/><text x="68.4279%" y="207.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (2 samples, 0.17%)</title><rect x="68.8753%" y="181" width="0.1744%" height="15" fill="rgb(231,13,6)" fg:x="790" fg:w="2"/><text x="69.1253%" y="191.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (2 samples, 0.17%)</title><rect x="68.8753%" y="165" width="0.1744%" height="15" fill="rgb(207,181,40)" fg:x="790" fg:w="2"/><text x="69.1253%" y="175.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (214 samples, 18.66%)</title><rect x="50.4795%" y="229" width="18.6574%" height="15" fill="rgb(254,173,49)" fg:x="579" fg:w="214"/><text x="50.7295%" y="239.50">&lt;parquet::compression::brotli..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (133 samples, 11.60%)</title><rect x="57.5414%" y="213" width="11.5955%" height="15" fill="rgb(221,1,38)" fg:x="660" fg:w="133"/><text x="57.7914%" y="223.50">brotli::enc::writ..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (1 samples, 0.09%)</title><rect x="69.0497%" y="197" width="0.0872%" height="15" fill="rgb(206,124,46)" fg:x="792" fg:w="1"/><text x="69.2997%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (1 samples, 0.09%)</title><rect x="69.0497%" y="181" width="0.0872%" height="15" fill="rgb(249,21,11)" fg:x="792" fg:w="1"/><text x="69.2997%" y="191.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.09%)</title><rect x="69.1369%" y="229" width="0.0872%" height="15" fill="rgb(222,201,40)" fg:x="793" fg:w="1"/><text x="69.3869%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.09%)</title><rect x="69.1369%" y="213" width="0.0872%" height="15" fill="rgb(235,61,29)" fg:x="793" fg:w="1"/><text x="69.3869%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="69.1369%" y="197" width="0.0872%" height="15" fill="rgb(219,207,3)" fg:x="793" fg:w="1"/><text x="69.3869%" y="207.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="69.1369%" y="181" width="0.0872%" height="15" fill="rgb(222,56,46)" fg:x="793" fg:w="1"/><text x="69.3869%" y="191.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.09%)</title><rect x="69.2241%" y="229" width="0.0872%" height="15" fill="rgb(239,76,54)" fg:x="794" fg:w="1"/><text x="69.4741%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (239 samples, 20.84%)</title><rect x="48.5615%" y="245" width="20.8370%" height="15" fill="rgb(231,124,27)" fg:x="557" fg:w="239"/><text x="48.8115%" y="255.50">parquet::column::writer::GenericC..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.09%)</title><rect x="69.3112%" y="229" width="0.0872%" height="15" fill="rgb(249,195,6)" fg:x="795" fg:w="1"/><text x="69.5612%" y="239.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="74.0192%" y="181" width="0.0872%" height="15" fill="rgb(237,174,47)" fg:x="849" fg:w="1"/><text x="74.2692%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (53 samples, 4.62%)</title><rect x="69.8344%" y="213" width="4.6207%" height="15" fill="rgb(206,201,31)" fg:x="801" fg:w="53"/><text x="70.0844%" y="223.50">brotl..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (46 samples, 4.01%)</title><rect x="70.4446%" y="197" width="4.0105%" height="15" fill="rgb(231,57,52)" fg:x="808" fg:w="46"/><text x="70.6946%" y="207.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (4 samples, 0.35%)</title><rect x="74.1064%" y="181" width="0.3487%" height="15" fill="rgb(248,177,22)" fg:x="850" fg:w="4"/><text x="74.3564%" y="191.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="74.4551%" y="213" width="0.0872%" height="15" fill="rgb(215,211,37)" fg:x="854" fg:w="1"/><text x="74.7051%" y="223.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="74.4551%" y="197" width="0.0872%" height="15" fill="rgb(241,128,51)" fg:x="854" fg:w="1"/><text x="74.7051%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="74.6295%" y="181" width="0.0872%" height="15" fill="rgb(227,165,31)" fg:x="856" fg:w="1"/><text x="74.8795%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="74.6295%" y="165" width="0.0872%" height="15" fill="rgb(228,167,24)" fg:x="856" fg:w="1"/><text x="74.8795%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="74.6295%" y="149" width="0.0872%" height="15" fill="rgb(228,143,12)" fg:x="856" fg:w="1"/><text x="74.8795%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="74.7167%" y="181" width="0.0872%" height="15" fill="rgb(249,149,8)" fg:x="857" fg:w="1"/><text x="74.9667%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (5 samples, 0.44%)</title><rect x="74.8038%" y="181" width="0.4359%" height="15" fill="rgb(243,35,44)" fg:x="858" fg:w="5"/><text x="75.0538%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreTrivialContextMap (1 samples, 0.09%)</title><rect x="75.2398%" y="181" width="0.0872%" height="15" fill="rgb(246,89,9)" fg:x="863" fg:w="1"/><text x="75.4898%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (10 samples, 0.87%)</title><rect x="74.5423%" y="197" width="0.8718%" height="15" fill="rgb(233,213,13)" fg:x="855" fg:w="10"/><text x="74.7923%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.09%)</title><rect x="75.3269%" y="181" width="0.0872%" height="15" fill="rgb(233,141,41)" fg:x="864" fg:w="1"/><text x="75.5769%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (466 samples, 40.63%)</title><rect x="35.0480%" y="277" width="40.6277%" height="15" fill="rgb(239,167,4)" fg:x="402" fg:w="466"/><text x="35.2980%" y="287.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (450 samples, 39.23%)</title><rect x="36.4429%" y="261" width="39.2328%" height="15" fill="rgb(209,217,16)" fg:x="418" fg:w="450"/><text x="36.6929%" y="271.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_int..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (72 samples, 6.28%)</title><rect x="69.3984%" y="245" width="6.2772%" height="15" fill="rgb(219,88,35)" fg:x="796" fg:w="72"/><text x="69.6484%" y="255.50">parquet:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (72 samples, 6.28%)</title><rect x="69.3984%" y="229" width="6.2772%" height="15" fill="rgb(220,193,23)" fg:x="796" fg:w="72"/><text x="69.6484%" y="239.50">&lt;parquet..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (13 samples, 1.13%)</title><rect x="74.5423%" y="213" width="1.1334%" height="15" fill="rgb(230,90,52)" fg:x="855" fg:w="13"/><text x="74.7923%" y="223.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (3 samples, 0.26%)</title><rect x="75.4141%" y="197" width="0.2616%" height="15" fill="rgb(252,106,19)" fg:x="865" fg:w="3"/><text x="75.6641%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::try_new (1 samples, 0.09%)</title><rect x="75.6757%" y="261" width="0.0872%" height="15" fill="rgb(206,74,20)" fg:x="868" fg:w="1"/><text x="75.9257%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (471 samples, 41.06%)</title><rect x="35.0480%" y="309" width="41.0636%" height="15" fill="rgb(230,138,44)" fg:x="402" fg:w="471"/><text x="35.2980%" y="319.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (471 samples, 41.06%)</title><rect x="35.0480%" y="293" width="41.0636%" height="15" fill="rgb(235,182,43)" fg:x="402" fg:w="471"/><text x="35.2980%" y="303.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (5 samples, 0.44%)</title><rect x="75.6757%" y="277" width="0.4359%" height="15" fill="rgb(242,16,51)" fg:x="868" fg:w="5"/><text x="75.9257%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (4 samples, 0.35%)</title><rect x="75.7629%" y="261" width="0.3487%" height="15" fill="rgb(248,9,4)" fg:x="869" fg:w="4"/><text x="76.0129%" y="271.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_all (9 samples, 0.78%)</title><rect x="76.1116%" y="261" width="0.7847%" height="15" fill="rgb(210,31,22)" fg:x="873" fg:w="9"/><text x="76.3616%" y="271.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_all (9 samples, 0.78%)</title><rect x="76.1116%" y="245" width="0.7847%" height="15" fill="rgb(239,54,39)" fg:x="873" fg:w="9"/><text x="76.3616%" y="255.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (9 samples, 0.78%)</title><rect x="76.1116%" y="229" width="0.7847%" height="15" fill="rgb(230,99,41)" fg:x="873" fg:w="9"/><text x="76.3616%" y="239.50"></text></g><g><title>write (9 samples, 0.78%)</title><rect x="76.1116%" y="213" width="0.7847%" height="15" fill="rgb(253,106,12)" fg:x="873" fg:w="9"/><text x="76.3616%" y="223.50"></text></g><g><title>&lt;nu_ansi_term::display::AnsiGenericString&lt;str&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.09%)</title><rect x="76.8963%" y="229" width="0.0872%" height="15" fill="rgb(213,46,41)" fg:x="882" fg:w="1"/><text x="77.1463%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.09%)</title><rect x="76.8963%" y="213" width="0.0872%" height="15" fill="rgb(215,133,35)" fg:x="882" fg:w="1"/><text x="77.1463%" y="223.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (11 samples, 0.96%)</title><rect x="76.1116%" y="293" width="0.9590%" height="15" fill="rgb(213,28,5)" fg:x="873" fg:w="11"/><text x="76.3616%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11 samples, 0.96%)</title><rect x="76.1116%" y="277" width="0.9590%" height="15" fill="rgb(215,77,49)" fg:x="873" fg:w="11"/><text x="76.3616%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.17%)</title><rect x="76.8963%" y="261" width="0.1744%" height="15" fill="rgb(248,100,22)" fg:x="882" fg:w="2"/><text x="77.1463%" y="271.50"></text></g><g><title>core::fmt::write (2 samples, 0.17%)</title><rect x="76.8963%" y="245" width="0.1744%" height="15" fill="rgb(208,67,9)" fg:x="882" fg:w="2"/><text x="77.1463%" y="255.50"></text></g><g><title>nu_ansi_term::ansi::&lt;impl nu_ansi_term::style::Style&gt;::write_prefix (1 samples, 0.09%)</title><rect x="76.9834%" y="229" width="0.0872%" height="15" fill="rgb(219,133,21)" fg:x="883" fg:w="1"/><text x="77.2334%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="76.9834%" y="213" width="0.0872%" height="15" fill="rgb(246,46,29)" fg:x="883" fg:w="1"/><text x="77.2334%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.09%)</title><rect x="76.9834%" y="197" width="0.0872%" height="15" fill="rgb(246,185,52)" fg:x="883" fg:w="1"/><text x="77.2334%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (810 samples, 70.62%)</title><rect x="6.6260%" y="325" width="70.6190%" height="15" fill="rgb(252,136,11)" fg:x="76" fg:w="810"/><text x="6.8760%" y="335.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (13 samples, 1.13%)</title><rect x="76.1116%" y="309" width="1.1334%" height="15" fill="rgb(219,138,53)" fg:x="873" fg:w="13"/><text x="76.3616%" y="319.50"></text></g><g><title>tracing_core::dispatcher::get_default (2 samples, 0.17%)</title><rect x="77.0706%" y="293" width="0.1744%" height="15" fill="rgb(211,51,23)" fg:x="884" fg:w="2"/><text x="77.3206%" y="303.50"></text></g><g><title>core::slice::memchr::memchr_aligned (6 samples, 0.52%)</title><rect x="78.3784%" y="309" width="0.5231%" height="15" fill="rgb(247,221,28)" fg:x="899" fg:w="6"/><text x="78.6284%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (888 samples, 77.42%)</title><rect x="1.8309%" y="373" width="77.4194%" height="15" fill="rgb(251,222,45)" fg:x="21" fg:w="888"/><text x="2.0809%" y="383.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (881 samples, 76.81%)</title><rect x="2.4412%" y="357" width="76.8091%" height="15" fill="rgb(217,162,53)" fg:x="28" fg:w="881"/><text x="2.6912%" y="367.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (881 samples, 76.81%)</title><rect x="2.4412%" y="341" width="76.8091%" height="15" fill="rgb(229,93,14)" fg:x="28" fg:w="881"/><text x="2.6912%" y="351.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (23 samples, 2.01%)</title><rect x="77.2450%" y="325" width="2.0052%" height="15" fill="rgb(209,67,49)" fg:x="886" fg:w="23"/><text x="77.4950%" y="335.50">s..</text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.35%)</title><rect x="78.9015%" y="309" width="0.3487%" height="15" fill="rgb(213,87,29)" fg:x="905" fg:w="4"/><text x="79.1515%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="79.2502%" y="341" width="0.0872%" height="15" fill="rgb(205,151,52)" fg:x="909" fg:w="1"/><text x="79.5002%" y="351.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (1 samples, 0.09%)</title><rect x="79.3374%" y="325" width="0.0872%" height="15" fill="rgb(253,215,39)" fg:x="910" fg:w="1"/><text x="79.5874%" y="335.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.09%)</title><rect x="79.3374%" y="309" width="0.0872%" height="15" fill="rgb(221,220,41)" fg:x="910" fg:w="1"/><text x="79.5874%" y="319.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (1 samples, 0.09%)</title><rect x="79.3374%" y="293" width="0.0872%" height="15" fill="rgb(218,133,21)" fg:x="910" fg:w="1"/><text x="79.5874%" y="303.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (1 samples, 0.09%)</title><rect x="79.3374%" y="277" width="0.0872%" height="15" fill="rgb(221,193,43)" fg:x="910" fg:w="1"/><text x="79.5874%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="79.4246%" y="213" width="0.0872%" height="15" fill="rgb(240,128,52)" fg:x="911" fg:w="1"/><text x="79.6746%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="79.4246%" y="197" width="0.0872%" height="15" fill="rgb(253,114,12)" fg:x="911" fg:w="1"/><text x="79.6746%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="79.4246%" y="181" width="0.0872%" height="15" fill="rgb(215,223,47)" fg:x="911" fg:w="1"/><text x="79.6746%" y="191.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (3 samples, 0.26%)</title><rect x="79.3374%" y="341" width="0.2616%" height="15" fill="rgb(248,225,23)" fg:x="910" fg:w="3"/><text x="79.5874%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.17%)</title><rect x="79.4246%" y="325" width="0.1744%" height="15" fill="rgb(250,108,0)" fg:x="911" fg:w="2"/><text x="79.6746%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.17%)</title><rect x="79.4246%" y="309" width="0.1744%" height="15" fill="rgb(228,208,7)" fg:x="911" fg:w="2"/><text x="79.6746%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.17%)</title><rect x="79.4246%" y="293" width="0.1744%" height="15" fill="rgb(244,45,10)" fg:x="911" fg:w="2"/><text x="79.6746%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.17%)</title><rect x="79.4246%" y="277" width="0.1744%" height="15" fill="rgb(207,125,25)" fg:x="911" fg:w="2"/><text x="79.6746%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.17%)</title><rect x="79.4246%" y="261" width="0.1744%" height="15" fill="rgb(210,195,18)" fg:x="911" fg:w="2"/><text x="79.6746%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.17%)</title><rect x="79.4246%" y="245" width="0.1744%" height="15" fill="rgb(249,80,12)" fg:x="911" fg:w="2"/><text x="79.6746%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.17%)</title><rect x="79.4246%" y="229" width="0.1744%" height="15" fill="rgb(221,65,9)" fg:x="911" fg:w="2"/><text x="79.6746%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="79.5118%" y="213" width="0.0872%" height="15" fill="rgb(235,49,36)" fg:x="912" fg:w="1"/><text x="79.7618%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="79.5118%" y="197" width="0.0872%" height="15" fill="rgb(225,32,20)" fg:x="912" fg:w="1"/><text x="79.7618%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="79.5118%" y="181" width="0.0872%" height="15" fill="rgb(215,141,46)" fg:x="912" fg:w="1"/><text x="79.7618%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="79.5118%" y="165" width="0.0872%" height="15" fill="rgb(250,160,47)" fg:x="912" fg:w="1"/><text x="79.7618%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="79.5990%" y="325" width="0.0872%" height="15" fill="rgb(216,222,40)" fg:x="913" fg:w="1"/><text x="79.8490%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="79.5990%" y="309" width="0.0872%" height="15" fill="rgb(234,217,39)" fg:x="913" fg:w="1"/><text x="79.8490%" y="319.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="79.5990%" y="293" width="0.0872%" height="15" fill="rgb(207,178,40)" fg:x="913" fg:w="1"/><text x="79.8490%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="79.7733%" y="277" width="0.0872%" height="15" fill="rgb(221,136,13)" fg:x="915" fg:w="1"/><text x="80.0233%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="79.7733%" y="261" width="0.0872%" height="15" fill="rgb(249,199,10)" fg:x="915" fg:w="1"/><text x="80.0233%" y="271.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="79.7733%" y="245" width="0.0872%" height="15" fill="rgb(249,222,13)" fg:x="915" fg:w="1"/><text x="80.0233%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (5 samples, 0.44%)</title><rect x="79.6861%" y="309" width="0.4359%" height="15" fill="rgb(244,185,38)" fg:x="914" fg:w="5"/><text x="79.9361%" y="319.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (5 samples, 0.44%)</title><rect x="79.6861%" y="293" width="0.4359%" height="15" fill="rgb(236,202,9)" fg:x="914" fg:w="5"/><text x="79.9361%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record (3 samples, 0.26%)</title><rect x="79.8605%" y="277" width="0.2616%" height="15" fill="rgb(250,229,37)" fg:x="916" fg:w="3"/><text x="80.1105%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.09%)</title><rect x="80.1221%" y="293" width="0.0872%" height="15" fill="rgb(206,174,23)" fg:x="919" fg:w="1"/><text x="80.3721%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="80.1221%" y="277" width="0.0872%" height="15" fill="rgb(211,33,43)" fg:x="919" fg:w="1"/><text x="80.3721%" y="287.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (12 samples, 1.05%)</title><rect x="79.6861%" y="325" width="1.0462%" height="15" fill="rgb(245,58,50)" fg:x="914" fg:w="12"/><text x="79.9361%" y="335.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (7 samples, 0.61%)</title><rect x="80.1221%" y="309" width="0.6103%" height="15" fill="rgb(244,68,36)" fg:x="919" fg:w="7"/><text x="80.3721%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.52%)</title><rect x="80.2092%" y="293" width="0.5231%" height="15" fill="rgb(232,229,15)" fg:x="920" fg:w="6"/><text x="80.4592%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.52%)</title><rect x="80.2092%" y="277" width="0.5231%" height="15" fill="rgb(254,30,23)" fg:x="920" fg:w="6"/><text x="80.4592%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.52%)</title><rect x="80.2092%" y="261" width="0.5231%" height="15" fill="rgb(235,160,14)" fg:x="920" fg:w="6"/><text x="80.4592%" y="271.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (6 samples, 0.52%)</title><rect x="80.2092%" y="245" width="0.5231%" height="15" fill="rgb(212,155,44)" fg:x="920" fg:w="6"/><text x="80.4592%" y="255.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (6 samples, 0.52%)</title><rect x="80.2092%" y="229" width="0.5231%" height="15" fill="rgb(226,2,50)" fg:x="920" fg:w="6"/><text x="80.4592%" y="239.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.17%)</title><rect x="80.5580%" y="213" width="0.1744%" height="15" fill="rgb(234,177,6)" fg:x="924" fg:w="2"/><text x="80.8080%" y="223.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.17%)</title><rect x="80.5580%" y="197" width="0.1744%" height="15" fill="rgb(217,24,9)" fg:x="924" fg:w="2"/><text x="80.8080%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (1 samples, 0.09%)</title><rect x="80.7323%" y="325" width="0.0872%" height="15" fill="rgb(220,13,46)" fg:x="926" fg:w="1"/><text x="80.9823%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="80.7323%" y="309" width="0.0872%" height="15" fill="rgb(239,221,27)" fg:x="926" fg:w="1"/><text x="80.9823%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (1 samples, 0.09%)</title><rect x="80.7323%" y="293" width="0.0872%" height="15" fill="rgb(222,198,25)" fg:x="926" fg:w="1"/><text x="80.9823%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.09%)</title><rect x="80.7323%" y="277" width="0.0872%" height="15" fill="rgb(211,99,13)" fg:x="926" fg:w="1"/><text x="80.9823%" y="287.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="80.7323%" y="261" width="0.0872%" height="15" fill="rgb(232,111,31)" fg:x="926" fg:w="1"/><text x="80.9823%" y="271.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="81.0811%" y="309" width="0.0872%" height="15" fill="rgb(245,82,37)" fg:x="930" fg:w="1"/><text x="81.3311%" y="319.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (2 samples, 0.17%)</title><rect x="81.1683%" y="309" width="0.1744%" height="15" fill="rgb(227,149,46)" fg:x="931" fg:w="2"/><text x="81.4183%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (7 samples, 0.61%)</title><rect x="80.8195%" y="325" width="0.6103%" height="15" fill="rgb(218,36,50)" fg:x="927" fg:w="7"/><text x="81.0695%" y="335.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.09%)</title><rect x="81.3426%" y="309" width="0.0872%" height="15" fill="rgb(226,80,48)" fg:x="933" fg:w="1"/><text x="81.5926%" y="319.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (1 samples, 0.09%)</title><rect x="81.3426%" y="293" width="0.0872%" height="15" fill="rgb(238,224,15)" fg:x="933" fg:w="1"/><text x="81.5926%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.09%)</title><rect x="81.4298%" y="277" width="0.0872%" height="15" fill="rgb(241,136,10)" fg:x="934" fg:w="1"/><text x="81.6798%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.09%)</title><rect x="81.4298%" y="261" width="0.0872%" height="15" fill="rgb(208,32,45)" fg:x="934" fg:w="1"/><text x="81.6798%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="81.4298%" y="245" width="0.0872%" height="15" fill="rgb(207,135,9)" fg:x="934" fg:w="1"/><text x="81.6798%" y="255.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="81.4298%" y="229" width="0.0872%" height="15" fill="rgb(206,86,44)" fg:x="934" fg:w="1"/><text x="81.6798%" y="239.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="81.4298%" y="213" width="0.0872%" height="15" fill="rgb(245,177,15)" fg:x="934" fg:w="1"/><text x="81.6798%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="81.4298%" y="197" width="0.0872%" height="15" fill="rgb(206,64,50)" fg:x="934" fg:w="1"/><text x="81.6798%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.35%)</title><rect x="81.6042%" y="261" width="0.3487%" height="15" fill="rgb(234,36,40)" fg:x="936" fg:w="4"/><text x="81.8542%" y="271.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="81.8657%" y="245" width="0.0872%" height="15" fill="rgb(213,64,8)" fg:x="939" fg:w="1"/><text x="82.1157%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (7 samples, 0.61%)</title><rect x="81.9529%" y="261" width="0.6103%" height="15" fill="rgb(210,75,36)" fg:x="940" fg:w="7"/><text x="82.2029%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (7 samples, 0.61%)</title><rect x="81.9529%" y="245" width="0.6103%" height="15" fill="rgb(229,88,21)" fg:x="940" fg:w="7"/><text x="82.2029%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (5 samples, 0.44%)</title><rect x="82.1273%" y="229" width="0.4359%" height="15" fill="rgb(252,204,47)" fg:x="942" fg:w="5"/><text x="82.3773%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.09%)</title><rect x="82.4760%" y="213" width="0.0872%" height="15" fill="rgb(208,77,27)" fg:x="946" fg:w="1"/><text x="82.7260%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="82.5632%" y="245" width="0.0872%" height="15" fill="rgb(221,76,26)" fg:x="947" fg:w="1"/><text x="82.8132%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="82.6504%" y="245" width="0.0872%" height="15" fill="rgb(225,139,18)" fg:x="948" fg:w="1"/><text x="82.9004%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="82.6504%" y="229" width="0.0872%" height="15" fill="rgb(230,137,11)" fg:x="948" fg:w="1"/><text x="82.9004%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="82.6504%" y="213" width="0.0872%" height="15" fill="rgb(212,28,1)" fg:x="948" fg:w="1"/><text x="82.9004%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="82.7376%" y="229" width="0.0872%" height="15" fill="rgb(248,164,17)" fg:x="949" fg:w="1"/><text x="82.9876%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="82.7376%" y="213" width="0.0872%" height="15" fill="rgb(222,171,42)" fg:x="949" fg:w="1"/><text x="82.9876%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 0.44%)</title><rect x="82.9991%" y="213" width="0.4359%" height="15" fill="rgb(243,84,45)" fg:x="952" fg:w="5"/><text x="83.2491%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.35%)</title><rect x="83.0863%" y="197" width="0.3487%" height="15" fill="rgb(252,49,23)" fg:x="953" fg:w="4"/><text x="83.3363%" y="207.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.17%)</title><rect x="83.2607%" y="181" width="0.1744%" height="15" fill="rgb(215,19,7)" fg:x="955" fg:w="2"/><text x="83.5107%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.09%)</title><rect x="83.4350%" y="165" width="0.0872%" height="15" fill="rgb(238,81,41)" fg:x="957" fg:w="1"/><text x="83.6850%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (2 samples, 0.17%)</title><rect x="83.4350%" y="197" width="0.1744%" height="15" fill="rgb(210,199,37)" fg:x="957" fg:w="2"/><text x="83.6850%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (2 samples, 0.17%)</title><rect x="83.4350%" y="181" width="0.1744%" height="15" fill="rgb(244,192,49)" fg:x="957" fg:w="2"/><text x="83.6850%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="83.5222%" y="165" width="0.0872%" height="15" fill="rgb(226,211,11)" fg:x="958" fg:w="1"/><text x="83.7722%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (3 samples, 0.26%)</title><rect x="83.4350%" y="213" width="0.2616%" height="15" fill="rgb(236,162,54)" fg:x="957" fg:w="3"/><text x="83.6850%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="83.6094%" y="197" width="0.0872%" height="15" fill="rgb(220,229,9)" fg:x="959" fg:w="1"/><text x="83.8594%" y="207.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (15 samples, 1.31%)</title><rect x="82.5632%" y="261" width="1.3078%" height="15" fill="rgb(250,87,22)" fg:x="947" fg:w="15"/><text x="82.8132%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (13 samples, 1.13%)</title><rect x="82.7376%" y="245" width="1.1334%" height="15" fill="rgb(239,43,17)" fg:x="949" fg:w="13"/><text x="82.9876%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (12 samples, 1.05%)</title><rect x="82.8248%" y="229" width="1.0462%" height="15" fill="rgb(231,177,25)" fg:x="950" fg:w="12"/><text x="83.0748%" y="239.50"></text></g><g><title>brotli::enc::encode::hasher_setup (2 samples, 0.17%)</title><rect x="83.6966%" y="213" width="0.1744%" height="15" fill="rgb(219,179,1)" fg:x="960" fg:w="2"/><text x="83.9466%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (5 samples, 0.44%)</title><rect x="83.8710%" y="213" width="0.4359%" height="15" fill="rgb(238,219,53)" fg:x="962" fg:w="5"/><text x="84.1210%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (6 samples, 0.52%)</title><rect x="83.8710%" y="229" width="0.5231%" height="15" fill="rgb(232,167,36)" fg:x="962" fg:w="6"/><text x="84.1210%" y="239.50"></text></g><g><title>brotli::enc::command::Command::init (1 samples, 0.09%)</title><rect x="84.3069%" y="213" width="0.0872%" height="15" fill="rgb(244,19,51)" fg:x="967" fg:w="1"/><text x="84.5569%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (35 samples, 3.05%)</title><rect x="81.4298%" y="293" width="3.0514%" height="15" fill="rgb(224,6,22)" fg:x="934" fg:w="35"/><text x="81.6798%" y="303.50">par..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (34 samples, 2.96%)</title><rect x="81.5170%" y="277" width="2.9643%" height="15" fill="rgb(224,145,5)" fg:x="935" fg:w="34"/><text x="81.7670%" y="287.50">par..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (7 samples, 0.61%)</title><rect x="83.8710%" y="261" width="0.6103%" height="15" fill="rgb(234,130,49)" fg:x="962" fg:w="7"/><text x="84.1210%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.61%)</title><rect x="83.8710%" y="245" width="0.6103%" height="15" fill="rgb(254,6,2)" fg:x="962" fg:w="7"/><text x="84.1210%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="84.3941%" y="229" width="0.0872%" height="15" fill="rgb(208,96,46)" fg:x="968" fg:w="1"/><text x="84.6441%" y="239.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="84.3941%" y="213" width="0.0872%" height="15" fill="rgb(239,3,39)" fg:x="968" fg:w="1"/><text x="84.6441%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="84.3941%" y="197" width="0.0872%" height="15" fill="rgb(233,210,1)" fg:x="968" fg:w="1"/><text x="84.6441%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (57 samples, 4.97%)</title><rect x="79.5990%" y="341" width="4.9695%" height="15" fill="rgb(244,137,37)" fg:x="913" fg:w="57"/><text x="79.8490%" y="351.50">nemscr..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (36 samples, 3.14%)</title><rect x="81.4298%" y="325" width="3.1386%" height="15" fill="rgb(240,136,2)" fg:x="934" fg:w="36"/><text x="81.6798%" y="335.50">par..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (36 samples, 3.14%)</title><rect x="81.4298%" y="309" width="3.1386%" height="15" fill="rgb(239,18,37)" fg:x="934" fg:w="36"/><text x="81.6798%" y="319.50">par..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (1 samples, 0.09%)</title><rect x="84.4813%" y="293" width="0.0872%" height="15" fill="rgb(218,185,22)" fg:x="969" fg:w="1"/><text x="84.7313%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (1 samples, 0.09%)</title><rect x="84.4813%" y="277" width="0.0872%" height="15" fill="rgb(225,218,4)" fg:x="969" fg:w="1"/><text x="84.7313%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.09%)</title><rect x="84.6556%" y="325" width="0.0872%" height="15" fill="rgb(230,182,32)" fg:x="971" fg:w="1"/><text x="84.9056%" y="335.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (64 samples, 5.58%)</title><rect x="79.2502%" y="373" width="5.5798%" height="15" fill="rgb(242,56,43)" fg:x="909" fg:w="64"/><text x="79.5002%" y="383.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (64 samples, 5.58%)</title><rect x="79.2502%" y="357" width="5.5798%" height="15" fill="rgb(233,99,24)" fg:x="909" fg:w="64"/><text x="79.5002%" y="367.50">nemscra..</text></g><g><title>std::io::append_to_string (3 samples, 0.26%)</title><rect x="84.5684%" y="341" width="0.2616%" height="15" fill="rgb(234,209,42)" fg:x="970" fg:w="3"/><text x="84.8184%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="84.7428%" y="325" width="0.0872%" height="15" fill="rgb(227,7,12)" fg:x="972" fg:w="1"/><text x="84.9928%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.09%)</title><rect x="85.7890%" y="309" width="0.0872%" height="15" fill="rgb(245,203,43)" fg:x="984" fg:w="1"/><text x="86.0390%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (4 samples, 0.35%)</title><rect x="85.6146%" y="341" width="0.3487%" height="15" fill="rgb(238,205,33)" fg:x="982" fg:w="4"/><text x="85.8646%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (4 samples, 0.35%)</title><rect x="85.6146%" y="325" width="0.3487%" height="15" fill="rgb(231,56,7)" fg:x="982" fg:w="4"/><text x="85.8646%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (1 samples, 0.09%)</title><rect x="85.8762%" y="309" width="0.0872%" height="15" fill="rgb(244,186,29)" fg:x="985" fg:w="1"/><text x="86.1262%" y="319.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (67 samples, 5.84%)</title><rect x="86.3993%" y="277" width="5.8413%" height="15" fill="rgb(234,111,31)" fg:x="991" fg:w="67"/><text x="86.6493%" y="287.50">zlib_rs..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (75 samples, 6.54%)</title><rect x="86.0506%" y="325" width="6.5388%" height="15" fill="rgb(241,149,10)" fg:x="987" fg:w="75"/><text x="86.3006%" y="335.50">&lt;flate2::..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (75 samples, 6.54%)</title><rect x="86.0506%" y="309" width="6.5388%" height="15" fill="rgb(249,206,44)" fg:x="987" fg:w="75"/><text x="86.3006%" y="319.50">&lt;flate2::..</text></g><g><title>zlib_rs::inflate::inflate (75 samples, 6.54%)</title><rect x="86.0506%" y="293" width="6.5388%" height="15" fill="rgb(251,153,30)" fg:x="987" fg:w="75"/><text x="86.3006%" y="303.50">zlib_rs::..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (4 samples, 0.35%)</title><rect x="92.2406%" y="277" width="0.3487%" height="15" fill="rgb(239,152,38)" fg:x="1058" fg:w="4"/><text x="92.4906%" y="287.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (82 samples, 7.15%)</title><rect x="85.6146%" y="357" width="7.1491%" height="15" fill="rgb(249,139,47)" fg:x="982" fg:w="82"/><text x="85.8646%" y="367.50">&lt;zip::read..</text></g><g><title>flate2::zio::read (78 samples, 6.80%)</title><rect x="85.9634%" y="341" width="6.8003%" height="15" fill="rgb(244,64,35)" fg:x="986" fg:w="78"/><text x="86.2134%" y="351.50">flate2::z..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (2 samples, 0.17%)</title><rect x="92.5894%" y="325" width="0.1744%" height="15" fill="rgb(216,46,15)" fg:x="1062" fg:w="2"/><text x="92.8394%" y="335.50"></text></g><g><title>core::slice::memchr::memchr_aligned (14 samples, 1.22%)</title><rect x="92.7637%" y="357" width="1.2206%" height="15" fill="rgb(250,74,19)" fg:x="1064" fg:w="14"/><text x="93.0137%" y="367.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,087 samples, 94.77%)</title><rect x="0.0000%" y="405" width="94.7690%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="1087"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (1,068 samples, 93.11%)</title><rect x="1.6565%" y="389" width="93.1125%" height="15" fill="rgb(242,149,17)" fg:x="19" fg:w="1068"/><text x="1.9065%" y="399.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (114 samples, 9.94%)</title><rect x="84.8300%" y="373" width="9.9390%" height="15" fill="rgb(244,29,21)" fg:x="973" fg:w="114"/><text x="85.0800%" y="383.50">std::io::appen..</text></g><g><title>core::str::converts::from_utf8 (9 samples, 0.78%)</title><rect x="93.9843%" y="357" width="0.7847%" height="15" fill="rgb(220,130,37)" fg:x="1078" fg:w="9"/><text x="94.2343%" y="367.50"></text></g><g><title>bench_zip_to_pa (1,091 samples, 95.12%)</title><rect x="0.0000%" y="565" width="95.1177%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,091 samples, 95.12%)</title><rect x="0.0000%" y="549" width="95.1177%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,091 samples, 95.12%)</title><rect x="0.0000%" y="533" width="95.1177%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,091 samples, 95.12%)</title><rect x="0.0000%" y="517" width="95.1177%" height="15" fill="rgb(241,25,7)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,091 samples, 95.12%)</title><rect x="0.0000%" y="501" width="95.1177%" height="15" fill="rgb(242,119,39)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,091 samples, 95.12%)</title><rect x="0.0000%" y="485" width="95.1177%" height="15" fill="rgb(241,98,45)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,091 samples, 95.12%)</title><rect x="0.0000%" y="469" width="95.1177%" height="15" fill="rgb(254,28,30)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,091 samples, 95.12%)</title><rect x="0.0000%" y="453" width="95.1177%" height="15" fill="rgb(241,142,54)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,091 samples, 95.12%)</title><rect x="0.0000%" y="437" width="95.1177%" height="15" fill="rgb(222,85,15)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,091 samples, 95.12%)</title><rect x="0.0000%" y="421" width="95.1177%" height="15" fill="rgb(210,85,47)" fg:x="0" fg:w="1091"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (4 samples, 0.35%)</title><rect x="94.7690%" y="405" width="0.3487%" height="15" fill="rgb(224,206,25)" fg:x="1087" fg:w="4"/><text x="95.0190%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.35%)</title><rect x="94.7690%" y="389" width="0.3487%" height="15" fill="rgb(243,201,19)" fg:x="1087" fg:w="4"/><text x="95.0190%" y="399.50"></text></g><g><title>syscall (3 samples, 0.26%)</title><rect x="94.8561%" y="373" width="0.2616%" height="15" fill="rgb(236,59,4)" fg:x="1088" fg:w="3"/><text x="95.1061%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (5 samples, 0.44%)</title><rect x="95.2921%" y="341" width="0.4359%" height="15" fill="rgb(254,179,45)" fg:x="1093" fg:w="5"/><text x="95.5421%" y="351.50"></text></g><g><title>syscall (5 samples, 0.44%)</title><rect x="95.2921%" y="325" width="0.4359%" height="15" fill="rgb(226,14,10)" fg:x="1093" fg:w="5"/><text x="95.5421%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (2 samples, 0.17%)</title><rect x="95.7280%" y="341" width="0.1744%" height="15" fill="rgb(244,27,41)" fg:x="1098" fg:w="2"/><text x="95.9780%" y="351.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.09%)</title><rect x="95.8152%" y="325" width="0.0872%" height="15" fill="rgb(235,35,32)" fg:x="1099" fg:w="1"/><text x="96.0652%" y="335.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (2 samples, 0.17%)</title><rect x="96.0767%" y="325" width="0.1744%" height="15" fill="rgb(218,68,31)" fg:x="1102" fg:w="2"/><text x="96.3267%" y="335.50"></text></g><g><title>clock_gettime (1 samples, 0.09%)</title><rect x="96.1639%" y="309" width="0.0872%" height="15" fill="rgb(207,120,37)" fg:x="1103" fg:w="1"/><text x="96.4139%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (19 samples, 1.66%)</title><rect x="95.2049%" y="373" width="1.6565%" height="15" fill="rgb(227,98,0)" fg:x="1092" fg:w="19"/><text x="95.4549%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (19 samples, 1.66%)</title><rect x="95.2049%" y="357" width="1.6565%" height="15" fill="rgb(207,7,3)" fg:x="1092" fg:w="19"/><text x="95.4549%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (11 samples, 0.96%)</title><rect x="95.9024%" y="341" width="0.9590%" height="15" fill="rgb(206,98,19)" fg:x="1100" fg:w="11"/><text x="96.1524%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (7 samples, 0.61%)</title><rect x="96.2511%" y="325" width="0.6103%" height="15" fill="rgb(217,5,26)" fg:x="1104" fg:w="7"/><text x="96.5011%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (6 samples, 0.52%)</title><rect x="96.3383%" y="309" width="0.5231%" height="15" fill="rgb(235,190,38)" fg:x="1105" fg:w="6"/><text x="96.5883%" y="319.50"></text></g><g><title>epoll_wait (6 samples, 0.52%)</title><rect x="96.3383%" y="293" width="0.5231%" height="15" fill="rgb(247,86,24)" fg:x="1105" fg:w="6"/><text x="96.5883%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.17%)</title><rect x="96.8614%" y="357" width="0.1744%" height="15" fill="rgb(205,101,16)" fg:x="1111" fg:w="2"/><text x="97.1114%" y="367.50"></text></g><g><title>syscall (2 samples, 0.17%)</title><rect x="96.8614%" y="341" width="0.1744%" height="15" fill="rgb(246,168,33)" fg:x="1111" fg:w="2"/><text x="97.1114%" y="351.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (5 samples, 0.44%)</title><rect x="97.0357%" y="357" width="0.4359%" height="15" fill="rgb(231,114,1)" fg:x="1113" fg:w="5"/><text x="97.2857%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (5 samples, 0.44%)</title><rect x="97.0357%" y="341" width="0.4359%" height="15" fill="rgb(207,184,53)" fg:x="1113" fg:w="5"/><text x="97.2857%" y="351.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (5 samples, 0.44%)</title><rect x="97.0357%" y="325" width="0.4359%" height="15" fill="rgb(224,95,51)" fg:x="1113" fg:w="5"/><text x="97.2857%" y="335.50"></text></g><g><title>write (5 samples, 0.44%)</title><rect x="97.0357%" y="309" width="0.4359%" height="15" fill="rgb(212,188,45)" fg:x="1113" fg:w="5"/><text x="97.2857%" y="319.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::is_end_stream (1 samples, 0.09%)</title><rect x="97.4717%" y="277" width="0.0872%" height="15" fill="rgb(223,154,38)" fg:x="1118" fg:w="1"/><text x="97.7217%" y="287.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (1 samples, 0.09%)</title><rect x="97.5588%" y="277" width="0.0872%" height="15" fill="rgb(251,22,52)" fg:x="1119" fg:w="1"/><text x="97.8088%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (1 samples, 0.09%)</title><rect x="97.5588%" y="261" width="0.0872%" height="15" fill="rgb(229,209,22)" fg:x="1119" fg:w="1"/><text x="97.8088%" y="271.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (1 samples, 0.09%)</title><rect x="97.5588%" y="245" width="0.0872%" height="15" fill="rgb(234,138,34)" fg:x="1119" fg:w="1"/><text x="97.8088%" y="255.50"></text></g><g><title>syscall (1 samples, 0.09%)</title><rect x="97.5588%" y="229" width="0.0872%" height="15" fill="rgb(212,95,11)" fg:x="1119" fg:w="1"/><text x="97.8088%" y="239.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (1 samples, 0.09%)</title><rect x="97.7332%" y="213" width="0.0872%" height="15" fill="rgb(240,179,47)" fg:x="1121" fg:w="1"/><text x="97.9832%" y="223.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (14 samples, 1.22%)</title><rect x="97.6460%" y="277" width="1.2206%" height="15" fill="rgb(240,163,11)" fg:x="1120" fg:w="14"/><text x="97.8960%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (14 samples, 1.22%)</title><rect x="97.6460%" y="261" width="1.2206%" height="15" fill="rgb(236,37,12)" fg:x="1120" fg:w="14"/><text x="97.8960%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (14 samples, 1.22%)</title><rect x="97.6460%" y="245" width="1.2206%" height="15" fill="rgb(232,164,16)" fg:x="1120" fg:w="14"/><text x="97.8960%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (14 samples, 1.22%)</title><rect x="97.6460%" y="229" width="1.2206%" height="15" fill="rgb(244,205,15)" fg:x="1120" fg:w="14"/><text x="97.8960%" y="239.50"></text></g><g><title>syscall (12 samples, 1.05%)</title><rect x="97.8204%" y="213" width="1.0462%" height="15" fill="rgb(223,117,47)" fg:x="1122" fg:w="12"/><text x="98.0704%" y="223.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="98.9538%" y="181" width="0.0872%" height="15" fill="rgb(244,107,35)" fg:x="1135" fg:w="1"/><text x="99.2038%" y="191.50"></text></g><g><title>rustls::msgs::message::OpaqueMessage::read (2 samples, 0.17%)</title><rect x="99.0410%" y="133" width="0.1744%" height="15" fill="rgb(205,140,8)" fg:x="1136" fg:w="2"/><text x="99.2910%" y="143.50"></text></g><g><title>rustls::msgs::base::Payload::read (2 samples, 0.17%)</title><rect x="99.0410%" y="117" width="0.1744%" height="15" fill="rgb(228,84,46)" fg:x="1136" fg:w="2"/><text x="99.2910%" y="127.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (6 samples, 0.52%)</title><rect x="99.0410%" y="165" width="0.5231%" height="15" fill="rgb(254,188,9)" fg:x="1136" fg:w="6"/><text x="99.2910%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (6 samples, 0.52%)</title><rect x="99.0410%" y="149" width="0.5231%" height="15" fill="rgb(206,112,54)" fg:x="1136" fg:w="6"/><text x="99.2910%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (4 samples, 0.35%)</title><rect x="99.2153%" y="133" width="0.3487%" height="15" fill="rgb(216,84,49)" fg:x="1138" fg:w="4"/><text x="99.4653%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (2 samples, 0.17%)</title><rect x="99.3897%" y="117" width="0.1744%" height="15" fill="rgb(214,194,35)" fg:x="1140" fg:w="2"/><text x="99.6397%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (2 samples, 0.17%)</title><rect x="99.3897%" y="101" width="0.1744%" height="15" fill="rgb(249,28,3)" fg:x="1140" fg:w="2"/><text x="99.6397%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (2 samples, 0.17%)</title><rect x="99.3897%" y="85" width="0.1744%" height="15" fill="rgb(222,56,52)" fg:x="1140" fg:w="2"/><text x="99.6397%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (2 samples, 0.17%)</title><rect x="99.3897%" y="69" width="0.1744%" height="15" fill="rgb(245,217,50)" fg:x="1140" fg:w="2"/><text x="99.6397%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.09%)</title><rect x="99.4769%" y="53" width="0.0872%" height="15" fill="rgb(213,201,24)" fg:x="1141" fg:w="1"/><text x="99.7269%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (1 samples, 0.09%)</title><rect x="99.4769%" y="37" width="0.0872%" height="15" fill="rgb(248,116,28)" fg:x="1141" fg:w="1"/><text x="99.7269%" y="47.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (28 samples, 2.44%)</title><rect x="97.4717%" y="325" width="2.4412%" height="15" fill="rgb(219,72,43)" fg:x="1118" fg:w="28"/><text x="97.7217%" y="335.50">&lt;f..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (28 samples, 2.44%)</title><rect x="97.4717%" y="309" width="2.4412%" height="15" fill="rgb(209,138,14)" fg:x="1118" fg:w="28"/><text x="97.7217%" y="319.50">&lt;h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (28 samples, 2.44%)</title><rect x="97.4717%" y="293" width="2.4412%" height="15" fill="rgb(222,18,33)" fg:x="1118" fg:w="28"/><text x="97.7217%" y="303.50">hy..</text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (12 samples, 1.05%)</title><rect x="98.8666%" y="277" width="1.0462%" height="15" fill="rgb(213,199,7)" fg:x="1134" fg:w="12"/><text x="99.1166%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (12 samples, 1.05%)</title><rect x="98.8666%" y="261" width="1.0462%" height="15" fill="rgb(250,110,10)" fg:x="1134" fg:w="12"/><text x="99.1166%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (12 samples, 1.05%)</title><rect x="98.8666%" y="245" width="1.0462%" height="15" fill="rgb(248,123,6)" fg:x="1134" fg:w="12"/><text x="99.1166%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (12 samples, 1.05%)</title><rect x="98.8666%" y="229" width="1.0462%" height="15" fill="rgb(206,91,31)" fg:x="1134" fg:w="12"/><text x="99.1166%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (12 samples, 1.05%)</title><rect x="98.8666%" y="213" width="1.0462%" height="15" fill="rgb(211,154,13)" fg:x="1134" fg:w="12"/><text x="99.1166%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (12 samples, 1.05%)</title><rect x="98.8666%" y="197" width="1.0462%" height="15" fill="rgb(225,148,7)" fg:x="1134" fg:w="12"/><text x="99.1166%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (10 samples, 0.87%)</title><rect x="99.0410%" y="181" width="0.8718%" height="15" fill="rgb(220,160,43)" fg:x="1136" fg:w="10"/><text x="99.2910%" y="191.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (4 samples, 0.35%)</title><rect x="99.5641%" y="165" width="0.3487%" height="15" fill="rgb(213,52,39)" fg:x="1142" fg:w="4"/><text x="99.8141%" y="175.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (4 samples, 0.35%)</title><rect x="99.5641%" y="149" width="0.3487%" height="15" fill="rgb(243,137,7)" fg:x="1142" fg:w="4"/><text x="99.8141%" y="159.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.35%)</title><rect x="99.5641%" y="133" width="0.3487%" height="15" fill="rgb(230,79,13)" fg:x="1142" fg:w="4"/><text x="99.8141%" y="143.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 0.26%)</title><rect x="99.6513%" y="117" width="0.2616%" height="15" fill="rgb(247,105,23)" fg:x="1143" fg:w="3"/><text x="99.9013%" y="127.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (3 samples, 0.26%)</title><rect x="99.6513%" y="101" width="0.2616%" height="15" fill="rgb(223,179,41)" fg:x="1143" fg:w="3"/><text x="99.9013%" y="111.50"></text></g><g><title>recv (3 samples, 0.26%)</title><rect x="99.6513%" y="85" width="0.2616%" height="15" fill="rgb(218,9,34)" fg:x="1143" fg:w="3"/><text x="99.9013%" y="95.50"></text></g><g><title>all (1,147 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(222,106,8)" fg:x="0" fg:w="1147"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (56 samples, 4.88%)</title><rect x="95.1177%" y="565" width="4.8823%" height="15" fill="rgb(211,220,0)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="575.50">tokio-..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (56 samples, 4.88%)</title><rect x="95.1177%" y="549" width="4.8823%" height="15" fill="rgb(229,52,16)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="559.50">std::s..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (56 samples, 4.88%)</title><rect x="95.1177%" y="533" width="4.8823%" height="15" fill="rgb(212,155,18)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="543.50">core::..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (56 samples, 4.88%)</title><rect x="95.1177%" y="517" width="4.8823%" height="15" fill="rgb(242,21,14)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="527.50">std::s..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (56 samples, 4.88%)</title><rect x="95.1177%" y="501" width="4.8823%" height="15" fill="rgb(222,19,48)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="511.50">tokio:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (56 samples, 4.88%)</title><rect x="95.1177%" y="485" width="4.8823%" height="15" fill="rgb(232,45,27)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="495.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (56 samples, 4.88%)</title><rect x="95.1177%" y="469" width="4.8823%" height="15" fill="rgb(249,103,42)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="479.50">tokio:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 4.88%)</title><rect x="95.1177%" y="453" width="4.8823%" height="15" fill="rgb(246,81,33)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="463.50">&lt;tokio..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (56 samples, 4.88%)</title><rect x="95.1177%" y="437" width="4.8823%" height="15" fill="rgb(252,33,42)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="447.50">tokio:..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (56 samples, 4.88%)</title><rect x="95.1177%" y="421" width="4.8823%" height="15" fill="rgb(209,212,41)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="431.50">tokio:..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (56 samples, 4.88%)</title><rect x="95.1177%" y="405" width="4.8823%" height="15" fill="rgb(207,154,6)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="415.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (56 samples, 4.88%)</title><rect x="95.1177%" y="389" width="4.8823%" height="15" fill="rgb(223,64,47)" fg:x="1091" fg:w="56"/><text x="95.3677%" y="399.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (36 samples, 3.14%)</title><rect x="96.8614%" y="373" width="3.1386%" height="15" fill="rgb(211,161,38)" fg:x="1111" fg:w="36"/><text x="97.1114%" y="383.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (29 samples, 2.53%)</title><rect x="97.4717%" y="357" width="2.5283%" height="15" fill="rgb(219,138,40)" fg:x="1118" fg:w="29"/><text x="97.7217%" y="367.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (29 samples, 2.53%)</title><rect x="97.4717%" y="341" width="2.5283%" height="15" fill="rgb(241,228,46)" fg:x="1118" fg:w="29"/><text x="97.7217%" y="351.50">to..</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (1 samples, 0.09%)</title><rect x="99.9128%" y="325" width="0.0872%" height="15" fill="rgb(223,209,38)" fg:x="1146" fg:w="1"/><text x="100.1628%" y="335.50"></text></g></svg></svg>