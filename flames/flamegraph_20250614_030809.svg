<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="1110"><g><title>parking_lot::condvar::Condvar::notify_one_slow (5 samples, 0.45%)</title><rect x="0.6306%" y="229" width="0.4505%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="5"/><text x="0.8806%" y="239.50"></text></g><g><title>syscall (5 samples, 0.45%)</title><rect x="0.6306%" y="213" width="0.4505%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="5"/><text x="0.8806%" y="223.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (8 samples, 0.72%)</title><rect x="0.6306%" y="293" width="0.7207%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="8"/><text x="0.8806%" y="303.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (8 samples, 0.72%)</title><rect x="0.6306%" y="277" width="0.7207%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="8"/><text x="0.8806%" y="287.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (8 samples, 0.72%)</title><rect x="0.6306%" y="261" width="0.7207%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="8"/><text x="0.8806%" y="271.50"></text></g><g><title>tokio::runtime::context::with_scheduler (8 samples, 0.72%)</title><rect x="0.6306%" y="245" width="0.7207%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="8"/><text x="0.8806%" y="255.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (3 samples, 0.27%)</title><rect x="1.0811%" y="229" width="0.2703%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="3"/><text x="1.3311%" y="239.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (3 samples, 0.27%)</title><rect x="1.0811%" y="213" width="0.2703%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="3"/><text x="1.3311%" y="223.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (3 samples, 0.27%)</title><rect x="1.0811%" y="197" width="0.2703%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="3"/><text x="1.3311%" y="207.50"></text></g><g><title>write (3 samples, 0.27%)</title><rect x="1.0811%" y="181" width="0.2703%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="3"/><text x="1.3311%" y="191.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.81%)</title><rect x="0.6306%" y="389" width="0.8108%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="9"/><text x="0.8806%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (9 samples, 0.81%)</title><rect x="0.6306%" y="373" width="0.8108%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="9"/><text x="0.8806%" y="383.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (9 samples, 0.81%)</title><rect x="0.6306%" y="357" width="0.8108%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="9"/><text x="0.8806%" y="367.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (9 samples, 0.81%)</title><rect x="0.6306%" y="341" width="0.8108%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="9"/><text x="0.8806%" y="351.50"></text></g><g><title>hyper::body::body::Body::poll_inner (9 samples, 0.81%)</title><rect x="0.6306%" y="325" width="0.8108%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="9"/><text x="0.8806%" y="335.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (9 samples, 0.81%)</title><rect x="0.6306%" y="309" width="0.8108%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="9"/><text x="0.8806%" y="319.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.09%)</title><rect x="1.3514%" y="293" width="0.0901%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="1"/><text x="1.6014%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (2 samples, 0.18%)</title><rect x="1.4414%" y="389" width="0.1802%" height="15" fill="rgb(210,31,41)" fg:x="16" fg:w="2"/><text x="1.6914%" y="399.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (2 samples, 0.18%)</title><rect x="1.4414%" y="373" width="0.1802%" height="15" fill="rgb(221,200,47)" fg:x="16" fg:w="2"/><text x="1.6914%" y="383.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::clone_span (1 samples, 0.09%)</title><rect x="1.5315%" y="357" width="0.0901%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="1"/><text x="1.7815%" y="367.50"></text></g><g><title>sharded_slab::pool::Pool&lt;T,C&gt;::get (1 samples, 0.09%)</title><rect x="1.5315%" y="341" width="0.0901%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="1"/><text x="1.7815%" y="351.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.09%)</title><rect x="2.7027%" y="309" width="0.0901%" height="15" fill="rgb(235,183,28)" fg:x="30" fg:w="1"/><text x="2.9527%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (21 samples, 1.89%)</title><rect x="2.4324%" y="325" width="1.8919%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="21"/><text x="2.6824%" y="335.50">n..</text></g><g><title>malloc (17 samples, 1.53%)</title><rect x="2.7928%" y="309" width="1.5315%" height="15" fill="rgb(247,18,42)" fg:x="31" fg:w="17"/><text x="3.0428%" y="319.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (2 samples, 0.18%)</title><rect x="4.3243%" y="277" width="0.1802%" height="15" fill="rgb(241,131,45)" fg:x="48" fg:w="2"/><text x="4.5743%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (2 samples, 0.18%)</title><rect x="4.3243%" y="261" width="0.1802%" height="15" fill="rgb(249,31,29)" fg:x="48" fg:w="2"/><text x="4.5743%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="4.4144%" y="245" width="0.0901%" height="15" fill="rgb(225,111,53)" fg:x="49" fg:w="1"/><text x="4.6644%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="4.4144%" y="229" width="0.0901%" height="15" fill="rgb(238,160,17)" fg:x="49" fg:w="1"/><text x="4.6644%" y="239.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="4.4144%" y="213" width="0.0901%" height="15" fill="rgb(214,148,48)" fg:x="49" fg:w="1"/><text x="4.6644%" y="223.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (4 samples, 0.36%)</title><rect x="4.3243%" y="293" width="0.3604%" height="15" fill="rgb(232,36,49)" fg:x="48" fg:w="4"/><text x="4.5743%" y="303.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (2 samples, 0.18%)</title><rect x="4.5045%" y="277" width="0.1802%" height="15" fill="rgb(209,103,24)" fg:x="50" fg:w="2"/><text x="4.7545%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.18%)</title><rect x="4.5045%" y="261" width="0.1802%" height="15" fill="rgb(229,88,8)" fg:x="50" fg:w="2"/><text x="4.7545%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.18%)</title><rect x="4.5045%" y="245" width="0.1802%" height="15" fill="rgb(213,181,19)" fg:x="50" fg:w="2"/><text x="4.7545%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.18%)</title><rect x="4.5045%" y="229" width="0.1802%" height="15" fill="rgb(254,191,54)" fg:x="50" fg:w="2"/><text x="4.7545%" y="239.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (2 samples, 0.18%)</title><rect x="4.5045%" y="213" width="0.1802%" height="15" fill="rgb(241,83,37)" fg:x="50" fg:w="2"/><text x="4.7545%" y="223.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1 samples, 0.09%)</title><rect x="4.5946%" y="197" width="0.0901%" height="15" fill="rgb(233,36,39)" fg:x="51" fg:w="1"/><text x="4.8446%" y="207.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.09%)</title><rect x="4.5946%" y="181" width="0.0901%" height="15" fill="rgb(226,3,54)" fg:x="51" fg:w="1"/><text x="4.8446%" y="191.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.09%)</title><rect x="4.5946%" y="165" width="0.0901%" height="15" fill="rgb(245,192,40)" fg:x="51" fg:w="1"/><text x="4.8446%" y="175.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="4.5946%" y="149" width="0.0901%" height="15" fill="rgb(238,167,29)" fg:x="51" fg:w="1"/><text x="4.8446%" y="159.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.09%)</title><rect x="4.6847%" y="293" width="0.0901%" height="15" fill="rgb(232,182,51)" fg:x="52" fg:w="1"/><text x="4.9347%" y="303.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.09%)</title><rect x="4.6847%" y="277" width="0.0901%" height="15" fill="rgb(231,60,39)" fg:x="52" fg:w="1"/><text x="4.9347%" y="287.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="4.7748%" y="213" width="0.0901%" height="15" fill="rgb(208,69,12)" fg:x="53" fg:w="1"/><text x="5.0248%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="4.7748%" y="197" width="0.0901%" height="15" fill="rgb(235,93,37)" fg:x="53" fg:w="1"/><text x="5.0248%" y="207.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.09%)</title><rect x="4.7748%" y="181" width="0.0901%" height="15" fill="rgb(213,116,39)" fg:x="53" fg:w="1"/><text x="5.0248%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="4.8649%" y="197" width="0.0901%" height="15" fill="rgb(222,207,29)" fg:x="54" fg:w="1"/><text x="5.1149%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="4.8649%" y="181" width="0.0901%" height="15" fill="rgb(206,96,30)" fg:x="54" fg:w="1"/><text x="5.1149%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="4.9550%" y="181" width="0.0901%" height="15" fill="rgb(218,138,4)" fg:x="55" fg:w="1"/><text x="5.2050%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (1 samples, 0.09%)</title><rect x="4.9550%" y="165" width="0.0901%" height="15" fill="rgb(250,191,14)" fg:x="55" fg:w="1"/><text x="5.2050%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (9 samples, 0.81%)</title><rect x="4.3243%" y="309" width="0.8108%" height="15" fill="rgb(239,60,40)" fg:x="48" fg:w="9"/><text x="4.5743%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (4 samples, 0.36%)</title><rect x="4.7748%" y="293" width="0.3604%" height="15" fill="rgb(206,27,48)" fg:x="53" fg:w="4"/><text x="5.0248%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (4 samples, 0.36%)</title><rect x="4.7748%" y="277" width="0.3604%" height="15" fill="rgb(225,35,8)" fg:x="53" fg:w="4"/><text x="5.0248%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (4 samples, 0.36%)</title><rect x="4.7748%" y="261" width="0.3604%" height="15" fill="rgb(250,213,24)" fg:x="53" fg:w="4"/><text x="5.0248%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (4 samples, 0.36%)</title><rect x="4.7748%" y="245" width="0.3604%" height="15" fill="rgb(247,123,22)" fg:x="53" fg:w="4"/><text x="5.0248%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.36%)</title><rect x="4.7748%" y="229" width="0.3604%" height="15" fill="rgb(231,138,38)" fg:x="53" fg:w="4"/><text x="5.0248%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.27%)</title><rect x="4.8649%" y="213" width="0.2703%" height="15" fill="rgb(231,145,46)" fg:x="54" fg:w="3"/><text x="5.1149%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.18%)</title><rect x="4.9550%" y="197" width="0.1802%" height="15" fill="rgb(251,118,11)" fg:x="55" fg:w="2"/><text x="5.2050%" y="207.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="5.0450%" y="181" width="0.0901%" height="15" fill="rgb(217,147,25)" fg:x="56" fg:w="1"/><text x="5.2950%" y="191.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="5.0450%" y="165" width="0.0901%" height="15" fill="rgb(247,81,37)" fg:x="56" fg:w="1"/><text x="5.2950%" y="175.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.09%)</title><rect x="5.1351%" y="293" width="0.0901%" height="15" fill="rgb(209,12,38)" fg:x="57" fg:w="1"/><text x="5.3851%" y="303.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="5.1351%" y="277" width="0.0901%" height="15" fill="rgb(227,1,9)" fg:x="57" fg:w="1"/><text x="5.3851%" y="287.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="5.2252%" y="165" width="0.0901%" height="15" fill="rgb(248,47,43)" fg:x="58" fg:w="1"/><text x="5.4752%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.2252%" y="149" width="0.0901%" height="15" fill="rgb(221,10,30)" fg:x="58" fg:w="1"/><text x="5.4752%" y="159.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="5.3153%" y="165" width="0.0901%" height="15" fill="rgb(210,229,1)" fg:x="59" fg:w="1"/><text x="5.5653%" y="175.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="5.3153%" y="149" width="0.0901%" height="15" fill="rgb(222,148,37)" fg:x="59" fg:w="1"/><text x="5.5653%" y="159.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (4 samples, 0.36%)</title><rect x="5.2252%" y="197" width="0.3604%" height="15" fill="rgb(234,67,33)" fg:x="58" fg:w="4"/><text x="5.4752%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.36%)</title><rect x="5.2252%" y="181" width="0.3604%" height="15" fill="rgb(247,98,35)" fg:x="58" fg:w="4"/><text x="5.4752%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (2 samples, 0.18%)</title><rect x="5.4054%" y="165" width="0.1802%" height="15" fill="rgb(247,138,52)" fg:x="60" fg:w="2"/><text x="5.6554%" y="175.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.18%)</title><rect x="5.4054%" y="149" width="0.1802%" height="15" fill="rgb(213,79,30)" fg:x="60" fg:w="2"/><text x="5.6554%" y="159.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="5.4955%" y="133" width="0.0901%" height="15" fill="rgb(246,177,23)" fg:x="61" fg:w="1"/><text x="5.7455%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (8 samples, 0.72%)</title><rect x="5.6757%" y="165" width="0.7207%" height="15" fill="rgb(230,62,27)" fg:x="63" fg:w="8"/><text x="5.9257%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (8 samples, 0.72%)</title><rect x="5.6757%" y="149" width="0.7207%" height="15" fill="rgb(216,154,8)" fg:x="63" fg:w="8"/><text x="5.9257%" y="159.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="6.3063%" y="133" width="0.0901%" height="15" fill="rgb(244,35,45)" fg:x="70" fg:w="1"/><text x="6.5563%" y="143.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (16 samples, 1.44%)</title><rect x="5.2252%" y="213" width="1.4414%" height="15" fill="rgb(251,115,12)" fg:x="58" fg:w="16"/><text x="5.4752%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (12 samples, 1.08%)</title><rect x="5.5856%" y="197" width="1.0811%" height="15" fill="rgb(240,54,50)" fg:x="62" fg:w="12"/><text x="5.8356%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (12 samples, 1.08%)</title><rect x="5.5856%" y="181" width="1.0811%" height="15" fill="rgb(233,84,52)" fg:x="62" fg:w="12"/><text x="5.8356%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.27%)</title><rect x="6.3964%" y="165" width="0.2703%" height="15" fill="rgb(207,117,47)" fg:x="71" fg:w="3"/><text x="6.6464%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (3 samples, 0.27%)</title><rect x="6.3964%" y="149" width="0.2703%" height="15" fill="rgb(249,43,39)" fg:x="71" fg:w="3"/><text x="6.6464%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (1 samples, 0.09%)</title><rect x="6.5766%" y="133" width="0.0901%" height="15" fill="rgb(209,38,44)" fg:x="73" fg:w="1"/><text x="6.8266%" y="143.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="6.6667%" y="197" width="0.0901%" height="15" fill="rgb(236,212,23)" fg:x="74" fg:w="1"/><text x="6.9167%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="6.6667%" y="181" width="0.0901%" height="15" fill="rgb(242,79,21)" fg:x="74" fg:w="1"/><text x="6.9167%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (18 samples, 1.62%)</title><rect x="5.2252%" y="293" width="1.6216%" height="15" fill="rgb(211,96,35)" fg:x="58" fg:w="18"/><text x="5.4752%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.62%)</title><rect x="5.2252%" y="277" width="1.6216%" height="15" fill="rgb(253,215,40)" fg:x="58" fg:w="18"/><text x="5.4752%" y="287.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (18 samples, 1.62%)</title><rect x="5.2252%" y="261" width="1.6216%" height="15" fill="rgb(211,81,21)" fg:x="58" fg:w="18"/><text x="5.4752%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.62%)</title><rect x="5.2252%" y="245" width="1.6216%" height="15" fill="rgb(208,190,38)" fg:x="58" fg:w="18"/><text x="5.4752%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (18 samples, 1.62%)</title><rect x="5.2252%" y="229" width="1.6216%" height="15" fill="rgb(235,213,38)" fg:x="58" fg:w="18"/><text x="5.4752%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (2 samples, 0.18%)</title><rect x="6.6667%" y="213" width="0.1802%" height="15" fill="rgb(237,122,38)" fg:x="74" fg:w="2"/><text x="6.9167%" y="223.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.09%)</title><rect x="6.7568%" y="197" width="0.0901%" height="15" fill="rgb(244,218,35)" fg:x="75" fg:w="1"/><text x="7.0068%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="6.7568%" y="181" width="0.0901%" height="15" fill="rgb(240,68,47)" fg:x="75" fg:w="1"/><text x="7.0068%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="6.7568%" y="165" width="0.0901%" height="15" fill="rgb(210,16,53)" fg:x="75" fg:w="1"/><text x="7.0068%" y="175.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="6.7568%" y="149" width="0.0901%" height="15" fill="rgb(235,124,12)" fg:x="75" fg:w="1"/><text x="7.0068%" y="159.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="6.7568%" y="133" width="0.0901%" height="15" fill="rgb(224,169,11)" fg:x="75" fg:w="1"/><text x="7.0068%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="6.7568%" y="117" width="0.0901%" height="15" fill="rgb(250,166,2)" fg:x="75" fg:w="1"/><text x="7.0068%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="6.7568%" y="101" width="0.0901%" height="15" fill="rgb(242,216,29)" fg:x="75" fg:w="1"/><text x="7.0068%" y="111.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="6.7568%" y="85" width="0.0901%" height="15" fill="rgb(230,116,27)" fg:x="75" fg:w="1"/><text x="7.0068%" y="95.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (29 samples, 2.61%)</title><rect x="4.3243%" y="325" width="2.6126%" height="15" fill="rgb(228,99,48)" fg:x="48" fg:w="29"/><text x="4.5743%" y="335.50">ne..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (20 samples, 1.80%)</title><rect x="5.1351%" y="309" width="1.8018%" height="15" fill="rgb(253,11,6)" fg:x="57" fg:w="20"/><text x="5.3851%" y="319.50">p..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.09%)</title><rect x="6.8468%" y="293" width="0.0901%" height="15" fill="rgb(247,143,39)" fg:x="76" fg:w="1"/><text x="7.0968%" y="303.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.09%)</title><rect x="6.8468%" y="277" width="0.0901%" height="15" fill="rgb(236,97,10)" fg:x="76" fg:w="1"/><text x="7.0968%" y="287.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.09%)</title><rect x="6.8468%" y="261" width="0.0901%" height="15" fill="rgb(233,208,19)" fg:x="76" fg:w="1"/><text x="7.0968%" y="271.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="6.8468%" y="245" width="0.0901%" height="15" fill="rgb(216,164,2)" fg:x="76" fg:w="1"/><text x="7.0968%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (10 samples, 0.90%)</title><rect x="8.0180%" y="309" width="0.9009%" height="15" fill="rgb(220,129,5)" fg:x="89" fg:w="10"/><text x="8.2680%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.90%)</title><rect x="8.0180%" y="293" width="0.9009%" height="15" fill="rgb(242,17,10)" fg:x="89" fg:w="10"/><text x="8.2680%" y="303.50"></text></g><g><title>__libc_realloc (10 samples, 0.90%)</title><rect x="8.0180%" y="277" width="0.9009%" height="15" fill="rgb(242,107,0)" fg:x="89" fg:w="10"/><text x="8.2680%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (10 samples, 0.90%)</title><rect x="10.0901%" y="261" width="0.9009%" height="15" fill="rgb(251,28,31)" fg:x="112" fg:w="10"/><text x="10.3401%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.90%)</title><rect x="10.0901%" y="245" width="0.9009%" height="15" fill="rgb(233,223,10)" fg:x="112" fg:w="10"/><text x="10.3401%" y="255.50"></text></g><g><title>__libc_realloc (10 samples, 0.90%)</title><rect x="10.0901%" y="229" width="0.9009%" height="15" fill="rgb(215,21,27)" fg:x="112" fg:w="10"/><text x="10.3401%" y="239.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (89 samples, 8.02%)</title><rect x="9.0991%" y="293" width="8.0180%" height="15" fill="rgb(232,23,21)" fg:x="101" fg:w="89"/><text x="9.3491%" y="303.50">arrow_csv::..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (89 samples, 8.02%)</title><rect x="9.0991%" y="277" width="8.0180%" height="15" fill="rgb(244,5,23)" fg:x="101" fg:w="89"/><text x="9.3491%" y="287.50">arrow_csv::..</text></g><g><title>csv_core::reader::Reader::read_record (68 samples, 6.13%)</title><rect x="10.9910%" y="261" width="6.1261%" height="15" fill="rgb(226,81,46)" fg:x="122" fg:w="68"/><text x="11.2410%" y="271.50">csv_core..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (6 samples, 0.54%)</title><rect x="17.1171%" y="277" width="0.5405%" height="15" fill="rgb(247,70,30)" fg:x="190" fg:w="6"/><text x="17.3671%" y="287.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.27%)</title><rect x="17.3874%" y="261" width="0.2703%" height="15" fill="rgb(212,68,19)" fg:x="193" fg:w="3"/><text x="17.6374%" y="271.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="25.1351%" y="165" width="0.0901%" height="15" fill="rgb(240,187,13)" fg:x="279" fg:w="1"/><text x="25.3851%" y="175.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (65 samples, 5.86%)</title><rect x="19.5495%" y="213" width="5.8559%" height="15" fill="rgb(223,113,26)" fg:x="217" fg:w="65"/><text x="19.7995%" y="223.50">arrow_a..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (7 samples, 0.63%)</title><rect x="24.7748%" y="197" width="0.6306%" height="15" fill="rgb(206,192,2)" fg:x="275" fg:w="7"/><text x="25.0248%" y="207.50"></text></g><g><title>__rustc::__rdl_realloc (7 samples, 0.63%)</title><rect x="24.7748%" y="181" width="0.6306%" height="15" fill="rgb(241,108,4)" fg:x="275" fg:w="7"/><text x="25.0248%" y="191.50"></text></g><g><title>posix_memalign (2 samples, 0.18%)</title><rect x="25.2252%" y="165" width="0.1802%" height="15" fill="rgb(247,173,49)" fg:x="280" fg:w="2"/><text x="25.4752%" y="175.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (184 samples, 16.58%)</title><rect x="8.9189%" y="309" width="16.5766%" height="15" fill="rgb(224,114,35)" fg:x="99" fg:w="184"/><text x="9.1689%" y="319.50">arrow_csv::reader::BufRead..</text></g><g><title>arrow_csv::reader::Decoder::flush (93 samples, 8.38%)</title><rect x="17.1171%" y="293" width="8.3784%" height="15" fill="rgb(245,159,27)" fg:x="190" fg:w="93"/><text x="17.3671%" y="303.50">arrow_csv::r..</text></g><g><title>core::iter::adapters::try_process (87 samples, 7.84%)</title><rect x="17.6577%" y="277" width="7.8378%" height="15" fill="rgb(245,172,44)" fg:x="196" fg:w="87"/><text x="17.9077%" y="287.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (87 samples, 7.84%)</title><rect x="17.6577%" y="261" width="7.8378%" height="15" fill="rgb(236,23,11)" fg:x="196" fg:w="87"/><text x="17.9077%" y="271.50">&lt;alloc::vec..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (87 samples, 7.84%)</title><rect x="17.6577%" y="245" width="7.8378%" height="15" fill="rgb(205,117,38)" fg:x="196" fg:w="87"/><text x="17.9077%" y="255.50">&lt;core::iter..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (87 samples, 7.84%)</title><rect x="17.6577%" y="229" width="7.8378%" height="15" fill="rgb(237,72,25)" fg:x="196" fg:w="87"/><text x="17.9077%" y="239.50">&lt;arrow_arra..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::finish (1 samples, 0.09%)</title><rect x="25.4054%" y="213" width="0.0901%" height="15" fill="rgb(244,70,9)" fg:x="282" fg:w="1"/><text x="25.6554%" y="223.50"></text></g><g><title>&lt;arrow_buffer::buffer::mutable::MutableBuffer as core::default::Default&gt;::default (1 samples, 0.09%)</title><rect x="25.4054%" y="197" width="0.0901%" height="15" fill="rgb(217,125,39)" fg:x="282" fg:w="1"/><text x="25.6554%" y="207.50"></text></g><g><title>cfree (9 samples, 0.81%)</title><rect x="25.4955%" y="309" width="0.8108%" height="15" fill="rgb(235,36,10)" fg:x="283" fg:w="9"/><text x="25.7455%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::record_batch::RecordBatch&gt; (9 samples, 0.81%)</title><rect x="26.3063%" y="309" width="0.8108%" height="15" fill="rgb(251,123,47)" fg:x="292" fg:w="9"/><text x="26.5563%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.81%)</title><rect x="26.3063%" y="293" width="0.8108%" height="15" fill="rgb(221,13,13)" fg:x="292" fg:w="9"/><text x="26.5563%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_array::array::byte_array::GenericByteArray&lt;arrow_array::types::GenericStringType&lt;i32&gt;&gt;&gt; (9 samples, 0.81%)</title><rect x="26.3063%" y="277" width="0.8108%" height="15" fill="rgb(238,131,9)" fg:x="292" fg:w="9"/><text x="26.5563%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.81%)</title><rect x="26.3063%" y="261" width="0.8108%" height="15" fill="rgb(211,50,8)" fg:x="292" fg:w="9"/><text x="26.5563%" y="271.50"></text></g><g><title>cfree (9 samples, 0.81%)</title><rect x="26.3063%" y="245" width="0.8108%" height="15" fill="rgb(245,182,24)" fg:x="292" fg:w="9"/><text x="26.5563%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (1 samples, 0.09%)</title><rect x="27.1171%" y="309" width="0.0901%" height="15" fill="rgb(242,14,37)" fg:x="301" fg:w="1"/><text x="27.3671%" y="319.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="27.1171%" y="293" width="0.0901%" height="15" fill="rgb(246,228,12)" fg:x="301" fg:w="1"/><text x="27.3671%" y="303.50"></text></g><g><title>__default_morecore (1 samples, 0.09%)</title><rect x="27.1171%" y="277" width="0.0901%" height="15" fill="rgb(213,55,15)" fg:x="301" fg:w="1"/><text x="27.3671%" y="287.50"></text></g><g><title>__sbrk (1 samples, 0.09%)</title><rect x="27.1171%" y="261" width="0.0901%" height="15" fill="rgb(209,9,3)" fg:x="301" fg:w="1"/><text x="27.3671%" y="271.50"></text></g><g><title>brk (1 samples, 0.09%)</title><rect x="27.1171%" y="245" width="0.0901%" height="15" fill="rgb(230,59,30)" fg:x="301" fg:w="1"/><text x="27.3671%" y="255.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (10 samples, 0.90%)</title><rect x="29.0090%" y="293" width="0.9009%" height="15" fill="rgb(209,121,21)" fg:x="322" fg:w="10"/><text x="29.2590%" y="303.50"></text></g><g><title>__rustc::__rdl_realloc (10 samples, 0.90%)</title><rect x="29.0090%" y="277" width="0.9009%" height="15" fill="rgb(220,109,13)" fg:x="322" fg:w="10"/><text x="29.2590%" y="287.50"></text></g><g><title>mallopt (1 samples, 0.09%)</title><rect x="29.8198%" y="261" width="0.0901%" height="15" fill="rgb(232,18,1)" fg:x="331" fg:w="1"/><text x="30.0698%" y="271.50"></text></g><g><title>cfree (13 samples, 1.17%)</title><rect x="29.9099%" y="293" width="1.1712%" height="15" fill="rgb(215,41,42)" fg:x="332" fg:w="13"/><text x="30.1599%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (31 samples, 2.79%)</title><rect x="31.0811%" y="293" width="2.7928%" height="15" fill="rgb(224,123,36)" fg:x="345" fg:w="31"/><text x="31.3311%" y="303.50">co..</text></g><g><title>core::num::dec2flt::parse::parse_number (17 samples, 1.53%)</title><rect x="32.3423%" y="277" width="1.5315%" height="15" fill="rgb(240,125,3)" fg:x="359" fg:w="17"/><text x="32.5923%" y="287.50"></text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (1 samples, 0.09%)</title><rect x="34.6847%" y="277" width="0.0901%" height="15" fill="rgb(205,98,50)" fg:x="385" fg:w="1"/><text x="34.9347%" y="287.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (10 samples, 0.90%)</title><rect x="34.7748%" y="277" width="0.9009%" height="15" fill="rgb(205,185,37)" fg:x="386" fg:w="10"/><text x="35.0248%" y="287.50"></text></g><g><title>chrono::naive::datetime::NaiveDateTime::checked_sub_offset (1 samples, 0.09%)</title><rect x="35.5856%" y="261" width="0.0901%" height="15" fill="rgb(238,207,15)" fg:x="395" fg:w="1"/><text x="35.8356%" y="271.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (21 samples, 1.89%)</title><rect x="33.8739%" y="293" width="1.8919%" height="15" fill="rgb(213,199,42)" fg:x="376" fg:w="21"/><text x="34.1239%" y="303.50">n..</text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.09%)</title><rect x="35.6757%" y="277" width="0.0901%" height="15" fill="rgb(235,201,11)" fg:x="396" fg:w="1"/><text x="35.9257%" y="287.50"></text></g><g><title>__rustc::__rdl_alloc (2 samples, 0.18%)</title><rect x="37.0270%" y="277" width="0.1802%" height="15" fill="rgb(207,46,11)" fg:x="411" fg:w="2"/><text x="37.2770%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (16 samples, 1.44%)</title><rect x="37.2072%" y="277" width="1.4414%" height="15" fill="rgb(241,35,35)" fg:x="413" fg:w="16"/><text x="37.4572%" y="287.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (142 samples, 12.79%)</title><rect x="27.2072%" y="309" width="12.7928%" height="15" fill="rgb(243,32,47)" fg:x="302" fg:w="142"/><text x="27.4572%" y="319.50">nemscraper::process..</text></g><g><title>nemscraper::process::utils::clean_str (47 samples, 4.23%)</title><rect x="35.7658%" y="293" width="4.2342%" height="15" fill="rgb(247,202,23)" fg:x="397" fg:w="47"/><text x="36.0158%" y="303.50">nemsc..</text></g><g><title>malloc (15 samples, 1.35%)</title><rect x="38.6486%" y="277" width="1.3514%" height="15" fill="rgb(219,102,11)" fg:x="429" fg:w="15"/><text x="38.8986%" y="287.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="40.1802%" y="213" width="0.0901%" height="15" fill="rgb(243,110,44)" fg:x="446" fg:w="1"/><text x="40.4302%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (6 samples, 0.54%)</title><rect x="40.1802%" y="229" width="0.5405%" height="15" fill="rgb(222,74,54)" fg:x="446" fg:w="6"/><text x="40.4302%" y="239.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (5 samples, 0.45%)</title><rect x="40.2703%" y="213" width="0.4505%" height="15" fill="rgb(216,99,12)" fg:x="447" fg:w="5"/><text x="40.5203%" y="223.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.18%)</title><rect x="40.5405%" y="197" width="0.1802%" height="15" fill="rgb(226,22,26)" fg:x="450" fg:w="2"/><text x="40.7905%" y="207.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="40.7207%" y="213" width="0.0901%" height="15" fill="rgb(217,163,10)" fg:x="452" fg:w="1"/><text x="40.9707%" y="223.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.09%)</title><rect x="40.7207%" y="197" width="0.0901%" height="15" fill="rgb(213,25,53)" fg:x="452" fg:w="1"/><text x="40.9707%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="40.9910%" y="181" width="0.0901%" height="15" fill="rgb(252,105,26)" fg:x="455" fg:w="1"/><text x="41.2410%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (13 samples, 1.17%)</title><rect x="40.0000%" y="261" width="1.1712%" height="15" fill="rgb(220,39,43)" fg:x="444" fg:w="13"/><text x="40.2500%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (13 samples, 1.17%)</title><rect x="40.0000%" y="245" width="1.1712%" height="15" fill="rgb(229,68,48)" fg:x="444" fg:w="13"/><text x="40.2500%" y="255.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (5 samples, 0.45%)</title><rect x="40.7207%" y="229" width="0.4505%" height="15" fill="rgb(252,8,32)" fg:x="452" fg:w="5"/><text x="40.9707%" y="239.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (4 samples, 0.36%)</title><rect x="40.8108%" y="213" width="0.3604%" height="15" fill="rgb(223,20,43)" fg:x="453" fg:w="4"/><text x="41.0608%" y="223.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (3 samples, 0.27%)</title><rect x="40.9009%" y="197" width="0.2703%" height="15" fill="rgb(229,81,49)" fg:x="454" fg:w="3"/><text x="41.1509%" y="207.50"></text></g><g><title>brotli::enc::encode::should_compress (1 samples, 0.09%)</title><rect x="41.0811%" y="181" width="0.0901%" height="15" fill="rgb(236,28,36)" fg:x="456" fg:w="1"/><text x="41.3311%" y="191.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (4 samples, 0.36%)</title><rect x="47.2973%" y="213" width="0.3604%" height="15" fill="rgb(249,185,26)" fg:x="525" fg:w="4"/><text x="47.5473%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (57 samples, 5.14%)</title><rect x="42.7027%" y="245" width="5.1351%" height="15" fill="rgb(249,174,33)" fg:x="474" fg:w="57"/><text x="42.9527%" y="255.50">&lt;parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (30 samples, 2.70%)</title><rect x="45.1351%" y="229" width="2.7027%" height="15" fill="rgb(233,201,37)" fg:x="501" fg:w="30"/><text x="45.3851%" y="239.50">pa..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (2 samples, 0.18%)</title><rect x="47.6577%" y="213" width="0.1802%" height="15" fill="rgb(221,78,26)" fg:x="529" fg:w="2"/><text x="47.9077%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.18%)</title><rect x="48.4685%" y="213" width="0.1802%" height="15" fill="rgb(250,127,30)" fg:x="538" fg:w="2"/><text x="48.7185%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.18%)</title><rect x="48.4685%" y="197" width="0.1802%" height="15" fill="rgb(230,49,44)" fg:x="538" fg:w="2"/><text x="48.7185%" y="207.50"></text></g><g><title>__libc_realloc (2 samples, 0.18%)</title><rect x="48.4685%" y="181" width="0.1802%" height="15" fill="rgb(229,67,23)" fg:x="538" fg:w="2"/><text x="48.7185%" y="191.50"></text></g><g><title>parquet::column::writer::compare_greater (17 samples, 1.53%)</title><rect x="48.6486%" y="213" width="1.5315%" height="15" fill="rgb(249,83,47)" fg:x="540" fg:w="17"/><text x="48.8986%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (54 samples, 4.86%)</title><rect x="47.8378%" y="245" width="4.8649%" height="15" fill="rgb(215,43,3)" fg:x="531" fg:w="54"/><text x="48.0878%" y="255.50">&lt;parqu..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (50 samples, 4.50%)</title><rect x="48.1982%" y="229" width="4.5045%" height="15" fill="rgb(238,154,13)" fg:x="535" fg:w="50"/><text x="48.4482%" y="239.50">parqu..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (28 samples, 2.52%)</title><rect x="50.1802%" y="213" width="2.5225%" height="15" fill="rgb(219,56,2)" fg:x="557" fg:w="28"/><text x="50.4302%" y="223.50">pa..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.36%)</title><rect x="52.3423%" y="197" width="0.3604%" height="15" fill="rgb(233,0,4)" fg:x="581" fg:w="4"/><text x="52.5923%" y="207.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (3 samples, 0.27%)</title><rect x="52.7027%" y="229" width="0.2703%" height="15" fill="rgb(235,30,7)" fg:x="585" fg:w="3"/><text x="52.9527%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.09%)</title><rect x="52.8829%" y="213" width="0.0901%" height="15" fill="rgb(250,79,13)" fg:x="587" fg:w="1"/><text x="53.1329%" y="223.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (5 samples, 0.45%)</title><rect x="52.9730%" y="229" width="0.4505%" height="15" fill="rgb(211,146,34)" fg:x="588" fg:w="5"/><text x="53.2230%" y="239.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (5 samples, 0.45%)</title><rect x="52.9730%" y="213" width="0.4505%" height="15" fill="rgb(228,22,38)" fg:x="588" fg:w="5"/><text x="53.2230%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.09%)</title><rect x="53.3333%" y="197" width="0.0901%" height="15" fill="rgb(235,168,5)" fg:x="592" fg:w="1"/><text x="53.5833%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (1 samples, 0.09%)</title><rect x="57.3874%" y="181" width="0.0901%" height="15" fill="rgb(221,155,16)" fg:x="637" fg:w="1"/><text x="57.6374%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (4 samples, 0.36%)</title><rect x="57.4775%" y="181" width="0.3604%" height="15" fill="rgb(215,215,53)" fg:x="638" fg:w="4"/><text x="57.7275%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (40 samples, 3.60%)</title><rect x="54.5045%" y="197" width="3.6036%" height="15" fill="rgb(223,4,10)" fg:x="605" fg:w="40"/><text x="54.7545%" y="207.50">&lt;bro..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (3 samples, 0.27%)</title><rect x="57.8378%" y="181" width="0.2703%" height="15" fill="rgb(234,103,6)" fg:x="642" fg:w="3"/><text x="58.0878%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (54 samples, 4.86%)</title><rect x="53.5135%" y="213" width="4.8649%" height="15" fill="rgb(227,97,0)" fg:x="594" fg:w="54"/><text x="53.7635%" y="223.50">brotli..</text></g><g><title>brotli::enc::command::Command::init (3 samples, 0.27%)</title><rect x="58.1081%" y="197" width="0.2703%" height="15" fill="rgb(234,150,53)" fg:x="645" fg:w="3"/><text x="58.3581%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (11 samples, 0.99%)</title><rect x="58.3784%" y="213" width="0.9910%" height="15" fill="rgb(228,201,54)" fg:x="648" fg:w="11"/><text x="58.6284%" y="223.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (10 samples, 0.90%)</title><rect x="58.4685%" y="197" width="0.9009%" height="15" fill="rgb(222,22,37)" fg:x="649" fg:w="10"/><text x="58.7185%" y="207.50"></text></g><g><title>brotli::enc::backward_references::TestStaticDictionaryItem (3 samples, 0.27%)</title><rect x="65.2252%" y="165" width="0.2703%" height="15" fill="rgb(237,53,32)" fg:x="724" fg:w="3"/><text x="65.4752%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (4 samples, 0.36%)</title><rect x="65.4955%" y="165" width="0.3604%" height="15" fill="rgb(233,25,53)" fg:x="727" fg:w="4"/><text x="65.7455%" y="175.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (62 samples, 5.59%)</title><rect x="60.6306%" y="181" width="5.5856%" height="15" fill="rgb(210,40,34)" fg:x="673" fg:w="62"/><text x="60.8806%" y="191.50">&lt;brotli..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (4 samples, 0.36%)</title><rect x="65.8559%" y="165" width="0.3604%" height="15" fill="rgb(241,220,44)" fg:x="731" fg:w="4"/><text x="66.1059%" y="175.50"></text></g><g><title>brotli::enc::backward_references::adv_prepare_distance_cache (2 samples, 0.18%)</title><rect x="66.2162%" y="181" width="0.1802%" height="15" fill="rgb(235,28,35)" fg:x="735" fg:w="2"/><text x="66.4662%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (81 samples, 7.30%)</title><rect x="59.4595%" y="197" width="7.2973%" height="15" fill="rgb(210,56,17)" fg:x="660" fg:w="81"/><text x="59.7095%" y="207.50">brotli::en..</text></g><g><title>brotli::enc::command::Command::init (4 samples, 0.36%)</title><rect x="66.3964%" y="181" width="0.3604%" height="15" fill="rgb(224,130,29)" fg:x="737" fg:w="4"/><text x="66.6464%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (6 samples, 0.54%)</title><rect x="67.4775%" y="181" width="0.5405%" height="15" fill="rgb(235,212,8)" fg:x="749" fg:w="6"/><text x="67.7275%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (6 samples, 0.54%)</title><rect x="67.4775%" y="165" width="0.5405%" height="15" fill="rgb(223,33,50)" fg:x="749" fg:w="6"/><text x="67.7275%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (6 samples, 0.54%)</title><rect x="67.4775%" y="149" width="0.5405%" height="15" fill="rgb(219,149,13)" fg:x="749" fg:w="6"/><text x="67.7275%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="67.9279%" y="133" width="0.0901%" height="15" fill="rgb(250,156,29)" fg:x="754" fg:w="1"/><text x="68.1779%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::store_symbol (3 samples, 0.27%)</title><rect x="68.0180%" y="181" width="0.2703%" height="15" fill="rgb(216,193,19)" fg:x="755" fg:w="3"/><text x="68.2680%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.63%)</title><rect x="68.2883%" y="181" width="0.6306%" height="15" fill="rgb(216,135,14)" fg:x="758" fg:w="7"/><text x="68.5383%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (25 samples, 2.25%)</title><rect x="66.7568%" y="197" width="2.2523%" height="15" fill="rgb(241,47,5)" fg:x="741" fg:w="25"/><text x="67.0068%" y="207.50">b..</text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.09%)</title><rect x="68.9189%" y="181" width="0.0901%" height="15" fill="rgb(233,42,35)" fg:x="765" fg:w="1"/><text x="69.1689%" y="191.50"></text></g><g><title>brotli::enc::encode::DecideOverLiteralContextModeling (1 samples, 0.09%)</title><rect x="69.0090%" y="197" width="0.0901%" height="15" fill="rgb(231,13,6)" fg:x="766" fg:w="1"/><text x="69.2590%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (9 samples, 0.81%)</title><rect x="69.0991%" y="197" width="0.8108%" height="15" fill="rgb(207,181,40)" fg:x="767" fg:w="9"/><text x="69.3491%" y="207.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (3 samples, 0.27%)</title><rect x="70.5405%" y="181" width="0.2703%" height="15" fill="rgb(254,173,49)" fg:x="783" fg:w="3"/><text x="70.7905%" y="191.50"></text></g><g><title>brotli::enc::bit_cost::shannon_entropy (1 samples, 0.09%)</title><rect x="70.7207%" y="165" width="0.0901%" height="15" fill="rgb(221,1,38)" fg:x="785" fg:w="1"/><text x="70.9707%" y="175.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (11 samples, 0.99%)</title><rect x="69.9099%" y="197" width="0.9910%" height="15" fill="rgb(206,124,46)" fg:x="776" fg:w="11"/><text x="70.1599%" y="207.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="70.8108%" y="181" width="0.0901%" height="15" fill="rgb(249,21,11)" fg:x="786" fg:w="1"/><text x="71.0608%" y="191.50"></text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (2 samples, 0.18%)</title><rect x="70.9009%" y="197" width="0.1802%" height="15" fill="rgb(222,201,40)" fg:x="787" fg:w="2"/><text x="71.1509%" y="207.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (2 samples, 0.18%)</title><rect x="70.9009%" y="181" width="0.1802%" height="15" fill="rgb(235,61,29)" fg:x="787" fg:w="2"/><text x="71.1509%" y="191.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (131 samples, 11.80%)</title><rect x="59.3694%" y="213" width="11.8018%" height="15" fill="rgb(219,207,3)" fg:x="659" fg:w="131"/><text x="59.6194%" y="223.50">brotli::enc::write..</text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="71.0811%" y="197" width="0.0901%" height="15" fill="rgb(222,56,46)" fg:x="789" fg:w="1"/><text x="71.3311%" y="207.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (198 samples, 17.84%)</title><rect x="53.4234%" y="229" width="17.8378%" height="15" fill="rgb(239,76,54)" fg:x="593" fg:w="198"/><text x="53.6734%" y="239.50">&lt;parquet::compression::brotl..</text></g><g><title>std::io::error::Error::new (1 samples, 0.09%)</title><rect x="71.1712%" y="213" width="0.0901%" height="15" fill="rgb(231,124,27)" fg:x="790" fg:w="1"/><text x="71.4212%" y="223.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="71.1712%" y="197" width="0.0901%" height="15" fill="rgb(249,195,6)" fg:x="790" fg:w="1"/><text x="71.4212%" y="207.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (4 samples, 0.36%)</title><rect x="71.2613%" y="229" width="0.3604%" height="15" fill="rgb(237,174,47)" fg:x="791" fg:w="4"/><text x="71.5113%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (211 samples, 19.01%)</title><rect x="52.7027%" y="245" width="19.0090%" height="15" fill="rgb(206,201,31)" fg:x="585" fg:w="211"/><text x="52.9527%" y="255.50">parquet::column::writer::Gener..</text></g><g><title>parquet::file::metadata::ColumnIndexBuilder::append (1 samples, 0.09%)</title><rect x="71.6216%" y="229" width="0.0901%" height="15" fill="rgb(231,57,52)" fg:x="795" fg:w="1"/><text x="71.8716%" y="239.50"></text></g><g><title>brotli::enc::backward_references::BackwardReferenceScore (2 samples, 0.18%)</title><rect x="76.4865%" y="181" width="0.1802%" height="15" fill="rgb(248,177,22)" fg:x="849" fg:w="2"/><text x="76.7365%" y="191.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="76.6667%" y="181" width="0.0901%" height="15" fill="rgb(215,211,37)" fg:x="851" fg:w="1"/><text x="76.9167%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (55 samples, 4.95%)</title><rect x="71.9820%" y="213" width="4.9550%" height="15" fill="rgb(241,128,51)" fg:x="799" fg:w="55"/><text x="72.2320%" y="223.50">brotli..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (50 samples, 4.50%)</title><rect x="72.4324%" y="197" width="4.5045%" height="15" fill="rgb(227,165,31)" fg:x="804" fg:w="50"/><text x="72.6824%" y="207.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (2 samples, 0.18%)</title><rect x="76.7568%" y="181" width="0.1802%" height="15" fill="rgb(228,167,24)" fg:x="852" fg:w="2"/><text x="77.0068%" y="191.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="76.9369%" y="213" width="0.0901%" height="15" fill="rgb(228,143,12)" fg:x="854" fg:w="1"/><text x="77.1869%" y="223.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="76.9369%" y="197" width="0.0901%" height="15" fill="rgb(249,149,8)" fg:x="854" fg:w="1"/><text x="77.1869%" y="207.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="77.0270%" y="213" width="0.0901%" height="15" fill="rgb(243,35,44)" fg:x="855" fg:w="1"/><text x="77.2770%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="77.2072%" y="181" width="0.0901%" height="15" fill="rgb(246,89,9)" fg:x="857" fg:w="1"/><text x="77.4572%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="77.2072%" y="165" width="0.0901%" height="15" fill="rgb(233,213,13)" fg:x="857" fg:w="1"/><text x="77.4572%" y="175.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="77.2072%" y="149" width="0.0901%" height="15" fill="rgb(233,141,41)" fg:x="857" fg:w="1"/><text x="77.4572%" y="159.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliSetDepth (1 samples, 0.09%)</title><rect x="77.2072%" y="133" width="0.0901%" height="15" fill="rgb(239,167,4)" fg:x="857" fg:w="1"/><text x="77.4572%" y="143.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliWriteBits (7 samples, 0.63%)</title><rect x="77.2973%" y="181" width="0.6306%" height="15" fill="rgb(209,217,16)" fg:x="858" fg:w="7"/><text x="77.5473%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (10 samples, 0.90%)</title><rect x="77.1171%" y="197" width="0.9009%" height="15" fill="rgb(219,88,35)" fg:x="856" fg:w="10"/><text x="77.3671%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::warn_on_missing_free (1 samples, 0.09%)</title><rect x="77.9279%" y="181" width="0.0901%" height="15" fill="rgb(220,193,23)" fg:x="865" fg:w="1"/><text x="78.1779%" y="191.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (424 samples, 38.20%)</title><rect x="40.0000%" y="277" width="38.1982%" height="15" fill="rgb(230,90,52)" fg:x="444" fg:w="424"/><text x="40.2500%" y="287.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (411 samples, 37.03%)</title><rect x="41.1712%" y="261" width="37.0270%" height="15" fill="rgb(252,106,19)" fg:x="457" fg:w="411"/><text x="41.4212%" y="271.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (72 samples, 6.49%)</title><rect x="71.7117%" y="245" width="6.4865%" height="15" fill="rgb(206,74,20)" fg:x="796" fg:w="72"/><text x="71.9617%" y="255.50">parquet:..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (72 samples, 6.49%)</title><rect x="71.7117%" y="229" width="6.4865%" height="15" fill="rgb(230,138,44)" fg:x="796" fg:w="72"/><text x="71.9617%" y="239.50">&lt;parquet..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (12 samples, 1.08%)</title><rect x="77.1171%" y="213" width="1.0811%" height="15" fill="rgb(235,182,43)" fg:x="856" fg:w="12"/><text x="77.3671%" y="223.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (2 samples, 0.18%)</title><rect x="78.0180%" y="197" width="0.1802%" height="15" fill="rgb(242,16,51)" fg:x="866" fg:w="2"/><text x="78.2680%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (427 samples, 38.47%)</title><rect x="40.0000%" y="309" width="38.4685%" height="15" fill="rgb(248,9,4)" fg:x="444" fg:w="427"/><text x="40.2500%" y="319.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (427 samples, 38.47%)</title><rect x="40.0000%" y="293" width="38.4685%" height="15" fill="rgb(210,31,22)" fg:x="444" fg:w="427"/><text x="40.2500%" y="303.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (3 samples, 0.27%)</title><rect x="78.1982%" y="277" width="0.2703%" height="15" fill="rgb(239,54,39)" fg:x="868" fg:w="3"/><text x="78.4482%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (3 samples, 0.27%)</title><rect x="78.1982%" y="261" width="0.2703%" height="15" fill="rgb(230,99,41)" fg:x="868" fg:w="3"/><text x="78.4482%" y="271.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.09%)</title><rect x="78.4685%" y="309" width="0.0901%" height="15" fill="rgb(253,106,12)" fg:x="871" fg:w="1"/><text x="78.7185%" y="319.50"></text></g><g><title>open64 (1 samples, 0.09%)</title><rect x="78.4685%" y="293" width="0.0901%" height="15" fill="rgb(213,46,41)" fg:x="871" fg:w="1"/><text x="78.7185%" y="303.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (797 samples, 71.80%)</title><rect x="6.9369%" y="325" width="71.8018%" height="15" fill="rgb(215,133,35)" fg:x="77" fg:w="797"/><text x="7.1869%" y="335.50">nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch</text></g><g><title>tracing_core::event::Event::dispatch (2 samples, 0.18%)</title><rect x="78.5586%" y="309" width="0.1802%" height="15" fill="rgb(213,28,5)" fg:x="872" fg:w="2"/><text x="78.8086%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (2 samples, 0.18%)</title><rect x="78.5586%" y="293" width="0.1802%" height="15" fill="rgb(215,77,49)" fg:x="872" fg:w="2"/><text x="78.8086%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.18%)</title><rect x="78.5586%" y="277" width="0.1802%" height="15" fill="rgb(248,100,22)" fg:x="872" fg:w="2"/><text x="78.8086%" y="287.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (2 samples, 0.18%)</title><rect x="78.5586%" y="261" width="0.1802%" height="15" fill="rgb(208,67,9)" fg:x="872" fg:w="2"/><text x="78.8086%" y="271.50"></text></g><g><title>core::fmt::write (1 samples, 0.09%)</title><rect x="78.6486%" y="245" width="0.0901%" height="15" fill="rgb(219,133,21)" fg:x="873" fg:w="1"/><text x="78.8986%" y="255.50"></text></g><g><title>core::slice::memchr::memchr_aligned (6 samples, 0.54%)</title><rect x="79.3694%" y="309" width="0.5405%" height="15" fill="rgb(246,46,29)" fg:x="881" fg:w="6"/><text x="79.6194%" y="319.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (869 samples, 78.29%)</title><rect x="1.8919%" y="373" width="78.2883%" height="15" fill="rgb(246,185,52)" fg:x="21" fg:w="869"/><text x="2.1419%" y="383.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (863 samples, 77.75%)</title><rect x="2.4324%" y="357" width="77.7477%" height="15" fill="rgb(252,136,11)" fg:x="27" fg:w="863"/><text x="2.6824%" y="367.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (863 samples, 77.75%)</title><rect x="2.4324%" y="341" width="77.7477%" height="15" fill="rgb(219,138,53)" fg:x="27" fg:w="863"/><text x="2.6824%" y="351.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>std::io::append_to_string (16 samples, 1.44%)</title><rect x="78.7387%" y="325" width="1.4414%" height="15" fill="rgb(211,51,23)" fg:x="874" fg:w="16"/><text x="78.9887%" y="335.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.27%)</title><rect x="79.9099%" y="309" width="0.2703%" height="15" fill="rgb(247,221,28)" fg:x="887" fg:w="3"/><text x="80.1599%" y="319.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::feed_row (1 samples, 0.09%)</title><rect x="80.1802%" y="341" width="0.0901%" height="15" fill="rgb(251,222,45)" fg:x="890" fg:w="1"/><text x="80.4302%" y="351.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="80.1802%" y="325" width="0.0901%" height="15" fill="rgb(217,162,53)" fg:x="890" fg:w="1"/><text x="80.4302%" y="335.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (1 samples, 0.09%)</title><rect x="80.2703%" y="309" width="0.0901%" height="15" fill="rgb(229,93,14)" fg:x="891" fg:w="1"/><text x="80.5203%" y="319.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.09%)</title><rect x="80.2703%" y="293" width="0.0901%" height="15" fill="rgb(209,67,49)" fg:x="891" fg:w="1"/><text x="80.5203%" y="303.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.09%)</title><rect x="80.2703%" y="277" width="0.0901%" height="15" fill="rgb(213,87,29)" fg:x="891" fg:w="1"/><text x="80.5203%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="80.2703%" y="261" width="0.0901%" height="15" fill="rgb(205,151,52)" fg:x="891" fg:w="1"/><text x="80.5203%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.09%)</title><rect x="80.2703%" y="245" width="0.0901%" height="15" fill="rgb(253,215,39)" fg:x="891" fg:w="1"/><text x="80.5203%" y="255.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.09%)</title><rect x="80.2703%" y="229" width="0.0901%" height="15" fill="rgb(221,220,41)" fg:x="891" fg:w="1"/><text x="80.5203%" y="239.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (1 samples, 0.09%)</title><rect x="80.3604%" y="309" width="0.0901%" height="15" fill="rgb(218,133,21)" fg:x="892" fg:w="1"/><text x="80.6104%" y="319.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 0.09%)</title><rect x="80.3604%" y="293" width="0.0901%" height="15" fill="rgb(221,193,43)" fg:x="892" fg:w="1"/><text x="80.6104%" y="303.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.09%)</title><rect x="80.3604%" y="277" width="0.0901%" height="15" fill="rgb(240,128,52)" fg:x="892" fg:w="1"/><text x="80.6104%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="80.5405%" y="245" width="0.0901%" height="15" fill="rgb(253,114,12)" fg:x="894" fg:w="1"/><text x="80.7905%" y="255.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="80.5405%" y="229" width="0.0901%" height="15" fill="rgb(215,223,47)" fg:x="894" fg:w="1"/><text x="80.7905%" y="239.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="80.5405%" y="213" width="0.0901%" height="15" fill="rgb(248,225,23)" fg:x="894" fg:w="1"/><text x="80.7905%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="80.5405%" y="197" width="0.0901%" height="15" fill="rgb(250,108,0)" fg:x="894" fg:w="1"/><text x="80.7905%" y="207.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="80.5405%" y="181" width="0.0901%" height="15" fill="rgb(228,208,7)" fg:x="894" fg:w="1"/><text x="80.7905%" y="191.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (2 samples, 0.18%)</title><rect x="80.6306%" y="213" width="0.1802%" height="15" fill="rgb(244,45,10)" fg:x="895" fg:w="2"/><text x="80.8806%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (2 samples, 0.18%)</title><rect x="80.6306%" y="197" width="0.1802%" height="15" fill="rgb(207,125,25)" fg:x="895" fg:w="2"/><text x="80.8806%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (7 samples, 0.63%)</title><rect x="80.2703%" y="325" width="0.6306%" height="15" fill="rgb(210,195,18)" fg:x="891" fg:w="7"/><text x="80.5203%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (5 samples, 0.45%)</title><rect x="80.4505%" y="309" width="0.4505%" height="15" fill="rgb(249,80,12)" fg:x="893" fg:w="5"/><text x="80.7005%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (5 samples, 0.45%)</title><rect x="80.4505%" y="293" width="0.4505%" height="15" fill="rgb(221,65,9)" fg:x="893" fg:w="5"/><text x="80.7005%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (5 samples, 0.45%)</title><rect x="80.4505%" y="277" width="0.4505%" height="15" fill="rgb(235,49,36)" fg:x="893" fg:w="5"/><text x="80.7005%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (5 samples, 0.45%)</title><rect x="80.4505%" y="261" width="0.4505%" height="15" fill="rgb(225,32,20)" fg:x="893" fg:w="5"/><text x="80.7005%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (3 samples, 0.27%)</title><rect x="80.6306%" y="245" width="0.2703%" height="15" fill="rgb(215,141,46)" fg:x="895" fg:w="3"/><text x="80.8806%" y="255.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.27%)</title><rect x="80.6306%" y="229" width="0.2703%" height="15" fill="rgb(250,160,47)" fg:x="895" fg:w="3"/><text x="80.8806%" y="239.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="80.8108%" y="213" width="0.0901%" height="15" fill="rgb(216,222,40)" fg:x="897" fg:w="1"/><text x="81.0608%" y="223.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.09%)</title><rect x="80.9009%" y="181" width="0.0901%" height="15" fill="rgb(234,217,39)" fg:x="898" fg:w="1"/><text x="81.1509%" y="191.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.09%)</title><rect x="80.9009%" y="165" width="0.0901%" height="15" fill="rgb(207,178,40)" fg:x="898" fg:w="1"/><text x="81.1509%" y="175.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.09%)</title><rect x="80.9009%" y="149" width="0.0901%" height="15" fill="rgb(221,136,13)" fg:x="898" fg:w="1"/><text x="81.1509%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.18%)</title><rect x="80.9009%" y="309" width="0.1802%" height="15" fill="rgb(249,199,10)" fg:x="898" fg:w="2"/><text x="81.1509%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.18%)</title><rect x="80.9009%" y="293" width="0.1802%" height="15" fill="rgb(249,222,13)" fg:x="898" fg:w="2"/><text x="81.1509%" y="303.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.18%)</title><rect x="80.9009%" y="277" width="0.1802%" height="15" fill="rgb(244,185,38)" fg:x="898" fg:w="2"/><text x="81.1509%" y="287.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.18%)</title><rect x="80.9009%" y="261" width="0.1802%" height="15" fill="rgb(236,202,9)" fg:x="898" fg:w="2"/><text x="81.1509%" y="271.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.18%)</title><rect x="80.9009%" y="245" width="0.1802%" height="15" fill="rgb(250,229,37)" fg:x="898" fg:w="2"/><text x="81.1509%" y="255.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.18%)</title><rect x="80.9009%" y="229" width="0.1802%" height="15" fill="rgb(206,174,23)" fg:x="898" fg:w="2"/><text x="81.1509%" y="239.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.18%)</title><rect x="80.9009%" y="213" width="0.1802%" height="15" fill="rgb(211,33,43)" fg:x="898" fg:w="2"/><text x="81.1509%" y="223.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (2 samples, 0.18%)</title><rect x="80.9009%" y="197" width="0.1802%" height="15" fill="rgb(245,58,50)" fg:x="898" fg:w="2"/><text x="81.1509%" y="207.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (1 samples, 0.09%)</title><rect x="80.9910%" y="181" width="0.0901%" height="15" fill="rgb(244,68,36)" fg:x="899" fg:w="1"/><text x="81.2410%" y="191.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (1 samples, 0.09%)</title><rect x="80.9910%" y="165" width="0.0901%" height="15" fill="rgb(232,229,15)" fg:x="899" fg:w="1"/><text x="81.2410%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::finalize (10 samples, 0.90%)</title><rect x="80.2703%" y="341" width="0.9009%" height="15" fill="rgb(254,30,23)" fg:x="891" fg:w="10"/><text x="80.5203%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (3 samples, 0.27%)</title><rect x="80.9009%" y="325" width="0.2703%" height="15" fill="rgb(235,160,14)" fg:x="898" fg:w="3"/><text x="81.1509%" y="335.50"></text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (1 samples, 0.09%)</title><rect x="81.0811%" y="309" width="0.0901%" height="15" fill="rgb(212,155,44)" fg:x="900" fg:w="1"/><text x="81.3311%" y="319.50"></text></g><g><title>std::io::copy::stack_buffer_copy (1 samples, 0.09%)</title><rect x="81.0811%" y="293" width="0.0901%" height="15" fill="rgb(226,2,50)" fg:x="900" fg:w="1"/><text x="81.3311%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.09%)</title><rect x="81.0811%" y="277" width="0.0901%" height="15" fill="rgb(234,177,6)" fg:x="900" fg:w="1"/><text x="81.3311%" y="287.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.09%)</title><rect x="81.0811%" y="261" width="0.0901%" height="15" fill="rgb(217,24,9)" fg:x="900" fg:w="1"/><text x="81.3311%" y="271.50"></text></g><g><title>&lt;std::os::unix::net::stream::UnixStream as std::io::Write&gt;::write (1 samples, 0.09%)</title><rect x="81.0811%" y="245" width="0.0901%" height="15" fill="rgb(220,13,46)" fg:x="900" fg:w="1"/><text x="81.3311%" y="255.50"></text></g><g><title>write (1 samples, 0.09%)</title><rect x="81.0811%" y="229" width="0.0901%" height="15" fill="rgb(239,221,27)" fg:x="900" fg:w="1"/><text x="81.3311%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.09%)</title><rect x="81.2613%" y="325" width="0.0901%" height="15" fill="rgb(222,198,25)" fg:x="902" fg:w="1"/><text x="81.5113%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.09%)</title><rect x="81.2613%" y="309" width="0.0901%" height="15" fill="rgb(211,99,13)" fg:x="902" fg:w="1"/><text x="81.5113%" y="319.50"></text></g><g><title>__libc_realloc (1 samples, 0.09%)</title><rect x="81.2613%" y="293" width="0.0901%" height="15" fill="rgb(232,111,31)" fg:x="902" fg:w="1"/><text x="81.5113%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2 samples, 0.18%)</title><rect x="81.4414%" y="277" width="0.1802%" height="15" fill="rgb(245,82,37)" fg:x="904" fg:w="2"/><text x="81.6914%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.18%)</title><rect x="81.4414%" y="261" width="0.1802%" height="15" fill="rgb(227,149,46)" fg:x="904" fg:w="2"/><text x="81.6914%" y="271.50"></text></g><g><title>__libc_realloc (2 samples, 0.18%)</title><rect x="81.4414%" y="245" width="0.1802%" height="15" fill="rgb(218,36,50)" fg:x="904" fg:w="2"/><text x="81.6914%" y="255.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (6 samples, 0.54%)</title><rect x="81.4414%" y="309" width="0.5405%" height="15" fill="rgb(226,80,48)" fg:x="904" fg:w="6"/><text x="81.6914%" y="319.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (6 samples, 0.54%)</title><rect x="81.4414%" y="293" width="0.5405%" height="15" fill="rgb(238,224,15)" fg:x="904" fg:w="6"/><text x="81.6914%" y="303.50"></text></g><g><title>csv_core::reader::Reader::read_record (4 samples, 0.36%)</title><rect x="81.6216%" y="277" width="0.3604%" height="15" fill="rgb(241,136,10)" fg:x="906" fg:w="4"/><text x="81.8716%" y="287.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (1 samples, 0.09%)</title><rect x="81.9820%" y="293" width="0.0901%" height="15" fill="rgb(208,32,45)" fg:x="910" fg:w="1"/><text x="82.2320%" y="303.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="81.9820%" y="277" width="0.0901%" height="15" fill="rgb(207,135,9)" fg:x="910" fg:w="1"/><text x="82.2320%" y="287.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (14 samples, 1.26%)</title><rect x="81.3514%" y="325" width="1.2613%" height="15" fill="rgb(206,86,44)" fg:x="903" fg:w="14"/><text x="81.6014%" y="335.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (7 samples, 0.63%)</title><rect x="81.9820%" y="309" width="0.6306%" height="15" fill="rgb(245,177,15)" fg:x="910" fg:w="7"/><text x="82.2320%" y="319.50"></text></g><g><title>core::iter::adapters::try_process (6 samples, 0.54%)</title><rect x="82.0721%" y="293" width="0.5405%" height="15" fill="rgb(206,64,50)" fg:x="911" fg:w="6"/><text x="82.3221%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.54%)</title><rect x="82.0721%" y="277" width="0.5405%" height="15" fill="rgb(234,36,40)" fg:x="911" fg:w="6"/><text x="82.3221%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.54%)</title><rect x="82.0721%" y="261" width="0.5405%" height="15" fill="rgb(213,64,8)" fg:x="911" fg:w="6"/><text x="82.3221%" y="271.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (6 samples, 0.54%)</title><rect x="82.0721%" y="245" width="0.5405%" height="15" fill="rgb(210,75,36)" fg:x="911" fg:w="6"/><text x="82.3221%" y="255.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (4 samples, 0.36%)</title><rect x="82.2523%" y="229" width="0.3604%" height="15" fill="rgb(229,88,21)" fg:x="913" fg:w="4"/><text x="82.5023%" y="239.50"></text></g><g><title>cfree (2 samples, 0.18%)</title><rect x="82.6126%" y="325" width="0.1802%" height="15" fill="rgb(252,204,47)" fg:x="917" fg:w="2"/><text x="82.8626%" y="335.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (2 samples, 0.18%)</title><rect x="82.7928%" y="309" width="0.1802%" height="15" fill="rgb(208,77,27)" fg:x="919" fg:w="2"/><text x="83.0428%" y="319.50"></text></g><g><title>__rustc::__rdl_realloc (2 samples, 0.18%)</title><rect x="82.7928%" y="293" width="0.1802%" height="15" fill="rgb(221,76,26)" fg:x="919" fg:w="2"/><text x="83.0428%" y="303.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 0.27%)</title><rect x="82.9730%" y="309" width="0.2703%" height="15" fill="rgb(225,139,18)" fg:x="921" fg:w="3"/><text x="83.2230%" y="319.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.09%)</title><rect x="83.1532%" y="293" width="0.0901%" height="15" fill="rgb(230,137,11)" fg:x="923" fg:w="1"/><text x="83.4032%" y="303.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.09%)</title><rect x="83.2432%" y="309" width="0.0901%" height="15" fill="rgb(212,28,1)" fg:x="924" fg:w="1"/><text x="83.4932%" y="319.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (9 samples, 0.81%)</title><rect x="82.7928%" y="325" width="0.8108%" height="15" fill="rgb(248,164,17)" fg:x="919" fg:w="9"/><text x="83.0428%" y="335.50"></text></g><g><title>nemscraper::process::utils::clean_str (3 samples, 0.27%)</title><rect x="83.3333%" y="309" width="0.2703%" height="15" fill="rgb(222,171,42)" fg:x="925" fg:w="3"/><text x="83.5833%" y="319.50"></text></g><g><title>malloc (2 samples, 0.18%)</title><rect x="83.4234%" y="293" width="0.1802%" height="15" fill="rgb(243,84,45)" fg:x="926" fg:w="2"/><text x="83.6734%" y="303.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.09%)</title><rect x="83.6036%" y="245" width="0.0901%" height="15" fill="rgb(252,49,23)" fg:x="928" fg:w="1"/><text x="83.8536%" y="255.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.09%)</title><rect x="83.6036%" y="229" width="0.0901%" height="15" fill="rgb(215,19,7)" fg:x="928" fg:w="1"/><text x="83.8536%" y="239.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (2 samples, 0.18%)</title><rect x="83.6036%" y="277" width="0.1802%" height="15" fill="rgb(238,81,41)" fg:x="928" fg:w="2"/><text x="83.8536%" y="287.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (2 samples, 0.18%)</title><rect x="83.6036%" y="261" width="0.1802%" height="15" fill="rgb(210,199,37)" fg:x="928" fg:w="2"/><text x="83.8536%" y="271.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (1 samples, 0.09%)</title><rect x="83.6937%" y="245" width="0.0901%" height="15" fill="rgb(244,192,49)" fg:x="929" fg:w="1"/><text x="83.9437%" y="255.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.09%)</title><rect x="83.6937%" y="229" width="0.0901%" height="15" fill="rgb(226,211,11)" fg:x="929" fg:w="1"/><text x="83.9437%" y="239.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.09%)</title><rect x="83.6937%" y="213" width="0.0901%" height="15" fill="rgb(236,162,54)" fg:x="929" fg:w="1"/><text x="83.9437%" y="223.50"></text></g><g><title>brotli::enc::encode::hasher_setup (1 samples, 0.09%)</title><rect x="83.6937%" y="197" width="0.0901%" height="15" fill="rgb(220,229,9)" fg:x="929" fg:w="1"/><text x="83.9437%" y="207.50"></text></g><g><title>calloc (1 samples, 0.09%)</title><rect x="83.6937%" y="181" width="0.0901%" height="15" fill="rgb(250,87,22)" fg:x="929" fg:w="1"/><text x="83.9437%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.36%)</title><rect x="83.9640%" y="261" width="0.3604%" height="15" fill="rgb(239,43,17)" fg:x="932" fg:w="4"/><text x="84.2140%" y="271.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.18%)</title><rect x="84.1441%" y="245" width="0.1802%" height="15" fill="rgb(231,177,25)" fg:x="934" fg:w="2"/><text x="84.3941%" y="255.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.09%)</title><rect x="84.2342%" y="229" width="0.0901%" height="15" fill="rgb(219,179,1)" fg:x="935" fg:w="1"/><text x="84.4842%" y="239.50"></text></g><g><title>parquet::column::writer::compare_greater (1 samples, 0.09%)</title><rect x="84.5045%" y="229" width="0.0901%" height="15" fill="rgb(238,219,53)" fg:x="938" fg:w="1"/><text x="84.7545%" y="239.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 0.36%)</title><rect x="84.3243%" y="261" width="0.3604%" height="15" fill="rgb(232,167,36)" fg:x="936" fg:w="4"/><text x="84.5743%" y="271.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (4 samples, 0.36%)</title><rect x="84.3243%" y="245" width="0.3604%" height="15" fill="rgb(244,19,51)" fg:x="936" fg:w="4"/><text x="84.5743%" y="255.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (1 samples, 0.09%)</title><rect x="84.5946%" y="229" width="0.0901%" height="15" fill="rgb(224,6,22)" fg:x="939" fg:w="1"/><text x="84.8446%" y="239.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.09%)</title><rect x="84.6847%" y="245" width="0.0901%" height="15" fill="rgb(224,145,5)" fg:x="940" fg:w="1"/><text x="84.9347%" y="255.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.18%)</title><rect x="84.7748%" y="245" width="0.1802%" height="15" fill="rgb(234,130,49)" fg:x="941" fg:w="2"/><text x="85.0248%" y="255.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.18%)</title><rect x="84.7748%" y="229" width="0.1802%" height="15" fill="rgb(254,6,2)" fg:x="941" fg:w="2"/><text x="85.0248%" y="239.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (2 samples, 0.18%)</title><rect x="84.7748%" y="213" width="0.1802%" height="15" fill="rgb(208,96,46)" fg:x="941" fg:w="2"/><text x="85.0248%" y="223.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.18%)</title><rect x="84.7748%" y="197" width="0.1802%" height="15" fill="rgb(239,3,39)" fg:x="941" fg:w="2"/><text x="85.0248%" y="207.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 0.45%)</title><rect x="84.9550%" y="213" width="0.4505%" height="15" fill="rgb(233,210,1)" fg:x="943" fg:w="5"/><text x="85.2050%" y="223.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (4 samples, 0.36%)</title><rect x="85.0450%" y="197" width="0.3604%" height="15" fill="rgb(244,137,37)" fg:x="944" fg:w="4"/><text x="85.2950%" y="207.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.09%)</title><rect x="85.3153%" y="181" width="0.0901%" height="15" fill="rgb(240,136,2)" fg:x="947" fg:w="1"/><text x="85.5653%" y="191.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.09%)</title><rect x="85.4054%" y="213" width="0.0901%" height="15" fill="rgb(239,18,37)" fg:x="948" fg:w="1"/><text x="85.6554%" y="223.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (1 samples, 0.09%)</title><rect x="85.4054%" y="197" width="0.0901%" height="15" fill="rgb(218,185,22)" fg:x="948" fg:w="1"/><text x="85.6554%" y="207.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (1 samples, 0.09%)</title><rect x="85.4054%" y="181" width="0.0901%" height="15" fill="rgb(225,218,4)" fg:x="948" fg:w="1"/><text x="85.6554%" y="191.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.09%)</title><rect x="85.4054%" y="165" width="0.0901%" height="15" fill="rgb(230,182,32)" fg:x="948" fg:w="1"/><text x="85.6554%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (10 samples, 0.90%)</title><rect x="84.6847%" y="261" width="0.9009%" height="15" fill="rgb(242,56,43)" fg:x="940" fg:w="10"/><text x="84.9347%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (7 samples, 0.63%)</title><rect x="84.9550%" y="245" width="0.6306%" height="15" fill="rgb(233,99,24)" fg:x="943" fg:w="7"/><text x="85.2050%" y="255.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 0.63%)</title><rect x="84.9550%" y="229" width="0.6306%" height="15" fill="rgb(234,209,42)" fg:x="943" fg:w="7"/><text x="85.2050%" y="239.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.09%)</title><rect x="85.4955%" y="213" width="0.0901%" height="15" fill="rgb(227,7,12)" fg:x="949" fg:w="1"/><text x="85.7455%" y="223.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvProcessor::flush_current_batch (52 samples, 4.68%)</title><rect x="81.1712%" y="341" width="4.6847%" height="15" fill="rgb(245,203,43)" fg:x="901" fg:w="52"/><text x="81.4212%" y="351.50">nemsc..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (25 samples, 2.25%)</title><rect x="83.6036%" y="325" width="2.2523%" height="15" fill="rgb(238,205,33)" fg:x="928" fg:w="25"/><text x="83.8536%" y="335.50">p..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (25 samples, 2.25%)</title><rect x="83.6036%" y="309" width="2.2523%" height="15" fill="rgb(231,56,7)" fg:x="928" fg:w="25"/><text x="83.8536%" y="319.50">p..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (25 samples, 2.25%)</title><rect x="83.6036%" y="293" width="2.2523%" height="15" fill="rgb(244,186,29)" fg:x="928" fg:w="25"/><text x="83.8536%" y="303.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (23 samples, 2.07%)</title><rect x="83.7838%" y="277" width="2.0721%" height="15" fill="rgb(234,111,31)" fg:x="930" fg:w="23"/><text x="84.0338%" y="287.50">p..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (3 samples, 0.27%)</title><rect x="85.5856%" y="261" width="0.2703%" height="15" fill="rgb(241,149,10)" fg:x="950" fg:w="3"/><text x="85.8356%" y="271.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (3 samples, 0.27%)</title><rect x="85.5856%" y="245" width="0.2703%" height="15" fill="rgb(249,206,44)" fg:x="950" fg:w="3"/><text x="85.8356%" y="255.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (3 samples, 0.27%)</title><rect x="85.5856%" y="229" width="0.2703%" height="15" fill="rgb(251,153,30)" fg:x="950" fg:w="3"/><text x="85.8356%" y="239.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (3 samples, 0.27%)</title><rect x="85.5856%" y="213" width="0.2703%" height="15" fill="rgb(239,152,38)" fg:x="950" fg:w="3"/><text x="85.8356%" y="223.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (65 samples, 5.86%)</title><rect x="80.1802%" y="373" width="5.8559%" height="15" fill="rgb(249,139,47)" fg:x="890" fg:w="65"/><text x="80.4302%" y="383.50">nemscra..</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (65 samples, 5.86%)</title><rect x="80.1802%" y="357" width="5.8559%" height="15" fill="rgb(244,64,35)" fg:x="890" fg:w="65"/><text x="80.4302%" y="367.50">nemscra..</text></g><g><title>std::io::append_to_string (2 samples, 0.18%)</title><rect x="85.8559%" y="341" width="0.1802%" height="15" fill="rgb(216,46,15)" fg:x="953" fg:w="2"/><text x="86.1059%" y="351.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.09%)</title><rect x="85.9459%" y="325" width="0.0901%" height="15" fill="rgb(250,74,19)" fg:x="954" fg:w="1"/><text x="86.1959%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (1 samples, 0.09%)</title><rect x="86.5766%" y="309" width="0.0901%" height="15" fill="rgb(249,42,33)" fg:x="961" fg:w="1"/><text x="86.8266%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (10 samples, 0.90%)</title><rect x="86.5766%" y="341" width="0.9009%" height="15" fill="rgb(242,149,17)" fg:x="961" fg:w="10"/><text x="86.8266%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (10 samples, 0.90%)</title><rect x="86.5766%" y="325" width="0.9009%" height="15" fill="rgb(244,29,21)" fg:x="961" fg:w="10"/><text x="86.8266%" y="335.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (9 samples, 0.81%)</title><rect x="86.6667%" y="309" width="0.8108%" height="15" fill="rgb(220,130,37)" fg:x="962" fg:w="9"/><text x="86.9167%" y="319.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (75 samples, 6.76%)</title><rect x="87.7477%" y="277" width="6.7568%" height="15" fill="rgb(211,67,2)" fg:x="974" fg:w="75"/><text x="87.9977%" y="287.50">zlib_rs::..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (3 samples, 0.27%)</title><rect x="94.5045%" y="277" width="0.2703%" height="15" fill="rgb(235,68,52)" fg:x="1049" fg:w="3"/><text x="94.7545%" y="287.50"></text></g><g><title>zlib_rs::inflate::window::Window::extend (2 samples, 0.18%)</title><rect x="94.7748%" y="277" width="0.1802%" height="15" fill="rgb(246,142,3)" fg:x="1052" fg:w="2"/><text x="95.0248%" y="287.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (94 samples, 8.47%)</title><rect x="86.5766%" y="357" width="8.4685%" height="15" fill="rgb(241,25,7)" fg:x="961" fg:w="94"/><text x="86.8266%" y="367.50">&lt;zip::read::..</text></g><g><title>flate2::zio::read (84 samples, 7.57%)</title><rect x="87.4775%" y="341" width="7.5676%" height="15" fill="rgb(242,119,39)" fg:x="971" fg:w="84"/><text x="87.7275%" y="351.50">flate2::zi..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (84 samples, 7.57%)</title><rect x="87.4775%" y="325" width="7.5676%" height="15" fill="rgb(241,98,45)" fg:x="971" fg:w="84"/><text x="87.7275%" y="335.50">&lt;flate2::m..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (84 samples, 7.57%)</title><rect x="87.4775%" y="309" width="7.5676%" height="15" fill="rgb(254,28,30)" fg:x="971" fg:w="84"/><text x="87.7275%" y="319.50">&lt;flate2::f..</text></g><g><title>zlib_rs::inflate::inflate (83 samples, 7.48%)</title><rect x="87.5676%" y="293" width="7.4775%" height="15" fill="rgb(241,142,54)" fg:x="972" fg:w="83"/><text x="87.8176%" y="303.50">zlib_rs::i..</text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (1 samples, 0.09%)</title><rect x="94.9550%" y="277" width="0.0901%" height="15" fill="rgb(222,85,15)" fg:x="1054" fg:w="1"/><text x="95.2050%" y="287.50"></text></g><g><title>core::slice::memchr::memchr_aligned (9 samples, 0.81%)</title><rect x="95.0450%" y="357" width="0.8108%" height="15" fill="rgb(210,85,47)" fg:x="1055" fg:w="9"/><text x="95.2950%" y="367.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (1,073 samples, 96.67%)</title><rect x="0.0000%" y="405" width="96.6667%" height="15" fill="rgb(224,206,25)" fg:x="0" fg:w="1073"/><text x="0.2500%" y="415.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (1,055 samples, 95.05%)</title><rect x="1.6216%" y="389" width="95.0450%" height="15" fill="rgb(243,201,19)" fg:x="18" fg:w="1055"/><text x="1.8716%" y="399.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (118 samples, 10.63%)</title><rect x="86.0360%" y="373" width="10.6306%" height="15" fill="rgb(236,59,4)" fg:x="955" fg:w="118"/><text x="86.2860%" y="383.50">std::io::append_..</text></g><g><title>core::str::converts::from_utf8 (9 samples, 0.81%)</title><rect x="95.8559%" y="357" width="0.8108%" height="15" fill="rgb(254,179,45)" fg:x="1064" fg:w="9"/><text x="96.1059%" y="367.50"></text></g><g><title>bench_zip_to_pa (1,076 samples, 96.94%)</title><rect x="0.0000%" y="565" width="96.9369%" height="15" fill="rgb(226,14,10)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="575.50">bench_zip_to_pa</text></g><g><title>_start (1,076 samples, 96.94%)</title><rect x="0.0000%" y="549" width="96.9369%" height="15" fill="rgb(244,27,41)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="559.50">_start</text></g><g><title>__libc_start_main (1,076 samples, 96.94%)</title><rect x="0.0000%" y="533" width="96.9369%" height="15" fill="rgb(235,35,32)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="543.50">__libc_start_main</text></g><g><title>main (1,076 samples, 96.94%)</title><rect x="0.0000%" y="517" width="96.9369%" height="15" fill="rgb(218,68,31)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="527.50">main</text></g><g><title>std::rt::lang_start_internal (1,076 samples, 96.94%)</title><rect x="0.0000%" y="501" width="96.9369%" height="15" fill="rgb(207,120,37)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (1,076 samples, 96.94%)</title><rect x="0.0000%" y="485" width="96.9369%" height="15" fill="rgb(227,98,0)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="495.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (1,076 samples, 96.94%)</title><rect x="0.0000%" y="469" width="96.9369%" height="15" fill="rgb(207,7,3)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="479.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (1,076 samples, 96.94%)</title><rect x="0.0000%" y="453" width="96.9369%" height="15" fill="rgb(206,98,19)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="463.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (1,076 samples, 96.94%)</title><rect x="0.0000%" y="437" width="96.9369%" height="15" fill="rgb(217,5,26)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="447.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (1,076 samples, 96.94%)</title><rect x="0.0000%" y="421" width="96.9369%" height="15" fill="rgb(235,190,38)" fg:x="0" fg:w="1076"/><text x="0.2500%" y="431.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.27%)</title><rect x="96.6667%" y="405" width="0.2703%" height="15" fill="rgb(247,86,24)" fg:x="1073" fg:w="3"/><text x="96.9167%" y="415.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.27%)</title><rect x="96.6667%" y="389" width="0.2703%" height="15" fill="rgb(205,101,16)" fg:x="1073" fg:w="3"/><text x="96.9167%" y="399.50"></text></g><g><title>syscall (3 samples, 0.27%)</title><rect x="96.6667%" y="373" width="0.2703%" height="15" fill="rgb(246,168,33)" fg:x="1073" fg:w="3"/><text x="96.9167%" y="383.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.27%)</title><rect x="97.1171%" y="341" width="0.2703%" height="15" fill="rgb(231,114,1)" fg:x="1078" fg:w="3"/><text x="97.3671%" y="351.50"></text></g><g><title>syscall (2 samples, 0.18%)</title><rect x="97.2072%" y="325" width="0.1802%" height="15" fill="rgb(207,184,53)" fg:x="1079" fg:w="2"/><text x="97.4572%" y="335.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (1 samples, 0.09%)</title><rect x="97.3874%" y="341" width="0.0901%" height="15" fill="rgb(224,95,51)" fg:x="1081" fg:w="1"/><text x="97.6374%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5 samples, 0.45%)</title><rect x="97.1171%" y="373" width="0.4505%" height="15" fill="rgb(212,188,45)" fg:x="1078" fg:w="5"/><text x="97.3671%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (5 samples, 0.45%)</title><rect x="97.1171%" y="357" width="0.4505%" height="15" fill="rgb(223,154,38)" fg:x="1078" fg:w="5"/><text x="97.3671%" y="367.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (1 samples, 0.09%)</title><rect x="97.4775%" y="341" width="0.0901%" height="15" fill="rgb(251,22,52)" fg:x="1082" fg:w="1"/><text x="97.7275%" y="351.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (1 samples, 0.09%)</title><rect x="97.4775%" y="325" width="0.0901%" height="15" fill="rgb(229,209,22)" fg:x="1082" fg:w="1"/><text x="97.7275%" y="335.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.09%)</title><rect x="97.4775%" y="309" width="0.0901%" height="15" fill="rgb(234,138,34)" fg:x="1082" fg:w="1"/><text x="97.7275%" y="319.50"></text></g><g><title>epoll_wait (1 samples, 0.09%)</title><rect x="97.4775%" y="293" width="0.0901%" height="15" fill="rgb(212,95,11)" fg:x="1082" fg:w="1"/><text x="97.7275%" y="303.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.63%)</title><rect x="97.6577%" y="357" width="0.6306%" height="15" fill="rgb(240,179,47)" fg:x="1084" fg:w="7"/><text x="97.9077%" y="367.50"></text></g><g><title>syscall (6 samples, 0.54%)</title><rect x="97.7477%" y="341" width="0.5405%" height="15" fill="rgb(240,163,11)" fg:x="1085" fg:w="6"/><text x="97.9977%" y="351.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (7 samples, 0.63%)</title><rect x="98.2883%" y="357" width="0.6306%" height="15" fill="rgb(236,37,12)" fg:x="1091" fg:w="7"/><text x="98.5383%" y="367.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (7 samples, 0.63%)</title><rect x="98.2883%" y="341" width="0.6306%" height="15" fill="rgb(232,164,16)" fg:x="1091" fg:w="7"/><text x="98.5383%" y="351.50"></text></g><g><title>&lt;&amp;std::process::ChildStdin as std::io::Write&gt;::write (7 samples, 0.63%)</title><rect x="98.2883%" y="325" width="0.6306%" height="15" fill="rgb(244,205,15)" fg:x="1091" fg:w="7"/><text x="98.5383%" y="335.50"></text></g><g><title>write (7 samples, 0.63%)</title><rect x="98.2883%" y="309" width="0.6306%" height="15" fill="rgb(223,117,47)" fg:x="1091" fg:w="7"/><text x="98.5383%" y="319.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (7 samples, 0.63%)</title><rect x="98.9189%" y="277" width="0.6306%" height="15" fill="rgb(244,107,35)" fg:x="1098" fg:w="7"/><text x="99.1689%" y="287.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (7 samples, 0.63%)</title><rect x="98.9189%" y="261" width="0.6306%" height="15" fill="rgb(205,140,8)" fg:x="1098" fg:w="7"/><text x="99.1689%" y="271.50"></text></g><g><title>tokio::runtime::park::wake (7 samples, 0.63%)</title><rect x="98.9189%" y="245" width="0.6306%" height="15" fill="rgb(228,84,46)" fg:x="1098" fg:w="7"/><text x="99.1689%" y="255.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (7 samples, 0.63%)</title><rect x="98.9189%" y="229" width="0.6306%" height="15" fill="rgb(254,188,9)" fg:x="1098" fg:w="7"/><text x="99.1689%" y="239.50"></text></g><g><title>syscall (6 samples, 0.54%)</title><rect x="99.0090%" y="213" width="0.5405%" height="15" fill="rgb(206,112,54)" fg:x="1099" fg:w="6"/><text x="99.2590%" y="223.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (1 samples, 0.09%)</title><rect x="99.5495%" y="181" width="0.0901%" height="15" fill="rgb(216,84,49)" fg:x="1105" fg:w="1"/><text x="99.7995%" y="191.50"></text></g><g><title>all (1,110 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(214,194,35)" fg:x="0" fg:w="1110"/><text x="0.2500%" y="591.50"></text></g><g><title>tokio-runtime-w (34 samples, 3.06%)</title><rect x="96.9369%" y="565" width="3.0631%" height="15" fill="rgb(249,28,3)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="575.50">tok..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (34 samples, 3.06%)</title><rect x="96.9369%" y="549" width="3.0631%" height="15" fill="rgb(222,56,52)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="559.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (34 samples, 3.06%)</title><rect x="96.9369%" y="533" width="3.0631%" height="15" fill="rgb(245,217,50)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="543.50">cor..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (34 samples, 3.06%)</title><rect x="96.9369%" y="517" width="3.0631%" height="15" fill="rgb(213,201,24)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="527.50">std..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (34 samples, 3.06%)</title><rect x="96.9369%" y="501" width="3.0631%" height="15" fill="rgb(248,116,28)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="511.50">tok..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (34 samples, 3.06%)</title><rect x="96.9369%" y="485" width="3.0631%" height="15" fill="rgb(219,72,43)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="495.50">tok..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (34 samples, 3.06%)</title><rect x="96.9369%" y="469" width="3.0631%" height="15" fill="rgb(209,138,14)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="479.50">tok..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 3.06%)</title><rect x="96.9369%" y="453" width="3.0631%" height="15" fill="rgb(222,18,33)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="463.50">&lt;to..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (34 samples, 3.06%)</title><rect x="96.9369%" y="437" width="3.0631%" height="15" fill="rgb(213,199,7)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="447.50">tok..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (34 samples, 3.06%)</title><rect x="96.9369%" y="421" width="3.0631%" height="15" fill="rgb(250,110,10)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="431.50">tok..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (34 samples, 3.06%)</title><rect x="96.9369%" y="405" width="3.0631%" height="15" fill="rgb(248,123,6)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="415.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (34 samples, 3.06%)</title><rect x="96.9369%" y="389" width="3.0631%" height="15" fill="rgb(206,91,31)" fg:x="1076" fg:w="34"/><text x="97.1869%" y="399.50">tok..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (27 samples, 2.43%)</title><rect x="97.5676%" y="373" width="2.4324%" height="15" fill="rgb(211,154,13)" fg:x="1083" fg:w="27"/><text x="97.8176%" y="383.50">to..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (12 samples, 1.08%)</title><rect x="98.9189%" y="357" width="1.0811%" height="15" fill="rgb(225,148,7)" fg:x="1098" fg:w="12"/><text x="99.1689%" y="367.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (12 samples, 1.08%)</title><rect x="98.9189%" y="341" width="1.0811%" height="15" fill="rgb(220,160,43)" fg:x="1098" fg:w="12"/><text x="99.1689%" y="351.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (12 samples, 1.08%)</title><rect x="98.9189%" y="325" width="1.0811%" height="15" fill="rgb(213,52,39)" fg:x="1098" fg:w="12"/><text x="99.1689%" y="335.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (12 samples, 1.08%)</title><rect x="98.9189%" y="309" width="1.0811%" height="15" fill="rgb(243,137,7)" fg:x="1098" fg:w="12"/><text x="99.1689%" y="319.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (12 samples, 1.08%)</title><rect x="98.9189%" y="293" width="1.0811%" height="15" fill="rgb(230,79,13)" fg:x="1098" fg:w="12"/><text x="99.1689%" y="303.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (5 samples, 0.45%)</title><rect x="99.5495%" y="277" width="0.4505%" height="15" fill="rgb(247,105,23)" fg:x="1105" fg:w="5"/><text x="99.7995%" y="287.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (5 samples, 0.45%)</title><rect x="99.5495%" y="261" width="0.4505%" height="15" fill="rgb(223,179,41)" fg:x="1105" fg:w="5"/><text x="99.7995%" y="271.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (5 samples, 0.45%)</title><rect x="99.5495%" y="245" width="0.4505%" height="15" fill="rgb(218,9,34)" fg:x="1105" fg:w="5"/><text x="99.7995%" y="255.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (5 samples, 0.45%)</title><rect x="99.5495%" y="229" width="0.4505%" height="15" fill="rgb(222,106,8)" fg:x="1105" fg:w="5"/><text x="99.7995%" y="239.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.45%)</title><rect x="99.5495%" y="213" width="0.4505%" height="15" fill="rgb(211,220,0)" fg:x="1105" fg:w="5"/><text x="99.7995%" y="223.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (5 samples, 0.45%)</title><rect x="99.5495%" y="197" width="0.4505%" height="15" fill="rgb(229,52,16)" fg:x="1105" fg:w="5"/><text x="99.7995%" y="207.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (4 samples, 0.36%)</title><rect x="99.6396%" y="181" width="0.3604%" height="15" fill="rgb(212,155,18)" fg:x="1106" fg:w="4"/><text x="99.8896%" y="191.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (4 samples, 0.36%)</title><rect x="99.6396%" y="165" width="0.3604%" height="15" fill="rgb(242,21,14)" fg:x="1106" fg:w="4"/><text x="99.8896%" y="175.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (4 samples, 0.36%)</title><rect x="99.6396%" y="149" width="0.3604%" height="15" fill="rgb(222,19,48)" fg:x="1106" fg:w="4"/><text x="99.8896%" y="159.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (2 samples, 0.18%)</title><rect x="99.8198%" y="133" width="0.1802%" height="15" fill="rgb(232,45,27)" fg:x="1108" fg:w="2"/><text x="100.0698%" y="143.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (2 samples, 0.18%)</title><rect x="99.8198%" y="117" width="0.1802%" height="15" fill="rgb(249,103,42)" fg:x="1108" fg:w="2"/><text x="100.0698%" y="127.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (2 samples, 0.18%)</title><rect x="99.8198%" y="101" width="0.1802%" height="15" fill="rgb(246,81,33)" fg:x="1108" fg:w="2"/><text x="100.0698%" y="111.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (2 samples, 0.18%)</title><rect x="99.8198%" y="85" width="0.1802%" height="15" fill="rgb(252,33,42)" fg:x="1108" fg:w="2"/><text x="100.0698%" y="95.50"></text></g><g><title>ring::aead::aes_gcm::open (2 samples, 0.18%)</title><rect x="99.8198%" y="69" width="0.1802%" height="15" fill="rgb(209,212,41)" fg:x="1108" fg:w="2"/><text x="100.0698%" y="79.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (2 samples, 0.18%)</title><rect x="99.8198%" y="53" width="0.1802%" height="15" fill="rgb(207,154,6)" fg:x="1108" fg:w="2"/><text x="100.0698%" y="63.50"></text></g><g><title>ring_core_0_17_14__aes_gcm_dec_update_vaes_avx2 (2 samples, 0.18%)</title><rect x="99.8198%" y="37" width="0.1802%" height="15" fill="rgb(223,64,47)" fg:x="1108" fg:w="2"/><text x="100.0698%" y="47.50"></text></g></svg></svg>