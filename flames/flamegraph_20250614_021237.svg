<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="394"><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.25%)</title><rect x="0.0000%" y="309" width="0.2538%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1 samples, 0.25%)</title><rect x="0.0000%" y="293" width="0.2538%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1 samples, 0.25%)</title><rect x="0.0000%" y="277" width="0.2538%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1 samples, 0.25%)</title><rect x="0.0000%" y="261" width="0.2538%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>hyper::body::body::Body::poll_inner (1 samples, 0.25%)</title><rect x="0.0000%" y="245" width="0.2538%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1 samples, 0.25%)</title><rect x="0.0000%" y="229" width="0.2538%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1 samples, 0.25%)</title><rect x="0.0000%" y="213" width="0.2538%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.25%)</title><rect x="0.0000%" y="197" width="0.2538%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1 samples, 0.25%)</title><rect x="0.0000%" y="181" width="0.2538%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>tokio::runtime::context::with_scheduler (1 samples, 0.25%)</title><rect x="0.0000%" y="165" width="0.2538%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (1 samples, 0.25%)</title><rect x="0.0000%" y="149" width="0.2538%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>syscall (1 samples, 0.25%)</title><rect x="0.0000%" y="133" width="0.2538%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.25%)</title><rect x="0.2538%" y="309" width="0.2538%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.5038%" y="319.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.25%)</title><rect x="0.2538%" y="293" width="0.2538%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.5038%" y="303.50"></text></g><g><title>&lt;tracing_subscriber::registry::sharded::Registry as tracing_core::subscriber::Subscriber&gt;::enter (1 samples, 0.25%)</title><rect x="0.2538%" y="277" width="0.2538%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.5038%" y="287.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.25%)</title><rect x="0.5076%" y="293" width="0.2538%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="1"/><text x="0.7576%" y="303.50"></text></g><g><title>alloc::fmt::format::format_inner (7 samples, 1.78%)</title><rect x="2.5381%" y="245" width="1.7766%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="7"/><text x="2.7881%" y="255.50">a..</text></g><g><title>core::fmt::write (6 samples, 1.52%)</title><rect x="2.7919%" y="229" width="1.5228%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="6"/><text x="3.0419%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 1.27%)</title><rect x="3.0457%" y="213" width="1.2690%" height="15" fill="rgb(221,200,47)" fg:x="12" fg:w="5"/><text x="3.2957%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (3 samples, 0.76%)</title><rect x="3.5533%" y="197" width="0.7614%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="3"/><text x="3.8033%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.51%)</title><rect x="3.8071%" y="181" width="0.5076%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="2"/><text x="4.0571%" y="191.50"></text></g><g><title>__libc_realloc (2 samples, 0.51%)</title><rect x="3.8071%" y="165" width="0.5076%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="2"/><text x="4.0571%" y="175.50"></text></g><g><title>cfree (7 samples, 1.78%)</title><rect x="4.3147%" y="245" width="1.7766%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="7"/><text x="4.5647%" y="255.50">c..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next_inclusive (1 samples, 0.25%)</title><rect x="6.0914%" y="245" width="0.2538%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="1"/><text x="6.3414%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.25%)</title><rect x="6.8528%" y="229" width="0.2538%" height="15" fill="rgb(241,131,45)" fg:x="27" fg:w="1"/><text x="7.1028%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="6.8528%" y="213" width="0.2538%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="1"/><text x="7.1028%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.25%)</title><rect x="6.8528%" y="197" width="0.2538%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="1"/><text x="7.1028%" y="207.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvStringProcessor::feed (9 samples, 2.28%)</title><rect x="6.3452%" y="245" width="2.2843%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="9"/><text x="6.5952%" y="255.50">n..</text></g><g><title>malloc (6 samples, 1.52%)</title><rect x="7.1066%" y="229" width="1.5228%" height="15" fill="rgb(214,148,48)" fg:x="28" fg:w="6"/><text x="7.3566%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.25%)</title><rect x="8.6294%" y="213" width="0.2538%" height="15" fill="rgb(232,36,49)" fg:x="34" fg:w="1"/><text x="8.8794%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="8.6294%" y="197" width="0.2538%" height="15" fill="rgb(209,103,24)" fg:x="34" fg:w="1"/><text x="8.8794%" y="207.50"></text></g><g><title>__libc_realloc (1 samples, 0.25%)</title><rect x="8.6294%" y="181" width="0.2538%" height="15" fill="rgb(229,88,8)" fg:x="34" fg:w="1"/><text x="8.8794%" y="191.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (2 samples, 0.51%)</title><rect x="8.8832%" y="213" width="0.5076%" height="15" fill="rgb(213,181,19)" fg:x="35" fg:w="2"/><text x="9.1332%" y="223.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (2 samples, 0.51%)</title><rect x="8.8832%" y="197" width="0.5076%" height="15" fill="rgb(254,191,54)" fg:x="35" fg:w="2"/><text x="9.1332%" y="207.50"></text></g><g><title>csv_core::reader::Reader::read_record (2 samples, 0.51%)</title><rect x="8.8832%" y="181" width="0.5076%" height="15" fill="rgb(241,83,37)" fg:x="35" fg:w="2"/><text x="9.1332%" y="191.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (1 samples, 0.25%)</title><rect x="9.3909%" y="213" width="0.2538%" height="15" fill="rgb(233,36,39)" fg:x="37" fg:w="1"/><text x="9.6409%" y="223.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.25%)</title><rect x="9.3909%" y="197" width="0.2538%" height="15" fill="rgb(226,3,54)" fg:x="37" fg:w="1"/><text x="9.6409%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.25%)</title><rect x="9.3909%" y="181" width="0.2538%" height="15" fill="rgb(245,192,40)" fg:x="37" fg:w="1"/><text x="9.6409%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.25%)</title><rect x="9.3909%" y="165" width="0.2538%" height="15" fill="rgb(238,167,29)" fg:x="37" fg:w="1"/><text x="9.6409%" y="175.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (1 samples, 0.25%)</title><rect x="9.3909%" y="149" width="0.2538%" height="15" fill="rgb(232,182,51)" fg:x="37" fg:w="1"/><text x="9.6409%" y="159.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (1 samples, 0.25%)</title><rect x="9.3909%" y="133" width="0.2538%" height="15" fill="rgb(231,60,39)" fg:x="37" fg:w="1"/><text x="9.6409%" y="143.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (1 samples, 0.25%)</title><rect x="9.3909%" y="117" width="0.2538%" height="15" fill="rgb(208,69,12)" fg:x="37" fg:w="1"/><text x="9.6409%" y="127.50"></text></g><g><title>__rustc::__rdl_realloc (1 samples, 0.25%)</title><rect x="9.3909%" y="101" width="0.2538%" height="15" fill="rgb(235,93,37)" fg:x="37" fg:w="1"/><text x="9.6409%" y="111.50"></text></g><g><title>posix_memalign (1 samples, 0.25%)</title><rect x="9.3909%" y="85" width="0.2538%" height="15" fill="rgb(213,116,39)" fg:x="37" fg:w="1"/><text x="9.6409%" y="95.50"></text></g><g><title>cfree (1 samples, 0.25%)</title><rect x="9.6447%" y="213" width="0.2538%" height="15" fill="rgb(222,207,29)" fg:x="38" fg:w="1"/><text x="9.8947%" y="223.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (4 samples, 1.02%)</title><rect x="9.8985%" y="149" width="1.0152%" height="15" fill="rgb(206,96,30)" fg:x="39" fg:w="4"/><text x="10.1485%" y="159.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (2 samples, 0.51%)</title><rect x="10.4061%" y="133" width="0.5076%" height="15" fill="rgb(218,138,4)" fg:x="41" fg:w="2"/><text x="10.6561%" y="143.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.25%)</title><rect x="10.9137%" y="133" width="0.2538%" height="15" fill="rgb(250,191,14)" fg:x="43" fg:w="1"/><text x="11.1637%" y="143.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvStringProcessor::flush (11 samples, 2.79%)</title><rect x="8.6294%" y="229" width="2.7919%" height="15" fill="rgb(239,60,40)" fg:x="34" fg:w="11"/><text x="8.8794%" y="239.50">ne..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (6 samples, 1.52%)</title><rect x="9.8985%" y="213" width="1.5228%" height="15" fill="rgb(206,27,48)" fg:x="39" fg:w="6"/><text x="10.1485%" y="223.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (6 samples, 1.52%)</title><rect x="9.8985%" y="197" width="1.5228%" height="15" fill="rgb(225,35,8)" fg:x="39" fg:w="6"/><text x="10.1485%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (6 samples, 1.52%)</title><rect x="9.8985%" y="181" width="1.5228%" height="15" fill="rgb(250,213,24)" fg:x="39" fg:w="6"/><text x="10.1485%" y="191.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (6 samples, 1.52%)</title><rect x="9.8985%" y="165" width="1.5228%" height="15" fill="rgb(247,123,22)" fg:x="39" fg:w="6"/><text x="10.1485%" y="175.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.51%)</title><rect x="10.9137%" y="149" width="0.5076%" height="15" fill="rgb(231,138,38)" fg:x="43" fg:w="2"/><text x="11.1637%" y="159.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.25%)</title><rect x="11.1675%" y="133" width="0.2538%" height="15" fill="rgb(231,145,46)" fg:x="44" fg:w="1"/><text x="11.4175%" y="143.50"></text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (1 samples, 0.25%)</title><rect x="11.1675%" y="117" width="0.2538%" height="15" fill="rgb(251,118,11)" fg:x="44" fg:w="1"/><text x="11.4175%" y="127.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (1 samples, 0.25%)</title><rect x="11.1675%" y="101" width="0.2538%" height="15" fill="rgb(217,147,25)" fg:x="44" fg:w="1"/><text x="11.4175%" y="111.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (1 samples, 0.25%)</title><rect x="11.1675%" y="85" width="0.2538%" height="15" fill="rgb(247,81,37)" fg:x="44" fg:w="1"/><text x="11.4175%" y="95.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimit (1 samples, 0.25%)</title><rect x="11.1675%" y="69" width="0.2538%" height="15" fill="rgb(209,12,38)" fg:x="44" fg:w="1"/><text x="11.4175%" y="79.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (18 samples, 4.57%)</title><rect x="11.9289%" y="85" width="4.5685%" height="15" fill="rgb(227,1,9)" fg:x="47" fg:w="18"/><text x="12.1789%" y="95.50">brotl..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (18 samples, 4.57%)</title><rect x="11.9289%" y="69" width="4.5685%" height="15" fill="rgb(248,47,43)" fg:x="47" fg:w="18"/><text x="12.1789%" y="79.50">&lt;brot..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (5 samples, 1.27%)</title><rect x="15.2284%" y="53" width="1.2690%" height="15" fill="rgb(221,10,30)" fg:x="60" fg:w="5"/><text x="15.4784%" y="63.50"></text></g><g><title>brotli::enc::encode::BrotliEncoderStateStruct&lt;Alloc&gt;::copy_input_to_ring_buffer (2 samples, 0.51%)</title><rect x="16.4975%" y="85" width="0.5076%" height="15" fill="rgb(210,229,1)" fg:x="65" fg:w="2"/><text x="16.7475%" y="95.50"></text></g><g><title>brotli::enc::encode::RingBufferInitBuffer (2 samples, 0.51%)</title><rect x="16.4975%" y="69" width="0.5076%" height="15" fill="rgb(222,148,37)" fg:x="65" fg:w="2"/><text x="16.7475%" y="79.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (5 samples, 1.27%)</title><rect x="17.0051%" y="69" width="1.2690%" height="15" fill="rgb(234,67,33)" fg:x="67" fg:w="5"/><text x="17.2551%" y="79.50"></text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (5 samples, 1.27%)</title><rect x="17.0051%" y="53" width="1.2690%" height="15" fill="rgb(247,98,35)" fg:x="67" fg:w="5"/><text x="17.2551%" y="63.50"></text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.25%)</title><rect x="18.0203%" y="37" width="0.2538%" height="15" fill="rgb(247,138,52)" fg:x="71" fg:w="1"/><text x="18.2703%" y="47.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (1 samples, 0.25%)</title><rect x="18.2741%" y="69" width="0.2538%" height="15" fill="rgb(213,79,30)" fg:x="72" fg:w="1"/><text x="18.5241%" y="79.50"></text></g><g><title>brotli::enc::brotli_bit_stream::StoreCommandExtra (1 samples, 0.25%)</title><rect x="18.2741%" y="53" width="0.2538%" height="15" fill="rgb(246,177,23)" fg:x="72" fg:w="1"/><text x="18.5241%" y="63.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (29 samples, 7.36%)</title><rect x="11.4213%" y="213" width="7.3604%" height="15" fill="rgb(230,62,27)" fg:x="45" fg:w="29"/><text x="11.6713%" y="223.50">parquet::a..</text></g><g><title>core::iter::adapters::try_process (29 samples, 7.36%)</title><rect x="11.4213%" y="197" width="7.3604%" height="15" fill="rgb(216,154,8)" fg:x="45" fg:w="29"/><text x="11.6713%" y="207.50">core::iter..</text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (29 samples, 7.36%)</title><rect x="11.4213%" y="181" width="7.3604%" height="15" fill="rgb(244,35,45)" fg:x="45" fg:w="29"/><text x="11.6713%" y="191.50">alloc::vec..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (29 samples, 7.36%)</title><rect x="11.4213%" y="165" width="7.3604%" height="15" fill="rgb(251,115,12)" fg:x="45" fg:w="29"/><text x="11.6713%" y="175.50">&lt;alloc::ve..</text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (29 samples, 7.36%)</title><rect x="11.4213%" y="149" width="7.3604%" height="15" fill="rgb(240,54,50)" fg:x="45" fg:w="29"/><text x="11.6713%" y="159.50">parquet::a..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::close (29 samples, 7.36%)</title><rect x="11.4213%" y="133" width="7.3604%" height="15" fill="rgb(233,84,52)" fg:x="45" fg:w="29"/><text x="11.6713%" y="143.50">parquet::c..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (29 samples, 7.36%)</title><rect x="11.4213%" y="117" width="7.3604%" height="15" fill="rgb(207,117,47)" fg:x="45" fg:w="29"/><text x="11.6713%" y="127.50">parquet::c..</text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (29 samples, 7.36%)</title><rect x="11.4213%" y="101" width="7.3604%" height="15" fill="rgb(249,43,39)" fg:x="45" fg:w="29"/><text x="11.6713%" y="111.50">&lt;parquet::..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (7 samples, 1.78%)</title><rect x="17.0051%" y="85" width="1.7766%" height="15" fill="rgb(209,38,44)" fg:x="67" fg:w="7"/><text x="17.2551%" y="95.50">b..</text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (1 samples, 0.25%)</title><rect x="18.5279%" y="69" width="0.2538%" height="15" fill="rgb(236,212,23)" fg:x="73" fg:w="1"/><text x="18.7779%" y="79.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (1 samples, 0.25%)</title><rect x="18.7817%" y="181" width="0.2538%" height="15" fill="rgb(242,79,21)" fg:x="74" fg:w="1"/><text x="19.0317%" y="191.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowColumnChunkReader as std::io::Read&gt;::read (1 samples, 0.25%)</title><rect x="18.7817%" y="165" width="0.2538%" height="15" fill="rgb(211,96,35)" fg:x="74" fg:w="1"/><text x="19.0317%" y="175.50"></text></g><g><title>nemscraper::process::chunk::StreamingCsvStringProcessor::finalize (42 samples, 10.66%)</title><rect x="8.6294%" y="245" width="10.6599%" height="15" fill="rgb(253,215,40)" fg:x="34" fg:w="42"/><text x="8.8794%" y="255.50">nemscraper::proc..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (31 samples, 7.87%)</title><rect x="11.4213%" y="229" width="7.8680%" height="15" fill="rgb(211,81,21)" fg:x="45" fg:w="31"/><text x="11.6713%" y="239.50">parquet::ar..</text></g><g><title>parquet::file::writer::SerializedRowGroupWriter&lt;W&gt;::append_column (2 samples, 0.51%)</title><rect x="18.7817%" y="213" width="0.5076%" height="15" fill="rgb(208,190,38)" fg:x="74" fg:w="2"/><text x="19.0317%" y="223.50"></text></g><g><title>std::io::copy::stack_buffer_copy (2 samples, 0.51%)</title><rect x="18.7817%" y="197" width="0.5076%" height="15" fill="rgb(235,213,38)" fg:x="74" fg:w="2"/><text x="19.0317%" y="207.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.25%)</title><rect x="19.0355%" y="181" width="0.2538%" height="15" fill="rgb(237,122,38)" fg:x="75" fg:w="1"/><text x="19.2855%" y="191.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.25%)</title><rect x="19.0355%" y="165" width="0.2538%" height="15" fill="rgb(244,218,35)" fg:x="75" fg:w="1"/><text x="19.2855%" y="175.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (1 samples, 0.25%)</title><rect x="19.0355%" y="149" width="0.2538%" height="15" fill="rgb(240,68,47)" fg:x="75" fg:w="1"/><text x="19.2855%" y="159.50"></text></g><g><title>write (1 samples, 0.25%)</title><rect x="19.0355%" y="133" width="0.2538%" height="15" fill="rgb(210,16,53)" fg:x="75" fg:w="1"/><text x="19.2855%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.25%)</title><rect x="20.0508%" y="229" width="0.2538%" height="15" fill="rgb(235,124,12)" fg:x="79" fg:w="1"/><text x="20.3008%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="20.0508%" y="213" width="0.2538%" height="15" fill="rgb(224,169,11)" fg:x="79" fg:w="1"/><text x="20.3008%" y="223.50"></text></g><g><title>__libc_realloc (1 samples, 0.25%)</title><rect x="20.0508%" y="197" width="0.2538%" height="15" fill="rgb(250,166,2)" fg:x="79" fg:w="1"/><text x="20.3008%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (19 samples, 4.82%)</title><rect x="24.3655%" y="197" width="4.8223%" height="15" fill="rgb(242,216,29)" fg:x="96" fg:w="19"/><text x="24.6155%" y="207.50">alloc:..</text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 4.82%)</title><rect x="24.3655%" y="181" width="4.8223%" height="15" fill="rgb(230,116,27)" fg:x="96" fg:w="19"/><text x="24.6155%" y="191.50">alloc:..</text></g><g><title>__libc_realloc (19 samples, 4.82%)</title><rect x="24.3655%" y="165" width="4.8223%" height="15" fill="rgb(228,99,48)" fg:x="96" fg:w="19"/><text x="24.6155%" y="175.50">__libc..</text></g><g><title>arrow_csv::reader::Decoder::decode (63 samples, 15.99%)</title><rect x="20.3046%" y="229" width="15.9898%" height="15" fill="rgb(253,11,6)" fg:x="80" fg:w="63"/><text x="20.5546%" y="239.50">arrow_csv::reader::Decode..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (63 samples, 15.99%)</title><rect x="20.3046%" y="213" width="15.9898%" height="15" fill="rgb(247,143,39)" fg:x="80" fg:w="63"/><text x="20.5546%" y="223.50">arrow_csv::reader::record..</text></g><g><title>csv_core::reader::Reader::read_record (28 samples, 7.11%)</title><rect x="29.1878%" y="197" width="7.1066%" height="15" fill="rgb(236,97,10)" fg:x="115" fg:w="28"/><text x="29.4378%" y="207.50">csv_core::..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (3 samples, 0.76%)</title><rect x="36.2944%" y="213" width="0.7614%" height="15" fill="rgb(233,208,19)" fg:x="143" fg:w="3"/><text x="36.5444%" y="223.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.25%)</title><rect x="36.8020%" y="197" width="0.2538%" height="15" fill="rgb(216,164,2)" fg:x="145" fg:w="1"/><text x="37.0520%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (68 samples, 17.26%)</title><rect x="37.0558%" y="181" width="17.2589%" height="15" fill="rgb(220,129,5)" fg:x="146" fg:w="68"/><text x="37.3058%" y="191.50">&lt;core::iter::adapters::map:..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (68 samples, 17.26%)</title><rect x="37.0558%" y="165" width="17.2589%" height="15" fill="rgb(242,17,10)" fg:x="146" fg:w="68"/><text x="37.3058%" y="175.50">&lt;arrow_array::array::byte_a..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (43 samples, 10.91%)</title><rect x="43.4010%" y="149" width="10.9137%" height="15" fill="rgb(242,107,0)" fg:x="171" fg:w="43"/><text x="43.6510%" y="159.50">arrow_array::bui..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (3 samples, 0.76%)</title><rect x="53.5533%" y="133" width="0.7614%" height="15" fill="rgb(251,28,31)" fg:x="211" fg:w="3"/><text x="53.8033%" y="143.50"></text></g><g><title>__rustc::__rdl_realloc (3 samples, 0.76%)</title><rect x="53.5533%" y="117" width="0.7614%" height="15" fill="rgb(233,223,10)" fg:x="211" fg:w="3"/><text x="53.8033%" y="127.50"></text></g><g><title>posix_memalign (1 samples, 0.25%)</title><rect x="54.0609%" y="101" width="0.2538%" height="15" fill="rgb(215,21,27)" fg:x="213" fg:w="1"/><text x="54.3109%" y="111.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (72 samples, 18.27%)</title><rect x="36.2944%" y="229" width="18.2741%" height="15" fill="rgb(232,23,21)" fg:x="143" fg:w="72"/><text x="36.5444%" y="239.50">arrow_csv::reader::Decoder::..</text></g><g><title>core::iter::adapters::try_process (69 samples, 17.51%)</title><rect x="37.0558%" y="213" width="17.5127%" height="15" fill="rgb(244,5,23)" fg:x="146" fg:w="69"/><text x="37.3058%" y="223.50">core::iter::adapters::try_p..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (69 samples, 17.51%)</title><rect x="37.0558%" y="197" width="17.5127%" height="15" fill="rgb(226,81,46)" fg:x="146" fg:w="69"/><text x="37.3058%" y="207.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (1 samples, 0.25%)</title><rect x="54.3147%" y="181" width="0.2538%" height="15" fill="rgb(247,70,30)" fg:x="214" fg:w="1"/><text x="54.5647%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.25%)</title><rect x="54.3147%" y="165" width="0.2538%" height="15" fill="rgb(212,68,19)" fg:x="214" fg:w="1"/><text x="54.5647%" y="175.50"></text></g><g><title>cfree (8 samples, 2.03%)</title><rect x="54.5685%" y="229" width="2.0305%" height="15" fill="rgb(240,187,13)" fg:x="215" fg:w="8"/><text x="54.8185%" y="239.50">c..</text></g><g><title>ahash::random_state::RandomState::hash_one (7 samples, 1.78%)</title><rect x="80.7107%" y="133" width="1.7766%" height="15" fill="rgb(223,113,26)" fg:x="318" fg:w="7"/><text x="80.9607%" y="143.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.25%)</title><rect x="82.4873%" y="133" width="0.2538%" height="15" fill="rgb(206,192,2)" fg:x="325" fg:w="1"/><text x="82.7373%" y="143.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (92 samples, 23.35%)</title><rect x="59.8985%" y="165" width="23.3503%" height="15" fill="rgb(241,108,4)" fg:x="236" fg:w="92"/><text x="60.1485%" y="175.50">&lt;parquet::arrow::arrow_writer::byte_a..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (57 samples, 14.47%)</title><rect x="68.7817%" y="149" width="14.4670%" height="15" fill="rgb(247,173,49)" fg:x="271" fg:w="57"/><text x="69.0317%" y="159.50">parquet::util::interne..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.51%)</title><rect x="82.7411%" y="133" width="0.5076%" height="15" fill="rgb(224,114,35)" fg:x="326" fg:w="2"/><text x="82.9911%" y="143.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.25%)</title><rect x="82.9949%" y="117" width="0.2538%" height="15" fill="rgb(245,159,27)" fg:x="327" fg:w="1"/><text x="83.2449%" y="127.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (9 samples, 2.28%)</title><rect x="83.2487%" y="149" width="2.2843%" height="15" fill="rgb(245,172,44)" fg:x="328" fg:w="9"/><text x="83.4987%" y="159.50">&lt;..</text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.25%)</title><rect x="85.2792%" y="133" width="0.2538%" height="15" fill="rgb(236,23,11)" fg:x="336" fg:w="1"/><text x="85.5292%" y="143.50"></text></g><g><title>brotli::enc::backward_references::BrotliCreateBackwardReferences (11 samples, 2.79%)</title><rect x="85.7868%" y="117" width="2.7919%" height="15" fill="rgb(205,117,38)" fg:x="338" fg:w="11"/><text x="86.0368%" y="127.50">br..</text></g><g><title>&lt;brotli::enc::backward_references::AdvHasher&lt;Specialization,Alloc&gt; as brotli::enc::backward_references::AnyHasher&gt;::FindLongestMatch (9 samples, 2.28%)</title><rect x="86.2944%" y="101" width="2.2843%" height="15" fill="rgb(237,72,25)" fg:x="340" fg:w="9"/><text x="86.5444%" y="111.50">&lt;..</text></g><g><title>brotli::enc::static_dict::FindMatchLengthWithLimitMin4 (1 samples, 0.25%)</title><rect x="88.3249%" y="85" width="0.2538%" height="15" fill="rgb(244,70,9)" fg:x="348" fg:w="1"/><text x="88.5749%" y="95.50"></text></g><g><title>__rustc::__rdl_alloc_zeroed (1 samples, 0.25%)</title><rect x="89.0863%" y="85" width="0.2538%" height="15" fill="rgb(217,125,39)" fg:x="351" fg:w="1"/><text x="89.3363%" y="95.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BrotliStoreHuffmanTree (1 samples, 0.25%)</title><rect x="89.3401%" y="69" width="0.2538%" height="15" fill="rgb(235,36,10)" fg:x="352" fg:w="1"/><text x="89.5901%" y="79.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (1 samples, 0.25%)</title><rect x="89.3401%" y="53" width="0.2538%" height="15" fill="rgb(251,123,47)" fg:x="352" fg:w="1"/><text x="89.5901%" y="63.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliConvertBitDepthsToSymbols (1 samples, 0.25%)</title><rect x="89.5939%" y="69" width="0.2538%" height="15" fill="rgb(221,13,13)" fg:x="353" fg:w="1"/><text x="89.8439%" y="79.50"></text></g><g><title>brotli::enc::brotli_bit_stream::store_meta_block (8 samples, 2.03%)</title><rect x="88.5787%" y="117" width="2.0305%" height="15" fill="rgb(238,131,9)" fg:x="349" fg:w="8"/><text x="88.8287%" y="127.50">b..</text></g><g><title>brotli::enc::brotli_bit_stream::BlockEncoder&lt;Alloc&gt;::build_and_store_entropy_codes (6 samples, 1.52%)</title><rect x="89.0863%" y="101" width="1.5228%" height="15" fill="rgb(211,50,8)" fg:x="351" fg:w="6"/><text x="89.3363%" y="111.50"></text></g><g><title>brotli::enc::brotli_bit_stream::BuildAndStoreHuffmanTree (5 samples, 1.27%)</title><rect x="89.3401%" y="85" width="1.2690%" height="15" fill="rgb(245,182,24)" fg:x="352" fg:w="5"/><text x="89.5901%" y="95.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliCreateHuffmanTree (3 samples, 0.76%)</title><rect x="89.8477%" y="69" width="0.7614%" height="15" fill="rgb(242,14,37)" fg:x="354" fg:w="3"/><text x="90.0977%" y="79.50"></text></g><g><title>brotli::enc::encode::hasher_setup (9 samples, 2.28%)</title><rect x="90.6091%" y="117" width="2.2843%" height="15" fill="rgb(246,228,12)" fg:x="357" fg:w="9"/><text x="90.8591%" y="127.50">b..</text></g><g><title>calloc (1 samples, 0.25%)</title><rect x="92.6396%" y="101" width="0.2538%" height="15" fill="rgb(213,55,15)" fg:x="365" fg:w="1"/><text x="92.8896%" y="111.50"></text></g><g><title>brotli::enc::metablock::BrotliBuildMetaBlockGreedyInternal (2 samples, 0.51%)</title><rect x="92.8934%" y="117" width="0.5076%" height="15" fill="rgb(209,9,3)" fg:x="366" fg:w="2"/><text x="93.1434%" y="127.50"></text></g><g><title>brotli::enc::metablock::BlockSplitterFinishBlock (1 samples, 0.25%)</title><rect x="93.1472%" y="101" width="0.2538%" height="15" fill="rgb(230,59,30)" fg:x="367" fg:w="1"/><text x="93.3972%" y="111.50"></text></g><g><title>&lt;parquet::compression::brotli_codec::BrotliCodec as parquet::compression::Codec&gt;::compress (33 samples, 8.38%)</title><rect x="85.5330%" y="149" width="8.3756%" height="15" fill="rgb(209,121,21)" fg:x="337" fg:w="33"/><text x="85.7830%" y="159.50">&lt;parquet::co..</text></g><g><title>brotli::enc::writer::CompressorWriterCustomIo&lt;ErrType,W,BufferType,Alloc&gt;::flush_or_close (32 samples, 8.12%)</title><rect x="85.7868%" y="133" width="8.1218%" height="15" fill="rgb(220,109,13)" fg:x="338" fg:w="32"/><text x="86.0368%" y="143.50">brotli::enc..</text></g><g><title>brotli::enc::metablock::BrotliOptimizeHistograms (2 samples, 0.51%)</title><rect x="93.4010%" y="117" width="0.5076%" height="15" fill="rgb(232,18,1)" fg:x="368" fg:w="2"/><text x="93.6510%" y="127.50"></text></g><g><title>brotli::enc::entropy_encode::BrotliOptimizeHuffmanCountsForRle (2 samples, 0.51%)</title><rect x="93.4010%" y="101" width="0.5076%" height="15" fill="rgb(215,41,42)" fg:x="368" fg:w="2"/><text x="93.6510%" y="111.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (148 samples, 37.56%)</title><rect x="56.5990%" y="197" width="37.5635%" height="15" fill="rgb(224,123,36)" fg:x="223" fg:w="148"/><text x="56.8490%" y="207.50">parquet::arrow::arrow_writer::ArrowColumnWriter::write</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (148 samples, 37.56%)</title><rect x="56.5990%" y="181" width="37.5635%" height="15" fill="rgb(240,125,3)" fg:x="223" fg:w="148"/><text x="56.8490%" y="191.50">parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (43 samples, 10.91%)</title><rect x="83.2487%" y="165" width="10.9137%" height="15" fill="rgb(205,98,50)" fg:x="328" fg:w="43"/><text x="83.4987%" y="175.50">parquet::column:..</text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.25%)</title><rect x="93.9086%" y="149" width="0.2538%" height="15" fill="rgb(205,185,37)" fg:x="370" fg:w="1"/><text x="94.1586%" y="159.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (151 samples, 38.32%)</title><rect x="56.5990%" y="229" width="38.3249%" height="15" fill="rgb(238,207,15)" fg:x="223" fg:w="151"/><text x="56.8490%" y="239.50">parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (151 samples, 38.32%)</title><rect x="56.5990%" y="213" width="38.3249%" height="15" fill="rgb(213,199,42)" fg:x="223" fg:w="151"/><text x="56.8490%" y="223.50">parquet::arrow::arrow_writer::ArrowRowGroupWriter::write</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (3 samples, 0.76%)</title><rect x="94.1624%" y="197" width="0.7614%" height="15" fill="rgb(235,201,11)" fg:x="371" fg:w="3"/><text x="94.4124%" y="207.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (3 samples, 0.76%)</title><rect x="94.1624%" y="181" width="0.7614%" height="15" fill="rgb(207,46,11)" fg:x="371" fg:w="3"/><text x="94.4124%" y="191.50"></text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line (372 samples, 94.42%)</title><rect x="0.7614%" y="293" width="94.4162%" height="15" fill="rgb(241,35,35)" fg:x="3" fg:w="372"/><text x="1.0114%" y="303.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::feed_line</text></g><g><title>nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch (367 samples, 93.15%)</title><rect x="2.0305%" y="277" width="93.1472%" height="15" fill="rgb(243,32,47)" fg:x="8" fg:w="367"/><text x="2.2805%" y="287.50">nemscraper::process::csv_batch_processor::CsvBatchProcessor::flush_batch</text></g><g><title>nemscraper::process::chunk::csv_to_parquet (367 samples, 93.15%)</title><rect x="2.0305%" y="261" width="93.1472%" height="15" fill="rgb(247,202,23)" fg:x="8" fg:w="367"/><text x="2.2805%" y="271.50">nemscraper::process::chunk::csv_to_parquet</text></g><g><title>nemscraper::process::chunk::StreamingCsvStringProcessor::flush (299 samples, 75.89%)</title><rect x="19.2893%" y="245" width="75.8883%" height="15" fill="rgb(219,102,11)" fg:x="76" fg:w="299"/><text x="19.5393%" y="255.50">nemscraper::process::chunk::StreamingCsvStringProcessor::flush</text></g><g><title>tracing_core::event::Event::dispatch (1 samples, 0.25%)</title><rect x="94.9239%" y="229" width="0.2538%" height="15" fill="rgb(243,110,44)" fg:x="374" fg:w="1"/><text x="95.1739%" y="239.50"></text></g><g><title>&lt;tracing_subscriber::fmt::Subscriber&lt;N,E,F,W&gt; as tracing_core::subscriber::Subscriber&gt;::event (1 samples, 0.25%)</title><rect x="94.9239%" y="213" width="0.2538%" height="15" fill="rgb(222,74,54)" fg:x="374" fg:w="1"/><text x="95.1739%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.25%)</title><rect x="94.9239%" y="197" width="0.2538%" height="15" fill="rgb(216,99,12)" fg:x="374" fg:w="1"/><text x="95.1739%" y="207.50"></text></g><g><title>&lt;tracing_subscriber::fmt::format::Format&lt;tracing_subscriber::fmt::format::Full,T&gt; as tracing_subscriber::fmt::format::FormatEvent&lt;S,N&gt;&gt;::format_event (1 samples, 0.25%)</title><rect x="94.9239%" y="181" width="0.2538%" height="15" fill="rgb(226,22,26)" fg:x="374" fg:w="1"/><text x="95.1739%" y="191.50"></text></g><g><title>core::fmt::write (1 samples, 0.25%)</title><rect x="94.9239%" y="165" width="0.2538%" height="15" fill="rgb(217,163,10)" fg:x="374" fg:w="1"/><text x="95.1739%" y="175.50"></text></g><g><title>nu_ansi_term::ansi::&lt;impl nu_ansi_term::style::Style&gt;::write_prefix (1 samples, 0.25%)</title><rect x="94.9239%" y="149" width="0.2538%" height="15" fill="rgb(213,25,53)" fg:x="374" fg:w="1"/><text x="95.1739%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.25%)</title><rect x="94.9239%" y="133" width="0.2538%" height="15" fill="rgb(252,105,26)" fg:x="374" fg:w="1"/><text x="95.1739%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.25%)</title><rect x="94.9239%" y="117" width="0.2538%" height="15" fill="rgb(220,39,43)" fg:x="374" fg:w="1"/><text x="95.1739%" y="127.50"></text></g><g><title>crc32fast::Hasher::update (3 samples, 0.76%)</title><rect x="95.1777%" y="261" width="0.7614%" height="15" fill="rgb(229,68,48)" fg:x="375" fg:w="3"/><text x="95.4277%" y="271.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (3 samples, 0.76%)</title><rect x="95.1777%" y="245" width="0.7614%" height="15" fill="rgb(252,8,32)" fg:x="375" fg:w="3"/><text x="95.4277%" y="255.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (3 samples, 0.76%)</title><rect x="95.1777%" y="229" width="0.7614%" height="15" fill="rgb(223,20,43)" fg:x="375" fg:w="3"/><text x="95.4277%" y="239.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (3 samples, 0.76%)</title><rect x="95.1777%" y="213" width="0.7614%" height="15" fill="rgb(229,81,49)" fg:x="375" fg:w="3"/><text x="95.4277%" y="223.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (8 samples, 2.03%)</title><rect x="96.4467%" y="197" width="2.0305%" height="15" fill="rgb(236,28,36)" fg:x="380" fg:w="8"/><text x="96.6967%" y="207.50">z..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (11 samples, 2.79%)</title><rect x="95.9391%" y="245" width="2.7919%" height="15" fill="rgb(249,185,26)" fg:x="378" fg:w="11"/><text x="96.1891%" y="255.50">&lt;f..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (11 samples, 2.79%)</title><rect x="95.9391%" y="229" width="2.7919%" height="15" fill="rgb(249,174,33)" fg:x="378" fg:w="11"/><text x="96.1891%" y="239.50">&lt;f..</text></g><g><title>zlib_rs::inflate::inflate (10 samples, 2.54%)</title><rect x="96.1929%" y="213" width="2.5381%" height="15" fill="rgb(233,201,37)" fg:x="379" fg:w="10"/><text x="96.4429%" y="223.50">zl..</text></g><g><title>zlib_rs::inflate::writer::Writer::copy_match_runtime_dispatch (1 samples, 0.25%)</title><rect x="98.4772%" y="197" width="0.2538%" height="15" fill="rgb(221,78,26)" fg:x="388" fg:w="1"/><text x="98.7272%" y="207.50"></text></g><g><title>&lt;zip::read::ZipFile&lt;R&gt; as std::io::Read&gt;::read (15 samples, 3.81%)</title><rect x="95.1777%" y="277" width="3.8071%" height="15" fill="rgb(250,127,30)" fg:x="375" fg:w="15"/><text x="95.4277%" y="287.50">&lt;zip..</text></g><g><title>flate2::zio::read (12 samples, 3.05%)</title><rect x="95.9391%" y="261" width="3.0457%" height="15" fill="rgb(230,49,44)" fg:x="378" fg:w="12"/><text x="96.1891%" y="271.50">fla..</text></g><g><title>&lt;zip::read::CryptoReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.25%)</title><rect x="98.7310%" y="245" width="0.2538%" height="15" fill="rgb(229,67,23)" fg:x="389" fg:w="1"/><text x="98.9810%" y="255.50"></text></g><g><title>bench_zip_to_pa (391 samples, 99.24%)</title><rect x="0.0000%" y="485" width="99.2386%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="391"/><text x="0.2500%" y="495.50">bench_zip_to_pa</text></g><g><title>_start (391 samples, 99.24%)</title><rect x="0.0000%" y="469" width="99.2386%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="391"/><text x="0.2500%" y="479.50">_start</text></g><g><title>__libc_start_main (391 samples, 99.24%)</title><rect x="0.0000%" y="453" width="99.2386%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="391"/><text x="0.2500%" y="463.50">__libc_start_main</text></g><g><title>main (391 samples, 99.24%)</title><rect x="0.0000%" y="437" width="99.2386%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="391"/><text x="0.2500%" y="447.50">main</text></g><g><title>std::rt::lang_start_internal (391 samples, 99.24%)</title><rect x="0.0000%" y="421" width="99.2386%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="391"/><text x="0.2500%" y="431.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (391 samples, 99.24%)</title><rect x="0.0000%" y="405" width="99.2386%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="391"/><text x="0.2500%" y="415.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (391 samples, 99.24%)</title><rect x="0.0000%" y="389" width="99.2386%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="391"/><text x="0.2500%" y="399.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (391 samples, 99.24%)</title><rect x="0.0000%" y="373" width="99.2386%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="391"/><text x="0.2500%" y="383.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (391 samples, 99.24%)</title><rect x="0.0000%" y="357" width="99.2386%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="391"/><text x="0.2500%" y="367.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (391 samples, 99.24%)</title><rect x="0.0000%" y="341" width="99.2386%" height="15" fill="rgb(235,168,5)" fg:x="0" fg:w="391"/><text x="0.2500%" y="351.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (391 samples, 99.24%)</title><rect x="0.0000%" y="325" width="99.2386%" height="15" fill="rgb(221,155,16)" fg:x="0" fg:w="391"/><text x="0.2500%" y="335.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::process_csv_entry (389 samples, 98.73%)</title><rect x="0.5076%" y="309" width="98.7310%" height="15" fill="rgb(215,215,53)" fg:x="2" fg:w="389"/><text x="0.7576%" y="319.50">nemscraper::process::split::process_csv_entry</text></g><g><title>std::io::append_to_string (16 samples, 4.06%)</title><rect x="95.1777%" y="293" width="4.0609%" height="15" fill="rgb(223,4,10)" fg:x="375" fg:w="16"/><text x="95.4277%" y="303.50">std:..</text></g><g><title>core::slice::memchr::memchr_aligned (1 samples, 0.25%)</title><rect x="98.9848%" y="277" width="0.2538%" height="15" fill="rgb(234,103,6)" fg:x="390" fg:w="1"/><text x="99.2348%" y="287.50"></text></g><g><title>parking_lot::raw_rwlock::RawRwLock::unlock_exclusive_slow (1 samples, 0.25%)</title><rect x="99.2386%" y="277" width="0.2538%" height="15" fill="rgb(227,97,0)" fg:x="391" fg:w="1"/><text x="99.4886%" y="287.50"></text></g><g><title>all (394 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="394"/><text x="0.2500%" y="511.50"></text></g><g><title>tokio-runtime-w (3 samples, 0.76%)</title><rect x="99.2386%" y="485" width="0.7614%" height="15" fill="rgb(228,201,54)" fg:x="391" fg:w="3"/><text x="99.4886%" y="495.50"></text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (3 samples, 0.76%)</title><rect x="99.2386%" y="469" width="0.7614%" height="15" fill="rgb(222,22,37)" fg:x="391" fg:w="3"/><text x="99.4886%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.76%)</title><rect x="99.2386%" y="453" width="0.7614%" height="15" fill="rgb(237,53,32)" fg:x="391" fg:w="3"/><text x="99.4886%" y="463.50"></text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (3 samples, 0.76%)</title><rect x="99.2386%" y="437" width="0.7614%" height="15" fill="rgb(233,25,53)" fg:x="391" fg:w="3"/><text x="99.4886%" y="447.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (3 samples, 0.76%)</title><rect x="99.2386%" y="421" width="0.7614%" height="15" fill="rgb(210,40,34)" fg:x="391" fg:w="3"/><text x="99.4886%" y="431.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (3 samples, 0.76%)</title><rect x="99.2386%" y="405" width="0.7614%" height="15" fill="rgb(241,220,44)" fg:x="391" fg:w="3"/><text x="99.4886%" y="415.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (3 samples, 0.76%)</title><rect x="99.2386%" y="389" width="0.7614%" height="15" fill="rgb(235,28,35)" fg:x="391" fg:w="3"/><text x="99.4886%" y="399.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.76%)</title><rect x="99.2386%" y="373" width="0.7614%" height="15" fill="rgb(210,56,17)" fg:x="391" fg:w="3"/><text x="99.4886%" y="383.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (3 samples, 0.76%)</title><rect x="99.2386%" y="357" width="0.7614%" height="15" fill="rgb(224,130,29)" fg:x="391" fg:w="3"/><text x="99.4886%" y="367.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (3 samples, 0.76%)</title><rect x="99.2386%" y="341" width="0.7614%" height="15" fill="rgb(235,212,8)" fg:x="391" fg:w="3"/><text x="99.4886%" y="351.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (3 samples, 0.76%)</title><rect x="99.2386%" y="325" width="0.7614%" height="15" fill="rgb(223,33,50)" fg:x="391" fg:w="3"/><text x="99.4886%" y="335.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (3 samples, 0.76%)</title><rect x="99.2386%" y="309" width="0.7614%" height="15" fill="rgb(219,149,13)" fg:x="391" fg:w="3"/><text x="99.4886%" y="319.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (3 samples, 0.76%)</title><rect x="99.2386%" y="293" width="0.7614%" height="15" fill="rgb(250,156,29)" fg:x="391" fg:w="3"/><text x="99.4886%" y="303.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.51%)</title><rect x="99.4924%" y="277" width="0.5076%" height="15" fill="rgb(216,193,19)" fg:x="392" fg:w="2"/><text x="99.7424%" y="287.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2 samples, 0.51%)</title><rect x="99.4924%" y="261" width="0.5076%" height="15" fill="rgb(216,135,14)" fg:x="392" fg:w="2"/><text x="99.7424%" y="271.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2 samples, 0.51%)</title><rect x="99.4924%" y="245" width="0.5076%" height="15" fill="rgb(241,47,5)" fg:x="392" fg:w="2"/><text x="99.7424%" y="255.50"></text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (2 samples, 0.51%)</title><rect x="99.4924%" y="229" width="0.5076%" height="15" fill="rgb(233,42,35)" fg:x="392" fg:w="2"/><text x="99.7424%" y="239.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (2 samples, 0.51%)</title><rect x="99.4924%" y="213" width="0.5076%" height="15" fill="rgb(231,13,6)" fg:x="392" fg:w="2"/><text x="99.7424%" y="223.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (2 samples, 0.51%)</title><rect x="99.4924%" y="197" width="0.5076%" height="15" fill="rgb(207,181,40)" fg:x="392" fg:w="2"/><text x="99.7424%" y="207.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (2 samples, 0.51%)</title><rect x="99.4924%" y="181" width="0.5076%" height="15" fill="rgb(254,173,49)" fg:x="392" fg:w="2"/><text x="99.7424%" y="191.50"></text></g><g><title>tokio::runtime::park::wake (2 samples, 0.51%)</title><rect x="99.4924%" y="165" width="0.5076%" height="15" fill="rgb(221,1,38)" fg:x="392" fg:w="2"/><text x="99.7424%" y="175.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (2 samples, 0.51%)</title><rect x="99.4924%" y="149" width="0.5076%" height="15" fill="rgb(206,124,46)" fg:x="392" fg:w="2"/><text x="99.7424%" y="159.50"></text></g><g><title>syscall (2 samples, 0.51%)</title><rect x="99.4924%" y="133" width="0.5076%" height="15" fill="rgb(249,21,11)" fg:x="392" fg:w="2"/><text x="99.7424%" y="143.50"></text></g></svg></svg>