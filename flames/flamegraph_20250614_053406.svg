<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="908"><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (1 samples, 0.11%)</title><rect x="0.9912%" y="341" width="0.1101%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="1"/><text x="1.2412%" y="351.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="0.9912%" y="325" width="0.1101%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="1"/><text x="1.2412%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (4 samples, 0.44%)</title><rect x="1.1013%" y="293" width="0.4405%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="4"/><text x="1.3513%" y="303.50"></text></g><g><title>syscall (4 samples, 0.44%)</title><rect x="1.1013%" y="277" width="0.4405%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="4"/><text x="1.3513%" y="287.50"></text></g><g><title>&lt;reqwest::async_impl::decoder::Decoder as futures_core::stream::Stream&gt;::poll_next (12 samples, 1.32%)</title><rect x="0.8811%" y="453" width="1.3216%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="12"/><text x="1.1311%" y="463.50"></text></g><g><title>&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (12 samples, 1.32%)</title><rect x="0.8811%" y="437" width="1.3216%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="12"/><text x="1.1311%" y="447.50"></text></g><g><title>&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (11 samples, 1.21%)</title><rect x="0.9912%" y="421" width="1.2115%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="11"/><text x="1.2412%" y="431.50"></text></g><g><title>&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (11 samples, 1.21%)</title><rect x="0.9912%" y="405" width="1.2115%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="11"/><text x="1.2412%" y="415.50"></text></g><g><title>hyper::body::body::Body::poll_inner (11 samples, 1.21%)</title><rect x="0.9912%" y="389" width="1.2115%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="11"/><text x="1.2412%" y="399.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (11 samples, 1.21%)</title><rect x="0.9912%" y="373" width="1.2115%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="11"/><text x="1.2412%" y="383.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (11 samples, 1.21%)</title><rect x="0.9912%" y="357" width="1.2115%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="11"/><text x="1.2412%" y="367.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (10 samples, 1.10%)</title><rect x="1.1013%" y="341" width="1.1013%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="10"/><text x="1.3513%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (10 samples, 1.10%)</title><rect x="1.1013%" y="325" width="1.1013%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="10"/><text x="1.3513%" y="335.50"></text></g><g><title>tokio::runtime::context::with_scheduler (10 samples, 1.10%)</title><rect x="1.1013%" y="309" width="1.1013%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="10"/><text x="1.3513%" y="319.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (6 samples, 0.66%)</title><rect x="1.5419%" y="293" width="0.6608%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="6"/><text x="1.7919%" y="303.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (6 samples, 0.66%)</title><rect x="1.5419%" y="277" width="0.6608%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="6"/><text x="1.7919%" y="287.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (6 samples, 0.66%)</title><rect x="1.5419%" y="261" width="0.6608%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="6"/><text x="1.7919%" y="271.50"></text></g><g><title>write (6 samples, 0.66%)</title><rect x="1.5419%" y="245" width="0.6608%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="6"/><text x="1.7919%" y="255.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (4 samples, 0.44%)</title><rect x="2.9736%" y="405" width="0.4405%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="4"/><text x="3.2236%" y="415.50"></text></g><g><title>crc32fast::Hasher::update (14 samples, 1.54%)</title><rect x="2.2026%" y="437" width="1.5419%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="14"/><text x="2.4526%" y="447.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (14 samples, 1.54%)</title><rect x="2.2026%" y="421" width="1.5419%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="14"/><text x="2.4526%" y="431.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (3 samples, 0.33%)</title><rect x="3.4141%" y="405" width="0.3304%" height="15" fill="rgb(235,183,28)" fg:x="31" fg:w="3"/><text x="3.6641%" y="415.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1 samples, 0.11%)</title><rect x="3.6344%" y="389" width="0.1101%" height="15" fill="rgb(221,5,38)" fg:x="33" fg:w="1"/><text x="3.8844%" y="399.50"></text></g><g><title>zlib_rs::inflate::inflate_fast_help_avx2 (69 samples, 7.60%)</title><rect x="6.6079%" y="357" width="7.5991%" height="15" fill="rgb(247,18,42)" fg:x="60" fg:w="69"/><text x="6.8579%" y="367.50">zlib_rs::i..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (111 samples, 12.22%)</title><rect x="2.2026%" y="453" width="12.2247%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="111"/><text x="2.4526%" y="463.50">&lt;std::io::buffered..</text></g><g><title>std::io::default_read_to_end (97 samples, 10.68%)</title><rect x="3.7445%" y="437" width="10.6828%" height="15" fill="rgb(249,31,29)" fg:x="34" fg:w="97"/><text x="3.9945%" y="447.50">std::io::default..</text></g><g><title>flate2::zio::read (71 samples, 7.82%)</title><rect x="6.6079%" y="421" width="7.8194%" height="15" fill="rgb(225,111,53)" fg:x="60" fg:w="71"/><text x="6.8579%" y="431.50">flate2::zio..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (71 samples, 7.82%)</title><rect x="6.6079%" y="405" width="7.8194%" height="15" fill="rgb(238,160,17)" fg:x="60" fg:w="71"/><text x="6.8579%" y="415.50">&lt;flate2::me..</text></g><g><title>&lt;flate2::ffi::c::Inflate as flate2::ffi::InflateBackend&gt;::decompress (71 samples, 7.82%)</title><rect x="6.6079%" y="389" width="7.8194%" height="15" fill="rgb(214,148,48)" fg:x="60" fg:w="71"/><text x="6.8579%" y="399.50">&lt;flate2::ff..</text></g><g><title>zlib_rs::inflate::inflate (71 samples, 7.82%)</title><rect x="6.6079%" y="373" width="7.8194%" height="15" fill="rgb(232,36,49)" fg:x="60" fg:w="71"/><text x="6.8579%" y="383.50">zlib_rs::in..</text></g><g><title>zlib_rs::inflate::inftrees::inflate_table (2 samples, 0.22%)</title><rect x="14.2070%" y="357" width="0.2203%" height="15" fill="rgb(209,103,24)" fg:x="129" fg:w="2"/><text x="14.4570%" y="367.50"></text></g><g><title>core::str::converts::from_utf8 (10 samples, 1.10%)</title><rect x="14.9780%" y="437" width="1.1013%" height="15" fill="rgb(229,88,8)" fg:x="136" fg:w="10"/><text x="15.2280%" y="447.50"></text></g><g><title>tokio::io::util::read_line::finish_string_read (1 samples, 0.11%)</title><rect x="16.0793%" y="437" width="0.1101%" height="15" fill="rgb(213,181,19)" fg:x="146" fg:w="1"/><text x="16.3293%" y="447.50"></text></g><g><title>&lt;tokio::io::util::read_line::ReadLine&lt;R&gt; as core::future::future::Future&gt;::poll (38 samples, 4.19%)</title><rect x="14.4273%" y="453" width="4.1850%" height="15" fill="rgb(254,191,54)" fg:x="131" fg:w="38"/><text x="14.6773%" y="463.50">&lt;toki..</text></g><g><title>tokio::io::util::read_until::read_until_internal (22 samples, 2.42%)</title><rect x="16.1894%" y="437" width="2.4229%" height="15" fill="rgb(241,83,37)" fg:x="147" fg:w="22"/><text x="16.4394%" y="447.50">to..</text></g><g><title>tokio::util::memchr::memchr (5 samples, 0.55%)</title><rect x="18.0617%" y="421" width="0.5507%" height="15" fill="rgb(233,36,39)" fg:x="164" fg:w="5"/><text x="18.3117%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="18.6123%" y="453" width="0.1101%" height="15" fill="rgb(226,3,54)" fg:x="169" fg:w="1"/><text x="18.8623%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::client::client::Client&lt;reqwest::connect::Connector,reqwest::async_impl::body::ImplStream&gt;&gt; (1 samples, 0.11%)</title><rect x="18.6123%" y="437" width="0.1101%" height="15" fill="rgb(245,192,40)" fg:x="169" fg:w="1"/><text x="18.8623%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;reqwest::connect::Connector&gt; (1 samples, 0.11%)</title><rect x="18.6123%" y="421" width="0.1101%" height="15" fill="rgb(238,167,29)" fg:x="169" fg:w="1"/><text x="18.8623%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="18.6123%" y="405" width="0.1101%" height="15" fill="rgb(232,182,51)" fg:x="169" fg:w="1"/><text x="18.8623%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="18.6123%" y="389" width="0.1101%" height="15" fill="rgb(231,60,39)" fg:x="169" fg:w="1"/><text x="18.8623%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;rustls::client::handy::ClientSessionMemoryCache&gt; (1 samples, 0.11%)</title><rect x="18.6123%" y="373" width="0.1101%" height="15" fill="rgb(208,69,12)" fg:x="169" fg:w="1"/><text x="18.8623%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::process_line::{{closure}}&gt; (1 samples, 0.11%)</title><rect x="18.7225%" y="453" width="0.1101%" height="15" fill="rgb(235,93,37)" fg:x="170" fg:w="1"/><text x="18.9725%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (1 samples, 0.11%)</title><rect x="18.8326%" y="453" width="0.1101%" height="15" fill="rgb(213,116,39)" fg:x="171" fg:w="1"/><text x="19.0826%" y="463.50"></text></g><g><title>openssl::ssl::SslContextBuilder::load_verify_locations (1 samples, 0.11%)</title><rect x="18.9427%" y="357" width="0.1101%" height="15" fill="rgb(222,207,29)" fg:x="172" fg:w="1"/><text x="19.1927%" y="367.50"></text></g><g><title>SSL_CTX_load_verify_locations (1 samples, 0.11%)</title><rect x="18.9427%" y="341" width="0.1101%" height="15" fill="rgb(206,96,30)" fg:x="172" fg:w="1"/><text x="19.1927%" y="351.50"></text></g><g><title>X509_STORE_load_file_ex (1 samples, 0.11%)</title><rect x="18.9427%" y="325" width="0.1101%" height="15" fill="rgb(218,138,4)" fg:x="172" fg:w="1"/><text x="19.1927%" y="335.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.11%)</title><rect x="18.9427%" y="309" width="0.1101%" height="15" fill="rgb(250,191,14)" fg:x="172" fg:w="1"/><text x="19.1927%" y="319.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.11%)</title><rect x="18.9427%" y="293" width="0.1101%" height="15" fill="rgb(239,60,40)" fg:x="172" fg:w="1"/><text x="19.1927%" y="303.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.11%)</title><rect x="18.9427%" y="277" width="0.1101%" height="15" fill="rgb(206,27,48)" fg:x="172" fg:w="1"/><text x="19.1927%" y="287.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.11%)</title><rect x="19.0529%" y="229" width="0.1101%" height="15" fill="rgb(225,35,8)" fg:x="173" fg:w="1"/><text x="19.3029%" y="239.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.11%)</title><rect x="19.0529%" y="213" width="0.1101%" height="15" fill="rgb(250,213,24)" fg:x="173" fg:w="1"/><text x="19.3029%" y="223.50"></text></g><g><title>google_cloud_auth::token::DefaultTokenSourceProvider::new::{{closure}} (3 samples, 0.33%)</title><rect x="18.9427%" y="453" width="0.3304%" height="15" fill="rgb(247,123,22)" fg:x="172" fg:w="3"/><text x="19.1927%" y="463.50"></text></g><g><title>google_cloud_auth::token_source::service_account_token_source::OAuth2ServiceAccountTokenSource::new (3 samples, 0.33%)</title><rect x="18.9427%" y="437" width="0.3304%" height="15" fill="rgb(231,138,38)" fg:x="172" fg:w="3"/><text x="19.1927%" y="447.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (3 samples, 0.33%)</title><rect x="18.9427%" y="421" width="0.3304%" height="15" fill="rgb(231,145,46)" fg:x="172" fg:w="3"/><text x="19.1927%" y="431.50"></text></g><g><title>reqwest::connect::ConnectorBuilder::new_default_tls (3 samples, 0.33%)</title><rect x="18.9427%" y="405" width="0.3304%" height="15" fill="rgb(251,118,11)" fg:x="172" fg:w="3"/><text x="19.1927%" y="415.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (3 samples, 0.33%)</title><rect x="18.9427%" y="389" width="0.3304%" height="15" fill="rgb(217,147,25)" fg:x="172" fg:w="3"/><text x="19.1927%" y="399.50"></text></g><g><title>native_tls::imp::TlsConnector::new (3 samples, 0.33%)</title><rect x="18.9427%" y="373" width="0.3304%" height="15" fill="rgb(247,81,37)" fg:x="172" fg:w="3"/><text x="19.1927%" y="383.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (2 samples, 0.22%)</title><rect x="19.0529%" y="357" width="0.2203%" height="15" fill="rgb(209,12,38)" fg:x="173" fg:w="2"/><text x="19.3029%" y="367.50"></text></g><g><title>X509_STORE_set_default_paths_ex (2 samples, 0.22%)</title><rect x="19.0529%" y="341" width="0.2203%" height="15" fill="rgb(227,1,9)" fg:x="173" fg:w="2"/><text x="19.3029%" y="351.50"></text></g><g><title>X509_load_cert_crl_file_ex (2 samples, 0.22%)</title><rect x="19.0529%" y="325" width="0.2203%" height="15" fill="rgb(248,47,43)" fg:x="173" fg:w="2"/><text x="19.3029%" y="335.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (2 samples, 0.22%)</title><rect x="19.0529%" y="309" width="0.2203%" height="15" fill="rgb(221,10,30)" fg:x="173" fg:w="2"/><text x="19.3029%" y="319.50"></text></g><g><title>ASN1_item_d2i_ex (2 samples, 0.22%)</title><rect x="19.0529%" y="293" width="0.2203%" height="15" fill="rgb(210,229,1)" fg:x="173" fg:w="2"/><text x="19.3029%" y="303.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (2 samples, 0.22%)</title><rect x="19.0529%" y="277" width="0.2203%" height="15" fill="rgb(222,148,37)" fg:x="173" fg:w="2"/><text x="19.3029%" y="287.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (2 samples, 0.22%)</title><rect x="19.0529%" y="261" width="0.2203%" height="15" fill="rgb(234,67,33)" fg:x="173" fg:w="2"/><text x="19.3029%" y="271.50"></text></g><g><title>OSSL_DECODER_is_a (2 samples, 0.22%)</title><rect x="19.0529%" y="245" width="0.2203%" height="15" fill="rgb(247,98,35)" fg:x="173" fg:w="2"/><text x="19.3029%" y="255.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.11%)</title><rect x="19.1630%" y="229" width="0.1101%" height="15" fill="rgb(247,138,52)" fg:x="174" fg:w="1"/><text x="19.4130%" y="239.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.11%)</title><rect x="19.1630%" y="213" width="0.1101%" height="15" fill="rgb(213,79,30)" fg:x="174" fg:w="1"/><text x="19.4130%" y="223.50"></text></g><g><title>openssl::ssl::SslContextBuilder::load_verify_locations (1 samples, 0.11%)</title><rect x="19.2731%" y="357" width="0.1101%" height="15" fill="rgb(246,177,23)" fg:x="175" fg:w="1"/><text x="19.5231%" y="367.50"></text></g><g><title>SSL_CTX_load_verify_locations (1 samples, 0.11%)</title><rect x="19.2731%" y="341" width="0.1101%" height="15" fill="rgb(230,62,27)" fg:x="175" fg:w="1"/><text x="19.5231%" y="351.50"></text></g><g><title>X509_STORE_load_file_ex (1 samples, 0.11%)</title><rect x="19.2731%" y="325" width="0.1101%" height="15" fill="rgb(216,154,8)" fg:x="175" fg:w="1"/><text x="19.5231%" y="335.50"></text></g><g><title>X509_load_cert_crl_file_ex (1 samples, 0.11%)</title><rect x="19.2731%" y="309" width="0.1101%" height="15" fill="rgb(244,35,45)" fg:x="175" fg:w="1"/><text x="19.5231%" y="319.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (1 samples, 0.11%)</title><rect x="19.2731%" y="293" width="0.1101%" height="15" fill="rgb(251,115,12)" fg:x="175" fg:w="1"/><text x="19.5231%" y="303.50"></text></g><g><title>ASN1_item_d2i_ex (1 samples, 0.11%)</title><rect x="19.2731%" y="277" width="0.1101%" height="15" fill="rgb(240,54,50)" fg:x="175" fg:w="1"/><text x="19.5231%" y="287.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (1 samples, 0.11%)</title><rect x="19.2731%" y="261" width="0.1101%" height="15" fill="rgb(233,84,52)" fg:x="175" fg:w="1"/><text x="19.5231%" y="271.50"></text></g><g><title>OSSL_DECODER_do_all_provided (1 samples, 0.11%)</title><rect x="19.2731%" y="245" width="0.1101%" height="15" fill="rgb(207,117,47)" fg:x="175" fg:w="1"/><text x="19.5231%" y="255.50"></text></g><g><title>OSSL_DECODER_is_a (1 samples, 0.11%)</title><rect x="19.2731%" y="229" width="0.1101%" height="15" fill="rgb(249,43,39)" fg:x="175" fg:w="1"/><text x="19.5231%" y="239.50"></text></g><g><title>OPENSSL_LH_retrieve (1 samples, 0.11%)</title><rect x="19.2731%" y="213" width="0.1101%" height="15" fill="rgb(209,38,44)" fg:x="175" fg:w="1"/><text x="19.5231%" y="223.50"></text></g><g><title>OPENSSL_strcasecmp (1 samples, 0.11%)</title><rect x="19.2731%" y="197" width="0.1101%" height="15" fill="rgb(236,212,23)" fg:x="175" fg:w="1"/><text x="19.5231%" y="207.50"></text></g><g><title>EVP_KEYMGMT_do_all_provided (1 samples, 0.11%)</title><rect x="19.3833%" y="261" width="0.1101%" height="15" fill="rgb(242,79,21)" fg:x="176" fg:w="1"/><text x="19.6333%" y="271.50"></text></g><g><title>google_cloud_storage::client::Client::new (3 samples, 0.33%)</title><rect x="19.2731%" y="453" width="0.3304%" height="15" fill="rgb(211,96,35)" fg:x="175" fg:w="3"/><text x="19.5231%" y="463.50"></text></g><g><title>&lt;reqwest::async_impl::client::Client as core::default::Default&gt;::default (3 samples, 0.33%)</title><rect x="19.2731%" y="437" width="0.3304%" height="15" fill="rgb(253,215,40)" fg:x="175" fg:w="3"/><text x="19.5231%" y="447.50"></text></g><g><title>reqwest::async_impl::client::ClientBuilder::build (3 samples, 0.33%)</title><rect x="19.2731%" y="421" width="0.3304%" height="15" fill="rgb(211,81,21)" fg:x="175" fg:w="3"/><text x="19.5231%" y="431.50"></text></g><g><title>reqwest::connect::ConnectorBuilder::new_default_tls (3 samples, 0.33%)</title><rect x="19.2731%" y="405" width="0.3304%" height="15" fill="rgb(208,190,38)" fg:x="175" fg:w="3"/><text x="19.5231%" y="415.50"></text></g><g><title>native_tls::TlsConnectorBuilder::build (3 samples, 0.33%)</title><rect x="19.2731%" y="389" width="0.3304%" height="15" fill="rgb(235,213,38)" fg:x="175" fg:w="3"/><text x="19.5231%" y="399.50"></text></g><g><title>native_tls::imp::TlsConnector::new (3 samples, 0.33%)</title><rect x="19.2731%" y="373" width="0.3304%" height="15" fill="rgb(237,122,38)" fg:x="175" fg:w="3"/><text x="19.5231%" y="383.50"></text></g><g><title>openssl::ssl::connector::SslConnector::builder (2 samples, 0.22%)</title><rect x="19.3833%" y="357" width="0.2203%" height="15" fill="rgb(244,218,35)" fg:x="176" fg:w="2"/><text x="19.6333%" y="367.50"></text></g><g><title>X509_STORE_set_default_paths_ex (2 samples, 0.22%)</title><rect x="19.3833%" y="341" width="0.2203%" height="15" fill="rgb(240,68,47)" fg:x="176" fg:w="2"/><text x="19.6333%" y="351.50"></text></g><g><title>X509_load_cert_crl_file_ex (2 samples, 0.22%)</title><rect x="19.3833%" y="325" width="0.2203%" height="15" fill="rgb(210,16,53)" fg:x="176" fg:w="2"/><text x="19.6333%" y="335.50"></text></g><g><title>PEM_X509_INFO_read_bio_ex (2 samples, 0.22%)</title><rect x="19.3833%" y="309" width="0.2203%" height="15" fill="rgb(235,124,12)" fg:x="176" fg:w="2"/><text x="19.6333%" y="319.50"></text></g><g><title>ASN1_item_d2i_ex (2 samples, 0.22%)</title><rect x="19.3833%" y="293" width="0.2203%" height="15" fill="rgb(224,169,11)" fg:x="176" fg:w="2"/><text x="19.6333%" y="303.50"></text></g><g><title>OSSL_DECODER_CTX_new_for_pkey (2 samples, 0.22%)</title><rect x="19.3833%" y="277" width="0.2203%" height="15" fill="rgb(250,166,2)" fg:x="176" fg:w="2"/><text x="19.6333%" y="287.50"></text></g><g><title>OSSL_DECODER_CTX_add_extra (1 samples, 0.11%)</title><rect x="19.4934%" y="261" width="0.1101%" height="15" fill="rgb(242,216,29)" fg:x="177" fg:w="1"/><text x="19.7434%" y="271.50"></text></g><g><title>OSSL_DECODER_is_a (1 samples, 0.11%)</title><rect x="19.4934%" y="245" width="0.1101%" height="15" fill="rgb(230,116,27)" fg:x="177" fg:w="1"/><text x="19.7434%" y="255.50"></text></g><g><title>CRYPTO_THREAD_read_lock (1 samples, 0.11%)</title><rect x="19.4934%" y="229" width="0.1101%" height="15" fill="rgb(228,99,48)" fg:x="177" fg:w="1"/><text x="19.7434%" y="239.50"></text></g><g><title>pthread_rwlock_rdlock (1 samples, 0.11%)</title><rect x="19.4934%" y="213" width="0.1101%" height="15" fill="rgb(253,11,6)" fg:x="177" fg:w="1"/><text x="19.7434%" y="223.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="19.6035%" y="437" width="0.1101%" height="15" fill="rgb(247,143,39)" fg:x="178" fg:w="1"/><text x="19.8535%" y="447.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 0.33%)</title><rect x="19.7137%" y="421" width="0.3304%" height="15" fill="rgb(236,97,10)" fg:x="179" fg:w="3"/><text x="19.9637%" y="431.50"></text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 0.11%)</title><rect x="19.9339%" y="405" width="0.1101%" height="15" fill="rgb(233,208,19)" fg:x="181" fg:w="1"/><text x="20.1839%" y="415.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (1 samples, 0.11%)</title><rect x="20.0441%" y="421" width="0.1101%" height="15" fill="rgb(216,164,2)" fg:x="182" fg:w="1"/><text x="20.2941%" y="431.50"></text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (1 samples, 0.11%)</title><rect x="20.0441%" y="405" width="0.1101%" height="15" fill="rgb(220,129,5)" fg:x="182" fg:w="1"/><text x="20.2941%" y="415.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (5 samples, 0.55%)</title><rect x="19.7137%" y="437" width="0.5507%" height="15" fill="rgb(242,17,10)" fg:x="179" fg:w="5"/><text x="19.9637%" y="447.50"></text></g><g><title>nemscraper::process::utils::clean_str (1 samples, 0.11%)</title><rect x="20.1542%" y="421" width="0.1101%" height="15" fill="rgb(242,107,0)" fg:x="183" fg:w="1"/><text x="20.4042%" y="431.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::build_csv_content (2 samples, 0.22%)</title><rect x="20.2643%" y="437" width="0.2203%" height="15" fill="rgb(251,28,31)" fg:x="184" fg:w="2"/><text x="20.5143%" y="447.50"></text></g><g><title>malloc (1 samples, 0.11%)</title><rect x="20.3744%" y="421" width="0.1101%" height="15" fill="rgb(233,223,10)" fg:x="185" fg:w="1"/><text x="20.6244%" y="431.50"></text></g><g><title>arrow_csv::reader::Decoder::decode (7 samples, 0.77%)</title><rect x="20.4846%" y="405" width="0.7709%" height="15" fill="rgb(215,21,27)" fg:x="186" fg:w="7"/><text x="20.7346%" y="415.50"></text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (7 samples, 0.77%)</title><rect x="20.4846%" y="389" width="0.7709%" height="15" fill="rgb(232,23,21)" fg:x="186" fg:w="7"/><text x="20.7346%" y="399.50"></text></g><g><title>csv_core::reader::Reader::read_record (3 samples, 0.33%)</title><rect x="20.9251%" y="373" width="0.3304%" height="15" fill="rgb(244,5,23)" fg:x="190" fg:w="3"/><text x="21.1751%" y="383.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::csv_to_arrow_batch (11 samples, 1.21%)</title><rect x="20.4846%" y="437" width="1.2115%" height="15" fill="rgb(226,81,46)" fg:x="186" fg:w="11"/><text x="20.7346%" y="447.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (11 samples, 1.21%)</title><rect x="20.4846%" y="421" width="1.2115%" height="15" fill="rgb(247,70,30)" fg:x="186" fg:w="11"/><text x="20.7346%" y="431.50"></text></g><g><title>arrow_csv::reader::Decoder::flush (4 samples, 0.44%)</title><rect x="21.2555%" y="405" width="0.4405%" height="15" fill="rgb(212,68,19)" fg:x="193" fg:w="4"/><text x="21.5055%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.44%)</title><rect x="21.2555%" y="389" width="0.4405%" height="15" fill="rgb(240,187,13)" fg:x="193" fg:w="4"/><text x="21.5055%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.44%)</title><rect x="21.2555%" y="373" width="0.4405%" height="15" fill="rgb(223,113,26)" fg:x="193" fg:w="4"/><text x="21.5055%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.44%)</title><rect x="21.2555%" y="357" width="0.4405%" height="15" fill="rgb(206,192,2)" fg:x="193" fg:w="4"/><text x="21.5055%" y="367.50"></text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (4 samples, 0.44%)</title><rect x="21.2555%" y="341" width="0.4405%" height="15" fill="rgb(241,108,4)" fg:x="193" fg:w="4"/><text x="21.5055%" y="351.50"></text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (3 samples, 0.33%)</title><rect x="21.3656%" y="325" width="0.3304%" height="15" fill="rgb(247,173,49)" fg:x="194" fg:w="3"/><text x="21.6156%" y="335.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (1 samples, 0.11%)</title><rect x="21.6960%" y="421" width="0.1101%" height="15" fill="rgb(224,114,35)" fg:x="197" fg:w="1"/><text x="21.9460%" y="431.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (1 samples, 0.11%)</title><rect x="21.6960%" y="405" width="0.1101%" height="15" fill="rgb(245,159,27)" fg:x="197" fg:w="1"/><text x="21.9460%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.11%)</title><rect x="21.6960%" y="389" width="0.1101%" height="15" fill="rgb(245,172,44)" fg:x="197" fg:w="1"/><text x="21.9460%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (1 samples, 0.11%)</title><rect x="21.6960%" y="373" width="0.1101%" height="15" fill="rgb(236,23,11)" fg:x="197" fg:w="1"/><text x="21.9460%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.11%)</title><rect x="21.6960%" y="357" width="0.1101%" height="15" fill="rgb(205,117,38)" fg:x="197" fg:w="1"/><text x="21.9460%" y="367.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (1 samples, 0.11%)</title><rect x="21.6960%" y="341" width="0.1101%" height="15" fill="rgb(237,72,25)" fg:x="197" fg:w="1"/><text x="21.9460%" y="351.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (1 samples, 0.11%)</title><rect x="21.6960%" y="325" width="0.1101%" height="15" fill="rgb(244,70,9)" fg:x="197" fg:w="1"/><text x="21.9460%" y="335.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.11%)</title><rect x="21.6960%" y="309" width="0.1101%" height="15" fill="rgb(217,125,39)" fg:x="197" fg:w="1"/><text x="21.9460%" y="319.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.11%)</title><rect x="21.6960%" y="293" width="0.1101%" height="15" fill="rgb(235,36,10)" fg:x="197" fg:w="1"/><text x="21.9460%" y="303.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.11%)</title><rect x="21.6960%" y="277" width="0.1101%" height="15" fill="rgb(251,123,47)" fg:x="197" fg:w="1"/><text x="21.9460%" y="287.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (1 samples, 0.11%)</title><rect x="21.8062%" y="373" width="0.1101%" height="15" fill="rgb(221,13,13)" fg:x="198" fg:w="1"/><text x="22.0562%" y="383.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (1 samples, 0.11%)</title><rect x="21.8062%" y="357" width="0.1101%" height="15" fill="rgb(238,131,9)" fg:x="198" fg:w="1"/><text x="22.0562%" y="367.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (1 samples, 0.11%)</title><rect x="21.8062%" y="341" width="0.1101%" height="15" fill="rgb(211,50,8)" fg:x="198" fg:w="1"/><text x="22.0562%" y="351.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (1 samples, 0.11%)</title><rect x="21.8062%" y="325" width="0.1101%" height="15" fill="rgb(245,182,24)" fg:x="198" fg:w="1"/><text x="22.0562%" y="335.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (1 samples, 0.11%)</title><rect x="22.0264%" y="341" width="0.1101%" height="15" fill="rgb(242,14,37)" fg:x="200" fg:w="1"/><text x="22.2764%" y="351.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (1 samples, 0.11%)</title><rect x="22.0264%" y="325" width="0.1101%" height="15" fill="rgb(246,228,12)" fg:x="200" fg:w="1"/><text x="22.2764%" y="335.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (1 samples, 0.11%)</title><rect x="22.0264%" y="309" width="0.1101%" height="15" fill="rgb(213,55,15)" fg:x="200" fg:w="1"/><text x="22.2764%" y="319.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}} (24 samples, 2.64%)</title><rect x="19.6035%" y="453" width="2.6432%" height="15" fill="rgb(209,9,3)" fg:x="178" fg:w="24"/><text x="19.8535%" y="463.50">ne..</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::write_parquet_to_memory (5 samples, 0.55%)</title><rect x="21.6960%" y="437" width="0.5507%" height="15" fill="rgb(230,59,30)" fg:x="197" fg:w="5"/><text x="21.9460%" y="447.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (4 samples, 0.44%)</title><rect x="21.8062%" y="421" width="0.4405%" height="15" fill="rgb(209,121,21)" fg:x="198" fg:w="4"/><text x="22.0562%" y="431.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (4 samples, 0.44%)</title><rect x="21.8062%" y="405" width="0.4405%" height="15" fill="rgb(220,109,13)" fg:x="198" fg:w="4"/><text x="22.0562%" y="415.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (4 samples, 0.44%)</title><rect x="21.8062%" y="389" width="0.4405%" height="15" fill="rgb(232,18,1)" fg:x="198" fg:w="4"/><text x="22.0562%" y="399.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (3 samples, 0.33%)</title><rect x="21.9163%" y="373" width="0.3304%" height="15" fill="rgb(215,41,42)" fg:x="199" fg:w="3"/><text x="22.1663%" y="383.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.22%)</title><rect x="22.0264%" y="357" width="0.2203%" height="15" fill="rgb(224,123,36)" fg:x="200" fg:w="2"/><text x="22.2764%" y="367.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.11%)</title><rect x="22.1366%" y="341" width="0.1101%" height="15" fill="rgb(240,125,3)" fg:x="201" fg:w="1"/><text x="22.3866%" y="351.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.11%)</title><rect x="22.1366%" y="325" width="0.1101%" height="15" fill="rgb(205,98,50)" fg:x="201" fg:w="1"/><text x="22.3866%" y="335.50"></text></g><g><title>__rustc::__rdl_alloc (1 samples, 0.11%)</title><rect x="23.0176%" y="437" width="0.1101%" height="15" fill="rgb(205,185,37)" fg:x="209" fg:w="1"/><text x="23.2676%" y="447.50"></text></g><g><title>malloc (25 samples, 2.75%)</title><rect x="23.1278%" y="437" width="2.7533%" height="15" fill="rgb(238,207,15)" fg:x="210" fg:w="25"/><text x="23.3778%" y="447.50">ma..</text></g><g><title>cfree (14 samples, 1.54%)</title><rect x="25.8811%" y="421" width="1.5419%" height="15" fill="rgb(213,199,42)" fg:x="235" fg:w="14"/><text x="26.1311%" y="431.50"></text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (5 samples, 0.55%)</title><rect x="29.7357%" y="405" width="0.5507%" height="15" fill="rgb(235,201,11)" fg:x="270" fg:w="5"/><text x="29.9857%" y="415.50"></text></g><g><title>__rustc::__rdl_realloc (5 samples, 0.55%)</title><rect x="29.7357%" y="389" width="0.5507%" height="15" fill="rgb(207,46,11)" fg:x="270" fg:w="5"/><text x="29.9857%" y="399.50"></text></g><g><title>cfree (13 samples, 1.43%)</title><rect x="30.2863%" y="405" width="1.4317%" height="15" fill="rgb(241,35,35)" fg:x="275" fg:w="13"/><text x="30.5363%" y="415.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (33 samples, 3.63%)</title><rect x="31.7181%" y="405" width="3.6344%" height="15" fill="rgb(243,32,47)" fg:x="288" fg:w="33"/><text x="31.9681%" y="415.50">core..</text></g><g><title>core::num::dec2flt::parse::parse_number (19 samples, 2.09%)</title><rect x="33.2599%" y="389" width="2.0925%" height="15" fill="rgb(247,202,23)" fg:x="302" fg:w="19"/><text x="33.5099%" y="399.50">c..</text></g><g><title>chrono::naive::date::NaiveDate::from_ymd_opt (5 samples, 0.55%)</title><rect x="37.0044%" y="389" width="0.5507%" height="15" fill="rgb(219,102,11)" fg:x="336" fg:w="5"/><text x="37.2544%" y="399.50"></text></g><g><title>chrono::naive::date::NaiveDate::num_days_from_ce (1 samples, 0.11%)</title><rect x="37.5551%" y="389" width="0.1101%" height="15" fill="rgb(243,110,44)" fg:x="341" fg:w="1"/><text x="37.8051%" y="399.50"></text></g><g><title>nemscraper::process::date_parser::parse_timestamp_millis (34 samples, 3.74%)</title><rect x="35.3524%" y="405" width="3.7445%" height="15" fill="rgb(222,74,54)" fg:x="321" fg:w="34"/><text x="35.6024%" y="415.50">nems..</text></g><g><title>chrono::offset::LocalResult&lt;T&gt;::and_then (13 samples, 1.43%)</title><rect x="37.6652%" y="389" width="1.4317%" height="15" fill="rgb(216,99,12)" fg:x="342" fg:w="13"/><text x="37.9152%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;arrow_buffer::buffer::immutable::Buffer&gt;&gt; (1 samples, 0.11%)</title><rect x="40.7489%" y="389" width="0.1101%" height="15" fill="rgb(226,22,26)" fg:x="370" fg:w="1"/><text x="40.9989%" y="399.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (10 samples, 1.10%)</title><rect x="40.8590%" y="389" width="1.1013%" height="15" fill="rgb(217,163,10)" fg:x="371" fg:w="10"/><text x="41.1090%" y="399.50"></text></g><g><title>nemscraper::process::convert::convert_to_final_types (143 samples, 15.75%)</title><rect x="27.4229%" y="421" width="15.7489%" height="15" fill="rgb(213,25,53)" fg:x="249" fg:w="143"/><text x="27.6729%" y="431.50">nemscraper::process::con..</text></g><g><title>nemscraper::process::utils::clean_str (37 samples, 4.07%)</title><rect x="39.0969%" y="405" width="4.0749%" height="15" fill="rgb(252,105,26)" fg:x="355" fg:w="37"/><text x="39.3469%" y="415.50">nems..</text></g><g><title>malloc (11 samples, 1.21%)</title><rect x="41.9604%" y="389" width="1.2115%" height="15" fill="rgb(220,39,43)" fg:x="381" fg:w="11"/><text x="42.2104%" y="399.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::build_csv_content (26 samples, 2.86%)</title><rect x="43.1718%" y="421" width="2.8634%" height="15" fill="rgb(229,68,48)" fg:x="392" fg:w="26"/><text x="43.4218%" y="431.50">ne..</text></g><g><title>arrow_csv::reader::Decoder::decode (144 samples, 15.86%)</title><rect x="46.5859%" y="389" width="15.8590%" height="15" fill="rgb(252,8,32)" fg:x="423" fg:w="144"/><text x="46.8359%" y="399.50">arrow_csv::reader::Decod..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::decode (144 samples, 15.86%)</title><rect x="46.5859%" y="373" width="15.8590%" height="15" fill="rgb(223,20,43)" fg:x="423" fg:w="144"/><text x="46.8359%" y="383.50">arrow_csv::reader::recor..</text></g><g><title>csv_core::reader::Reader::read_record (73 samples, 8.04%)</title><rect x="54.4053%" y="357" width="8.0396%" height="15" fill="rgb(229,81,49)" fg:x="494" fg:w="73"/><text x="54.6553%" y="367.50">csv_core::r..</text></g><g><title>arrow_csv::reader::records::RecordDecoder::flush (12 samples, 1.32%)</title><rect x="62.4449%" y="373" width="1.3216%" height="15" fill="rgb(236,28,36)" fg:x="567" fg:w="12"/><text x="62.6949%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.44%)</title><rect x="63.3260%" y="357" width="0.4405%" height="15" fill="rgb(249,185,26)" fg:x="575" fg:w="4"/><text x="63.5760%" y="367.50"></text></g><g><title>arrow_csv::reader::BufReader&lt;R&gt;::read (300 samples, 33.04%)</title><rect x="46.0352%" y="405" width="33.0396%" height="15" fill="rgb(249,174,33)" fg:x="418" fg:w="300"/><text x="46.2852%" y="415.50">arrow_csv::reader::BufReader&lt;R&gt;::read</text></g><g><title>arrow_csv::reader::Decoder::flush (151 samples, 16.63%)</title><rect x="62.4449%" y="389" width="16.6300%" height="15" fill="rgb(233,201,37)" fg:x="567" fg:w="151"/><text x="62.6949%" y="399.50">arrow_csv::reader::Decoder..</text></g><g><title>core::iter::adapters::try_process (139 samples, 15.31%)</title><rect x="63.7665%" y="373" width="15.3084%" height="15" fill="rgb(221,78,26)" fg:x="579" fg:w="139"/><text x="64.0165%" y="383.50">core::iter::adapters::t..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (139 samples, 15.31%)</title><rect x="63.7665%" y="357" width="15.3084%" height="15" fill="rgb(250,127,30)" fg:x="579" fg:w="139"/><text x="64.0165%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (139 samples, 15.31%)</title><rect x="63.7665%" y="341" width="15.3084%" height="15" fill="rgb(230,49,44)" fg:x="579" fg:w="139"/><text x="64.0165%" y="351.50">&lt;core::iter::adapters::..</text></g><g><title>&lt;arrow_array::array::byte_array::GenericByteArray&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;core::option::Option&lt;Ptr&gt;&gt;&gt;::from_iter (139 samples, 15.31%)</title><rect x="63.7665%" y="325" width="15.3084%" height="15" fill="rgb(229,67,23)" fg:x="579" fg:w="139"/><text x="64.0165%" y="335.50">&lt;arrow_array::array::by..</text></g><g><title>arrow_array::builder::generic_bytes_builder::GenericByteBuilder&lt;T&gt;::append_value (95 samples, 10.46%)</title><rect x="68.6123%" y="309" width="10.4626%" height="15" fill="rgb(249,83,47)" fg:x="623" fg:w="95"/><text x="68.8623%" y="319.50">arrow_array::bu..</text></g><g><title>arrow_buffer::buffer::mutable::MutableBuffer::reallocate (17 samples, 1.87%)</title><rect x="77.2026%" y="293" width="1.8722%" height="15" fill="rgb(215,43,3)" fg:x="701" fg:w="17"/><text x="77.4526%" y="303.50">a..</text></g><g><title>__rustc::__rdl_realloc (16 samples, 1.76%)</title><rect x="77.3128%" y="277" width="1.7621%" height="15" fill="rgb(238,154,13)" fg:x="702" fg:w="16"/><text x="77.5628%" y="287.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::csv_to_arrow_batch (301 samples, 33.15%)</title><rect x="46.0352%" y="421" width="33.1498%" height="15" fill="rgb(219,56,2)" fg:x="418" fg:w="301"/><text x="46.2852%" y="431.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProce..</text></g><g><title>core::ptr::drop_in_place&lt;arrow_csv::reader::Decoder&gt; (1 samples, 0.11%)</title><rect x="79.0749%" y="405" width="0.1101%" height="15" fill="rgb(233,0,4)" fg:x="718" fg:w="1"/><text x="79.3249%" y="415.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="79.0749%" y="389" width="0.1101%" height="15" fill="rgb(235,30,7)" fg:x="718" fg:w="1"/><text x="79.3249%" y="399.50"></text></g><g><title>__munmap (1 samples, 0.11%)</title><rect x="79.0749%" y="373" width="0.1101%" height="15" fill="rgb(250,79,13)" fg:x="718" fg:w="1"/><text x="79.3249%" y="383.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_data_page (1 samples, 0.11%)</title><rect x="79.1850%" y="293" width="0.1101%" height="15" fill="rgb(211,146,34)" fg:x="719" fg:w="1"/><text x="79.4350%" y="303.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::ArrowPageWriter as parquet::column::page::PageWriter&gt;::write_page (1 samples, 0.11%)</title><rect x="79.1850%" y="277" width="0.1101%" height="15" fill="rgb(228,22,38)" fg:x="719" fg:w="1"/><text x="79.4350%" y="287.50"></text></g><g><title>&lt;parquet::format::PageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.11%)</title><rect x="79.1850%" y="261" width="0.1101%" height="15" fill="rgb(235,168,5)" fg:x="719" fg:w="1"/><text x="79.4350%" y="271.50"></text></g><g><title>&lt;parquet::format::DataPageHeader as parquet::thrift::TSerializable&gt;::write_to_out_protocol (1 samples, 0.11%)</title><rect x="79.1850%" y="245" width="0.1101%" height="15" fill="rgb(221,155,16)" fg:x="719" fg:w="1"/><text x="79.4350%" y="255.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::flush (2 samples, 0.22%)</title><rect x="79.1850%" y="405" width="0.2203%" height="15" fill="rgb(215,215,53)" fg:x="719" fg:w="2"/><text x="79.4350%" y="415.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::close (2 samples, 0.22%)</title><rect x="79.1850%" y="389" width="0.2203%" height="15" fill="rgb(223,4,10)" fg:x="719" fg:w="2"/><text x="79.4350%" y="399.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.22%)</title><rect x="79.1850%" y="373" width="0.2203%" height="15" fill="rgb(234,103,6)" fg:x="719" fg:w="2"/><text x="79.4350%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::from_iter_in_place (2 samples, 0.22%)</title><rect x="79.1850%" y="357" width="0.2203%" height="15" fill="rgb(227,97,0)" fg:x="719" fg:w="2"/><text x="79.4350%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.22%)</title><rect x="79.1850%" y="341" width="0.2203%" height="15" fill="rgb(234,150,53)" fg:x="719" fg:w="2"/><text x="79.4350%" y="351.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::close (2 samples, 0.22%)</title><rect x="79.1850%" y="325" width="0.2203%" height="15" fill="rgb(228,201,54)" fg:x="719" fg:w="2"/><text x="79.4350%" y="335.50"></text></g><g><title>parquet::column::writer::ColumnWriter::close (2 samples, 0.22%)</title><rect x="79.1850%" y="309" width="0.2203%" height="15" fill="rgb(222,22,37)" fg:x="719" fg:w="2"/><text x="79.4350%" y="319.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (1 samples, 0.11%)</title><rect x="79.2952%" y="293" width="0.1101%" height="15" fill="rgb(237,53,32)" fg:x="720" fg:w="1"/><text x="79.5452%" y="303.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.11%)</title><rect x="79.2952%" y="277" width="0.1101%" height="15" fill="rgb(233,25,53)" fg:x="720" fg:w="1"/><text x="79.5452%" y="287.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.11%)</title><rect x="79.2952%" y="261" width="0.1101%" height="15" fill="rgb(210,40,34)" fg:x="720" fg:w="1"/><text x="79.5452%" y="271.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (13 samples, 1.43%)</title><rect x="79.5154%" y="325" width="1.4317%" height="15" fill="rgb(241,220,44)" fg:x="722" fg:w="13"/><text x="79.7654%" y="335.50"></text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (9 samples, 0.99%)</title><rect x="79.9559%" y="309" width="0.9912%" height="15" fill="rgb(235,28,35)" fg:x="726" fg:w="9"/><text x="80.2059%" y="319.50"></text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (4 samples, 0.44%)</title><rect x="80.5066%" y="293" width="0.4405%" height="15" fill="rgb(210,56,17)" fg:x="731" fg:w="4"/><text x="80.7566%" y="303.50"></text></g><g><title>parquet::arrow::arrow_writer::write_primitive (16 samples, 1.76%)</title><rect x="79.4053%" y="357" width="1.7621%" height="15" fill="rgb(224,130,29)" fg:x="721" fg:w="16"/><text x="79.6553%" y="367.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (16 samples, 1.76%)</title><rect x="79.4053%" y="341" width="1.7621%" height="15" fill="rgb(235,212,8)" fg:x="721" fg:w="16"/><text x="79.6553%" y="351.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (2 samples, 0.22%)</title><rect x="80.9471%" y="325" width="0.2203%" height="15" fill="rgb(223,33,50)" fg:x="735" fg:w="2"/><text x="81.1971%" y="335.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (2 samples, 0.22%)</title><rect x="80.9471%" y="309" width="0.2203%" height="15" fill="rgb(219,149,13)" fg:x="735" fg:w="2"/><text x="81.1971%" y="319.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (2 samples, 0.22%)</title><rect x="80.9471%" y="293" width="0.2203%" height="15" fill="rgb(250,156,29)" fg:x="735" fg:w="2"/><text x="81.1971%" y="303.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (25 samples, 2.75%)</title><rect x="81.9383%" y="341" width="2.7533%" height="15" fill="rgb(216,193,19)" fg:x="744" fg:w="25"/><text x="82.1883%" y="351.50">&lt;p..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (15 samples, 1.65%)</title><rect x="83.0396%" y="325" width="1.6520%" height="15" fill="rgb(216,135,14)" fg:x="754" fg:w="15"/><text x="83.2896%" y="335.50"></text></g><g><title>ahash::random_state::RandomState::hash_one (1 samples, 0.11%)</title><rect x="84.5815%" y="309" width="0.1101%" height="15" fill="rgb(241,47,5)" fg:x="768" fg:w="1"/><text x="84.8315%" y="319.50"></text></g><g><title>parquet::column::writer::compare_greater (6 samples, 0.66%)</title><rect x="85.7930%" y="309" width="0.6608%" height="15" fill="rgb(233,42,35)" fg:x="779" fg:w="6"/><text x="86.0430%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.11%)</title><rect x="88.3260%" y="293" width="0.1101%" height="15" fill="rgb(231,13,6)" fg:x="802" fg:w="1"/><text x="88.5760%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="88.3260%" y="277" width="0.1101%" height="15" fill="rgb(207,181,40)" fg:x="802" fg:w="1"/><text x="88.5760%" y="287.50"></text></g><g><title>__libc_realloc (1 samples, 0.11%)</title><rect x="88.3260%" y="261" width="0.1101%" height="15" fill="rgb(254,173,49)" fg:x="802" fg:w="1"/><text x="88.5760%" y="271.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::write_gather (36 samples, 3.96%)</title><rect x="84.6916%" y="341" width="3.9648%" height="15" fill="rgb(221,1,38)" fg:x="769" fg:w="36"/><text x="84.9416%" y="351.50">&lt;par..</text></g><g><title>parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt;::write_slice (31 samples, 3.41%)</title><rect x="85.2423%" y="325" width="3.4141%" height="15" fill="rgb(206,124,46)" fg:x="774" fg:w="31"/><text x="85.4923%" y="335.50">par..</text></g><g><title>parquet::util::interner::Interner&lt;S&gt;::intern (20 samples, 2.20%)</title><rect x="86.4537%" y="309" width="2.2026%" height="15" fill="rgb(249,21,11)" fg:x="785" fg:w="20"/><text x="86.7037%" y="319.50">p..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.22%)</title><rect x="88.4361%" y="293" width="0.2203%" height="15" fill="rgb(222,201,40)" fg:x="803" fg:w="2"/><text x="88.6861%" y="303.50"></text></g><g><title>&lt;parquet::arrow::arrow_writer::byte_array::ByteArrayEncoder as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (5 samples, 0.55%)</title><rect x="88.7665%" y="325" width="0.5507%" height="15" fill="rgb(235,61,29)" fg:x="806" fg:w="5"/><text x="89.0165%" y="335.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (2 samples, 0.22%)</title><rect x="89.0969%" y="309" width="0.2203%" height="15" fill="rgb(219,207,3)" fg:x="809" fg:w="2"/><text x="89.3469%" y="319.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (2 samples, 0.22%)</title><rect x="89.0969%" y="293" width="0.2203%" height="15" fill="rgb(222,56,46)" fg:x="809" fg:w="2"/><text x="89.3469%" y="303.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_buffered_values (8 samples, 0.88%)</title><rect x="89.5374%" y="293" width="0.8811%" height="15" fill="rgb(239,76,54)" fg:x="813" fg:w="8"/><text x="89.7874%" y="303.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::flush_bit_packed_run (7 samples, 0.77%)</title><rect x="89.6476%" y="277" width="0.7709%" height="15" fill="rgb(231,124,27)" fg:x="814" fg:w="7"/><text x="89.8976%" y="287.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_data_page (11 samples, 1.21%)</title><rect x="89.3172%" y="325" width="1.2115%" height="15" fill="rgb(249,195,6)" fg:x="811" fg:w="11"/><text x="89.5672%" y="335.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_indices (11 samples, 1.21%)</title><rect x="89.3172%" y="309" width="1.2115%" height="15" fill="rgb(237,174,47)" fg:x="811" fg:w="11"/><text x="89.5672%" y="319.50"></text></g><g><title>parquet::encodings::rle::RleEncoder::put (1 samples, 0.11%)</title><rect x="90.4185%" y="293" width="0.1101%" height="15" fill="rgb(206,201,31)" fg:x="821" fg:w="1"/><text x="90.6685%" y="303.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (13 samples, 1.43%)</title><rect x="90.5286%" y="325" width="1.4317%" height="15" fill="rgb(231,57,52)" fg:x="822" fg:w="13"/><text x="90.7786%" y="335.50"></text></g><g><title>snap::compress::Encoder::compress (13 samples, 1.43%)</title><rect x="90.5286%" y="309" width="1.4317%" height="15" fill="rgb(248,177,22)" fg:x="822" fg:w="13"/><text x="90.7786%" y="319.50"></text></g><g><title>parquet::encodings::levels::LevelEncoder::put (1 samples, 0.11%)</title><rect x="91.9604%" y="325" width="0.1101%" height="15" fill="rgb(215,211,37)" fg:x="835" fg:w="1"/><text x="92.2104%" y="335.50"></text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::add_data_page (32 samples, 3.52%)</title><rect x="88.6564%" y="341" width="3.5242%" height="15" fill="rgb(241,128,51)" fg:x="805" fg:w="32"/><text x="88.9064%" y="351.50">par..</text></g><g><title>parquet::encodings::rle::RleEncoder::flush_rle_run (1 samples, 0.11%)</title><rect x="92.0705%" y="325" width="0.1101%" height="15" fill="rgb(227,165,31)" fg:x="836" fg:w="1"/><text x="92.3205%" y="335.50"></text></g><g><title>&lt;parquet::column::writer::encoder::ColumnValueEncoderImpl&lt;T&gt; as parquet::column::writer::encoder::ColumnValueEncoder&gt;::flush_dict_page (1 samples, 0.11%)</title><rect x="92.1806%" y="325" width="0.1101%" height="15" fill="rgb(228,167,24)" fg:x="837" fg:w="1"/><text x="92.4306%" y="335.50"></text></g><g><title>parquet::encodings::encoding::dict_encoder::DictEncoder&lt;T&gt;::write_dict (1 samples, 0.11%)</title><rect x="92.1806%" y="309" width="0.1101%" height="15" fill="rgb(228,143,12)" fg:x="837" fg:w="1"/><text x="92.4306%" y="319.50"></text></g><g><title>parquet::arrow::arrow_writer::ArrowColumnWriter::write (118 samples, 13.00%)</title><rect x="79.4053%" y="373" width="12.9956%" height="15" fill="rgb(249,149,8)" fg:x="721" fg:w="118"/><text x="79.6553%" y="383.50">parquet::arrow::arro..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_batch_internal (102 samples, 11.23%)</title><rect x="81.1674%" y="357" width="11.2335%" height="15" fill="rgb(243,35,44)" fg:x="737" fg:w="102"/><text x="81.4174%" y="367.50">parquet::column::..</text></g><g><title>parquet::column::writer::GenericColumnWriter&lt;E&gt;::write_dictionary_page (2 samples, 0.22%)</title><rect x="92.1806%" y="341" width="0.2203%" height="15" fill="rgb(246,89,9)" fg:x="837" fg:w="2"/><text x="92.4306%" y="351.50"></text></g><g><title>&lt;parquet::compression::snappy_codec::SnappyCodec as parquet::compression::Codec&gt;::compress (1 samples, 0.11%)</title><rect x="92.2907%" y="325" width="0.1101%" height="15" fill="rgb(233,213,13)" fg:x="838" fg:w="1"/><text x="92.5407%" y="335.50"></text></g><g><title>snap::compress::Encoder::compress (1 samples, 0.11%)</title><rect x="92.2907%" y="309" width="0.1101%" height="15" fill="rgb(233,141,41)" fg:x="838" fg:w="1"/><text x="92.5407%" y="319.50"></text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::write_parquet_to_memory (129 samples, 14.21%)</title><rect x="79.1850%" y="421" width="14.2070%" height="15" fill="rgb(239,167,4)" fg:x="719" fg:w="129"/><text x="79.4350%" y="431.50">nemscraper::process::g..</text></g><g><title>parquet::arrow::arrow_writer::ArrowWriter&lt;W&gt;::write (127 samples, 13.99%)</title><rect x="79.4053%" y="405" width="13.9868%" height="15" fill="rgb(209,217,16)" fg:x="721" fg:w="127"/><text x="79.6553%" y="415.50">parquet::arrow::arrow..</text></g><g><title>parquet::arrow::arrow_writer::ArrowRowGroupWriter::write (127 samples, 13.99%)</title><rect x="79.4053%" y="389" width="13.9868%" height="15" fill="rgb(219,88,35)" fg:x="721" fg:w="127"/><text x="79.6553%" y="399.50">parquet::arrow::arrow..</text></g><g><title>parquet::arrow::arrow_writer::levels::calculate_array_levels (9 samples, 0.99%)</title><rect x="92.4009%" y="373" width="0.9912%" height="15" fill="rgb(220,193,23)" fg:x="839" fg:w="9"/><text x="92.6509%" y="383.50"></text></g><g><title>parquet::arrow::arrow_writer::levels::LevelInfoBuilder::write (9 samples, 0.99%)</title><rect x="92.4009%" y="357" width="0.9912%" height="15" fill="rgb(230,90,52)" fg:x="839" fg:w="9"/><text x="92.6509%" y="367.50"></text></g><g><title>&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll (849 samples, 93.50%)</title><rect x="0.0000%" y="485" width="93.5022%" height="15" fill="rgb(252,106,19)" fg:x="0" fg:w="849"/><text x="0.2500%" y="495.50">&lt;tracing::instrument::Instrumented&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>nemscraper::process::split::stream_zip_to_parquet_gcs::{{closure}}::{{closure}} (848 samples, 93.39%)</title><rect x="0.1101%" y="469" width="93.3921%" height="15" fill="rgb(206,74,20)" fg:x="1" fg:w="848"/><text x="0.3601%" y="479.50">nemscraper::process::split::stream_zip_to_parquet_gcs::{{closure}}::{{closure}}</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::process_line::{{closure}} (647 samples, 71.26%)</title><rect x="22.2467%" y="453" width="71.2555%" height="15" fill="rgb(230,138,44)" fg:x="202" fg:w="647"/><text x="22.4967%" y="463.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::process_line::{{closure}}</text></g><g><title>nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}} (614 samples, 67.62%)</title><rect x="25.8811%" y="437" width="67.6211%" height="15" fill="rgb(235,182,43)" fg:x="235" fg:w="614"/><text x="26.1311%" y="447.50">nemscraper::process::gcs_processor::GcsUnifiedCsvProcessor::flush_current_chunk::{{closure}}</text></g><g><title>reqwest_middleware::client::ClientWithMiddleware::execute_with_extensions::{{closure}} (1 samples, 0.11%)</title><rect x="93.3921%" y="421" width="0.1101%" height="15" fill="rgb(242,16,51)" fg:x="848" fg:w="1"/><text x="93.6421%" y="431.50"></text></g><g><title>reqwest_middleware::middleware::Next::run::{{closure}} (1 samples, 0.11%)</title><rect x="93.3921%" y="405" width="0.1101%" height="15" fill="rgb(248,9,4)" fg:x="848" fg:w="1"/><text x="93.6421%" y="415.50"></text></g><g><title>&lt;reqwest::async_impl::client::Pending as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="389" width="0.1101%" height="15" fill="rgb(210,31,22)" fg:x="848" fg:w="1"/><text x="93.6421%" y="399.50"></text></g><g><title>&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="373" width="0.1101%" height="15" fill="rgb(239,54,39)" fg:x="848" fg:w="1"/><text x="93.6421%" y="383.50"></text></g><g><title>&lt;tower_http::follow_redirect::ResponseFuture&lt;S,ReqBody,P&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="357" width="0.1101%" height="15" fill="rgb(230,99,41)" fg:x="848" fg:w="1"/><text x="93.6421%" y="367.50"></text></g><g><title>&lt;reqwest::async_impl::client::HyperService as tower_service::Service&lt;http::request::Request&lt;reqwest::async_impl::body::Body&gt;&gt;&gt;::call::{{closure}} (1 samples, 0.11%)</title><rect x="93.3921%" y="341" width="0.1101%" height="15" fill="rgb(253,106,12)" fg:x="848" fg:w="1"/><text x="93.6421%" y="351.50"></text></g><g><title>&lt;hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="325" width="0.1101%" height="15" fill="rgb(213,46,41)" fg:x="848" fg:w="1"/><text x="93.6421%" y="335.50"></text></g><g><title>hyper_util::client::legacy::client::Client&lt;C,B&gt;::send_request::{{closure}} (1 samples, 0.11%)</title><rect x="93.3921%" y="309" width="0.1101%" height="15" fill="rgb(215,133,35)" fg:x="848" fg:w="1"/><text x="93.6421%" y="319.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="293" width="0.1101%" height="15" fill="rgb(213,28,5)" fg:x="848" fg:w="1"/><text x="93.6421%" y="303.50"></text></g><g><title>&lt;hyper_util::common::lazy::Lazy&lt;F,R&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="277" width="0.1101%" height="15" fill="rgb(215,77,49)" fg:x="848" fg:w="1"/><text x="93.6421%" y="287.50"></text></g><g><title>&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="261" width="0.1101%" height="15" fill="rgb(248,100,22)" fg:x="848" fg:w="1"/><text x="93.6421%" y="271.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="245" width="0.1101%" height="15" fill="rgb(208,67,9)" fg:x="848" fg:w="1"/><text x="93.6421%" y="255.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="229" width="0.1101%" height="15" fill="rgb(219,133,21)" fg:x="848" fg:w="1"/><text x="93.6421%" y="239.50"></text></g><g><title>&lt;hyper_util::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="213" width="0.1101%" height="15" fill="rgb(246,46,29)" fg:x="848" fg:w="1"/><text x="93.6421%" y="223.50"></text></g><g><title>reqwest::connect::with_timeout::{{closure}} (1 samples, 0.11%)</title><rect x="93.3921%" y="197" width="0.1101%" height="15" fill="rgb(246,185,52)" fg:x="848" fg:w="1"/><text x="93.6421%" y="207.50"></text></g><g><title>reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}} (1 samples, 0.11%)</title><rect x="93.3921%" y="181" width="0.1101%" height="15" fill="rgb(252,136,11)" fg:x="848" fg:w="1"/><text x="93.6421%" y="191.50"></text></g><g><title>&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::{{closure}} (1 samples, 0.11%)</title><rect x="93.3921%" y="165" width="0.1101%" height="15" fill="rgb(219,138,53)" fg:x="848" fg:w="1"/><text x="93.6421%" y="175.50"></text></g><g><title>&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (1 samples, 0.11%)</title><rect x="93.3921%" y="149" width="0.1101%" height="15" fill="rgb(211,51,23)" fg:x="848" fg:w="1"/><text x="93.6421%" y="159.50"></text></g><g><title>native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (1 samples, 0.11%)</title><rect x="93.3921%" y="133" width="0.1101%" height="15" fill="rgb(247,221,28)" fg:x="848" fg:w="1"/><text x="93.6421%" y="143.50"></text></g><g><title>X509_verify_cert (1 samples, 0.11%)</title><rect x="93.3921%" y="117" width="0.1101%" height="15" fill="rgb(251,222,45)" fg:x="848" fg:w="1"/><text x="93.6421%" y="127.50"></text></g><g><title>X509_verify (1 samples, 0.11%)</title><rect x="93.3921%" y="101" width="0.1101%" height="15" fill="rgb(217,162,53)" fg:x="848" fg:w="1"/><text x="93.6421%" y="111.50"></text></g><g><title>ASN1_item_verify_ex (1 samples, 0.11%)</title><rect x="93.3921%" y="85" width="0.1101%" height="15" fill="rgb(229,93,14)" fg:x="848" fg:w="1"/><text x="93.6421%" y="95.50"></text></g><g><title>ASN1_item_verify_ctx (1 samples, 0.11%)</title><rect x="93.3921%" y="69" width="0.1101%" height="15" fill="rgb(209,67,49)" fg:x="848" fg:w="1"/><text x="93.6421%" y="79.50"></text></g><g><title>EVP_DigestVerifyFinal (1 samples, 0.11%)</title><rect x="93.3921%" y="53" width="0.1101%" height="15" fill="rgb(213,87,29)" fg:x="848" fg:w="1"/><text x="93.6421%" y="63.50"></text></g><g><title>EC_POINT_mul (1 samples, 0.11%)</title><rect x="93.3921%" y="37" width="0.1101%" height="15" fill="rgb(205,151,52)" fg:x="848" fg:w="1"/><text x="93.6421%" y="47.50"></text></g><g><title>bench_zip_to_pa (852 samples, 93.83%)</title><rect x="0.0000%" y="661" width="93.8326%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="852"/><text x="0.2500%" y="671.50">bench_zip_to_pa</text></g><g><title>_start (852 samples, 93.83%)</title><rect x="0.0000%" y="645" width="93.8326%" height="15" fill="rgb(221,220,41)" fg:x="0" fg:w="852"/><text x="0.2500%" y="655.50">_start</text></g><g><title>__libc_start_main (852 samples, 93.83%)</title><rect x="0.0000%" y="629" width="93.8326%" height="15" fill="rgb(218,133,21)" fg:x="0" fg:w="852"/><text x="0.2500%" y="639.50">__libc_start_main</text></g><g><title>main (852 samples, 93.83%)</title><rect x="0.0000%" y="613" width="93.8326%" height="15" fill="rgb(221,193,43)" fg:x="0" fg:w="852"/><text x="0.2500%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (852 samples, 93.83%)</title><rect x="0.0000%" y="597" width="93.8326%" height="15" fill="rgb(240,128,52)" fg:x="0" fg:w="852"/><text x="0.2500%" y="607.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::{{closure}} (852 samples, 93.83%)</title><rect x="0.0000%" y="581" width="93.8326%" height="15" fill="rgb(253,114,12)" fg:x="0" fg:w="852"/><text x="0.2500%" y="591.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (852 samples, 93.83%)</title><rect x="0.0000%" y="565" width="93.8326%" height="15" fill="rgb(215,223,47)" fg:x="0" fg:w="852"/><text x="0.2500%" y="575.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>bench_zip_to_parquet::main (852 samples, 93.83%)</title><rect x="0.0000%" y="549" width="93.8326%" height="15" fill="rgb(248,225,23)" fg:x="0" fg:w="852"/><text x="0.2500%" y="559.50">bench_zip_to_parquet::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (852 samples, 93.83%)</title><rect x="0.0000%" y="533" width="93.8326%" height="15" fill="rgb(250,108,0)" fg:x="0" fg:w="852"/><text x="0.2500%" y="543.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (852 samples, 93.83%)</title><rect x="0.0000%" y="517" width="93.8326%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="852"/><text x="0.2500%" y="527.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (852 samples, 93.83%)</title><rect x="0.0000%" y="501" width="93.8326%" height="15" fill="rgb(244,45,10)" fg:x="0" fg:w="852"/><text x="0.2500%" y="511.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::park::Inner::park (3 samples, 0.33%)</title><rect x="93.5022%" y="485" width="0.3304%" height="15" fill="rgb(207,125,25)" fg:x="849" fg:w="3"/><text x="93.7522%" y="495.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.33%)</title><rect x="93.5022%" y="469" width="0.3304%" height="15" fill="rgb(210,195,18)" fg:x="849" fg:w="3"/><text x="93.7522%" y="479.50"></text></g><g><title>syscall (2 samples, 0.22%)</title><rect x="93.6123%" y="453" width="0.2203%" height="15" fill="rgb(249,80,12)" fg:x="850" fg:w="2"/><text x="93.8623%" y="463.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (7 samples, 0.77%)</title><rect x="94.0529%" y="437" width="0.7709%" height="15" fill="rgb(221,65,9)" fg:x="854" fg:w="7"/><text x="94.3029%" y="447.50"></text></g><g><title>syscall (7 samples, 0.77%)</title><rect x="94.0529%" y="421" width="0.7709%" height="15" fill="rgb(235,49,36)" fg:x="854" fg:w="7"/><text x="94.3029%" y="431.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (14 samples, 1.54%)</title><rect x="93.9427%" y="469" width="1.5419%" height="15" fill="rgb(225,32,20)" fg:x="853" fg:w="14"/><text x="94.1927%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (13 samples, 1.43%)</title><rect x="94.0529%" y="453" width="1.4317%" height="15" fill="rgb(215,141,46)" fg:x="854" fg:w="13"/><text x="94.3029%" y="463.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 0.66%)</title><rect x="94.8238%" y="437" width="0.6608%" height="15" fill="rgb(250,160,47)" fg:x="861" fg:w="6"/><text x="95.0738%" y="447.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (5 samples, 0.55%)</title><rect x="94.9339%" y="421" width="0.5507%" height="15" fill="rgb(216,222,40)" fg:x="862" fg:w="5"/><text x="95.1839%" y="431.50"></text></g><g><title>mio::poll::Poll::poll (5 samples, 0.55%)</title><rect x="94.9339%" y="405" width="0.5507%" height="15" fill="rgb(234,217,39)" fg:x="862" fg:w="5"/><text x="95.1839%" y="415.50"></text></g><g><title>epoll_wait (5 samples, 0.55%)</title><rect x="94.9339%" y="389" width="0.5507%" height="15" fill="rgb(207,178,40)" fg:x="862" fg:w="5"/><text x="95.1839%" y="399.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.33%)</title><rect x="95.5947%" y="453" width="0.3304%" height="15" fill="rgb(221,136,13)" fg:x="868" fg:w="3"/><text x="95.8447%" y="463.50"></text></g><g><title>syscall (3 samples, 0.33%)</title><rect x="95.5947%" y="437" width="0.3304%" height="15" fill="rgb(249,199,10)" fg:x="868" fg:w="3"/><text x="95.8447%" y="447.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (8 samples, 0.88%)</title><rect x="95.9251%" y="453" width="0.8811%" height="15" fill="rgb(249,222,13)" fg:x="871" fg:w="8"/><text x="96.1751%" y="463.50"></text></g><g><title>mio::sys::unix::waker::Waker::wake (7 samples, 0.77%)</title><rect x="96.0352%" y="437" width="0.7709%" height="15" fill="rgb(244,185,38)" fg:x="872" fg:w="7"/><text x="96.2852%" y="447.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (7 samples, 0.77%)</title><rect x="96.0352%" y="421" width="0.7709%" height="15" fill="rgb(236,202,9)" fg:x="872" fg:w="7"/><text x="96.2852%" y="431.50"></text></g><g><title>write (7 samples, 0.77%)</title><rect x="96.0352%" y="405" width="0.7709%" height="15" fill="rgb(250,229,37)" fg:x="872" fg:w="7"/><text x="96.2852%" y="415.50"></text></g><g><title>hyper::body::body::Sender::poll_ready (1 samples, 0.11%)</title><rect x="97.0264%" y="357" width="0.1101%" height="15" fill="rgb(206,174,23)" fg:x="881" fg:w="1"/><text x="97.2764%" y="367.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (1 samples, 0.11%)</title><rect x="97.0264%" y="341" width="0.1101%" height="15" fill="rgb(211,33,43)" fg:x="881" fg:w="1"/><text x="97.2764%" y="351.50"></text></g><g><title>hyper::body::body::Sender::try_send_data (8 samples, 0.88%)</title><rect x="97.1366%" y="357" width="0.8811%" height="15" fill="rgb(245,58,50)" fg:x="882" fg:w="8"/><text x="97.3866%" y="367.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (8 samples, 0.88%)</title><rect x="97.1366%" y="341" width="0.8811%" height="15" fill="rgb(244,68,36)" fg:x="882" fg:w="8"/><text x="97.3866%" y="351.50"></text></g><g><title>tokio::runtime::park::wake (8 samples, 0.88%)</title><rect x="97.1366%" y="325" width="0.8811%" height="15" fill="rgb(232,229,15)" fg:x="882" fg:w="8"/><text x="97.3866%" y="335.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (8 samples, 0.88%)</title><rect x="97.1366%" y="309" width="0.8811%" height="15" fill="rgb(254,30,23)" fg:x="882" fg:w="8"/><text x="97.3866%" y="319.50"></text></g><g><title>syscall (8 samples, 0.88%)</title><rect x="97.1366%" y="293" width="0.8811%" height="15" fill="rgb(235,160,14)" fg:x="882" fg:w="8"/><text x="97.3866%" y="303.50"></text></g><g><title>&lt;rustls::conn::Reader as std::io::Read&gt;::read (2 samples, 0.22%)</title><rect x="98.3480%" y="261" width="0.2203%" height="15" fill="rgb(212,155,44)" fg:x="893" fg:w="2"/><text x="98.5980%" y="271.50"></text></g><g><title>rustls::vecbuf::ChunkVecBuffer::consume (1 samples, 0.11%)</title><rect x="98.4581%" y="245" width="0.1101%" height="15" fill="rgb(226,2,50)" fg:x="894" fg:w="1"/><text x="98.7081%" y="255.50"></text></g><g><title>cfree (1 samples, 0.11%)</title><rect x="98.4581%" y="229" width="0.1101%" height="15" fill="rgb(234,177,6)" fg:x="894" fg:w="1"/><text x="98.7081%" y="239.50"></text></g><g><title>rustls::conn::ConnectionCore&lt;Data&gt;::process_new_packets (2 samples, 0.22%)</title><rect x="98.5683%" y="245" width="0.2203%" height="15" fill="rgb(217,24,9)" fg:x="895" fg:w="2"/><text x="98.8183%" y="255.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::pop (2 samples, 0.22%)</title><rect x="98.5683%" y="229" width="0.2203%" height="15" fill="rgb(220,13,46)" fg:x="895" fg:w="2"/><text x="98.8183%" y="239.50"></text></g><g><title>rustls::record_layer::RecordLayer::decrypt_incoming (2 samples, 0.22%)</title><rect x="98.5683%" y="213" width="0.2203%" height="15" fill="rgb(239,221,27)" fg:x="895" fg:w="2"/><text x="98.8183%" y="223.50"></text></g><g><title>&lt;rustls::tls12::cipher::GcmMessageDecrypter as rustls::cipher::MessageDecrypter&gt;::decrypt (2 samples, 0.22%)</title><rect x="98.5683%" y="197" width="0.2203%" height="15" fill="rgb(222,198,25)" fg:x="895" fg:w="2"/><text x="98.8183%" y="207.50"></text></g><g><title>ring::aead::algorithm::Algorithm::open_within (2 samples, 0.22%)</title><rect x="98.5683%" y="181" width="0.2203%" height="15" fill="rgb(211,99,13)" fg:x="895" fg:w="2"/><text x="98.8183%" y="191.50"></text></g><g><title>ring::aead::algorithm::aes_gcm_open (2 samples, 0.22%)</title><rect x="98.5683%" y="165" width="0.2203%" height="15" fill="rgb(232,111,31)" fg:x="895" fg:w="2"/><text x="98.8183%" y="175.50"></text></g><g><title>ring::aead::aes_gcm::open (2 samples, 0.22%)</title><rect x="98.5683%" y="149" width="0.2203%" height="15" fill="rgb(245,82,37)" fg:x="895" fg:w="2"/><text x="98.8183%" y="159.50"></text></g><g><title>ring::aead::aes_gcm::vaesclmulavx2::open_whole_vaes_clmul_avx2 (1 samples, 0.11%)</title><rect x="98.6784%" y="133" width="0.1101%" height="15" fill="rgb(227,149,46)" fg:x="896" fg:w="1"/><text x="98.9284%" y="143.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (12 samples, 1.32%)</title><rect x="98.0176%" y="357" width="1.3216%" height="15" fill="rgb(218,36,50)" fg:x="890" fg:w="12"/><text x="98.2676%" y="367.50"></text></g><g><title>hyper::proto::h1::decode::Decoder::decode (11 samples, 1.21%)</title><rect x="98.1278%" y="341" width="1.2115%" height="15" fill="rgb(226,80,48)" fg:x="891" fg:w="11"/><text x="98.3778%" y="351.50"></text></g><g><title>&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (11 samples, 1.21%)</title><rect x="98.1278%" y="325" width="1.2115%" height="15" fill="rgb(238,224,15)" fg:x="891" fg:w="11"/><text x="98.3778%" y="335.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (11 samples, 1.21%)</title><rect x="98.1278%" y="309" width="1.2115%" height="15" fill="rgb(241,136,10)" fg:x="891" fg:w="11"/><text x="98.3778%" y="319.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.21%)</title><rect x="98.1278%" y="293" width="1.2115%" height="15" fill="rgb(208,32,45)" fg:x="891" fg:w="11"/><text x="98.3778%" y="303.50"></text></g><g><title>&lt;tokio_rustls::common::Stream&lt;IO,C&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (11 samples, 1.21%)</title><rect x="98.1278%" y="277" width="1.2115%" height="15" fill="rgb(207,135,9)" fg:x="891" fg:w="11"/><text x="98.3778%" y="287.50"></text></g><g><title>tokio_rustls::common::Stream&lt;IO,C&gt;::read_io (7 samples, 0.77%)</title><rect x="98.5683%" y="261" width="0.7709%" height="15" fill="rgb(206,86,44)" fg:x="895" fg:w="7"/><text x="98.8183%" y="271.50"></text></g><g><title>rustls::msgs::deframer::MessageDeframer::read (5 samples, 0.55%)</title><rect x="98.7885%" y="245" width="0.5507%" height="15" fill="rgb(245,177,15)" fg:x="897" fg:w="5"/><text x="99.0385%" y="255.50"></text></g><g><title>&lt;tokio_rustls::common::SyncReadAdapter&lt;T&gt; as std::io::Read&gt;::read (5 samples, 0.55%)</title><rect x="98.7885%" y="229" width="0.5507%" height="15" fill="rgb(206,64,50)" fg:x="897" fg:w="5"/><text x="99.0385%" y="239.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (5 samples, 0.55%)</title><rect x="98.7885%" y="213" width="0.5507%" height="15" fill="rgb(234,36,40)" fg:x="897" fg:w="5"/><text x="99.0385%" y="223.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (5 samples, 0.55%)</title><rect x="98.7885%" y="197" width="0.5507%" height="15" fill="rgb(213,64,8)" fg:x="897" fg:w="5"/><text x="99.0385%" y="207.50"></text></g><g><title>&lt;&amp;std::os::unix::net::stream::UnixStream as std::io::Read&gt;::read (5 samples, 0.55%)</title><rect x="98.7885%" y="181" width="0.5507%" height="15" fill="rgb(210,75,36)" fg:x="897" fg:w="5"/><text x="99.0385%" y="191.50"></text></g><g><title>recv (5 samples, 0.55%)</title><rect x="98.7885%" y="165" width="0.5507%" height="15" fill="rgb(229,88,21)" fg:x="897" fg:w="5"/><text x="99.0385%" y="175.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (24 samples, 2.64%)</title><rect x="96.8062%" y="453" width="2.6432%" height="15" fill="rgb(252,204,47)" fg:x="879" fg:w="24"/><text x="97.0562%" y="463.50">to..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (23 samples, 2.53%)</title><rect x="96.9163%" y="437" width="2.5330%" height="15" fill="rgb(208,77,27)" fg:x="880" fg:w="23"/><text x="97.1663%" y="447.50">to..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (22 samples, 2.42%)</title><rect x="97.0264%" y="421" width="2.4229%" height="15" fill="rgb(221,76,26)" fg:x="881" fg:w="22"/><text x="97.2764%" y="431.50">&lt;f..</text></g><g><title>&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (22 samples, 2.42%)</title><rect x="97.0264%" y="405" width="2.4229%" height="15" fill="rgb(225,139,18)" fg:x="881" fg:w="22"/><text x="97.2764%" y="415.50">&lt;h..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (22 samples, 2.42%)</title><rect x="97.0264%" y="389" width="2.4229%" height="15" fill="rgb(230,137,11)" fg:x="881" fg:w="22"/><text x="97.2764%" y="399.50">hy..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (22 samples, 2.42%)</title><rect x="97.0264%" y="373" width="2.4229%" height="15" fill="rgb(212,28,1)" fg:x="881" fg:w="22"/><text x="97.2764%" y="383.50">hy..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (1 samples, 0.11%)</title><rect x="99.3392%" y="357" width="0.1101%" height="15" fill="rgb(248,164,17)" fg:x="902" fg:w="1"/><text x="99.5892%" y="367.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (1 samples, 0.11%)</title><rect x="99.3392%" y="341" width="0.1101%" height="15" fill="rgb(222,171,42)" fg:x="902" fg:w="1"/><text x="99.5892%" y="351.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (1 samples, 0.11%)</title><rect x="99.3392%" y="325" width="0.1101%" height="15" fill="rgb(243,84,45)" fg:x="902" fg:w="1"/><text x="99.5892%" y="335.50"></text></g><g><title>&lt;reqwest::connect::rustls_tls_conn::RustlsTlsConn&lt;T&gt; as tokio::io::async_write::AsyncWrite&gt;::poll_flush (1 samples, 0.11%)</title><rect x="99.3392%" y="309" width="0.1101%" height="15" fill="rgb(252,49,23)" fg:x="902" fg:w="1"/><text x="99.5892%" y="319.50"></text></g><g><title>BIO_write (2 samples, 0.22%)</title><rect x="99.5595%" y="277" width="0.2203%" height="15" fill="rgb(215,19,7)" fg:x="904" fg:w="2"/><text x="99.8095%" y="287.50"></text></g><g><title>openssl::ssl::bio::bwrite (2 samples, 0.22%)</title><rect x="99.5595%" y="261" width="0.2203%" height="15" fill="rgb(238,81,41)" fg:x="904" fg:w="2"/><text x="99.8095%" y="271.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write (2 samples, 0.22%)</title><rect x="99.5595%" y="245" width="0.2203%" height="15" fill="rgb(210,199,37)" fg:x="904" fg:w="2"/><text x="99.8095%" y="255.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (2 samples, 0.22%)</title><rect x="99.5595%" y="229" width="0.2203%" height="15" fill="rgb(244,192,49)" fg:x="904" fg:w="2"/><text x="99.8095%" y="239.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (2 samples, 0.22%)</title><rect x="99.5595%" y="213" width="0.2203%" height="15" fill="rgb(226,211,11)" fg:x="904" fg:w="2"/><text x="99.8095%" y="223.50"></text></g><g><title>__send (2 samples, 0.22%)</title><rect x="99.5595%" y="197" width="0.2203%" height="15" fill="rgb(236,162,54)" fg:x="904" fg:w="2"/><text x="99.8095%" y="207.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (4 samples, 0.44%)</title><rect x="99.4493%" y="373" width="0.4405%" height="15" fill="rgb(220,229,9)" fg:x="903" fg:w="4"/><text x="99.6993%" y="383.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (4 samples, 0.44%)</title><rect x="99.4493%" y="357" width="0.4405%" height="15" fill="rgb(250,87,22)" fg:x="903" fg:w="4"/><text x="99.6993%" y="367.50"></text></g><g><title>&lt;reqwest::connect::native_tls_conn::NativeTlsConn&lt;T&gt; as hyper::rt::io::Write&gt;::poll_write (4 samples, 0.44%)</title><rect x="99.4493%" y="341" width="0.4405%" height="15" fill="rgb(239,43,17)" fg:x="903" fg:w="4"/><text x="99.6993%" y="351.50"></text></g><g><title>tokio_native_tls::TlsStream&lt;S&gt;::with_context (4 samples, 0.44%)</title><rect x="99.4493%" y="325" width="0.4405%" height="15" fill="rgb(231,177,25)" fg:x="903" fg:w="4"/><text x="99.6993%" y="335.50"></text></g><g><title>&lt;openssl::ssl::SslStream&lt;S&gt; as std::io::Write&gt;::write (4 samples, 0.44%)</title><rect x="99.4493%" y="309" width="0.4405%" height="15" fill="rgb(219,179,1)" fg:x="903" fg:w="4"/><text x="99.6993%" y="319.50"></text></g><g><title>SSL_write_ex (4 samples, 0.44%)</title><rect x="99.4493%" y="293" width="0.4405%" height="15" fill="rgb(238,219,53)" fg:x="903" fg:w="4"/><text x="99.6993%" y="303.50"></text></g><g><title>EVP_EncryptFinal_ex (1 samples, 0.11%)</title><rect x="99.7797%" y="277" width="0.1101%" height="15" fill="rgb(232,167,36)" fg:x="906" fg:w="1"/><text x="100.0297%" y="287.50"></text></g><g><title>CRYPTO_gcm128_tag (1 samples, 0.11%)</title><rect x="99.7797%" y="261" width="0.1101%" height="15" fill="rgb(244,19,51)" fg:x="906" fg:w="1"/><text x="100.0297%" y="271.50"></text></g><g><title>all (908 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="908"/><text x="0.2500%" y="687.50"></text></g><g><title>tokio-runtime-w (56 samples, 6.17%)</title><rect x="93.8326%" y="661" width="6.1674%" height="15" fill="rgb(224,145,5)" fg:x="852" fg:w="56"/><text x="94.0826%" y="671.50">tokio-ru..</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (56 samples, 6.17%)</title><rect x="93.8326%" y="645" width="6.1674%" height="15" fill="rgb(234,130,49)" fg:x="852" fg:w="56"/><text x="94.0826%" y="655.50">std::sys..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (56 samples, 6.17%)</title><rect x="93.8326%" y="629" width="6.1674%" height="15" fill="rgb(254,6,2)" fg:x="852" fg:w="56"/><text x="94.0826%" y="639.50">core::op..</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (56 samples, 6.17%)</title><rect x="93.8326%" y="613" width="6.1674%" height="15" fill="rgb(208,96,46)" fg:x="852" fg:w="56"/><text x="94.0826%" y="623.50">std::sys..</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (56 samples, 6.17%)</title><rect x="93.8326%" y="597" width="6.1674%" height="15" fill="rgb(239,3,39)" fg:x="852" fg:w="56"/><text x="94.0826%" y="607.50">tokio::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (56 samples, 6.17%)</title><rect x="93.8326%" y="581" width="6.1674%" height="15" fill="rgb(233,210,1)" fg:x="852" fg:w="56"/><text x="94.0826%" y="591.50">tokio::r..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (56 samples, 6.17%)</title><rect x="93.8326%" y="565" width="6.1674%" height="15" fill="rgb(244,137,37)" fg:x="852" fg:w="56"/><text x="94.0826%" y="575.50">tokio::r..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 6.17%)</title><rect x="93.8326%" y="549" width="6.1674%" height="15" fill="rgb(240,136,2)" fg:x="852" fg:w="56"/><text x="94.0826%" y="559.50">&lt;tokio::..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (56 samples, 6.17%)</title><rect x="93.8326%" y="533" width="6.1674%" height="15" fill="rgb(239,18,37)" fg:x="852" fg:w="56"/><text x="94.0826%" y="543.50">tokio::r..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (56 samples, 6.17%)</title><rect x="93.8326%" y="517" width="6.1674%" height="15" fill="rgb(218,185,22)" fg:x="852" fg:w="56"/><text x="94.0826%" y="527.50">tokio::r..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (56 samples, 6.17%)</title><rect x="93.8326%" y="501" width="6.1674%" height="15" fill="rgb(225,218,4)" fg:x="852" fg:w="56"/><text x="94.0826%" y="511.50">tokio::r..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (56 samples, 6.17%)</title><rect x="93.8326%" y="485" width="6.1674%" height="15" fill="rgb(230,182,32)" fg:x="852" fg:w="56"/><text x="94.0826%" y="495.50">tokio::r..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (41 samples, 4.52%)</title><rect x="95.4846%" y="469" width="4.5154%" height="15" fill="rgb(242,56,43)" fg:x="867" fg:w="41"/><text x="95.7346%" y="479.50">tokio..</text></g><g><title>tokio::runtime::task::raw::poll (5 samples, 0.55%)</title><rect x="99.4493%" y="453" width="0.5507%" height="15" fill="rgb(233,99,24)" fg:x="903" fg:w="5"/><text x="99.6993%" y="463.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.55%)</title><rect x="99.4493%" y="437" width="0.5507%" height="15" fill="rgb(234,209,42)" fg:x="903" fg:w="5"/><text x="99.6993%" y="447.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5 samples, 0.55%)</title><rect x="99.4493%" y="421" width="0.5507%" height="15" fill="rgb(227,7,12)" fg:x="903" fg:w="5"/><text x="99.6993%" y="431.50"></text></g><g><title>&lt;hyper::client::conn::http1::upgrades::UpgradeableConnection&lt;I,B&gt; as core::future::future::Future&gt;::poll (5 samples, 0.55%)</title><rect x="99.4493%" y="405" width="0.5507%" height="15" fill="rgb(245,203,43)" fg:x="903" fg:w="5"/><text x="99.6993%" y="415.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (5 samples, 0.55%)</title><rect x="99.4493%" y="389" width="0.5507%" height="15" fill="rgb(238,205,33)" fg:x="903" fg:w="5"/><text x="99.6993%" y="399.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body_and_end (1 samples, 0.11%)</title><rect x="99.8899%" y="373" width="0.1101%" height="15" fill="rgb(231,56,7)" fg:x="907" fg:w="1"/><text x="100.1399%" y="383.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (1 samples, 0.11%)</title><rect x="99.8899%" y="357" width="0.1101%" height="15" fill="rgb(244,186,29)" fg:x="907" fg:w="1"/><text x="100.1399%" y="367.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (1 samples, 0.11%)</title><rect x="99.8899%" y="341" width="0.1101%" height="15" fill="rgb(234,111,31)" fg:x="907" fg:w="1"/><text x="100.1399%" y="351.50"></text></g></svg></svg>